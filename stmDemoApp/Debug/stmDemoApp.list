
stmDemoApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000281c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08002928  08002928  00003928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029cc  080029cc  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080029cc  080029cc  00004068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080029cc  080029cc  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029cc  080029cc  000039cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080029d0  080029d0  000039d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080029d4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000068  08002a3c  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08002a3c  00004224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000070d0  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000177d  00000000  00000000  0000b161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  0000c8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000055f  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fa3  00000000  00000000  0000d56f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000094b1  00000000  00000000  00025512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d96  00000000  00000000  0002e9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2759  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000228c  00000000  00000000  000b279c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000b4a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002910 	.word	0x08002910

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002910 	.word	0x08002910

0800014c <AppMain>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void AppMain()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	bool blFlag = FALSE;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]

	printf("Hello from STM32 via UART!\r\n");
 8000156:	4808      	ldr	r0, [pc, #32]	@ (8000178 <AppMain+0x2c>)
 8000158:	f001 fd6e 	bl	8001c38 <puts>
	while (TRUE)
	{
		blFlag = LEDBlink();
 800015c:	f000 f828 	bl	80001b0 <LEDBlink>
 8000160:	4603      	mov	r3, r0
 8000162:	71fb      	strb	r3, [r7, #7]
		if(blFlag == FALSE)
 8000164:	79fb      	ldrb	r3, [r7, #7]
 8000166:	f083 0301 	eor.w	r3, r3, #1
 800016a:	b2db      	uxtb	r3, r3
 800016c:	2b00      	cmp	r3, #0
 800016e:	d0f5      	beq.n	800015c <AppMain+0x10>
		{
			printf("LED Blinking Failed");
 8000170:	4802      	ldr	r0, [pc, #8]	@ (800017c <AppMain+0x30>)
 8000172:	f001 fcf9 	bl	8001b68 <iprintf>
		blFlag = LEDBlink();
 8000176:	e7f1      	b.n	800015c <AppMain+0x10>
 8000178:	08002928 	.word	0x08002928
 800017c:	08002944 	.word	0x08002944

08000180 <GPIOSet>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void GPIOSet()
{
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000184:	2201      	movs	r2, #1
 8000186:	2120      	movs	r1, #32
 8000188:	4802      	ldr	r0, [pc, #8]	@ (8000194 <GPIOSet+0x14>)
 800018a:	f000 fdbd 	bl	8000d08 <HAL_GPIO_WritePin>
}
 800018e:	bf00      	nop
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40010800 	.word	0x40010800

08000198 <GPIOClear>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void GPIOClear()
{
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800019c:	2200      	movs	r2, #0
 800019e:	2120      	movs	r1, #32
 80001a0:	4802      	ldr	r0, [pc, #8]	@ (80001ac <GPIOClear+0x14>)
 80001a2:	f000 fdb1 	bl	8000d08 <HAL_GPIO_WritePin>
}
 80001a6:	bf00      	nop
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	40010800 	.word	0x40010800

080001b0 <LEDBlink>:
//Return  : TRUE - LED Blinking success
//			FALSE - failed
//Notes   : None
//*****************************************************************************
bool LEDBlink()
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
	static bool sblLEDState = FALSE;
	bool blFlag = FALSE;
 80001b6:	2300      	movs	r3, #0
 80001b8:	71fb      	strb	r3, [r7, #7]

	if(sblLEDState == FALSE)
 80001ba:	4b12      	ldr	r3, [pc, #72]	@ (8000204 <LEDBlink+0x54>)
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	f083 0301 	eor.w	r3, r3, #1
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d00a      	beq.n	80001de <LEDBlink+0x2e>
	{
		GPIOSet();
 80001c8:	f7ff ffda 	bl	8000180 <GPIOSet>
		printf("LED ON\r\n");
 80001cc:	480e      	ldr	r0, [pc, #56]	@ (8000208 <LEDBlink+0x58>)
 80001ce:	f001 fd33 	bl	8001c38 <puts>
		sblLEDState = TRUE;
 80001d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000204 <LEDBlink+0x54>)
 80001d4:	2201      	movs	r2, #1
 80001d6:	701a      	strb	r2, [r3, #0]
		blFlag = TRUE;
 80001d8:	2301      	movs	r3, #1
 80001da:	71fb      	strb	r3, [r7, #7]
 80001dc:	e009      	b.n	80001f2 <LEDBlink+0x42>
	}
	else
	{
		GPIOClear();
 80001de:	f7ff ffdb 	bl	8000198 <GPIOClear>
		printf("LED OFF\r\n");
 80001e2:	480a      	ldr	r0, [pc, #40]	@ (800020c <LEDBlink+0x5c>)
 80001e4:	f001 fd28 	bl	8001c38 <puts>
		sblLEDState = FALSE;
 80001e8:	4b06      	ldr	r3, [pc, #24]	@ (8000204 <LEDBlink+0x54>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	701a      	strb	r2, [r3, #0]
		blFlag = TRUE;
 80001ee:	2301      	movs	r3, #1
 80001f0:	71fb      	strb	r3, [r7, #7]
	}
	HAL_Delay(100);
 80001f2:	2064      	movs	r0, #100	@ 0x64
 80001f4:	f000 fad2 	bl	800079c <HAL_Delay>

	return blFlag;
 80001f8:	79fb      	ldrb	r3, [r7, #7]
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	20000084 	.word	0x20000084
 8000208:	08002958 	.word	0x08002958
 800020c:	08002960 	.word	0x08002960

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000214:	f000 fa60 	bl	80006d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000218:	f000 f809 	bl	800022e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021c:	f000 f872 	bl	8000304 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000220:	f000 f846 	bl	80002b0 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  AppMain();
 8000224:	f7ff ff92 	bl	800014c <AppMain>
 8000228:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800022a:	4618      	mov	r0, r3
 800022c:	bd80      	pop	{r7, pc}

0800022e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022e:	b580      	push	{r7, lr}
 8000230:	b090      	sub	sp, #64	@ 0x40
 8000232:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000234:	f107 0318 	add.w	r3, r7, #24
 8000238:	2228      	movs	r2, #40	@ 0x28
 800023a:	2100      	movs	r1, #0
 800023c:	4618      	mov	r0, r3
 800023e:	f001 fddb 	bl	8001df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	605a      	str	r2, [r3, #4]
 800024a:	609a      	str	r2, [r3, #8]
 800024c:	60da      	str	r2, [r3, #12]
 800024e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000250:	2302      	movs	r3, #2
 8000252:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000254:	2301      	movs	r3, #1
 8000256:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000258:	2310      	movs	r3, #16
 800025a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025c:	2302      	movs	r3, #2
 800025e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000260:	2300      	movs	r3, #0
 8000262:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000264:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000268:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026a:	f107 0318 	add.w	r3, r7, #24
 800026e:	4618      	mov	r0, r3
 8000270:	f000 fd84 	bl	8000d7c <HAL_RCC_OscConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x50>
  {
    Error_Handler();
 800027a:	f000 f8b1 	bl	80003e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027e:	230f      	movs	r3, #15
 8000280:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000282:	2302      	movs	r3, #2
 8000284:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800028e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2102      	movs	r1, #2
 8000298:	4618      	mov	r0, r3
 800029a:	f000 fff1 	bl	8001280 <HAL_RCC_ClockConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002a4:	f000 f89c 	bl	80003e0 <Error_Handler>
  }
}
 80002a8:	bf00      	nop
 80002aa:	3740      	adds	r7, #64	@ 0x40
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002b4:	4b11      	ldr	r3, [pc, #68]	@ (80002fc <MX_USART2_UART_Init+0x4c>)
 80002b6:	4a12      	ldr	r2, [pc, #72]	@ (8000300 <MX_USART2_UART_Init+0x50>)
 80002b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002ba:	4b10      	ldr	r3, [pc, #64]	@ (80002fc <MX_USART2_UART_Init+0x4c>)
 80002bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002c2:	4b0e      	ldr	r3, [pc, #56]	@ (80002fc <MX_USART2_UART_Init+0x4c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002c8:	4b0c      	ldr	r3, [pc, #48]	@ (80002fc <MX_USART2_UART_Init+0x4c>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002ce:	4b0b      	ldr	r3, [pc, #44]	@ (80002fc <MX_USART2_UART_Init+0x4c>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002d4:	4b09      	ldr	r3, [pc, #36]	@ (80002fc <MX_USART2_UART_Init+0x4c>)
 80002d6:	220c      	movs	r2, #12
 80002d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002da:	4b08      	ldr	r3, [pc, #32]	@ (80002fc <MX_USART2_UART_Init+0x4c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002e0:	4b06      	ldr	r3, [pc, #24]	@ (80002fc <MX_USART2_UART_Init+0x4c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002e6:	4805      	ldr	r0, [pc, #20]	@ (80002fc <MX_USART2_UART_Init+0x4c>)
 80002e8:	f001 f958 	bl	800159c <HAL_UART_Init>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002f2:	f000 f875 	bl	80003e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000088 	.word	0x20000088
 8000300:	40004400 	.word	0x40004400

08000304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b088      	sub	sp, #32
 8000308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030a:	f107 0310 	add.w	r3, r7, #16
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000318:	4b2d      	ldr	r3, [pc, #180]	@ (80003d0 <MX_GPIO_Init+0xcc>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a2c      	ldr	r2, [pc, #176]	@ (80003d0 <MX_GPIO_Init+0xcc>)
 800031e:	f043 0310 	orr.w	r3, r3, #16
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b2a      	ldr	r3, [pc, #168]	@ (80003d0 <MX_GPIO_Init+0xcc>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0310 	and.w	r3, r3, #16
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000330:	4b27      	ldr	r3, [pc, #156]	@ (80003d0 <MX_GPIO_Init+0xcc>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a26      	ldr	r2, [pc, #152]	@ (80003d0 <MX_GPIO_Init+0xcc>)
 8000336:	f043 0320 	orr.w	r3, r3, #32
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b24      	ldr	r3, [pc, #144]	@ (80003d0 <MX_GPIO_Init+0xcc>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0320 	and.w	r3, r3, #32
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000348:	4b21      	ldr	r3, [pc, #132]	@ (80003d0 <MX_GPIO_Init+0xcc>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a20      	ldr	r2, [pc, #128]	@ (80003d0 <MX_GPIO_Init+0xcc>)
 800034e:	f043 0304 	orr.w	r3, r3, #4
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b1e      	ldr	r3, [pc, #120]	@ (80003d0 <MX_GPIO_Init+0xcc>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0304 	and.w	r3, r3, #4
 800035c:	607b      	str	r3, [r7, #4]
 800035e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000360:	4b1b      	ldr	r3, [pc, #108]	@ (80003d0 <MX_GPIO_Init+0xcc>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a1a      	ldr	r2, [pc, #104]	@ (80003d0 <MX_GPIO_Init+0xcc>)
 8000366:	f043 0308 	orr.w	r3, r3, #8
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b18      	ldr	r3, [pc, #96]	@ (80003d0 <MX_GPIO_Init+0xcc>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0308 	and.w	r3, r3, #8
 8000374:	603b      	str	r3, [r7, #0]
 8000376:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2120      	movs	r1, #32
 800037c:	4815      	ldr	r0, [pc, #84]	@ (80003d4 <MX_GPIO_Init+0xd0>)
 800037e:	f000 fcc3 	bl	8000d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000382:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000388:	4b13      	ldr	r3, [pc, #76]	@ (80003d8 <MX_GPIO_Init+0xd4>)
 800038a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038c:	2300      	movs	r3, #0
 800038e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000390:	f107 0310 	add.w	r3, r7, #16
 8000394:	4619      	mov	r1, r3
 8000396:	4811      	ldr	r0, [pc, #68]	@ (80003dc <MX_GPIO_Init+0xd8>)
 8000398:	f000 fb32 	bl	8000a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800039c:	2320      	movs	r3, #32
 800039e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a0:	2301      	movs	r3, #1
 80003a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a4:	2300      	movs	r3, #0
 80003a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a8:	2302      	movs	r3, #2
 80003aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003ac:	f107 0310 	add.w	r3, r7, #16
 80003b0:	4619      	mov	r1, r3
 80003b2:	4808      	ldr	r0, [pc, #32]	@ (80003d4 <MX_GPIO_Init+0xd0>)
 80003b4:	f000 fb24 	bl	8000a00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2100      	movs	r1, #0
 80003bc:	2028      	movs	r0, #40	@ 0x28
 80003be:	f000 fae8 	bl	8000992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003c2:	2028      	movs	r0, #40	@ 0x28
 80003c4:	f000 fb01 	bl	80009ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003c8:	bf00      	nop
 80003ca:	3720      	adds	r7, #32
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	40021000 	.word	0x40021000
 80003d4:	40010800 	.word	0x40010800
 80003d8:	10110000 	.word	0x10110000
 80003dc:	40011000 	.word	0x40011000

080003e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e4:	b672      	cpsid	i
}
 80003e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e8:	bf00      	nop
 80003ea:	e7fd      	b.n	80003e8 <Error_Handler+0x8>

080003ec <_write>:
  }
  /* USER CODE END Error_Handler_Debug */
}

int _write(int file, char *ptr, int len)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	b29a      	uxth	r2, r3
 80003fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000400:	68b9      	ldr	r1, [r7, #8]
 8000402:	4804      	ldr	r0, [pc, #16]	@ (8000414 <_write+0x28>)
 8000404:	f001 f91a 	bl	800163c <HAL_UART_Transmit>
    return len;
 8000408:	687b      	ldr	r3, [r7, #4]
}
 800040a:	4618      	mov	r0, r3
 800040c:	3710      	adds	r7, #16
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20000088 	.word	0x20000088

08000418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800041e:	4b15      	ldr	r3, [pc, #84]	@ (8000474 <HAL_MspInit+0x5c>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	4a14      	ldr	r2, [pc, #80]	@ (8000474 <HAL_MspInit+0x5c>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6193      	str	r3, [r2, #24]
 800042a:	4b12      	ldr	r3, [pc, #72]	@ (8000474 <HAL_MspInit+0x5c>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000436:	4b0f      	ldr	r3, [pc, #60]	@ (8000474 <HAL_MspInit+0x5c>)
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	4a0e      	ldr	r2, [pc, #56]	@ (8000474 <HAL_MspInit+0x5c>)
 800043c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000440:	61d3      	str	r3, [r2, #28]
 8000442:	4b0c      	ldr	r3, [pc, #48]	@ (8000474 <HAL_MspInit+0x5c>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800044e:	4b0a      	ldr	r3, [pc, #40]	@ (8000478 <HAL_MspInit+0x60>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	4a04      	ldr	r2, [pc, #16]	@ (8000478 <HAL_MspInit+0x60>)
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046a:	bf00      	nop
 800046c:	3714      	adds	r7, #20
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	40021000 	.word	0x40021000
 8000478:	40010000 	.word	0x40010000

0800047c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	605a      	str	r2, [r3, #4]
 800048e:	609a      	str	r2, [r3, #8]
 8000490:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a1b      	ldr	r2, [pc, #108]	@ (8000504 <HAL_UART_MspInit+0x88>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d12f      	bne.n	80004fc <HAL_UART_MspInit+0x80>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800049c:	4b1a      	ldr	r3, [pc, #104]	@ (8000508 <HAL_UART_MspInit+0x8c>)
 800049e:	69db      	ldr	r3, [r3, #28]
 80004a0:	4a19      	ldr	r2, [pc, #100]	@ (8000508 <HAL_UART_MspInit+0x8c>)
 80004a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004a6:	61d3      	str	r3, [r2, #28]
 80004a8:	4b17      	ldr	r3, [pc, #92]	@ (8000508 <HAL_UART_MspInit+0x8c>)
 80004aa:	69db      	ldr	r3, [r3, #28]
 80004ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b4:	4b14      	ldr	r3, [pc, #80]	@ (8000508 <HAL_UART_MspInit+0x8c>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a13      	ldr	r2, [pc, #76]	@ (8000508 <HAL_UART_MspInit+0x8c>)
 80004ba:	f043 0304 	orr.w	r3, r3, #4
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b11      	ldr	r3, [pc, #68]	@ (8000508 <HAL_UART_MspInit+0x8c>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0304 	and.w	r3, r3, #4
 80004c8:	60bb      	str	r3, [r7, #8]
 80004ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004cc:	2304      	movs	r3, #4
 80004ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d0:	2302      	movs	r3, #2
 80004d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d4:	2303      	movs	r3, #3
 80004d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	4619      	mov	r1, r3
 80004de:	480b      	ldr	r0, [pc, #44]	@ (800050c <HAL_UART_MspInit+0x90>)
 80004e0:	f000 fa8e 	bl	8000a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004e4:	2308      	movs	r3, #8
 80004e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	2300      	movs	r3, #0
 80004ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f0:	f107 0310 	add.w	r3, r7, #16
 80004f4:	4619      	mov	r1, r3
 80004f6:	4805      	ldr	r0, [pc, #20]	@ (800050c <HAL_UART_MspInit+0x90>)
 80004f8:	f000 fa82 	bl	8000a00 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80004fc:	bf00      	nop
 80004fe:	3720      	adds	r7, #32
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40004400 	.word	0x40004400
 8000508:	40021000 	.word	0x40021000
 800050c:	40010800 	.word	0x40010800

08000510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <NMI_Handler+0x4>

08000518 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800051c:	bf00      	nop
 800051e:	e7fd      	b.n	800051c <HardFault_Handler+0x4>

08000520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000524:	bf00      	nop
 8000526:	e7fd      	b.n	8000524 <MemManage_Handler+0x4>

08000528 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800052c:	bf00      	nop
 800052e:	e7fd      	b.n	800052c <BusFault_Handler+0x4>

08000530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <UsageFault_Handler+0x4>

08000538 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr

08000544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr

0800055c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000560:	f000 f900 	bl	8000764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}

08000568 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800056c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000570:	f000 fbe2 	bl	8000d38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}

08000578 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
 8000588:	e00a      	b.n	80005a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800058a:	f3af 8000 	nop.w
 800058e:	4601      	mov	r1, r0
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	1c5a      	adds	r2, r3, #1
 8000594:	60ba      	str	r2, [r7, #8]
 8000596:	b2ca      	uxtb	r2, r1
 8000598:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	3301      	adds	r3, #1
 800059e:	617b      	str	r3, [r7, #20]
 80005a0:	697a      	ldr	r2, [r7, #20]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	dbf0      	blt.n	800058a <_read+0x12>
  }

  return len;
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3718      	adds	r7, #24
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005d8:	605a      	str	r2, [r3, #4]
  return 0;
 80005da:	2300      	movs	r3, #0
}
 80005dc:	4618      	mov	r0, r3
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr

080005e6 <_isatty>:

int _isatty(int file)
{
 80005e6:	b480      	push	{r7}
 80005e8:	b083      	sub	sp, #12
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005ee:	2301      	movs	r3, #1
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr

080005fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b085      	sub	sp, #20
 80005fe:	af00      	add	r7, sp, #0
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000606:	2300      	movs	r3, #0
}
 8000608:	4618      	mov	r0, r3
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
	...

08000614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800061c:	4a14      	ldr	r2, [pc, #80]	@ (8000670 <_sbrk+0x5c>)
 800061e:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <_sbrk+0x60>)
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000628:	4b13      	ldr	r3, [pc, #76]	@ (8000678 <_sbrk+0x64>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d102      	bne.n	8000636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000630:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <_sbrk+0x64>)
 8000632:	4a12      	ldr	r2, [pc, #72]	@ (800067c <_sbrk+0x68>)
 8000634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000636:	4b10      	ldr	r3, [pc, #64]	@ (8000678 <_sbrk+0x64>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4413      	add	r3, r2
 800063e:	693a      	ldr	r2, [r7, #16]
 8000640:	429a      	cmp	r2, r3
 8000642:	d207      	bcs.n	8000654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000644:	f001 fc26 	bl	8001e94 <__errno>
 8000648:	4603      	mov	r3, r0
 800064a:	220c      	movs	r2, #12
 800064c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
 8000652:	e009      	b.n	8000668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000654:	4b08      	ldr	r3, [pc, #32]	@ (8000678 <_sbrk+0x64>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800065a:	4b07      	ldr	r3, [pc, #28]	@ (8000678 <_sbrk+0x64>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	4a05      	ldr	r2, [pc, #20]	@ (8000678 <_sbrk+0x64>)
 8000664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000666:	68fb      	ldr	r3, [r7, #12]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3718      	adds	r7, #24
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20005000 	.word	0x20005000
 8000674:	00000400 	.word	0x00000400
 8000678:	200000d0 	.word	0x200000d0
 800067c:	20000228 	.word	0x20000228

08000680 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800068c:	f7ff fff8 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000690:	480b      	ldr	r0, [pc, #44]	@ (80006c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000692:	490c      	ldr	r1, [pc, #48]	@ (80006c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000694:	4a0c      	ldr	r2, [pc, #48]	@ (80006c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000698:	e002      	b.n	80006a0 <LoopCopyDataInit>

0800069a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800069c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069e:	3304      	adds	r3, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a4:	d3f9      	bcc.n	800069a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a6:	4a09      	ldr	r2, [pc, #36]	@ (80006cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006a8:	4c09      	ldr	r4, [pc, #36]	@ (80006d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ac:	e001      	b.n	80006b2 <LoopFillZerobss>

080006ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b0:	3204      	adds	r2, #4

080006b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b4:	d3fb      	bcc.n	80006ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006b6:	f001 fbf3 	bl	8001ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ba:	f7ff fda9 	bl	8000210 <main>
  bx lr
 80006be:	4770      	bx	lr
  ldr r0, =_sdata
 80006c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80006c8:	080029d4 	.word	0x080029d4
  ldr r2, =_sbss
 80006cc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80006d0:	20000224 	.word	0x20000224

080006d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d4:	e7fe      	b.n	80006d4 <ADC1_2_IRQHandler>
	...

080006d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006dc:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <HAL_Init+0x28>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a07      	ldr	r2, [pc, #28]	@ (8000700 <HAL_Init+0x28>)
 80006e2:	f043 0310 	orr.w	r3, r3, #16
 80006e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e8:	2003      	movs	r0, #3
 80006ea:	f000 f947 	bl	800097c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 f808 	bl	8000704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006f4:	f7ff fe90 	bl	8000418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006f8:	2300      	movs	r3, #0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40022000 	.word	0x40022000

08000704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800070c:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <HAL_InitTick+0x54>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b12      	ldr	r3, [pc, #72]	@ (800075c <HAL_InitTick+0x58>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	4619      	mov	r1, r3
 8000716:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800071a:	fbb3 f3f1 	udiv	r3, r3, r1
 800071e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000722:	4618      	mov	r0, r3
 8000724:	f000 f95f 	bl	80009e6 <HAL_SYSTICK_Config>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800072e:	2301      	movs	r3, #1
 8000730:	e00e      	b.n	8000750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b0f      	cmp	r3, #15
 8000736:	d80a      	bhi.n	800074e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000738:	2200      	movs	r2, #0
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	f04f 30ff 	mov.w	r0, #4294967295
 8000740:	f000 f927 	bl	8000992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000744:	4a06      	ldr	r2, [pc, #24]	@ (8000760 <HAL_InitTick+0x5c>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800074a:	2300      	movs	r3, #0
 800074c:	e000      	b.n	8000750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800074e:	2301      	movs	r3, #1
}
 8000750:	4618      	mov	r0, r3
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000000 	.word	0x20000000
 800075c:	20000008 	.word	0x20000008
 8000760:	20000004 	.word	0x20000004

08000764 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000768:	4b05      	ldr	r3, [pc, #20]	@ (8000780 <HAL_IncTick+0x1c>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	461a      	mov	r2, r3
 800076e:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <HAL_IncTick+0x20>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4413      	add	r3, r2
 8000774:	4a03      	ldr	r2, [pc, #12]	@ (8000784 <HAL_IncTick+0x20>)
 8000776:	6013      	str	r3, [r2, #0]
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	20000008 	.word	0x20000008
 8000784:	200000d4 	.word	0x200000d4

08000788 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  return uwTick;
 800078c:	4b02      	ldr	r3, [pc, #8]	@ (8000798 <HAL_GetTick+0x10>)
 800078e:	681b      	ldr	r3, [r3, #0]
}
 8000790:	4618      	mov	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	200000d4 	.word	0x200000d4

0800079c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007a4:	f7ff fff0 	bl	8000788 <HAL_GetTick>
 80007a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007b4:	d005      	beq.n	80007c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007b6:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <HAL_Delay+0x44>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	461a      	mov	r2, r3
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	4413      	add	r3, r2
 80007c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007c2:	bf00      	nop
 80007c4:	f7ff ffe0 	bl	8000788 <HAL_GetTick>
 80007c8:	4602      	mov	r2, r0
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d8f7      	bhi.n	80007c4 <HAL_Delay+0x28>
  {
  }
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000008 	.word	0x20000008

080007e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000800:	4013      	ands	r3, r2
 8000802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800080c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000816:	4a04      	ldr	r2, [pc, #16]	@ (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	60d3      	str	r3, [r2, #12]
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000830:	4b04      	ldr	r3, [pc, #16]	@ (8000844 <__NVIC_GetPriorityGrouping+0x18>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	0a1b      	lsrs	r3, r3, #8
 8000836:	f003 0307 	and.w	r3, r3, #7
}
 800083a:	4618      	mov	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	2b00      	cmp	r3, #0
 8000858:	db0b      	blt.n	8000872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	f003 021f 	and.w	r2, r3, #31
 8000860:	4906      	ldr	r1, [pc, #24]	@ (800087c <__NVIC_EnableIRQ+0x34>)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	095b      	lsrs	r3, r3, #5
 8000868:	2001      	movs	r0, #1
 800086a:	fa00 f202 	lsl.w	r2, r0, r2
 800086e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	e000e100 	.word	0xe000e100

08000880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	6039      	str	r1, [r7, #0]
 800088a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000890:	2b00      	cmp	r3, #0
 8000892:	db0a      	blt.n	80008aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	b2da      	uxtb	r2, r3
 8000898:	490c      	ldr	r1, [pc, #48]	@ (80008cc <__NVIC_SetPriority+0x4c>)
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	0112      	lsls	r2, r2, #4
 80008a0:	b2d2      	uxtb	r2, r2
 80008a2:	440b      	add	r3, r1
 80008a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a8:	e00a      	b.n	80008c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4908      	ldr	r1, [pc, #32]	@ (80008d0 <__NVIC_SetPriority+0x50>)
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	f003 030f 	and.w	r3, r3, #15
 80008b6:	3b04      	subs	r3, #4
 80008b8:	0112      	lsls	r2, r2, #4
 80008ba:	b2d2      	uxtb	r2, r2
 80008bc:	440b      	add	r3, r1
 80008be:	761a      	strb	r2, [r3, #24]
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000e100 	.word	0xe000e100
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b089      	sub	sp, #36	@ 0x24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	f1c3 0307 	rsb	r3, r3, #7
 80008ee:	2b04      	cmp	r3, #4
 80008f0:	bf28      	it	cs
 80008f2:	2304      	movcs	r3, #4
 80008f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	3304      	adds	r3, #4
 80008fa:	2b06      	cmp	r3, #6
 80008fc:	d902      	bls.n	8000904 <NVIC_EncodePriority+0x30>
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	3b03      	subs	r3, #3
 8000902:	e000      	b.n	8000906 <NVIC_EncodePriority+0x32>
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000908:	f04f 32ff 	mov.w	r2, #4294967295
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43da      	mvns	r2, r3
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	401a      	ands	r2, r3
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800091c:	f04f 31ff 	mov.w	r1, #4294967295
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	fa01 f303 	lsl.w	r3, r1, r3
 8000926:	43d9      	mvns	r1, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800092c:	4313      	orrs	r3, r2
         );
}
 800092e:	4618      	mov	r0, r3
 8000930:	3724      	adds	r7, #36	@ 0x24
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3b01      	subs	r3, #1
 8000944:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000948:	d301      	bcc.n	800094e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800094a:	2301      	movs	r3, #1
 800094c:	e00f      	b.n	800096e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800094e:	4a0a      	ldr	r2, [pc, #40]	@ (8000978 <SysTick_Config+0x40>)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3b01      	subs	r3, #1
 8000954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000956:	210f      	movs	r1, #15
 8000958:	f04f 30ff 	mov.w	r0, #4294967295
 800095c:	f7ff ff90 	bl	8000880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000960:	4b05      	ldr	r3, [pc, #20]	@ (8000978 <SysTick_Config+0x40>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000966:	4b04      	ldr	r3, [pc, #16]	@ (8000978 <SysTick_Config+0x40>)
 8000968:	2207      	movs	r2, #7
 800096a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	e000e010 	.word	0xe000e010

0800097c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ff2d 	bl	80007e4 <__NVIC_SetPriorityGrouping>
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000992:	b580      	push	{r7, lr}
 8000994:	b086      	sub	sp, #24
 8000996:	af00      	add	r7, sp, #0
 8000998:	4603      	mov	r3, r0
 800099a:	60b9      	str	r1, [r7, #8]
 800099c:	607a      	str	r2, [r7, #4]
 800099e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009a4:	f7ff ff42 	bl	800082c <__NVIC_GetPriorityGrouping>
 80009a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	68b9      	ldr	r1, [r7, #8]
 80009ae:	6978      	ldr	r0, [r7, #20]
 80009b0:	f7ff ff90 	bl	80008d4 <NVIC_EncodePriority>
 80009b4:	4602      	mov	r2, r0
 80009b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ba:	4611      	mov	r1, r2
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ff5f 	bl	8000880 <__NVIC_SetPriority>
}
 80009c2:	bf00      	nop
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	4603      	mov	r3, r0
 80009d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff35 	bl	8000848 <__NVIC_EnableIRQ>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff ffa2 	bl	8000938 <SysTick_Config>
 80009f4:	4603      	mov	r3, r0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b08b      	sub	sp, #44	@ 0x2c
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a12:	e169      	b.n	8000ce8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a14:	2201      	movs	r2, #1
 8000a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	69fa      	ldr	r2, [r7, #28]
 8000a24:	4013      	ands	r3, r2
 8000a26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	f040 8158 	bne.w	8000ce2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	4a9a      	ldr	r2, [pc, #616]	@ (8000ca0 <HAL_GPIO_Init+0x2a0>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d05e      	beq.n	8000afa <HAL_GPIO_Init+0xfa>
 8000a3c:	4a98      	ldr	r2, [pc, #608]	@ (8000ca0 <HAL_GPIO_Init+0x2a0>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d875      	bhi.n	8000b2e <HAL_GPIO_Init+0x12e>
 8000a42:	4a98      	ldr	r2, [pc, #608]	@ (8000ca4 <HAL_GPIO_Init+0x2a4>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d058      	beq.n	8000afa <HAL_GPIO_Init+0xfa>
 8000a48:	4a96      	ldr	r2, [pc, #600]	@ (8000ca4 <HAL_GPIO_Init+0x2a4>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d86f      	bhi.n	8000b2e <HAL_GPIO_Init+0x12e>
 8000a4e:	4a96      	ldr	r2, [pc, #600]	@ (8000ca8 <HAL_GPIO_Init+0x2a8>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d052      	beq.n	8000afa <HAL_GPIO_Init+0xfa>
 8000a54:	4a94      	ldr	r2, [pc, #592]	@ (8000ca8 <HAL_GPIO_Init+0x2a8>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d869      	bhi.n	8000b2e <HAL_GPIO_Init+0x12e>
 8000a5a:	4a94      	ldr	r2, [pc, #592]	@ (8000cac <HAL_GPIO_Init+0x2ac>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d04c      	beq.n	8000afa <HAL_GPIO_Init+0xfa>
 8000a60:	4a92      	ldr	r2, [pc, #584]	@ (8000cac <HAL_GPIO_Init+0x2ac>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d863      	bhi.n	8000b2e <HAL_GPIO_Init+0x12e>
 8000a66:	4a92      	ldr	r2, [pc, #584]	@ (8000cb0 <HAL_GPIO_Init+0x2b0>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d046      	beq.n	8000afa <HAL_GPIO_Init+0xfa>
 8000a6c:	4a90      	ldr	r2, [pc, #576]	@ (8000cb0 <HAL_GPIO_Init+0x2b0>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d85d      	bhi.n	8000b2e <HAL_GPIO_Init+0x12e>
 8000a72:	2b12      	cmp	r3, #18
 8000a74:	d82a      	bhi.n	8000acc <HAL_GPIO_Init+0xcc>
 8000a76:	2b12      	cmp	r3, #18
 8000a78:	d859      	bhi.n	8000b2e <HAL_GPIO_Init+0x12e>
 8000a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8000a80 <HAL_GPIO_Init+0x80>)
 8000a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a80:	08000afb 	.word	0x08000afb
 8000a84:	08000ad5 	.word	0x08000ad5
 8000a88:	08000ae7 	.word	0x08000ae7
 8000a8c:	08000b29 	.word	0x08000b29
 8000a90:	08000b2f 	.word	0x08000b2f
 8000a94:	08000b2f 	.word	0x08000b2f
 8000a98:	08000b2f 	.word	0x08000b2f
 8000a9c:	08000b2f 	.word	0x08000b2f
 8000aa0:	08000b2f 	.word	0x08000b2f
 8000aa4:	08000b2f 	.word	0x08000b2f
 8000aa8:	08000b2f 	.word	0x08000b2f
 8000aac:	08000b2f 	.word	0x08000b2f
 8000ab0:	08000b2f 	.word	0x08000b2f
 8000ab4:	08000b2f 	.word	0x08000b2f
 8000ab8:	08000b2f 	.word	0x08000b2f
 8000abc:	08000b2f 	.word	0x08000b2f
 8000ac0:	08000b2f 	.word	0x08000b2f
 8000ac4:	08000add 	.word	0x08000add
 8000ac8:	08000af1 	.word	0x08000af1
 8000acc:	4a79      	ldr	r2, [pc, #484]	@ (8000cb4 <HAL_GPIO_Init+0x2b4>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d013      	beq.n	8000afa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ad2:	e02c      	b.n	8000b2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	623b      	str	r3, [r7, #32]
          break;
 8000ada:	e029      	b.n	8000b30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	623b      	str	r3, [r7, #32]
          break;
 8000ae4:	e024      	b.n	8000b30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	3308      	adds	r3, #8
 8000aec:	623b      	str	r3, [r7, #32]
          break;
 8000aee:	e01f      	b.n	8000b30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	330c      	adds	r3, #12
 8000af6:	623b      	str	r3, [r7, #32]
          break;
 8000af8:	e01a      	b.n	8000b30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d102      	bne.n	8000b08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b02:	2304      	movs	r3, #4
 8000b04:	623b      	str	r3, [r7, #32]
          break;
 8000b06:	e013      	b.n	8000b30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d105      	bne.n	8000b1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b10:	2308      	movs	r3, #8
 8000b12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	69fa      	ldr	r2, [r7, #28]
 8000b18:	611a      	str	r2, [r3, #16]
          break;
 8000b1a:	e009      	b.n	8000b30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b1c:	2308      	movs	r3, #8
 8000b1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	69fa      	ldr	r2, [r7, #28]
 8000b24:	615a      	str	r2, [r3, #20]
          break;
 8000b26:	e003      	b.n	8000b30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
          break;
 8000b2c:	e000      	b.n	8000b30 <HAL_GPIO_Init+0x130>
          break;
 8000b2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	2bff      	cmp	r3, #255	@ 0xff
 8000b34:	d801      	bhi.n	8000b3a <HAL_GPIO_Init+0x13a>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	e001      	b.n	8000b3e <HAL_GPIO_Init+0x13e>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	2bff      	cmp	r3, #255	@ 0xff
 8000b44:	d802      	bhi.n	8000b4c <HAL_GPIO_Init+0x14c>
 8000b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	e002      	b.n	8000b52 <HAL_GPIO_Init+0x152>
 8000b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b4e:	3b08      	subs	r3, #8
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	210f      	movs	r1, #15
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b60:	43db      	mvns	r3, r3
 8000b62:	401a      	ands	r2, r3
 8000b64:	6a39      	ldr	r1, [r7, #32]
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6c:	431a      	orrs	r2, r3
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 80b1 	beq.w	8000ce2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b80:	4b4d      	ldr	r3, [pc, #308]	@ (8000cb8 <HAL_GPIO_Init+0x2b8>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a4c      	ldr	r2, [pc, #304]	@ (8000cb8 <HAL_GPIO_Init+0x2b8>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b4a      	ldr	r3, [pc, #296]	@ (8000cb8 <HAL_GPIO_Init+0x2b8>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b98:	4a48      	ldr	r2, [pc, #288]	@ (8000cbc <HAL_GPIO_Init+0x2bc>)
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9c:	089b      	lsrs	r3, r3, #2
 8000b9e:	3302      	adds	r3, #2
 8000ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba8:	f003 0303 	and.w	r3, r3, #3
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	220f      	movs	r2, #15
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a40      	ldr	r2, [pc, #256]	@ (8000cc0 <HAL_GPIO_Init+0x2c0>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d013      	beq.n	8000bec <HAL_GPIO_Init+0x1ec>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a3f      	ldr	r2, [pc, #252]	@ (8000cc4 <HAL_GPIO_Init+0x2c4>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d00d      	beq.n	8000be8 <HAL_GPIO_Init+0x1e8>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a3e      	ldr	r2, [pc, #248]	@ (8000cc8 <HAL_GPIO_Init+0x2c8>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d007      	beq.n	8000be4 <HAL_GPIO_Init+0x1e4>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a3d      	ldr	r2, [pc, #244]	@ (8000ccc <HAL_GPIO_Init+0x2cc>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d101      	bne.n	8000be0 <HAL_GPIO_Init+0x1e0>
 8000bdc:	2303      	movs	r3, #3
 8000bde:	e006      	b.n	8000bee <HAL_GPIO_Init+0x1ee>
 8000be0:	2304      	movs	r3, #4
 8000be2:	e004      	b.n	8000bee <HAL_GPIO_Init+0x1ee>
 8000be4:	2302      	movs	r3, #2
 8000be6:	e002      	b.n	8000bee <HAL_GPIO_Init+0x1ee>
 8000be8:	2301      	movs	r3, #1
 8000bea:	e000      	b.n	8000bee <HAL_GPIO_Init+0x1ee>
 8000bec:	2300      	movs	r3, #0
 8000bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bf0:	f002 0203 	and.w	r2, r2, #3
 8000bf4:	0092      	lsls	r2, r2, #2
 8000bf6:	4093      	lsls	r3, r2
 8000bf8:	68fa      	ldr	r2, [r7, #12]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bfe:	492f      	ldr	r1, [pc, #188]	@ (8000cbc <HAL_GPIO_Init+0x2bc>)
 8000c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c02:	089b      	lsrs	r3, r3, #2
 8000c04:	3302      	adds	r3, #2
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d006      	beq.n	8000c26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c18:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c1a:	689a      	ldr	r2, [r3, #8]
 8000c1c:	492c      	ldr	r1, [pc, #176]	@ (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	608b      	str	r3, [r1, #8]
 8000c24:	e006      	b.n	8000c34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c26:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	4928      	ldr	r1, [pc, #160]	@ (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c30:	4013      	ands	r3, r2
 8000c32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d006      	beq.n	8000c4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c40:	4b23      	ldr	r3, [pc, #140]	@ (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	4922      	ldr	r1, [pc, #136]	@ (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	60cb      	str	r3, [r1, #12]
 8000c4c:	e006      	b.n	8000c5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c4e:	4b20      	ldr	r3, [pc, #128]	@ (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c50:	68da      	ldr	r2, [r3, #12]
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	491e      	ldr	r1, [pc, #120]	@ (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d006      	beq.n	8000c76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c68:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c6a:	685a      	ldr	r2, [r3, #4]
 8000c6c:	4918      	ldr	r1, [pc, #96]	@ (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	604b      	str	r3, [r1, #4]
 8000c74:	e006      	b.n	8000c84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c76:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	4914      	ldr	r1, [pc, #80]	@ (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c80:	4013      	ands	r3, r2
 8000c82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d021      	beq.n	8000cd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	490e      	ldr	r1, [pc, #56]	@ (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	600b      	str	r3, [r1, #0]
 8000c9c:	e021      	b.n	8000ce2 <HAL_GPIO_Init+0x2e2>
 8000c9e:	bf00      	nop
 8000ca0:	10320000 	.word	0x10320000
 8000ca4:	10310000 	.word	0x10310000
 8000ca8:	10220000 	.word	0x10220000
 8000cac:	10210000 	.word	0x10210000
 8000cb0:	10120000 	.word	0x10120000
 8000cb4:	10110000 	.word	0x10110000
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40010000 	.word	0x40010000
 8000cc0:	40010800 	.word	0x40010800
 8000cc4:	40010c00 	.word	0x40010c00
 8000cc8:	40011000 	.word	0x40011000
 8000ccc:	40011400 	.word	0x40011400
 8000cd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d04 <HAL_GPIO_Init+0x304>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	4909      	ldr	r1, [pc, #36]	@ (8000d04 <HAL_GPIO_Init+0x304>)
 8000cde:	4013      	ands	r3, r2
 8000ce0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cee:	fa22 f303 	lsr.w	r3, r2, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f47f ae8e 	bne.w	8000a14 <HAL_GPIO_Init+0x14>
  }
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	372c      	adds	r7, #44	@ 0x2c
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	40010400 	.word	0x40010400

08000d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	807b      	strh	r3, [r7, #2]
 8000d14:	4613      	mov	r3, r2
 8000d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d18:	787b      	ldrb	r3, [r7, #1]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d1e:	887a      	ldrh	r2, [r7, #2]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d24:	e003      	b.n	8000d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d26:	887b      	ldrh	r3, [r7, #2]
 8000d28:	041a      	lsls	r2, r3, #16
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	611a      	str	r2, [r3, #16]
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d42:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d44:	695a      	ldr	r2, [r3, #20]
 8000d46:	88fb      	ldrh	r3, [r7, #6]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d006      	beq.n	8000d5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d4e:	4a05      	ldr	r2, [pc, #20]	@ (8000d64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d50:	88fb      	ldrh	r3, [r7, #6]
 8000d52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f806 	bl	8000d68 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40010400 	.word	0x40010400

08000d68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e272      	b.n	8001274 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 8087 	beq.w	8000eaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d9c:	4b92      	ldr	r3, [pc, #584]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 030c 	and.w	r3, r3, #12
 8000da4:	2b04      	cmp	r3, #4
 8000da6:	d00c      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000da8:	4b8f      	ldr	r3, [pc, #572]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 030c 	and.w	r3, r3, #12
 8000db0:	2b08      	cmp	r3, #8
 8000db2:	d112      	bne.n	8000dda <HAL_RCC_OscConfig+0x5e>
 8000db4:	4b8c      	ldr	r3, [pc, #560]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dc0:	d10b      	bne.n	8000dda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc2:	4b89      	ldr	r3, [pc, #548]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d06c      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x12c>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d168      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e24c      	b.n	8001274 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000de2:	d106      	bne.n	8000df2 <HAL_RCC_OscConfig+0x76>
 8000de4:	4b80      	ldr	r3, [pc, #512]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a7f      	ldr	r2, [pc, #508]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	e02e      	b.n	8000e50 <HAL_RCC_OscConfig+0xd4>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d10c      	bne.n	8000e14 <HAL_RCC_OscConfig+0x98>
 8000dfa:	4b7b      	ldr	r3, [pc, #492]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a7a      	ldr	r2, [pc, #488]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	4b78      	ldr	r3, [pc, #480]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a77      	ldr	r2, [pc, #476]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	e01d      	b.n	8000e50 <HAL_RCC_OscConfig+0xd4>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e1c:	d10c      	bne.n	8000e38 <HAL_RCC_OscConfig+0xbc>
 8000e1e:	4b72      	ldr	r3, [pc, #456]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a71      	ldr	r2, [pc, #452]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	4b6f      	ldr	r3, [pc, #444]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a6e      	ldr	r2, [pc, #440]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	e00b      	b.n	8000e50 <HAL_RCC_OscConfig+0xd4>
 8000e38:	4b6b      	ldr	r3, [pc, #428]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a6a      	ldr	r2, [pc, #424]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	4b68      	ldr	r3, [pc, #416]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a67      	ldr	r2, [pc, #412]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d013      	beq.n	8000e80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e58:	f7ff fc96 	bl	8000788 <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e60:	f7ff fc92 	bl	8000788 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b64      	cmp	r3, #100	@ 0x64
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e200      	b.n	8001274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e72:	4b5d      	ldr	r3, [pc, #372]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f0      	beq.n	8000e60 <HAL_RCC_OscConfig+0xe4>
 8000e7e:	e014      	b.n	8000eaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e80:	f7ff fc82 	bl	8000788 <HAL_GetTick>
 8000e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e86:	e008      	b.n	8000e9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e88:	f7ff fc7e 	bl	8000788 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b64      	cmp	r3, #100	@ 0x64
 8000e94:	d901      	bls.n	8000e9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e1ec      	b.n	8001274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e9a:	4b53      	ldr	r3, [pc, #332]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1f0      	bne.n	8000e88 <HAL_RCC_OscConfig+0x10c>
 8000ea6:	e000      	b.n	8000eaa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d063      	beq.n	8000f7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eb6:	4b4c      	ldr	r3, [pc, #304]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 030c 	and.w	r3, r3, #12
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00b      	beq.n	8000eda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ec2:	4b49      	ldr	r3, [pc, #292]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 030c 	and.w	r3, r3, #12
 8000eca:	2b08      	cmp	r3, #8
 8000ecc:	d11c      	bne.n	8000f08 <HAL_RCC_OscConfig+0x18c>
 8000ece:	4b46      	ldr	r3, [pc, #280]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d116      	bne.n	8000f08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eda:	4b43      	ldr	r3, [pc, #268]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d005      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x176>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d001      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e1c0      	b.n	8001274 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef2:	4b3d      	ldr	r3, [pc, #244]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	4939      	ldr	r1, [pc, #228]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000f02:	4313      	orrs	r3, r2
 8000f04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f06:	e03a      	b.n	8000f7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d020      	beq.n	8000f52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f10:	4b36      	ldr	r3, [pc, #216]	@ (8000fec <HAL_RCC_OscConfig+0x270>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f16:	f7ff fc37 	bl	8000788 <HAL_GetTick>
 8000f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f1c:	e008      	b.n	8000f30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f1e:	f7ff fc33 	bl	8000788 <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d901      	bls.n	8000f30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e1a1      	b.n	8001274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f30:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d0f0      	beq.n	8000f1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	4927      	ldr	r1, [pc, #156]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	600b      	str	r3, [r1, #0]
 8000f50:	e015      	b.n	8000f7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f52:	4b26      	ldr	r3, [pc, #152]	@ (8000fec <HAL_RCC_OscConfig+0x270>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f58:	f7ff fc16 	bl	8000788 <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f60:	f7ff fc12 	bl	8000788 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e180      	b.n	8001274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f72:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f0      	bne.n	8000f60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0308 	and.w	r3, r3, #8
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d03a      	beq.n	8001000 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d019      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f92:	4b17      	ldr	r3, [pc, #92]	@ (8000ff0 <HAL_RCC_OscConfig+0x274>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f98:	f7ff fbf6 	bl	8000788 <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fa0:	f7ff fbf2 	bl	8000788 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e160      	b.n	8001274 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0f0      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f000 face 	bl	8001560 <RCC_Delay>
 8000fc4:	e01c      	b.n	8001000 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff0 <HAL_RCC_OscConfig+0x274>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fcc:	f7ff fbdc 	bl	8000788 <HAL_GetTick>
 8000fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd2:	e00f      	b.n	8000ff4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fd4:	f7ff fbd8 	bl	8000788 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d908      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e146      	b.n	8001274 <HAL_RCC_OscConfig+0x4f8>
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	42420000 	.word	0x42420000
 8000ff0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ff4:	4b92      	ldr	r3, [pc, #584]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1e9      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0304 	and.w	r3, r3, #4
 8001008:	2b00      	cmp	r3, #0
 800100a:	f000 80a6 	beq.w	800115a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800100e:	2300      	movs	r3, #0
 8001010:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001012:	4b8b      	ldr	r3, [pc, #556]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d10d      	bne.n	800103a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800101e:	4b88      	ldr	r3, [pc, #544]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	4a87      	ldr	r2, [pc, #540]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 8001024:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001028:	61d3      	str	r3, [r2, #28]
 800102a:	4b85      	ldr	r3, [pc, #532]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001036:	2301      	movs	r3, #1
 8001038:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800103a:	4b82      	ldr	r3, [pc, #520]	@ (8001244 <HAL_RCC_OscConfig+0x4c8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001042:	2b00      	cmp	r3, #0
 8001044:	d118      	bne.n	8001078 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001046:	4b7f      	ldr	r3, [pc, #508]	@ (8001244 <HAL_RCC_OscConfig+0x4c8>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a7e      	ldr	r2, [pc, #504]	@ (8001244 <HAL_RCC_OscConfig+0x4c8>)
 800104c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001052:	f7ff fb99 	bl	8000788 <HAL_GetTick>
 8001056:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001058:	e008      	b.n	800106c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800105a:	f7ff fb95 	bl	8000788 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b64      	cmp	r3, #100	@ 0x64
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e103      	b.n	8001274 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800106c:	4b75      	ldr	r3, [pc, #468]	@ (8001244 <HAL_RCC_OscConfig+0x4c8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0f0      	beq.n	800105a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d106      	bne.n	800108e <HAL_RCC_OscConfig+0x312>
 8001080:	4b6f      	ldr	r3, [pc, #444]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	4a6e      	ldr	r2, [pc, #440]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6213      	str	r3, [r2, #32]
 800108c:	e02d      	b.n	80010ea <HAL_RCC_OscConfig+0x36e>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d10c      	bne.n	80010b0 <HAL_RCC_OscConfig+0x334>
 8001096:	4b6a      	ldr	r3, [pc, #424]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	4a69      	ldr	r2, [pc, #420]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 800109c:	f023 0301 	bic.w	r3, r3, #1
 80010a0:	6213      	str	r3, [r2, #32]
 80010a2:	4b67      	ldr	r3, [pc, #412]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	4a66      	ldr	r2, [pc, #408]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	f023 0304 	bic.w	r3, r3, #4
 80010ac:	6213      	str	r3, [r2, #32]
 80010ae:	e01c      	b.n	80010ea <HAL_RCC_OscConfig+0x36e>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	2b05      	cmp	r3, #5
 80010b6:	d10c      	bne.n	80010d2 <HAL_RCC_OscConfig+0x356>
 80010b8:	4b61      	ldr	r3, [pc, #388]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	4a60      	ldr	r2, [pc, #384]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	6213      	str	r3, [r2, #32]
 80010c4:	4b5e      	ldr	r3, [pc, #376]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	4a5d      	ldr	r2, [pc, #372]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	6213      	str	r3, [r2, #32]
 80010d0:	e00b      	b.n	80010ea <HAL_RCC_OscConfig+0x36e>
 80010d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	6a1b      	ldr	r3, [r3, #32]
 80010d6:	4a5a      	ldr	r2, [pc, #360]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	f023 0301 	bic.w	r3, r3, #1
 80010dc:	6213      	str	r3, [r2, #32]
 80010de:	4b58      	ldr	r3, [pc, #352]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	4a57      	ldr	r2, [pc, #348]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	f023 0304 	bic.w	r3, r3, #4
 80010e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d015      	beq.n	800111e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f2:	f7ff fb49 	bl	8000788 <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f8:	e00a      	b.n	8001110 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010fa:	f7ff fb45 	bl	8000788 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001108:	4293      	cmp	r3, r2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e0b1      	b.n	8001274 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001110:	4b4b      	ldr	r3, [pc, #300]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0ee      	beq.n	80010fa <HAL_RCC_OscConfig+0x37e>
 800111c:	e014      	b.n	8001148 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800111e:	f7ff fb33 	bl	8000788 <HAL_GetTick>
 8001122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001124:	e00a      	b.n	800113c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001126:	f7ff fb2f 	bl	8000788 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001134:	4293      	cmp	r3, r2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e09b      	b.n	8001274 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800113c:	4b40      	ldr	r3, [pc, #256]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1ee      	bne.n	8001126 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001148:	7dfb      	ldrb	r3, [r7, #23]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d105      	bne.n	800115a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800114e:	4b3c      	ldr	r3, [pc, #240]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	4a3b      	ldr	r2, [pc, #236]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 8001154:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001158:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	2b00      	cmp	r3, #0
 8001160:	f000 8087 	beq.w	8001272 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001164:	4b36      	ldr	r3, [pc, #216]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 030c 	and.w	r3, r3, #12
 800116c:	2b08      	cmp	r3, #8
 800116e:	d061      	beq.n	8001234 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69db      	ldr	r3, [r3, #28]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d146      	bne.n	8001206 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001178:	4b33      	ldr	r3, [pc, #204]	@ (8001248 <HAL_RCC_OscConfig+0x4cc>)
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117e:	f7ff fb03 	bl	8000788 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001186:	f7ff faff 	bl	8000788 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e06d      	b.n	8001274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001198:	4b29      	ldr	r3, [pc, #164]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1f0      	bne.n	8001186 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011ac:	d108      	bne.n	80011c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011ae:	4b24      	ldr	r3, [pc, #144]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	4921      	ldr	r1, [pc, #132]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 80011bc:	4313      	orrs	r3, r2
 80011be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a19      	ldr	r1, [r3, #32]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d0:	430b      	orrs	r3, r1
 80011d2:	491b      	ldr	r1, [pc, #108]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001248 <HAL_RCC_OscConfig+0x4cc>)
 80011da:	2201      	movs	r2, #1
 80011dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011de:	f7ff fad3 	bl	8000788 <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e6:	f7ff facf 	bl	8000788 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e03d      	b.n	8001274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011f8:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f0      	beq.n	80011e6 <HAL_RCC_OscConfig+0x46a>
 8001204:	e035      	b.n	8001272 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001206:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <HAL_RCC_OscConfig+0x4cc>)
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120c:	f7ff fabc 	bl	8000788 <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001214:	f7ff fab8 	bl	8000788 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e026      	b.n	8001274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <HAL_RCC_OscConfig+0x4c4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f0      	bne.n	8001214 <HAL_RCC_OscConfig+0x498>
 8001232:	e01e      	b.n	8001272 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	69db      	ldr	r3, [r3, #28]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d107      	bne.n	800124c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e019      	b.n	8001274 <HAL_RCC_OscConfig+0x4f8>
 8001240:	40021000 	.word	0x40021000
 8001244:	40007000 	.word	0x40007000
 8001248:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800124c:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <HAL_RCC_OscConfig+0x500>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	429a      	cmp	r2, r3
 800125e:	d106      	bne.n	800126e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800126a:	429a      	cmp	r2, r3
 800126c:	d001      	beq.n	8001272 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40021000 	.word	0x40021000

08001280 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e0d0      	b.n	8001436 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001294:	4b6a      	ldr	r3, [pc, #424]	@ (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d910      	bls.n	80012c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012a2:	4b67      	ldr	r3, [pc, #412]	@ (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 0207 	bic.w	r2, r3, #7
 80012aa:	4965      	ldr	r1, [pc, #404]	@ (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012b2:	4b63      	ldr	r3, [pc, #396]	@ (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d001      	beq.n	80012c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e0b8      	b.n	8001436 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d020      	beq.n	8001312 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012dc:	4b59      	ldr	r3, [pc, #356]	@ (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	4a58      	ldr	r2, [pc, #352]	@ (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 80012e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80012e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0308 	and.w	r3, r3, #8
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012f4:	4b53      	ldr	r3, [pc, #332]	@ (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	4a52      	ldr	r2, [pc, #328]	@ (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 80012fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80012fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001300:	4b50      	ldr	r3, [pc, #320]	@ (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	494d      	ldr	r1, [pc, #308]	@ (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 800130e:	4313      	orrs	r3, r2
 8001310:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b00      	cmp	r3, #0
 800131c:	d040      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d107      	bne.n	8001336 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001326:	4b47      	ldr	r3, [pc, #284]	@ (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d115      	bne.n	800135e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e07f      	b.n	8001436 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b02      	cmp	r3, #2
 800133c:	d107      	bne.n	800134e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800133e:	4b41      	ldr	r3, [pc, #260]	@ (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d109      	bne.n	800135e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e073      	b.n	8001436 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134e:	4b3d      	ldr	r3, [pc, #244]	@ (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e06b      	b.n	8001436 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800135e:	4b39      	ldr	r3, [pc, #228]	@ (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f023 0203 	bic.w	r2, r3, #3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4936      	ldr	r1, [pc, #216]	@ (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001370:	f7ff fa0a 	bl	8000788 <HAL_GetTick>
 8001374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001376:	e00a      	b.n	800138e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001378:	f7ff fa06 	bl	8000788 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001386:	4293      	cmp	r3, r2
 8001388:	d901      	bls.n	800138e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e053      	b.n	8001436 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138e:	4b2d      	ldr	r3, [pc, #180]	@ (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 020c 	and.w	r2, r3, #12
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	429a      	cmp	r2, r3
 800139e:	d1eb      	bne.n	8001378 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013a0:	4b27      	ldr	r3, [pc, #156]	@ (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d210      	bcs.n	80013d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ae:	4b24      	ldr	r3, [pc, #144]	@ (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 0207 	bic.w	r2, r3, #7
 80013b6:	4922      	ldr	r1, [pc, #136]	@ (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013be:	4b20      	ldr	r3, [pc, #128]	@ (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d001      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e032      	b.n	8001436 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d008      	beq.n	80013ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013dc:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	4916      	ldr	r1, [pc, #88]	@ (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d009      	beq.n	800140e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013fa:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	490e      	ldr	r1, [pc, #56]	@ (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	4313      	orrs	r3, r2
 800140c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800140e:	f000 f821 	bl	8001454 <HAL_RCC_GetSysClockFreq>
 8001412:	4602      	mov	r2, r0
 8001414:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	091b      	lsrs	r3, r3, #4
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	490a      	ldr	r1, [pc, #40]	@ (8001448 <HAL_RCC_ClockConfig+0x1c8>)
 8001420:	5ccb      	ldrb	r3, [r1, r3]
 8001422:	fa22 f303 	lsr.w	r3, r2, r3
 8001426:	4a09      	ldr	r2, [pc, #36]	@ (800144c <HAL_RCC_ClockConfig+0x1cc>)
 8001428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800142a:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <HAL_RCC_ClockConfig+0x1d0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f968 	bl	8000704 <HAL_InitTick>

  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40022000 	.word	0x40022000
 8001444:	40021000 	.word	0x40021000
 8001448:	0800296c 	.word	0x0800296c
 800144c:	20000000 	.word	0x20000000
 8001450:	20000004 	.word	0x20000004

08001454 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001454:	b480      	push	{r7}
 8001456:	b087      	sub	sp, #28
 8001458:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800146e:	4b1e      	ldr	r3, [pc, #120]	@ (80014e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	2b04      	cmp	r3, #4
 800147c:	d002      	beq.n	8001484 <HAL_RCC_GetSysClockFreq+0x30>
 800147e:	2b08      	cmp	r3, #8
 8001480:	d003      	beq.n	800148a <HAL_RCC_GetSysClockFreq+0x36>
 8001482:	e027      	b.n	80014d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001484:	4b19      	ldr	r3, [pc, #100]	@ (80014ec <HAL_RCC_GetSysClockFreq+0x98>)
 8001486:	613b      	str	r3, [r7, #16]
      break;
 8001488:	e027      	b.n	80014da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	0c9b      	lsrs	r3, r3, #18
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	4a17      	ldr	r2, [pc, #92]	@ (80014f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001494:	5cd3      	ldrb	r3, [r2, r3]
 8001496:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d010      	beq.n	80014c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014a2:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	0c5b      	lsrs	r3, r3, #17
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	4a11      	ldr	r2, [pc, #68]	@ (80014f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014ae:	5cd3      	ldrb	r3, [r2, r3]
 80014b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a0d      	ldr	r2, [pc, #52]	@ (80014ec <HAL_RCC_GetSysClockFreq+0x98>)
 80014b6:	fb03 f202 	mul.w	r2, r3, r2
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	e004      	b.n	80014ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a0c      	ldr	r2, [pc, #48]	@ (80014f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80014c8:	fb02 f303 	mul.w	r3, r2, r3
 80014cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	613b      	str	r3, [r7, #16]
      break;
 80014d2:	e002      	b.n	80014da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <HAL_RCC_GetSysClockFreq+0x98>)
 80014d6:	613b      	str	r3, [r7, #16]
      break;
 80014d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014da:	693b      	ldr	r3, [r7, #16]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	371c      	adds	r7, #28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000
 80014ec:	007a1200 	.word	0x007a1200
 80014f0:	08002984 	.word	0x08002984
 80014f4:	08002994 	.word	0x08002994
 80014f8:	003d0900 	.word	0x003d0900

080014fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001500:	4b02      	ldr	r3, [pc, #8]	@ (800150c <HAL_RCC_GetHCLKFreq+0x10>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	20000000 	.word	0x20000000

08001510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001514:	f7ff fff2 	bl	80014fc <HAL_RCC_GetHCLKFreq>
 8001518:	4602      	mov	r2, r0
 800151a:	4b05      	ldr	r3, [pc, #20]	@ (8001530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	0a1b      	lsrs	r3, r3, #8
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	4903      	ldr	r1, [pc, #12]	@ (8001534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001526:	5ccb      	ldrb	r3, [r1, r3]
 8001528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800152c:	4618      	mov	r0, r3
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40021000 	.word	0x40021000
 8001534:	0800297c 	.word	0x0800297c

08001538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800153c:	f7ff ffde 	bl	80014fc <HAL_RCC_GetHCLKFreq>
 8001540:	4602      	mov	r2, r0
 8001542:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	0adb      	lsrs	r3, r3, #11
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	4903      	ldr	r1, [pc, #12]	@ (800155c <HAL_RCC_GetPCLK2Freq+0x24>)
 800154e:	5ccb      	ldrb	r3, [r1, r3]
 8001550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001554:	4618      	mov	r0, r3
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40021000 	.word	0x40021000
 800155c:	0800297c 	.word	0x0800297c

08001560 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001568:	4b0a      	ldr	r3, [pc, #40]	@ (8001594 <RCC_Delay+0x34>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a0a      	ldr	r2, [pc, #40]	@ (8001598 <RCC_Delay+0x38>)
 800156e:	fba2 2303 	umull	r2, r3, r2, r3
 8001572:	0a5b      	lsrs	r3, r3, #9
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	fb02 f303 	mul.w	r3, r2, r3
 800157a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800157c:	bf00      	nop
  }
  while (Delay --);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	1e5a      	subs	r2, r3, #1
 8001582:	60fa      	str	r2, [r7, #12]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1f9      	bne.n	800157c <RCC_Delay+0x1c>
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	20000000 	.word	0x20000000
 8001598:	10624dd3 	.word	0x10624dd3

0800159c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e042      	b.n	8001634 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d106      	bne.n	80015c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7fe ff5a 	bl	800047c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2224      	movs	r2, #36	@ 0x24
 80015cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80015de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f000 f971 	bl	80018c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	691a      	ldr	r2, [r3, #16]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80015f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	695a      	ldr	r2, [r3, #20]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001604:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68da      	ldr	r2, [r3, #12]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001614:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2220      	movs	r2, #32
 8001620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2220      	movs	r2, #32
 8001628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	@ 0x28
 8001640:	af02      	add	r7, sp, #8
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	4613      	mov	r3, r2
 800164a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b20      	cmp	r3, #32
 800165a:	d175      	bne.n	8001748 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d002      	beq.n	8001668 <HAL_UART_Transmit+0x2c>
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e06e      	b.n	800174a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2221      	movs	r2, #33	@ 0x21
 8001676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800167a:	f7ff f885 	bl	8000788 <HAL_GetTick>
 800167e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	88fa      	ldrh	r2, [r7, #6]
 8001684:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	88fa      	ldrh	r2, [r7, #6]
 800168a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001694:	d108      	bne.n	80016a8 <HAL_UART_Transmit+0x6c>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d104      	bne.n	80016a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	e003      	b.n	80016b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80016b0:	e02e      	b.n	8001710 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2200      	movs	r2, #0
 80016ba:	2180      	movs	r1, #128	@ 0x80
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f000 f848 	bl	8001752 <UART_WaitOnFlagUntilTimeout>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2220      	movs	r2, #32
 80016cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e03a      	b.n	800174a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10b      	bne.n	80016f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80016e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	3302      	adds	r3, #2
 80016ee:	61bb      	str	r3, [r7, #24]
 80016f0:	e007      	b.n	8001702 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	781a      	ldrb	r2, [r3, #0]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	3301      	adds	r3, #1
 8001700:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001706:	b29b      	uxth	r3, r3
 8001708:	3b01      	subs	r3, #1
 800170a:	b29a      	uxth	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001714:	b29b      	uxth	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1cb      	bne.n	80016b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	2200      	movs	r2, #0
 8001722:	2140      	movs	r1, #64	@ 0x40
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f000 f814 	bl	8001752 <UART_WaitOnFlagUntilTimeout>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2220      	movs	r2, #32
 8001734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e006      	b.n	800174a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2220      	movs	r2, #32
 8001740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	e000      	b.n	800174a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001748:	2302      	movs	r3, #2
  }
}
 800174a:	4618      	mov	r0, r3
 800174c:	3720      	adds	r7, #32
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	603b      	str	r3, [r7, #0]
 800175e:	4613      	mov	r3, r2
 8001760:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001762:	e03b      	b.n	80017dc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001764:	6a3b      	ldr	r3, [r7, #32]
 8001766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176a:	d037      	beq.n	80017dc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800176c:	f7ff f80c 	bl	8000788 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	6a3a      	ldr	r2, [r7, #32]
 8001778:	429a      	cmp	r2, r3
 800177a:	d302      	bcc.n	8001782 <UART_WaitOnFlagUntilTimeout+0x30>
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e03a      	b.n	80017fc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d023      	beq.n	80017dc <UART_WaitOnFlagUntilTimeout+0x8a>
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	2b80      	cmp	r3, #128	@ 0x80
 8001798:	d020      	beq.n	80017dc <UART_WaitOnFlagUntilTimeout+0x8a>
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	2b40      	cmp	r3, #64	@ 0x40
 800179e:	d01d      	beq.n	80017dc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d116      	bne.n	80017dc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f000 f81d 	bl	8001804 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2208      	movs	r2, #8
 80017ce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e00f      	b.n	80017fc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	4013      	ands	r3, r2
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	bf0c      	ite	eq
 80017ec:	2301      	moveq	r3, #1
 80017ee:	2300      	movne	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	461a      	mov	r2, r3
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d0b4      	beq.n	8001764 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001804:	b480      	push	{r7}
 8001806:	b095      	sub	sp, #84	@ 0x54
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	330c      	adds	r3, #12
 8001812:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001816:	e853 3f00 	ldrex	r3, [r3]
 800181a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800181c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800181e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001822:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	330c      	adds	r3, #12
 800182a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800182c:	643a      	str	r2, [r7, #64]	@ 0x40
 800182e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001830:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001832:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001834:	e841 2300 	strex	r3, r2, [r1]
 8001838:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800183a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1e5      	bne.n	800180c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	3314      	adds	r3, #20
 8001846:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	e853 3f00 	ldrex	r3, [r3]
 800184e:	61fb      	str	r3, [r7, #28]
   return(result);
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f023 0301 	bic.w	r3, r3, #1
 8001856:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3314      	adds	r3, #20
 800185e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001860:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001862:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001864:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001868:	e841 2300 	strex	r3, r2, [r1]
 800186c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800186e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1e5      	bne.n	8001840 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001878:	2b01      	cmp	r3, #1
 800187a:	d119      	bne.n	80018b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	330c      	adds	r3, #12
 8001882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	e853 3f00 	ldrex	r3, [r3]
 800188a:	60bb      	str	r3, [r7, #8]
   return(result);
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	f023 0310 	bic.w	r3, r3, #16
 8001892:	647b      	str	r3, [r7, #68]	@ 0x44
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	330c      	adds	r3, #12
 800189a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800189c:	61ba      	str	r2, [r7, #24]
 800189e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018a0:	6979      	ldr	r1, [r7, #20]
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	e841 2300 	strex	r3, r2, [r1]
 80018a8:	613b      	str	r3, [r7, #16]
   return(result);
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1e5      	bne.n	800187c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2220      	movs	r2, #32
 80018b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80018be:	bf00      	nop
 80018c0:	3754      	adds	r7, #84	@ 0x54
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001902:	f023 030c 	bic.w	r3, r3, #12
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	68b9      	ldr	r1, [r7, #8]
 800190c:	430b      	orrs	r3, r1
 800190e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699a      	ldr	r2, [r3, #24]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a2c      	ldr	r2, [pc, #176]	@ (80019dc <UART_SetConfig+0x114>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d103      	bne.n	8001938 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001930:	f7ff fe02 	bl	8001538 <HAL_RCC_GetPCLK2Freq>
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	e002      	b.n	800193e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001938:	f7ff fdea 	bl	8001510 <HAL_RCC_GetPCLK1Freq>
 800193c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	009a      	lsls	r2, r3, #2
 8001948:	441a      	add	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	fbb2 f3f3 	udiv	r3, r2, r3
 8001954:	4a22      	ldr	r2, [pc, #136]	@ (80019e0 <UART_SetConfig+0x118>)
 8001956:	fba2 2303 	umull	r2, r3, r2, r3
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	0119      	lsls	r1, r3, #4
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	009a      	lsls	r2, r3, #2
 8001968:	441a      	add	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	fbb2 f2f3 	udiv	r2, r2, r3
 8001974:	4b1a      	ldr	r3, [pc, #104]	@ (80019e0 <UART_SetConfig+0x118>)
 8001976:	fba3 0302 	umull	r0, r3, r3, r2
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	2064      	movs	r0, #100	@ 0x64
 800197e:	fb00 f303 	mul.w	r3, r0, r3
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	011b      	lsls	r3, r3, #4
 8001986:	3332      	adds	r3, #50	@ 0x32
 8001988:	4a15      	ldr	r2, [pc, #84]	@ (80019e0 <UART_SetConfig+0x118>)
 800198a:	fba2 2303 	umull	r2, r3, r2, r3
 800198e:	095b      	lsrs	r3, r3, #5
 8001990:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001994:	4419      	add	r1, r3
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	009a      	lsls	r2, r3, #2
 80019a0:	441a      	add	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80019ac:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <UART_SetConfig+0x118>)
 80019ae:	fba3 0302 	umull	r0, r3, r3, r2
 80019b2:	095b      	lsrs	r3, r3, #5
 80019b4:	2064      	movs	r0, #100	@ 0x64
 80019b6:	fb00 f303 	mul.w	r3, r0, r3
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	3332      	adds	r3, #50	@ 0x32
 80019c0:	4a07      	ldr	r2, [pc, #28]	@ (80019e0 <UART_SetConfig+0x118>)
 80019c2:	fba2 2303 	umull	r2, r3, r2, r3
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	f003 020f 	and.w	r2, r3, #15
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	440a      	add	r2, r1
 80019d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40013800 	.word	0x40013800
 80019e0:	51eb851f 	.word	0x51eb851f

080019e4 <std>:
 80019e4:	2300      	movs	r3, #0
 80019e6:	b510      	push	{r4, lr}
 80019e8:	4604      	mov	r4, r0
 80019ea:	e9c0 3300 	strd	r3, r3, [r0]
 80019ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80019f2:	6083      	str	r3, [r0, #8]
 80019f4:	8181      	strh	r1, [r0, #12]
 80019f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80019f8:	81c2      	strh	r2, [r0, #14]
 80019fa:	6183      	str	r3, [r0, #24]
 80019fc:	4619      	mov	r1, r3
 80019fe:	2208      	movs	r2, #8
 8001a00:	305c      	adds	r0, #92	@ 0x5c
 8001a02:	f000 f9f9 	bl	8001df8 <memset>
 8001a06:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <std+0x58>)
 8001a08:	6224      	str	r4, [r4, #32]
 8001a0a:	6263      	str	r3, [r4, #36]	@ 0x24
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a40 <std+0x5c>)
 8001a0e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001a10:	4b0c      	ldr	r3, [pc, #48]	@ (8001a44 <std+0x60>)
 8001a12:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001a14:	4b0c      	ldr	r3, [pc, #48]	@ (8001a48 <std+0x64>)
 8001a16:	6323      	str	r3, [r4, #48]	@ 0x30
 8001a18:	4b0c      	ldr	r3, [pc, #48]	@ (8001a4c <std+0x68>)
 8001a1a:	429c      	cmp	r4, r3
 8001a1c:	d006      	beq.n	8001a2c <std+0x48>
 8001a1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001a22:	4294      	cmp	r4, r2
 8001a24:	d002      	beq.n	8001a2c <std+0x48>
 8001a26:	33d0      	adds	r3, #208	@ 0xd0
 8001a28:	429c      	cmp	r4, r3
 8001a2a:	d105      	bne.n	8001a38 <std+0x54>
 8001a2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a34:	f000 ba58 	b.w	8001ee8 <__retarget_lock_init_recursive>
 8001a38:	bd10      	pop	{r4, pc}
 8001a3a:	bf00      	nop
 8001a3c:	08001c49 	.word	0x08001c49
 8001a40:	08001c6b 	.word	0x08001c6b
 8001a44:	08001ca3 	.word	0x08001ca3
 8001a48:	08001cc7 	.word	0x08001cc7
 8001a4c:	200000d8 	.word	0x200000d8

08001a50 <stdio_exit_handler>:
 8001a50:	4a02      	ldr	r2, [pc, #8]	@ (8001a5c <stdio_exit_handler+0xc>)
 8001a52:	4903      	ldr	r1, [pc, #12]	@ (8001a60 <stdio_exit_handler+0x10>)
 8001a54:	4803      	ldr	r0, [pc, #12]	@ (8001a64 <stdio_exit_handler+0x14>)
 8001a56:	f000 b869 	b.w	8001b2c <_fwalk_sglue>
 8001a5a:	bf00      	nop
 8001a5c:	2000000c 	.word	0x2000000c
 8001a60:	0800277d 	.word	0x0800277d
 8001a64:	2000001c 	.word	0x2000001c

08001a68 <cleanup_stdio>:
 8001a68:	6841      	ldr	r1, [r0, #4]
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <cleanup_stdio+0x34>)
 8001a6c:	b510      	push	{r4, lr}
 8001a6e:	4299      	cmp	r1, r3
 8001a70:	4604      	mov	r4, r0
 8001a72:	d001      	beq.n	8001a78 <cleanup_stdio+0x10>
 8001a74:	f000 fe82 	bl	800277c <_fflush_r>
 8001a78:	68a1      	ldr	r1, [r4, #8]
 8001a7a:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <cleanup_stdio+0x38>)
 8001a7c:	4299      	cmp	r1, r3
 8001a7e:	d002      	beq.n	8001a86 <cleanup_stdio+0x1e>
 8001a80:	4620      	mov	r0, r4
 8001a82:	f000 fe7b 	bl	800277c <_fflush_r>
 8001a86:	68e1      	ldr	r1, [r4, #12]
 8001a88:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <cleanup_stdio+0x3c>)
 8001a8a:	4299      	cmp	r1, r3
 8001a8c:	d004      	beq.n	8001a98 <cleanup_stdio+0x30>
 8001a8e:	4620      	mov	r0, r4
 8001a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a94:	f000 be72 	b.w	800277c <_fflush_r>
 8001a98:	bd10      	pop	{r4, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200000d8 	.word	0x200000d8
 8001aa0:	20000140 	.word	0x20000140
 8001aa4:	200001a8 	.word	0x200001a8

08001aa8 <global_stdio_init.part.0>:
 8001aa8:	b510      	push	{r4, lr}
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <global_stdio_init.part.0+0x30>)
 8001aac:	4c0b      	ldr	r4, [pc, #44]	@ (8001adc <global_stdio_init.part.0+0x34>)
 8001aae:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae0 <global_stdio_init.part.0+0x38>)
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	2104      	movs	r1, #4
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f7ff ff94 	bl	80019e4 <std>
 8001abc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2109      	movs	r1, #9
 8001ac4:	f7ff ff8e 	bl	80019e4 <std>
 8001ac8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001acc:	2202      	movs	r2, #2
 8001ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ad2:	2112      	movs	r1, #18
 8001ad4:	f7ff bf86 	b.w	80019e4 <std>
 8001ad8:	20000210 	.word	0x20000210
 8001adc:	200000d8 	.word	0x200000d8
 8001ae0:	08001a51 	.word	0x08001a51

08001ae4 <__sfp_lock_acquire>:
 8001ae4:	4801      	ldr	r0, [pc, #4]	@ (8001aec <__sfp_lock_acquire+0x8>)
 8001ae6:	f000 ba00 	b.w	8001eea <__retarget_lock_acquire_recursive>
 8001aea:	bf00      	nop
 8001aec:	20000219 	.word	0x20000219

08001af0 <__sfp_lock_release>:
 8001af0:	4801      	ldr	r0, [pc, #4]	@ (8001af8 <__sfp_lock_release+0x8>)
 8001af2:	f000 b9fb 	b.w	8001eec <__retarget_lock_release_recursive>
 8001af6:	bf00      	nop
 8001af8:	20000219 	.word	0x20000219

08001afc <__sinit>:
 8001afc:	b510      	push	{r4, lr}
 8001afe:	4604      	mov	r4, r0
 8001b00:	f7ff fff0 	bl	8001ae4 <__sfp_lock_acquire>
 8001b04:	6a23      	ldr	r3, [r4, #32]
 8001b06:	b11b      	cbz	r3, 8001b10 <__sinit+0x14>
 8001b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b0c:	f7ff bff0 	b.w	8001af0 <__sfp_lock_release>
 8001b10:	4b04      	ldr	r3, [pc, #16]	@ (8001b24 <__sinit+0x28>)
 8001b12:	6223      	str	r3, [r4, #32]
 8001b14:	4b04      	ldr	r3, [pc, #16]	@ (8001b28 <__sinit+0x2c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f5      	bne.n	8001b08 <__sinit+0xc>
 8001b1c:	f7ff ffc4 	bl	8001aa8 <global_stdio_init.part.0>
 8001b20:	e7f2      	b.n	8001b08 <__sinit+0xc>
 8001b22:	bf00      	nop
 8001b24:	08001a69 	.word	0x08001a69
 8001b28:	20000210 	.word	0x20000210

08001b2c <_fwalk_sglue>:
 8001b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b30:	4607      	mov	r7, r0
 8001b32:	4688      	mov	r8, r1
 8001b34:	4614      	mov	r4, r2
 8001b36:	2600      	movs	r6, #0
 8001b38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001b3c:	f1b9 0901 	subs.w	r9, r9, #1
 8001b40:	d505      	bpl.n	8001b4e <_fwalk_sglue+0x22>
 8001b42:	6824      	ldr	r4, [r4, #0]
 8001b44:	2c00      	cmp	r4, #0
 8001b46:	d1f7      	bne.n	8001b38 <_fwalk_sglue+0xc>
 8001b48:	4630      	mov	r0, r6
 8001b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b4e:	89ab      	ldrh	r3, [r5, #12]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d907      	bls.n	8001b64 <_fwalk_sglue+0x38>
 8001b54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	d003      	beq.n	8001b64 <_fwalk_sglue+0x38>
 8001b5c:	4629      	mov	r1, r5
 8001b5e:	4638      	mov	r0, r7
 8001b60:	47c0      	blx	r8
 8001b62:	4306      	orrs	r6, r0
 8001b64:	3568      	adds	r5, #104	@ 0x68
 8001b66:	e7e9      	b.n	8001b3c <_fwalk_sglue+0x10>

08001b68 <iprintf>:
 8001b68:	b40f      	push	{r0, r1, r2, r3}
 8001b6a:	b507      	push	{r0, r1, r2, lr}
 8001b6c:	4906      	ldr	r1, [pc, #24]	@ (8001b88 <iprintf+0x20>)
 8001b6e:	ab04      	add	r3, sp, #16
 8001b70:	6808      	ldr	r0, [r1, #0]
 8001b72:	f853 2b04 	ldr.w	r2, [r3], #4
 8001b76:	6881      	ldr	r1, [r0, #8]
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	f000 fad7 	bl	800212c <_vfiprintf_r>
 8001b7e:	b003      	add	sp, #12
 8001b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8001b84:	b004      	add	sp, #16
 8001b86:	4770      	bx	lr
 8001b88:	20000018 	.word	0x20000018

08001b8c <_puts_r>:
 8001b8c:	6a03      	ldr	r3, [r0, #32]
 8001b8e:	b570      	push	{r4, r5, r6, lr}
 8001b90:	4605      	mov	r5, r0
 8001b92:	460e      	mov	r6, r1
 8001b94:	6884      	ldr	r4, [r0, #8]
 8001b96:	b90b      	cbnz	r3, 8001b9c <_puts_r+0x10>
 8001b98:	f7ff ffb0 	bl	8001afc <__sinit>
 8001b9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001b9e:	07db      	lsls	r3, r3, #31
 8001ba0:	d405      	bmi.n	8001bae <_puts_r+0x22>
 8001ba2:	89a3      	ldrh	r3, [r4, #12]
 8001ba4:	0598      	lsls	r0, r3, #22
 8001ba6:	d402      	bmi.n	8001bae <_puts_r+0x22>
 8001ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001baa:	f000 f99e 	bl	8001eea <__retarget_lock_acquire_recursive>
 8001bae:	89a3      	ldrh	r3, [r4, #12]
 8001bb0:	0719      	lsls	r1, r3, #28
 8001bb2:	d502      	bpl.n	8001bba <_puts_r+0x2e>
 8001bb4:	6923      	ldr	r3, [r4, #16]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d135      	bne.n	8001c26 <_puts_r+0x9a>
 8001bba:	4621      	mov	r1, r4
 8001bbc:	4628      	mov	r0, r5
 8001bbe:	f000 f8c5 	bl	8001d4c <__swsetup_r>
 8001bc2:	b380      	cbz	r0, 8001c26 <_puts_r+0x9a>
 8001bc4:	f04f 35ff 	mov.w	r5, #4294967295
 8001bc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001bca:	07da      	lsls	r2, r3, #31
 8001bcc:	d405      	bmi.n	8001bda <_puts_r+0x4e>
 8001bce:	89a3      	ldrh	r3, [r4, #12]
 8001bd0:	059b      	lsls	r3, r3, #22
 8001bd2:	d402      	bmi.n	8001bda <_puts_r+0x4e>
 8001bd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001bd6:	f000 f989 	bl	8001eec <__retarget_lock_release_recursive>
 8001bda:	4628      	mov	r0, r5
 8001bdc:	bd70      	pop	{r4, r5, r6, pc}
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	da04      	bge.n	8001bec <_puts_r+0x60>
 8001be2:	69a2      	ldr	r2, [r4, #24]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	dc17      	bgt.n	8001c18 <_puts_r+0x8c>
 8001be8:	290a      	cmp	r1, #10
 8001bea:	d015      	beq.n	8001c18 <_puts_r+0x8c>
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	6022      	str	r2, [r4, #0]
 8001bf2:	7019      	strb	r1, [r3, #0]
 8001bf4:	68a3      	ldr	r3, [r4, #8]
 8001bf6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	60a3      	str	r3, [r4, #8]
 8001bfe:	2900      	cmp	r1, #0
 8001c00:	d1ed      	bne.n	8001bde <_puts_r+0x52>
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	da11      	bge.n	8001c2a <_puts_r+0x9e>
 8001c06:	4622      	mov	r2, r4
 8001c08:	210a      	movs	r1, #10
 8001c0a:	4628      	mov	r0, r5
 8001c0c:	f000 f85f 	bl	8001cce <__swbuf_r>
 8001c10:	3001      	adds	r0, #1
 8001c12:	d0d7      	beq.n	8001bc4 <_puts_r+0x38>
 8001c14:	250a      	movs	r5, #10
 8001c16:	e7d7      	b.n	8001bc8 <_puts_r+0x3c>
 8001c18:	4622      	mov	r2, r4
 8001c1a:	4628      	mov	r0, r5
 8001c1c:	f000 f857 	bl	8001cce <__swbuf_r>
 8001c20:	3001      	adds	r0, #1
 8001c22:	d1e7      	bne.n	8001bf4 <_puts_r+0x68>
 8001c24:	e7ce      	b.n	8001bc4 <_puts_r+0x38>
 8001c26:	3e01      	subs	r6, #1
 8001c28:	e7e4      	b.n	8001bf4 <_puts_r+0x68>
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	6022      	str	r2, [r4, #0]
 8001c30:	220a      	movs	r2, #10
 8001c32:	701a      	strb	r2, [r3, #0]
 8001c34:	e7ee      	b.n	8001c14 <_puts_r+0x88>
	...

08001c38 <puts>:
 8001c38:	4b02      	ldr	r3, [pc, #8]	@ (8001c44 <puts+0xc>)
 8001c3a:	4601      	mov	r1, r0
 8001c3c:	6818      	ldr	r0, [r3, #0]
 8001c3e:	f7ff bfa5 	b.w	8001b8c <_puts_r>
 8001c42:	bf00      	nop
 8001c44:	20000018 	.word	0x20000018

08001c48 <__sread>:
 8001c48:	b510      	push	{r4, lr}
 8001c4a:	460c      	mov	r4, r1
 8001c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c50:	f000 f8fc 	bl	8001e4c <_read_r>
 8001c54:	2800      	cmp	r0, #0
 8001c56:	bfab      	itete	ge
 8001c58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001c5a:	89a3      	ldrhlt	r3, [r4, #12]
 8001c5c:	181b      	addge	r3, r3, r0
 8001c5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001c62:	bfac      	ite	ge
 8001c64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001c66:	81a3      	strhlt	r3, [r4, #12]
 8001c68:	bd10      	pop	{r4, pc}

08001c6a <__swrite>:
 8001c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c6e:	461f      	mov	r7, r3
 8001c70:	898b      	ldrh	r3, [r1, #12]
 8001c72:	4605      	mov	r5, r0
 8001c74:	05db      	lsls	r3, r3, #23
 8001c76:	460c      	mov	r4, r1
 8001c78:	4616      	mov	r6, r2
 8001c7a:	d505      	bpl.n	8001c88 <__swrite+0x1e>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c84:	f000 f8d0 	bl	8001e28 <_lseek_r>
 8001c88:	89a3      	ldrh	r3, [r4, #12]
 8001c8a:	4632      	mov	r2, r6
 8001c8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c90:	81a3      	strh	r3, [r4, #12]
 8001c92:	4628      	mov	r0, r5
 8001c94:	463b      	mov	r3, r7
 8001c96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c9e:	f000 b8e7 	b.w	8001e70 <_write_r>

08001ca2 <__sseek>:
 8001ca2:	b510      	push	{r4, lr}
 8001ca4:	460c      	mov	r4, r1
 8001ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001caa:	f000 f8bd 	bl	8001e28 <_lseek_r>
 8001cae:	1c43      	adds	r3, r0, #1
 8001cb0:	89a3      	ldrh	r3, [r4, #12]
 8001cb2:	bf15      	itete	ne
 8001cb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001cb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001cba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001cbe:	81a3      	strheq	r3, [r4, #12]
 8001cc0:	bf18      	it	ne
 8001cc2:	81a3      	strhne	r3, [r4, #12]
 8001cc4:	bd10      	pop	{r4, pc}

08001cc6 <__sclose>:
 8001cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cca:	f000 b89d 	b.w	8001e08 <_close_r>

08001cce <__swbuf_r>:
 8001cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cd0:	460e      	mov	r6, r1
 8001cd2:	4614      	mov	r4, r2
 8001cd4:	4605      	mov	r5, r0
 8001cd6:	b118      	cbz	r0, 8001ce0 <__swbuf_r+0x12>
 8001cd8:	6a03      	ldr	r3, [r0, #32]
 8001cda:	b90b      	cbnz	r3, 8001ce0 <__swbuf_r+0x12>
 8001cdc:	f7ff ff0e 	bl	8001afc <__sinit>
 8001ce0:	69a3      	ldr	r3, [r4, #24]
 8001ce2:	60a3      	str	r3, [r4, #8]
 8001ce4:	89a3      	ldrh	r3, [r4, #12]
 8001ce6:	071a      	lsls	r2, r3, #28
 8001ce8:	d501      	bpl.n	8001cee <__swbuf_r+0x20>
 8001cea:	6923      	ldr	r3, [r4, #16]
 8001cec:	b943      	cbnz	r3, 8001d00 <__swbuf_r+0x32>
 8001cee:	4621      	mov	r1, r4
 8001cf0:	4628      	mov	r0, r5
 8001cf2:	f000 f82b 	bl	8001d4c <__swsetup_r>
 8001cf6:	b118      	cbz	r0, 8001d00 <__swbuf_r+0x32>
 8001cf8:	f04f 37ff 	mov.w	r7, #4294967295
 8001cfc:	4638      	mov	r0, r7
 8001cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d00:	6823      	ldr	r3, [r4, #0]
 8001d02:	6922      	ldr	r2, [r4, #16]
 8001d04:	b2f6      	uxtb	r6, r6
 8001d06:	1a98      	subs	r0, r3, r2
 8001d08:	6963      	ldr	r3, [r4, #20]
 8001d0a:	4637      	mov	r7, r6
 8001d0c:	4283      	cmp	r3, r0
 8001d0e:	dc05      	bgt.n	8001d1c <__swbuf_r+0x4e>
 8001d10:	4621      	mov	r1, r4
 8001d12:	4628      	mov	r0, r5
 8001d14:	f000 fd32 	bl	800277c <_fflush_r>
 8001d18:	2800      	cmp	r0, #0
 8001d1a:	d1ed      	bne.n	8001cf8 <__swbuf_r+0x2a>
 8001d1c:	68a3      	ldr	r3, [r4, #8]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	60a3      	str	r3, [r4, #8]
 8001d22:	6823      	ldr	r3, [r4, #0]
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	6022      	str	r2, [r4, #0]
 8001d28:	701e      	strb	r6, [r3, #0]
 8001d2a:	6962      	ldr	r2, [r4, #20]
 8001d2c:	1c43      	adds	r3, r0, #1
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d004      	beq.n	8001d3c <__swbuf_r+0x6e>
 8001d32:	89a3      	ldrh	r3, [r4, #12]
 8001d34:	07db      	lsls	r3, r3, #31
 8001d36:	d5e1      	bpl.n	8001cfc <__swbuf_r+0x2e>
 8001d38:	2e0a      	cmp	r6, #10
 8001d3a:	d1df      	bne.n	8001cfc <__swbuf_r+0x2e>
 8001d3c:	4621      	mov	r1, r4
 8001d3e:	4628      	mov	r0, r5
 8001d40:	f000 fd1c 	bl	800277c <_fflush_r>
 8001d44:	2800      	cmp	r0, #0
 8001d46:	d0d9      	beq.n	8001cfc <__swbuf_r+0x2e>
 8001d48:	e7d6      	b.n	8001cf8 <__swbuf_r+0x2a>
	...

08001d4c <__swsetup_r>:
 8001d4c:	b538      	push	{r3, r4, r5, lr}
 8001d4e:	4b29      	ldr	r3, [pc, #164]	@ (8001df4 <__swsetup_r+0xa8>)
 8001d50:	4605      	mov	r5, r0
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	460c      	mov	r4, r1
 8001d56:	b118      	cbz	r0, 8001d60 <__swsetup_r+0x14>
 8001d58:	6a03      	ldr	r3, [r0, #32]
 8001d5a:	b90b      	cbnz	r3, 8001d60 <__swsetup_r+0x14>
 8001d5c:	f7ff fece 	bl	8001afc <__sinit>
 8001d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d64:	0719      	lsls	r1, r3, #28
 8001d66:	d422      	bmi.n	8001dae <__swsetup_r+0x62>
 8001d68:	06da      	lsls	r2, r3, #27
 8001d6a:	d407      	bmi.n	8001d7c <__swsetup_r+0x30>
 8001d6c:	2209      	movs	r2, #9
 8001d6e:	602a      	str	r2, [r5, #0]
 8001d70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	81a3      	strh	r3, [r4, #12]
 8001d7a:	e033      	b.n	8001de4 <__swsetup_r+0x98>
 8001d7c:	0758      	lsls	r0, r3, #29
 8001d7e:	d512      	bpl.n	8001da6 <__swsetup_r+0x5a>
 8001d80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001d82:	b141      	cbz	r1, 8001d96 <__swsetup_r+0x4a>
 8001d84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001d88:	4299      	cmp	r1, r3
 8001d8a:	d002      	beq.n	8001d92 <__swsetup_r+0x46>
 8001d8c:	4628      	mov	r0, r5
 8001d8e:	f000 f8af 	bl	8001ef0 <_free_r>
 8001d92:	2300      	movs	r3, #0
 8001d94:	6363      	str	r3, [r4, #52]	@ 0x34
 8001d96:	89a3      	ldrh	r3, [r4, #12]
 8001d98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001d9c:	81a3      	strh	r3, [r4, #12]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	6063      	str	r3, [r4, #4]
 8001da2:	6923      	ldr	r3, [r4, #16]
 8001da4:	6023      	str	r3, [r4, #0]
 8001da6:	89a3      	ldrh	r3, [r4, #12]
 8001da8:	f043 0308 	orr.w	r3, r3, #8
 8001dac:	81a3      	strh	r3, [r4, #12]
 8001dae:	6923      	ldr	r3, [r4, #16]
 8001db0:	b94b      	cbnz	r3, 8001dc6 <__swsetup_r+0x7a>
 8001db2:	89a3      	ldrh	r3, [r4, #12]
 8001db4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001db8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dbc:	d003      	beq.n	8001dc6 <__swsetup_r+0x7a>
 8001dbe:	4621      	mov	r1, r4
 8001dc0:	4628      	mov	r0, r5
 8001dc2:	f000 fd28 	bl	8002816 <__smakebuf_r>
 8001dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dca:	f013 0201 	ands.w	r2, r3, #1
 8001dce:	d00a      	beq.n	8001de6 <__swsetup_r+0x9a>
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	60a2      	str	r2, [r4, #8]
 8001dd4:	6962      	ldr	r2, [r4, #20]
 8001dd6:	4252      	negs	r2, r2
 8001dd8:	61a2      	str	r2, [r4, #24]
 8001dda:	6922      	ldr	r2, [r4, #16]
 8001ddc:	b942      	cbnz	r2, 8001df0 <__swsetup_r+0xa4>
 8001dde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001de2:	d1c5      	bne.n	8001d70 <__swsetup_r+0x24>
 8001de4:	bd38      	pop	{r3, r4, r5, pc}
 8001de6:	0799      	lsls	r1, r3, #30
 8001de8:	bf58      	it	pl
 8001dea:	6962      	ldrpl	r2, [r4, #20]
 8001dec:	60a2      	str	r2, [r4, #8]
 8001dee:	e7f4      	b.n	8001dda <__swsetup_r+0x8e>
 8001df0:	2000      	movs	r0, #0
 8001df2:	e7f7      	b.n	8001de4 <__swsetup_r+0x98>
 8001df4:	20000018 	.word	0x20000018

08001df8 <memset>:
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4402      	add	r2, r0
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d100      	bne.n	8001e02 <memset+0xa>
 8001e00:	4770      	bx	lr
 8001e02:	f803 1b01 	strb.w	r1, [r3], #1
 8001e06:	e7f9      	b.n	8001dfc <memset+0x4>

08001e08 <_close_r>:
 8001e08:	b538      	push	{r3, r4, r5, lr}
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	4d05      	ldr	r5, [pc, #20]	@ (8001e24 <_close_r+0x1c>)
 8001e0e:	4604      	mov	r4, r0
 8001e10:	4608      	mov	r0, r1
 8001e12:	602b      	str	r3, [r5, #0]
 8001e14:	f7fe fbcd 	bl	80005b2 <_close>
 8001e18:	1c43      	adds	r3, r0, #1
 8001e1a:	d102      	bne.n	8001e22 <_close_r+0x1a>
 8001e1c:	682b      	ldr	r3, [r5, #0]
 8001e1e:	b103      	cbz	r3, 8001e22 <_close_r+0x1a>
 8001e20:	6023      	str	r3, [r4, #0]
 8001e22:	bd38      	pop	{r3, r4, r5, pc}
 8001e24:	20000214 	.word	0x20000214

08001e28 <_lseek_r>:
 8001e28:	b538      	push	{r3, r4, r5, lr}
 8001e2a:	4604      	mov	r4, r0
 8001e2c:	4608      	mov	r0, r1
 8001e2e:	4611      	mov	r1, r2
 8001e30:	2200      	movs	r2, #0
 8001e32:	4d05      	ldr	r5, [pc, #20]	@ (8001e48 <_lseek_r+0x20>)
 8001e34:	602a      	str	r2, [r5, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	f7fe fbdf 	bl	80005fa <_lseek>
 8001e3c:	1c43      	adds	r3, r0, #1
 8001e3e:	d102      	bne.n	8001e46 <_lseek_r+0x1e>
 8001e40:	682b      	ldr	r3, [r5, #0]
 8001e42:	b103      	cbz	r3, 8001e46 <_lseek_r+0x1e>
 8001e44:	6023      	str	r3, [r4, #0]
 8001e46:	bd38      	pop	{r3, r4, r5, pc}
 8001e48:	20000214 	.word	0x20000214

08001e4c <_read_r>:
 8001e4c:	b538      	push	{r3, r4, r5, lr}
 8001e4e:	4604      	mov	r4, r0
 8001e50:	4608      	mov	r0, r1
 8001e52:	4611      	mov	r1, r2
 8001e54:	2200      	movs	r2, #0
 8001e56:	4d05      	ldr	r5, [pc, #20]	@ (8001e6c <_read_r+0x20>)
 8001e58:	602a      	str	r2, [r5, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f7fe fb8c 	bl	8000578 <_read>
 8001e60:	1c43      	adds	r3, r0, #1
 8001e62:	d102      	bne.n	8001e6a <_read_r+0x1e>
 8001e64:	682b      	ldr	r3, [r5, #0]
 8001e66:	b103      	cbz	r3, 8001e6a <_read_r+0x1e>
 8001e68:	6023      	str	r3, [r4, #0]
 8001e6a:	bd38      	pop	{r3, r4, r5, pc}
 8001e6c:	20000214 	.word	0x20000214

08001e70 <_write_r>:
 8001e70:	b538      	push	{r3, r4, r5, lr}
 8001e72:	4604      	mov	r4, r0
 8001e74:	4608      	mov	r0, r1
 8001e76:	4611      	mov	r1, r2
 8001e78:	2200      	movs	r2, #0
 8001e7a:	4d05      	ldr	r5, [pc, #20]	@ (8001e90 <_write_r+0x20>)
 8001e7c:	602a      	str	r2, [r5, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	f7fe fab4 	bl	80003ec <_write>
 8001e84:	1c43      	adds	r3, r0, #1
 8001e86:	d102      	bne.n	8001e8e <_write_r+0x1e>
 8001e88:	682b      	ldr	r3, [r5, #0]
 8001e8a:	b103      	cbz	r3, 8001e8e <_write_r+0x1e>
 8001e8c:	6023      	str	r3, [r4, #0]
 8001e8e:	bd38      	pop	{r3, r4, r5, pc}
 8001e90:	20000214 	.word	0x20000214

08001e94 <__errno>:
 8001e94:	4b01      	ldr	r3, [pc, #4]	@ (8001e9c <__errno+0x8>)
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000018 	.word	0x20000018

08001ea0 <__libc_init_array>:
 8001ea0:	b570      	push	{r4, r5, r6, lr}
 8001ea2:	2600      	movs	r6, #0
 8001ea4:	4d0c      	ldr	r5, [pc, #48]	@ (8001ed8 <__libc_init_array+0x38>)
 8001ea6:	4c0d      	ldr	r4, [pc, #52]	@ (8001edc <__libc_init_array+0x3c>)
 8001ea8:	1b64      	subs	r4, r4, r5
 8001eaa:	10a4      	asrs	r4, r4, #2
 8001eac:	42a6      	cmp	r6, r4
 8001eae:	d109      	bne.n	8001ec4 <__libc_init_array+0x24>
 8001eb0:	f000 fd2e 	bl	8002910 <_init>
 8001eb4:	2600      	movs	r6, #0
 8001eb6:	4d0a      	ldr	r5, [pc, #40]	@ (8001ee0 <__libc_init_array+0x40>)
 8001eb8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ee4 <__libc_init_array+0x44>)
 8001eba:	1b64      	subs	r4, r4, r5
 8001ebc:	10a4      	asrs	r4, r4, #2
 8001ebe:	42a6      	cmp	r6, r4
 8001ec0:	d105      	bne.n	8001ece <__libc_init_array+0x2e>
 8001ec2:	bd70      	pop	{r4, r5, r6, pc}
 8001ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ec8:	4798      	blx	r3
 8001eca:	3601      	adds	r6, #1
 8001ecc:	e7ee      	b.n	8001eac <__libc_init_array+0xc>
 8001ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ed2:	4798      	blx	r3
 8001ed4:	3601      	adds	r6, #1
 8001ed6:	e7f2      	b.n	8001ebe <__libc_init_array+0x1e>
 8001ed8:	080029cc 	.word	0x080029cc
 8001edc:	080029cc 	.word	0x080029cc
 8001ee0:	080029cc 	.word	0x080029cc
 8001ee4:	080029d0 	.word	0x080029d0

08001ee8 <__retarget_lock_init_recursive>:
 8001ee8:	4770      	bx	lr

08001eea <__retarget_lock_acquire_recursive>:
 8001eea:	4770      	bx	lr

08001eec <__retarget_lock_release_recursive>:
 8001eec:	4770      	bx	lr
	...

08001ef0 <_free_r>:
 8001ef0:	b538      	push	{r3, r4, r5, lr}
 8001ef2:	4605      	mov	r5, r0
 8001ef4:	2900      	cmp	r1, #0
 8001ef6:	d040      	beq.n	8001f7a <_free_r+0x8a>
 8001ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001efc:	1f0c      	subs	r4, r1, #4
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	bfb8      	it	lt
 8001f02:	18e4      	addlt	r4, r4, r3
 8001f04:	f000 f8de 	bl	80020c4 <__malloc_lock>
 8001f08:	4a1c      	ldr	r2, [pc, #112]	@ (8001f7c <_free_r+0x8c>)
 8001f0a:	6813      	ldr	r3, [r2, #0]
 8001f0c:	b933      	cbnz	r3, 8001f1c <_free_r+0x2c>
 8001f0e:	6063      	str	r3, [r4, #4]
 8001f10:	6014      	str	r4, [r2, #0]
 8001f12:	4628      	mov	r0, r5
 8001f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f18:	f000 b8da 	b.w	80020d0 <__malloc_unlock>
 8001f1c:	42a3      	cmp	r3, r4
 8001f1e:	d908      	bls.n	8001f32 <_free_r+0x42>
 8001f20:	6820      	ldr	r0, [r4, #0]
 8001f22:	1821      	adds	r1, r4, r0
 8001f24:	428b      	cmp	r3, r1
 8001f26:	bf01      	itttt	eq
 8001f28:	6819      	ldreq	r1, [r3, #0]
 8001f2a:	685b      	ldreq	r3, [r3, #4]
 8001f2c:	1809      	addeq	r1, r1, r0
 8001f2e:	6021      	streq	r1, [r4, #0]
 8001f30:	e7ed      	b.n	8001f0e <_free_r+0x1e>
 8001f32:	461a      	mov	r2, r3
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	b10b      	cbz	r3, 8001f3c <_free_r+0x4c>
 8001f38:	42a3      	cmp	r3, r4
 8001f3a:	d9fa      	bls.n	8001f32 <_free_r+0x42>
 8001f3c:	6811      	ldr	r1, [r2, #0]
 8001f3e:	1850      	adds	r0, r2, r1
 8001f40:	42a0      	cmp	r0, r4
 8001f42:	d10b      	bne.n	8001f5c <_free_r+0x6c>
 8001f44:	6820      	ldr	r0, [r4, #0]
 8001f46:	4401      	add	r1, r0
 8001f48:	1850      	adds	r0, r2, r1
 8001f4a:	4283      	cmp	r3, r0
 8001f4c:	6011      	str	r1, [r2, #0]
 8001f4e:	d1e0      	bne.n	8001f12 <_free_r+0x22>
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	4408      	add	r0, r1
 8001f56:	6010      	str	r0, [r2, #0]
 8001f58:	6053      	str	r3, [r2, #4]
 8001f5a:	e7da      	b.n	8001f12 <_free_r+0x22>
 8001f5c:	d902      	bls.n	8001f64 <_free_r+0x74>
 8001f5e:	230c      	movs	r3, #12
 8001f60:	602b      	str	r3, [r5, #0]
 8001f62:	e7d6      	b.n	8001f12 <_free_r+0x22>
 8001f64:	6820      	ldr	r0, [r4, #0]
 8001f66:	1821      	adds	r1, r4, r0
 8001f68:	428b      	cmp	r3, r1
 8001f6a:	bf01      	itttt	eq
 8001f6c:	6819      	ldreq	r1, [r3, #0]
 8001f6e:	685b      	ldreq	r3, [r3, #4]
 8001f70:	1809      	addeq	r1, r1, r0
 8001f72:	6021      	streq	r1, [r4, #0]
 8001f74:	6063      	str	r3, [r4, #4]
 8001f76:	6054      	str	r4, [r2, #4]
 8001f78:	e7cb      	b.n	8001f12 <_free_r+0x22>
 8001f7a:	bd38      	pop	{r3, r4, r5, pc}
 8001f7c:	20000220 	.word	0x20000220

08001f80 <sbrk_aligned>:
 8001f80:	b570      	push	{r4, r5, r6, lr}
 8001f82:	4e0f      	ldr	r6, [pc, #60]	@ (8001fc0 <sbrk_aligned+0x40>)
 8001f84:	460c      	mov	r4, r1
 8001f86:	6831      	ldr	r1, [r6, #0]
 8001f88:	4605      	mov	r5, r0
 8001f8a:	b911      	cbnz	r1, 8001f92 <sbrk_aligned+0x12>
 8001f8c:	f000 fca2 	bl	80028d4 <_sbrk_r>
 8001f90:	6030      	str	r0, [r6, #0]
 8001f92:	4621      	mov	r1, r4
 8001f94:	4628      	mov	r0, r5
 8001f96:	f000 fc9d 	bl	80028d4 <_sbrk_r>
 8001f9a:	1c43      	adds	r3, r0, #1
 8001f9c:	d103      	bne.n	8001fa6 <sbrk_aligned+0x26>
 8001f9e:	f04f 34ff 	mov.w	r4, #4294967295
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	bd70      	pop	{r4, r5, r6, pc}
 8001fa6:	1cc4      	adds	r4, r0, #3
 8001fa8:	f024 0403 	bic.w	r4, r4, #3
 8001fac:	42a0      	cmp	r0, r4
 8001fae:	d0f8      	beq.n	8001fa2 <sbrk_aligned+0x22>
 8001fb0:	1a21      	subs	r1, r4, r0
 8001fb2:	4628      	mov	r0, r5
 8001fb4:	f000 fc8e 	bl	80028d4 <_sbrk_r>
 8001fb8:	3001      	adds	r0, #1
 8001fba:	d1f2      	bne.n	8001fa2 <sbrk_aligned+0x22>
 8001fbc:	e7ef      	b.n	8001f9e <sbrk_aligned+0x1e>
 8001fbe:	bf00      	nop
 8001fc0:	2000021c 	.word	0x2000021c

08001fc4 <_malloc_r>:
 8001fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fc8:	1ccd      	adds	r5, r1, #3
 8001fca:	f025 0503 	bic.w	r5, r5, #3
 8001fce:	3508      	adds	r5, #8
 8001fd0:	2d0c      	cmp	r5, #12
 8001fd2:	bf38      	it	cc
 8001fd4:	250c      	movcc	r5, #12
 8001fd6:	2d00      	cmp	r5, #0
 8001fd8:	4606      	mov	r6, r0
 8001fda:	db01      	blt.n	8001fe0 <_malloc_r+0x1c>
 8001fdc:	42a9      	cmp	r1, r5
 8001fde:	d904      	bls.n	8001fea <_malloc_r+0x26>
 8001fe0:	230c      	movs	r3, #12
 8001fe2:	6033      	str	r3, [r6, #0]
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80020c0 <_malloc_r+0xfc>
 8001fee:	f000 f869 	bl	80020c4 <__malloc_lock>
 8001ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8001ff6:	461c      	mov	r4, r3
 8001ff8:	bb44      	cbnz	r4, 800204c <_malloc_r+0x88>
 8001ffa:	4629      	mov	r1, r5
 8001ffc:	4630      	mov	r0, r6
 8001ffe:	f7ff ffbf 	bl	8001f80 <sbrk_aligned>
 8002002:	1c43      	adds	r3, r0, #1
 8002004:	4604      	mov	r4, r0
 8002006:	d158      	bne.n	80020ba <_malloc_r+0xf6>
 8002008:	f8d8 4000 	ldr.w	r4, [r8]
 800200c:	4627      	mov	r7, r4
 800200e:	2f00      	cmp	r7, #0
 8002010:	d143      	bne.n	800209a <_malloc_r+0xd6>
 8002012:	2c00      	cmp	r4, #0
 8002014:	d04b      	beq.n	80020ae <_malloc_r+0xea>
 8002016:	6823      	ldr	r3, [r4, #0]
 8002018:	4639      	mov	r1, r7
 800201a:	4630      	mov	r0, r6
 800201c:	eb04 0903 	add.w	r9, r4, r3
 8002020:	f000 fc58 	bl	80028d4 <_sbrk_r>
 8002024:	4581      	cmp	r9, r0
 8002026:	d142      	bne.n	80020ae <_malloc_r+0xea>
 8002028:	6821      	ldr	r1, [r4, #0]
 800202a:	4630      	mov	r0, r6
 800202c:	1a6d      	subs	r5, r5, r1
 800202e:	4629      	mov	r1, r5
 8002030:	f7ff ffa6 	bl	8001f80 <sbrk_aligned>
 8002034:	3001      	adds	r0, #1
 8002036:	d03a      	beq.n	80020ae <_malloc_r+0xea>
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	442b      	add	r3, r5
 800203c:	6023      	str	r3, [r4, #0]
 800203e:	f8d8 3000 	ldr.w	r3, [r8]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	bb62      	cbnz	r2, 80020a0 <_malloc_r+0xdc>
 8002046:	f8c8 7000 	str.w	r7, [r8]
 800204a:	e00f      	b.n	800206c <_malloc_r+0xa8>
 800204c:	6822      	ldr	r2, [r4, #0]
 800204e:	1b52      	subs	r2, r2, r5
 8002050:	d420      	bmi.n	8002094 <_malloc_r+0xd0>
 8002052:	2a0b      	cmp	r2, #11
 8002054:	d917      	bls.n	8002086 <_malloc_r+0xc2>
 8002056:	1961      	adds	r1, r4, r5
 8002058:	42a3      	cmp	r3, r4
 800205a:	6025      	str	r5, [r4, #0]
 800205c:	bf18      	it	ne
 800205e:	6059      	strne	r1, [r3, #4]
 8002060:	6863      	ldr	r3, [r4, #4]
 8002062:	bf08      	it	eq
 8002064:	f8c8 1000 	streq.w	r1, [r8]
 8002068:	5162      	str	r2, [r4, r5]
 800206a:	604b      	str	r3, [r1, #4]
 800206c:	4630      	mov	r0, r6
 800206e:	f000 f82f 	bl	80020d0 <__malloc_unlock>
 8002072:	f104 000b 	add.w	r0, r4, #11
 8002076:	1d23      	adds	r3, r4, #4
 8002078:	f020 0007 	bic.w	r0, r0, #7
 800207c:	1ac2      	subs	r2, r0, r3
 800207e:	bf1c      	itt	ne
 8002080:	1a1b      	subne	r3, r3, r0
 8002082:	50a3      	strne	r3, [r4, r2]
 8002084:	e7af      	b.n	8001fe6 <_malloc_r+0x22>
 8002086:	6862      	ldr	r2, [r4, #4]
 8002088:	42a3      	cmp	r3, r4
 800208a:	bf0c      	ite	eq
 800208c:	f8c8 2000 	streq.w	r2, [r8]
 8002090:	605a      	strne	r2, [r3, #4]
 8002092:	e7eb      	b.n	800206c <_malloc_r+0xa8>
 8002094:	4623      	mov	r3, r4
 8002096:	6864      	ldr	r4, [r4, #4]
 8002098:	e7ae      	b.n	8001ff8 <_malloc_r+0x34>
 800209a:	463c      	mov	r4, r7
 800209c:	687f      	ldr	r7, [r7, #4]
 800209e:	e7b6      	b.n	800200e <_malloc_r+0x4a>
 80020a0:	461a      	mov	r2, r3
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	42a3      	cmp	r3, r4
 80020a6:	d1fb      	bne.n	80020a0 <_malloc_r+0xdc>
 80020a8:	2300      	movs	r3, #0
 80020aa:	6053      	str	r3, [r2, #4]
 80020ac:	e7de      	b.n	800206c <_malloc_r+0xa8>
 80020ae:	230c      	movs	r3, #12
 80020b0:	4630      	mov	r0, r6
 80020b2:	6033      	str	r3, [r6, #0]
 80020b4:	f000 f80c 	bl	80020d0 <__malloc_unlock>
 80020b8:	e794      	b.n	8001fe4 <_malloc_r+0x20>
 80020ba:	6005      	str	r5, [r0, #0]
 80020bc:	e7d6      	b.n	800206c <_malloc_r+0xa8>
 80020be:	bf00      	nop
 80020c0:	20000220 	.word	0x20000220

080020c4 <__malloc_lock>:
 80020c4:	4801      	ldr	r0, [pc, #4]	@ (80020cc <__malloc_lock+0x8>)
 80020c6:	f7ff bf10 	b.w	8001eea <__retarget_lock_acquire_recursive>
 80020ca:	bf00      	nop
 80020cc:	20000218 	.word	0x20000218

080020d0 <__malloc_unlock>:
 80020d0:	4801      	ldr	r0, [pc, #4]	@ (80020d8 <__malloc_unlock+0x8>)
 80020d2:	f7ff bf0b 	b.w	8001eec <__retarget_lock_release_recursive>
 80020d6:	bf00      	nop
 80020d8:	20000218 	.word	0x20000218

080020dc <__sfputc_r>:
 80020dc:	6893      	ldr	r3, [r2, #8]
 80020de:	b410      	push	{r4}
 80020e0:	3b01      	subs	r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	6093      	str	r3, [r2, #8]
 80020e6:	da07      	bge.n	80020f8 <__sfputc_r+0x1c>
 80020e8:	6994      	ldr	r4, [r2, #24]
 80020ea:	42a3      	cmp	r3, r4
 80020ec:	db01      	blt.n	80020f2 <__sfputc_r+0x16>
 80020ee:	290a      	cmp	r1, #10
 80020f0:	d102      	bne.n	80020f8 <__sfputc_r+0x1c>
 80020f2:	bc10      	pop	{r4}
 80020f4:	f7ff bdeb 	b.w	8001cce <__swbuf_r>
 80020f8:	6813      	ldr	r3, [r2, #0]
 80020fa:	1c58      	adds	r0, r3, #1
 80020fc:	6010      	str	r0, [r2, #0]
 80020fe:	7019      	strb	r1, [r3, #0]
 8002100:	4608      	mov	r0, r1
 8002102:	bc10      	pop	{r4}
 8002104:	4770      	bx	lr

08002106 <__sfputs_r>:
 8002106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002108:	4606      	mov	r6, r0
 800210a:	460f      	mov	r7, r1
 800210c:	4614      	mov	r4, r2
 800210e:	18d5      	adds	r5, r2, r3
 8002110:	42ac      	cmp	r4, r5
 8002112:	d101      	bne.n	8002118 <__sfputs_r+0x12>
 8002114:	2000      	movs	r0, #0
 8002116:	e007      	b.n	8002128 <__sfputs_r+0x22>
 8002118:	463a      	mov	r2, r7
 800211a:	4630      	mov	r0, r6
 800211c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002120:	f7ff ffdc 	bl	80020dc <__sfputc_r>
 8002124:	1c43      	adds	r3, r0, #1
 8002126:	d1f3      	bne.n	8002110 <__sfputs_r+0xa>
 8002128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800212c <_vfiprintf_r>:
 800212c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002130:	460d      	mov	r5, r1
 8002132:	4614      	mov	r4, r2
 8002134:	4698      	mov	r8, r3
 8002136:	4606      	mov	r6, r0
 8002138:	b09d      	sub	sp, #116	@ 0x74
 800213a:	b118      	cbz	r0, 8002144 <_vfiprintf_r+0x18>
 800213c:	6a03      	ldr	r3, [r0, #32]
 800213e:	b90b      	cbnz	r3, 8002144 <_vfiprintf_r+0x18>
 8002140:	f7ff fcdc 	bl	8001afc <__sinit>
 8002144:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002146:	07d9      	lsls	r1, r3, #31
 8002148:	d405      	bmi.n	8002156 <_vfiprintf_r+0x2a>
 800214a:	89ab      	ldrh	r3, [r5, #12]
 800214c:	059a      	lsls	r2, r3, #22
 800214e:	d402      	bmi.n	8002156 <_vfiprintf_r+0x2a>
 8002150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002152:	f7ff feca 	bl	8001eea <__retarget_lock_acquire_recursive>
 8002156:	89ab      	ldrh	r3, [r5, #12]
 8002158:	071b      	lsls	r3, r3, #28
 800215a:	d501      	bpl.n	8002160 <_vfiprintf_r+0x34>
 800215c:	692b      	ldr	r3, [r5, #16]
 800215e:	b99b      	cbnz	r3, 8002188 <_vfiprintf_r+0x5c>
 8002160:	4629      	mov	r1, r5
 8002162:	4630      	mov	r0, r6
 8002164:	f7ff fdf2 	bl	8001d4c <__swsetup_r>
 8002168:	b170      	cbz	r0, 8002188 <_vfiprintf_r+0x5c>
 800216a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800216c:	07dc      	lsls	r4, r3, #31
 800216e:	d504      	bpl.n	800217a <_vfiprintf_r+0x4e>
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	b01d      	add	sp, #116	@ 0x74
 8002176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800217a:	89ab      	ldrh	r3, [r5, #12]
 800217c:	0598      	lsls	r0, r3, #22
 800217e:	d4f7      	bmi.n	8002170 <_vfiprintf_r+0x44>
 8002180:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002182:	f7ff feb3 	bl	8001eec <__retarget_lock_release_recursive>
 8002186:	e7f3      	b.n	8002170 <_vfiprintf_r+0x44>
 8002188:	2300      	movs	r3, #0
 800218a:	9309      	str	r3, [sp, #36]	@ 0x24
 800218c:	2320      	movs	r3, #32
 800218e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002192:	2330      	movs	r3, #48	@ 0x30
 8002194:	f04f 0901 	mov.w	r9, #1
 8002198:	f8cd 800c 	str.w	r8, [sp, #12]
 800219c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002348 <_vfiprintf_r+0x21c>
 80021a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80021a4:	4623      	mov	r3, r4
 80021a6:	469a      	mov	sl, r3
 80021a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80021ac:	b10a      	cbz	r2, 80021b2 <_vfiprintf_r+0x86>
 80021ae:	2a25      	cmp	r2, #37	@ 0x25
 80021b0:	d1f9      	bne.n	80021a6 <_vfiprintf_r+0x7a>
 80021b2:	ebba 0b04 	subs.w	fp, sl, r4
 80021b6:	d00b      	beq.n	80021d0 <_vfiprintf_r+0xa4>
 80021b8:	465b      	mov	r3, fp
 80021ba:	4622      	mov	r2, r4
 80021bc:	4629      	mov	r1, r5
 80021be:	4630      	mov	r0, r6
 80021c0:	f7ff ffa1 	bl	8002106 <__sfputs_r>
 80021c4:	3001      	adds	r0, #1
 80021c6:	f000 80a7 	beq.w	8002318 <_vfiprintf_r+0x1ec>
 80021ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80021cc:	445a      	add	r2, fp
 80021ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80021d0:	f89a 3000 	ldrb.w	r3, [sl]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 809f 	beq.w	8002318 <_vfiprintf_r+0x1ec>
 80021da:	2300      	movs	r3, #0
 80021dc:	f04f 32ff 	mov.w	r2, #4294967295
 80021e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80021e4:	f10a 0a01 	add.w	sl, sl, #1
 80021e8:	9304      	str	r3, [sp, #16]
 80021ea:	9307      	str	r3, [sp, #28]
 80021ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80021f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80021f2:	4654      	mov	r4, sl
 80021f4:	2205      	movs	r2, #5
 80021f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021fa:	4853      	ldr	r0, [pc, #332]	@ (8002348 <_vfiprintf_r+0x21c>)
 80021fc:	f000 fb7a 	bl	80028f4 <memchr>
 8002200:	9a04      	ldr	r2, [sp, #16]
 8002202:	b9d8      	cbnz	r0, 800223c <_vfiprintf_r+0x110>
 8002204:	06d1      	lsls	r1, r2, #27
 8002206:	bf44      	itt	mi
 8002208:	2320      	movmi	r3, #32
 800220a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800220e:	0713      	lsls	r3, r2, #28
 8002210:	bf44      	itt	mi
 8002212:	232b      	movmi	r3, #43	@ 0x2b
 8002214:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002218:	f89a 3000 	ldrb.w	r3, [sl]
 800221c:	2b2a      	cmp	r3, #42	@ 0x2a
 800221e:	d015      	beq.n	800224c <_vfiprintf_r+0x120>
 8002220:	4654      	mov	r4, sl
 8002222:	2000      	movs	r0, #0
 8002224:	f04f 0c0a 	mov.w	ip, #10
 8002228:	9a07      	ldr	r2, [sp, #28]
 800222a:	4621      	mov	r1, r4
 800222c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002230:	3b30      	subs	r3, #48	@ 0x30
 8002232:	2b09      	cmp	r3, #9
 8002234:	d94b      	bls.n	80022ce <_vfiprintf_r+0x1a2>
 8002236:	b1b0      	cbz	r0, 8002266 <_vfiprintf_r+0x13a>
 8002238:	9207      	str	r2, [sp, #28]
 800223a:	e014      	b.n	8002266 <_vfiprintf_r+0x13a>
 800223c:	eba0 0308 	sub.w	r3, r0, r8
 8002240:	fa09 f303 	lsl.w	r3, r9, r3
 8002244:	4313      	orrs	r3, r2
 8002246:	46a2      	mov	sl, r4
 8002248:	9304      	str	r3, [sp, #16]
 800224a:	e7d2      	b.n	80021f2 <_vfiprintf_r+0xc6>
 800224c:	9b03      	ldr	r3, [sp, #12]
 800224e:	1d19      	adds	r1, r3, #4
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	9103      	str	r1, [sp, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	bfbb      	ittet	lt
 8002258:	425b      	neglt	r3, r3
 800225a:	f042 0202 	orrlt.w	r2, r2, #2
 800225e:	9307      	strge	r3, [sp, #28]
 8002260:	9307      	strlt	r3, [sp, #28]
 8002262:	bfb8      	it	lt
 8002264:	9204      	strlt	r2, [sp, #16]
 8002266:	7823      	ldrb	r3, [r4, #0]
 8002268:	2b2e      	cmp	r3, #46	@ 0x2e
 800226a:	d10a      	bne.n	8002282 <_vfiprintf_r+0x156>
 800226c:	7863      	ldrb	r3, [r4, #1]
 800226e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002270:	d132      	bne.n	80022d8 <_vfiprintf_r+0x1ac>
 8002272:	9b03      	ldr	r3, [sp, #12]
 8002274:	3402      	adds	r4, #2
 8002276:	1d1a      	adds	r2, r3, #4
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	9203      	str	r2, [sp, #12]
 800227c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002280:	9305      	str	r3, [sp, #20]
 8002282:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800234c <_vfiprintf_r+0x220>
 8002286:	2203      	movs	r2, #3
 8002288:	4650      	mov	r0, sl
 800228a:	7821      	ldrb	r1, [r4, #0]
 800228c:	f000 fb32 	bl	80028f4 <memchr>
 8002290:	b138      	cbz	r0, 80022a2 <_vfiprintf_r+0x176>
 8002292:	2240      	movs	r2, #64	@ 0x40
 8002294:	9b04      	ldr	r3, [sp, #16]
 8002296:	eba0 000a 	sub.w	r0, r0, sl
 800229a:	4082      	lsls	r2, r0
 800229c:	4313      	orrs	r3, r2
 800229e:	3401      	adds	r4, #1
 80022a0:	9304      	str	r3, [sp, #16]
 80022a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022a6:	2206      	movs	r2, #6
 80022a8:	4829      	ldr	r0, [pc, #164]	@ (8002350 <_vfiprintf_r+0x224>)
 80022aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80022ae:	f000 fb21 	bl	80028f4 <memchr>
 80022b2:	2800      	cmp	r0, #0
 80022b4:	d03f      	beq.n	8002336 <_vfiprintf_r+0x20a>
 80022b6:	4b27      	ldr	r3, [pc, #156]	@ (8002354 <_vfiprintf_r+0x228>)
 80022b8:	bb1b      	cbnz	r3, 8002302 <_vfiprintf_r+0x1d6>
 80022ba:	9b03      	ldr	r3, [sp, #12]
 80022bc:	3307      	adds	r3, #7
 80022be:	f023 0307 	bic.w	r3, r3, #7
 80022c2:	3308      	adds	r3, #8
 80022c4:	9303      	str	r3, [sp, #12]
 80022c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80022c8:	443b      	add	r3, r7
 80022ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80022cc:	e76a      	b.n	80021a4 <_vfiprintf_r+0x78>
 80022ce:	460c      	mov	r4, r1
 80022d0:	2001      	movs	r0, #1
 80022d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80022d6:	e7a8      	b.n	800222a <_vfiprintf_r+0xfe>
 80022d8:	2300      	movs	r3, #0
 80022da:	f04f 0c0a 	mov.w	ip, #10
 80022de:	4619      	mov	r1, r3
 80022e0:	3401      	adds	r4, #1
 80022e2:	9305      	str	r3, [sp, #20]
 80022e4:	4620      	mov	r0, r4
 80022e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80022ea:	3a30      	subs	r2, #48	@ 0x30
 80022ec:	2a09      	cmp	r2, #9
 80022ee:	d903      	bls.n	80022f8 <_vfiprintf_r+0x1cc>
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0c6      	beq.n	8002282 <_vfiprintf_r+0x156>
 80022f4:	9105      	str	r1, [sp, #20]
 80022f6:	e7c4      	b.n	8002282 <_vfiprintf_r+0x156>
 80022f8:	4604      	mov	r4, r0
 80022fa:	2301      	movs	r3, #1
 80022fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8002300:	e7f0      	b.n	80022e4 <_vfiprintf_r+0x1b8>
 8002302:	ab03      	add	r3, sp, #12
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	462a      	mov	r2, r5
 8002308:	4630      	mov	r0, r6
 800230a:	4b13      	ldr	r3, [pc, #76]	@ (8002358 <_vfiprintf_r+0x22c>)
 800230c:	a904      	add	r1, sp, #16
 800230e:	f3af 8000 	nop.w
 8002312:	4607      	mov	r7, r0
 8002314:	1c78      	adds	r0, r7, #1
 8002316:	d1d6      	bne.n	80022c6 <_vfiprintf_r+0x19a>
 8002318:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800231a:	07d9      	lsls	r1, r3, #31
 800231c:	d405      	bmi.n	800232a <_vfiprintf_r+0x1fe>
 800231e:	89ab      	ldrh	r3, [r5, #12]
 8002320:	059a      	lsls	r2, r3, #22
 8002322:	d402      	bmi.n	800232a <_vfiprintf_r+0x1fe>
 8002324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002326:	f7ff fde1 	bl	8001eec <__retarget_lock_release_recursive>
 800232a:	89ab      	ldrh	r3, [r5, #12]
 800232c:	065b      	lsls	r3, r3, #25
 800232e:	f53f af1f 	bmi.w	8002170 <_vfiprintf_r+0x44>
 8002332:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002334:	e71e      	b.n	8002174 <_vfiprintf_r+0x48>
 8002336:	ab03      	add	r3, sp, #12
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	462a      	mov	r2, r5
 800233c:	4630      	mov	r0, r6
 800233e:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <_vfiprintf_r+0x22c>)
 8002340:	a904      	add	r1, sp, #16
 8002342:	f000 f87d 	bl	8002440 <_printf_i>
 8002346:	e7e4      	b.n	8002312 <_vfiprintf_r+0x1e6>
 8002348:	08002996 	.word	0x08002996
 800234c:	0800299c 	.word	0x0800299c
 8002350:	080029a0 	.word	0x080029a0
 8002354:	00000000 	.word	0x00000000
 8002358:	08002107 	.word	0x08002107

0800235c <_printf_common>:
 800235c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002360:	4616      	mov	r6, r2
 8002362:	4698      	mov	r8, r3
 8002364:	688a      	ldr	r2, [r1, #8]
 8002366:	690b      	ldr	r3, [r1, #16]
 8002368:	4607      	mov	r7, r0
 800236a:	4293      	cmp	r3, r2
 800236c:	bfb8      	it	lt
 800236e:	4613      	movlt	r3, r2
 8002370:	6033      	str	r3, [r6, #0]
 8002372:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002376:	460c      	mov	r4, r1
 8002378:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800237c:	b10a      	cbz	r2, 8002382 <_printf_common+0x26>
 800237e:	3301      	adds	r3, #1
 8002380:	6033      	str	r3, [r6, #0]
 8002382:	6823      	ldr	r3, [r4, #0]
 8002384:	0699      	lsls	r1, r3, #26
 8002386:	bf42      	ittt	mi
 8002388:	6833      	ldrmi	r3, [r6, #0]
 800238a:	3302      	addmi	r3, #2
 800238c:	6033      	strmi	r3, [r6, #0]
 800238e:	6825      	ldr	r5, [r4, #0]
 8002390:	f015 0506 	ands.w	r5, r5, #6
 8002394:	d106      	bne.n	80023a4 <_printf_common+0x48>
 8002396:	f104 0a19 	add.w	sl, r4, #25
 800239a:	68e3      	ldr	r3, [r4, #12]
 800239c:	6832      	ldr	r2, [r6, #0]
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	42ab      	cmp	r3, r5
 80023a2:	dc2b      	bgt.n	80023fc <_printf_common+0xa0>
 80023a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80023a8:	6822      	ldr	r2, [r4, #0]
 80023aa:	3b00      	subs	r3, #0
 80023ac:	bf18      	it	ne
 80023ae:	2301      	movne	r3, #1
 80023b0:	0692      	lsls	r2, r2, #26
 80023b2:	d430      	bmi.n	8002416 <_printf_common+0xba>
 80023b4:	4641      	mov	r1, r8
 80023b6:	4638      	mov	r0, r7
 80023b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80023bc:	47c8      	blx	r9
 80023be:	3001      	adds	r0, #1
 80023c0:	d023      	beq.n	800240a <_printf_common+0xae>
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	6922      	ldr	r2, [r4, #16]
 80023c6:	f003 0306 	and.w	r3, r3, #6
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	bf14      	ite	ne
 80023ce:	2500      	movne	r5, #0
 80023d0:	6833      	ldreq	r3, [r6, #0]
 80023d2:	f04f 0600 	mov.w	r6, #0
 80023d6:	bf08      	it	eq
 80023d8:	68e5      	ldreq	r5, [r4, #12]
 80023da:	f104 041a 	add.w	r4, r4, #26
 80023de:	bf08      	it	eq
 80023e0:	1aed      	subeq	r5, r5, r3
 80023e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80023e6:	bf08      	it	eq
 80023e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80023ec:	4293      	cmp	r3, r2
 80023ee:	bfc4      	itt	gt
 80023f0:	1a9b      	subgt	r3, r3, r2
 80023f2:	18ed      	addgt	r5, r5, r3
 80023f4:	42b5      	cmp	r5, r6
 80023f6:	d11a      	bne.n	800242e <_printf_common+0xd2>
 80023f8:	2000      	movs	r0, #0
 80023fa:	e008      	b.n	800240e <_printf_common+0xb2>
 80023fc:	2301      	movs	r3, #1
 80023fe:	4652      	mov	r2, sl
 8002400:	4641      	mov	r1, r8
 8002402:	4638      	mov	r0, r7
 8002404:	47c8      	blx	r9
 8002406:	3001      	adds	r0, #1
 8002408:	d103      	bne.n	8002412 <_printf_common+0xb6>
 800240a:	f04f 30ff 	mov.w	r0, #4294967295
 800240e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002412:	3501      	adds	r5, #1
 8002414:	e7c1      	b.n	800239a <_printf_common+0x3e>
 8002416:	2030      	movs	r0, #48	@ 0x30
 8002418:	18e1      	adds	r1, r4, r3
 800241a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002424:	4422      	add	r2, r4
 8002426:	3302      	adds	r3, #2
 8002428:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800242c:	e7c2      	b.n	80023b4 <_printf_common+0x58>
 800242e:	2301      	movs	r3, #1
 8002430:	4622      	mov	r2, r4
 8002432:	4641      	mov	r1, r8
 8002434:	4638      	mov	r0, r7
 8002436:	47c8      	blx	r9
 8002438:	3001      	adds	r0, #1
 800243a:	d0e6      	beq.n	800240a <_printf_common+0xae>
 800243c:	3601      	adds	r6, #1
 800243e:	e7d9      	b.n	80023f4 <_printf_common+0x98>

08002440 <_printf_i>:
 8002440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002444:	7e0f      	ldrb	r7, [r1, #24]
 8002446:	4691      	mov	r9, r2
 8002448:	2f78      	cmp	r7, #120	@ 0x78
 800244a:	4680      	mov	r8, r0
 800244c:	460c      	mov	r4, r1
 800244e:	469a      	mov	sl, r3
 8002450:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002452:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002456:	d807      	bhi.n	8002468 <_printf_i+0x28>
 8002458:	2f62      	cmp	r7, #98	@ 0x62
 800245a:	d80a      	bhi.n	8002472 <_printf_i+0x32>
 800245c:	2f00      	cmp	r7, #0
 800245e:	f000 80d1 	beq.w	8002604 <_printf_i+0x1c4>
 8002462:	2f58      	cmp	r7, #88	@ 0x58
 8002464:	f000 80b8 	beq.w	80025d8 <_printf_i+0x198>
 8002468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800246c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002470:	e03a      	b.n	80024e8 <_printf_i+0xa8>
 8002472:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002476:	2b15      	cmp	r3, #21
 8002478:	d8f6      	bhi.n	8002468 <_printf_i+0x28>
 800247a:	a101      	add	r1, pc, #4	@ (adr r1, 8002480 <_printf_i+0x40>)
 800247c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002480:	080024d9 	.word	0x080024d9
 8002484:	080024ed 	.word	0x080024ed
 8002488:	08002469 	.word	0x08002469
 800248c:	08002469 	.word	0x08002469
 8002490:	08002469 	.word	0x08002469
 8002494:	08002469 	.word	0x08002469
 8002498:	080024ed 	.word	0x080024ed
 800249c:	08002469 	.word	0x08002469
 80024a0:	08002469 	.word	0x08002469
 80024a4:	08002469 	.word	0x08002469
 80024a8:	08002469 	.word	0x08002469
 80024ac:	080025eb 	.word	0x080025eb
 80024b0:	08002517 	.word	0x08002517
 80024b4:	080025a5 	.word	0x080025a5
 80024b8:	08002469 	.word	0x08002469
 80024bc:	08002469 	.word	0x08002469
 80024c0:	0800260d 	.word	0x0800260d
 80024c4:	08002469 	.word	0x08002469
 80024c8:	08002517 	.word	0x08002517
 80024cc:	08002469 	.word	0x08002469
 80024d0:	08002469 	.word	0x08002469
 80024d4:	080025ad 	.word	0x080025ad
 80024d8:	6833      	ldr	r3, [r6, #0]
 80024da:	1d1a      	adds	r2, r3, #4
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6032      	str	r2, [r6, #0]
 80024e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80024e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80024e8:	2301      	movs	r3, #1
 80024ea:	e09c      	b.n	8002626 <_printf_i+0x1e6>
 80024ec:	6833      	ldr	r3, [r6, #0]
 80024ee:	6820      	ldr	r0, [r4, #0]
 80024f0:	1d19      	adds	r1, r3, #4
 80024f2:	6031      	str	r1, [r6, #0]
 80024f4:	0606      	lsls	r6, r0, #24
 80024f6:	d501      	bpl.n	80024fc <_printf_i+0xbc>
 80024f8:	681d      	ldr	r5, [r3, #0]
 80024fa:	e003      	b.n	8002504 <_printf_i+0xc4>
 80024fc:	0645      	lsls	r5, r0, #25
 80024fe:	d5fb      	bpl.n	80024f8 <_printf_i+0xb8>
 8002500:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002504:	2d00      	cmp	r5, #0
 8002506:	da03      	bge.n	8002510 <_printf_i+0xd0>
 8002508:	232d      	movs	r3, #45	@ 0x2d
 800250a:	426d      	negs	r5, r5
 800250c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002510:	230a      	movs	r3, #10
 8002512:	4858      	ldr	r0, [pc, #352]	@ (8002674 <_printf_i+0x234>)
 8002514:	e011      	b.n	800253a <_printf_i+0xfa>
 8002516:	6821      	ldr	r1, [r4, #0]
 8002518:	6833      	ldr	r3, [r6, #0]
 800251a:	0608      	lsls	r0, r1, #24
 800251c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002520:	d402      	bmi.n	8002528 <_printf_i+0xe8>
 8002522:	0649      	lsls	r1, r1, #25
 8002524:	bf48      	it	mi
 8002526:	b2ad      	uxthmi	r5, r5
 8002528:	2f6f      	cmp	r7, #111	@ 0x6f
 800252a:	6033      	str	r3, [r6, #0]
 800252c:	bf14      	ite	ne
 800252e:	230a      	movne	r3, #10
 8002530:	2308      	moveq	r3, #8
 8002532:	4850      	ldr	r0, [pc, #320]	@ (8002674 <_printf_i+0x234>)
 8002534:	2100      	movs	r1, #0
 8002536:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800253a:	6866      	ldr	r6, [r4, #4]
 800253c:	2e00      	cmp	r6, #0
 800253e:	60a6      	str	r6, [r4, #8]
 8002540:	db05      	blt.n	800254e <_printf_i+0x10e>
 8002542:	6821      	ldr	r1, [r4, #0]
 8002544:	432e      	orrs	r6, r5
 8002546:	f021 0104 	bic.w	r1, r1, #4
 800254a:	6021      	str	r1, [r4, #0]
 800254c:	d04b      	beq.n	80025e6 <_printf_i+0x1a6>
 800254e:	4616      	mov	r6, r2
 8002550:	fbb5 f1f3 	udiv	r1, r5, r3
 8002554:	fb03 5711 	mls	r7, r3, r1, r5
 8002558:	5dc7      	ldrb	r7, [r0, r7]
 800255a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800255e:	462f      	mov	r7, r5
 8002560:	42bb      	cmp	r3, r7
 8002562:	460d      	mov	r5, r1
 8002564:	d9f4      	bls.n	8002550 <_printf_i+0x110>
 8002566:	2b08      	cmp	r3, #8
 8002568:	d10b      	bne.n	8002582 <_printf_i+0x142>
 800256a:	6823      	ldr	r3, [r4, #0]
 800256c:	07df      	lsls	r7, r3, #31
 800256e:	d508      	bpl.n	8002582 <_printf_i+0x142>
 8002570:	6923      	ldr	r3, [r4, #16]
 8002572:	6861      	ldr	r1, [r4, #4]
 8002574:	4299      	cmp	r1, r3
 8002576:	bfde      	ittt	le
 8002578:	2330      	movle	r3, #48	@ 0x30
 800257a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800257e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002582:	1b92      	subs	r2, r2, r6
 8002584:	6122      	str	r2, [r4, #16]
 8002586:	464b      	mov	r3, r9
 8002588:	4621      	mov	r1, r4
 800258a:	4640      	mov	r0, r8
 800258c:	f8cd a000 	str.w	sl, [sp]
 8002590:	aa03      	add	r2, sp, #12
 8002592:	f7ff fee3 	bl	800235c <_printf_common>
 8002596:	3001      	adds	r0, #1
 8002598:	d14a      	bne.n	8002630 <_printf_i+0x1f0>
 800259a:	f04f 30ff 	mov.w	r0, #4294967295
 800259e:	b004      	add	sp, #16
 80025a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025a4:	6823      	ldr	r3, [r4, #0]
 80025a6:	f043 0320 	orr.w	r3, r3, #32
 80025aa:	6023      	str	r3, [r4, #0]
 80025ac:	2778      	movs	r7, #120	@ 0x78
 80025ae:	4832      	ldr	r0, [pc, #200]	@ (8002678 <_printf_i+0x238>)
 80025b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	6831      	ldr	r1, [r6, #0]
 80025b8:	061f      	lsls	r7, r3, #24
 80025ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80025be:	d402      	bmi.n	80025c6 <_printf_i+0x186>
 80025c0:	065f      	lsls	r7, r3, #25
 80025c2:	bf48      	it	mi
 80025c4:	b2ad      	uxthmi	r5, r5
 80025c6:	6031      	str	r1, [r6, #0]
 80025c8:	07d9      	lsls	r1, r3, #31
 80025ca:	bf44      	itt	mi
 80025cc:	f043 0320 	orrmi.w	r3, r3, #32
 80025d0:	6023      	strmi	r3, [r4, #0]
 80025d2:	b11d      	cbz	r5, 80025dc <_printf_i+0x19c>
 80025d4:	2310      	movs	r3, #16
 80025d6:	e7ad      	b.n	8002534 <_printf_i+0xf4>
 80025d8:	4826      	ldr	r0, [pc, #152]	@ (8002674 <_printf_i+0x234>)
 80025da:	e7e9      	b.n	80025b0 <_printf_i+0x170>
 80025dc:	6823      	ldr	r3, [r4, #0]
 80025de:	f023 0320 	bic.w	r3, r3, #32
 80025e2:	6023      	str	r3, [r4, #0]
 80025e4:	e7f6      	b.n	80025d4 <_printf_i+0x194>
 80025e6:	4616      	mov	r6, r2
 80025e8:	e7bd      	b.n	8002566 <_printf_i+0x126>
 80025ea:	6833      	ldr	r3, [r6, #0]
 80025ec:	6825      	ldr	r5, [r4, #0]
 80025ee:	1d18      	adds	r0, r3, #4
 80025f0:	6961      	ldr	r1, [r4, #20]
 80025f2:	6030      	str	r0, [r6, #0]
 80025f4:	062e      	lsls	r6, r5, #24
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	d501      	bpl.n	80025fe <_printf_i+0x1be>
 80025fa:	6019      	str	r1, [r3, #0]
 80025fc:	e002      	b.n	8002604 <_printf_i+0x1c4>
 80025fe:	0668      	lsls	r0, r5, #25
 8002600:	d5fb      	bpl.n	80025fa <_printf_i+0x1ba>
 8002602:	8019      	strh	r1, [r3, #0]
 8002604:	2300      	movs	r3, #0
 8002606:	4616      	mov	r6, r2
 8002608:	6123      	str	r3, [r4, #16]
 800260a:	e7bc      	b.n	8002586 <_printf_i+0x146>
 800260c:	6833      	ldr	r3, [r6, #0]
 800260e:	2100      	movs	r1, #0
 8002610:	1d1a      	adds	r2, r3, #4
 8002612:	6032      	str	r2, [r6, #0]
 8002614:	681e      	ldr	r6, [r3, #0]
 8002616:	6862      	ldr	r2, [r4, #4]
 8002618:	4630      	mov	r0, r6
 800261a:	f000 f96b 	bl	80028f4 <memchr>
 800261e:	b108      	cbz	r0, 8002624 <_printf_i+0x1e4>
 8002620:	1b80      	subs	r0, r0, r6
 8002622:	6060      	str	r0, [r4, #4]
 8002624:	6863      	ldr	r3, [r4, #4]
 8002626:	6123      	str	r3, [r4, #16]
 8002628:	2300      	movs	r3, #0
 800262a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800262e:	e7aa      	b.n	8002586 <_printf_i+0x146>
 8002630:	4632      	mov	r2, r6
 8002632:	4649      	mov	r1, r9
 8002634:	4640      	mov	r0, r8
 8002636:	6923      	ldr	r3, [r4, #16]
 8002638:	47d0      	blx	sl
 800263a:	3001      	adds	r0, #1
 800263c:	d0ad      	beq.n	800259a <_printf_i+0x15a>
 800263e:	6823      	ldr	r3, [r4, #0]
 8002640:	079b      	lsls	r3, r3, #30
 8002642:	d413      	bmi.n	800266c <_printf_i+0x22c>
 8002644:	68e0      	ldr	r0, [r4, #12]
 8002646:	9b03      	ldr	r3, [sp, #12]
 8002648:	4298      	cmp	r0, r3
 800264a:	bfb8      	it	lt
 800264c:	4618      	movlt	r0, r3
 800264e:	e7a6      	b.n	800259e <_printf_i+0x15e>
 8002650:	2301      	movs	r3, #1
 8002652:	4632      	mov	r2, r6
 8002654:	4649      	mov	r1, r9
 8002656:	4640      	mov	r0, r8
 8002658:	47d0      	blx	sl
 800265a:	3001      	adds	r0, #1
 800265c:	d09d      	beq.n	800259a <_printf_i+0x15a>
 800265e:	3501      	adds	r5, #1
 8002660:	68e3      	ldr	r3, [r4, #12]
 8002662:	9903      	ldr	r1, [sp, #12]
 8002664:	1a5b      	subs	r3, r3, r1
 8002666:	42ab      	cmp	r3, r5
 8002668:	dcf2      	bgt.n	8002650 <_printf_i+0x210>
 800266a:	e7eb      	b.n	8002644 <_printf_i+0x204>
 800266c:	2500      	movs	r5, #0
 800266e:	f104 0619 	add.w	r6, r4, #25
 8002672:	e7f5      	b.n	8002660 <_printf_i+0x220>
 8002674:	080029a7 	.word	0x080029a7
 8002678:	080029b8 	.word	0x080029b8

0800267c <__sflush_r>:
 800267c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002682:	0716      	lsls	r6, r2, #28
 8002684:	4605      	mov	r5, r0
 8002686:	460c      	mov	r4, r1
 8002688:	d454      	bmi.n	8002734 <__sflush_r+0xb8>
 800268a:	684b      	ldr	r3, [r1, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	dc02      	bgt.n	8002696 <__sflush_r+0x1a>
 8002690:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	dd48      	ble.n	8002728 <__sflush_r+0xac>
 8002696:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002698:	2e00      	cmp	r6, #0
 800269a:	d045      	beq.n	8002728 <__sflush_r+0xac>
 800269c:	2300      	movs	r3, #0
 800269e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80026a2:	682f      	ldr	r7, [r5, #0]
 80026a4:	6a21      	ldr	r1, [r4, #32]
 80026a6:	602b      	str	r3, [r5, #0]
 80026a8:	d030      	beq.n	800270c <__sflush_r+0x90>
 80026aa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80026ac:	89a3      	ldrh	r3, [r4, #12]
 80026ae:	0759      	lsls	r1, r3, #29
 80026b0:	d505      	bpl.n	80026be <__sflush_r+0x42>
 80026b2:	6863      	ldr	r3, [r4, #4]
 80026b4:	1ad2      	subs	r2, r2, r3
 80026b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80026b8:	b10b      	cbz	r3, 80026be <__sflush_r+0x42>
 80026ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80026bc:	1ad2      	subs	r2, r2, r3
 80026be:	2300      	movs	r3, #0
 80026c0:	4628      	mov	r0, r5
 80026c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80026c4:	6a21      	ldr	r1, [r4, #32]
 80026c6:	47b0      	blx	r6
 80026c8:	1c43      	adds	r3, r0, #1
 80026ca:	89a3      	ldrh	r3, [r4, #12]
 80026cc:	d106      	bne.n	80026dc <__sflush_r+0x60>
 80026ce:	6829      	ldr	r1, [r5, #0]
 80026d0:	291d      	cmp	r1, #29
 80026d2:	d82b      	bhi.n	800272c <__sflush_r+0xb0>
 80026d4:	4a28      	ldr	r2, [pc, #160]	@ (8002778 <__sflush_r+0xfc>)
 80026d6:	40ca      	lsrs	r2, r1
 80026d8:	07d6      	lsls	r6, r2, #31
 80026da:	d527      	bpl.n	800272c <__sflush_r+0xb0>
 80026dc:	2200      	movs	r2, #0
 80026de:	6062      	str	r2, [r4, #4]
 80026e0:	6922      	ldr	r2, [r4, #16]
 80026e2:	04d9      	lsls	r1, r3, #19
 80026e4:	6022      	str	r2, [r4, #0]
 80026e6:	d504      	bpl.n	80026f2 <__sflush_r+0x76>
 80026e8:	1c42      	adds	r2, r0, #1
 80026ea:	d101      	bne.n	80026f0 <__sflush_r+0x74>
 80026ec:	682b      	ldr	r3, [r5, #0]
 80026ee:	b903      	cbnz	r3, 80026f2 <__sflush_r+0x76>
 80026f0:	6560      	str	r0, [r4, #84]	@ 0x54
 80026f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80026f4:	602f      	str	r7, [r5, #0]
 80026f6:	b1b9      	cbz	r1, 8002728 <__sflush_r+0xac>
 80026f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80026fc:	4299      	cmp	r1, r3
 80026fe:	d002      	beq.n	8002706 <__sflush_r+0x8a>
 8002700:	4628      	mov	r0, r5
 8002702:	f7ff fbf5 	bl	8001ef0 <_free_r>
 8002706:	2300      	movs	r3, #0
 8002708:	6363      	str	r3, [r4, #52]	@ 0x34
 800270a:	e00d      	b.n	8002728 <__sflush_r+0xac>
 800270c:	2301      	movs	r3, #1
 800270e:	4628      	mov	r0, r5
 8002710:	47b0      	blx	r6
 8002712:	4602      	mov	r2, r0
 8002714:	1c50      	adds	r0, r2, #1
 8002716:	d1c9      	bne.n	80026ac <__sflush_r+0x30>
 8002718:	682b      	ldr	r3, [r5, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0c6      	beq.n	80026ac <__sflush_r+0x30>
 800271e:	2b1d      	cmp	r3, #29
 8002720:	d001      	beq.n	8002726 <__sflush_r+0xaa>
 8002722:	2b16      	cmp	r3, #22
 8002724:	d11d      	bne.n	8002762 <__sflush_r+0xe6>
 8002726:	602f      	str	r7, [r5, #0]
 8002728:	2000      	movs	r0, #0
 800272a:	e021      	b.n	8002770 <__sflush_r+0xf4>
 800272c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002730:	b21b      	sxth	r3, r3
 8002732:	e01a      	b.n	800276a <__sflush_r+0xee>
 8002734:	690f      	ldr	r7, [r1, #16]
 8002736:	2f00      	cmp	r7, #0
 8002738:	d0f6      	beq.n	8002728 <__sflush_r+0xac>
 800273a:	0793      	lsls	r3, r2, #30
 800273c:	bf18      	it	ne
 800273e:	2300      	movne	r3, #0
 8002740:	680e      	ldr	r6, [r1, #0]
 8002742:	bf08      	it	eq
 8002744:	694b      	ldreq	r3, [r1, #20]
 8002746:	1bf6      	subs	r6, r6, r7
 8002748:	600f      	str	r7, [r1, #0]
 800274a:	608b      	str	r3, [r1, #8]
 800274c:	2e00      	cmp	r6, #0
 800274e:	ddeb      	ble.n	8002728 <__sflush_r+0xac>
 8002750:	4633      	mov	r3, r6
 8002752:	463a      	mov	r2, r7
 8002754:	4628      	mov	r0, r5
 8002756:	6a21      	ldr	r1, [r4, #32]
 8002758:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800275c:	47e0      	blx	ip
 800275e:	2800      	cmp	r0, #0
 8002760:	dc07      	bgt.n	8002772 <__sflush_r+0xf6>
 8002762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800276a:	f04f 30ff 	mov.w	r0, #4294967295
 800276e:	81a3      	strh	r3, [r4, #12]
 8002770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002772:	4407      	add	r7, r0
 8002774:	1a36      	subs	r6, r6, r0
 8002776:	e7e9      	b.n	800274c <__sflush_r+0xd0>
 8002778:	20400001 	.word	0x20400001

0800277c <_fflush_r>:
 800277c:	b538      	push	{r3, r4, r5, lr}
 800277e:	690b      	ldr	r3, [r1, #16]
 8002780:	4605      	mov	r5, r0
 8002782:	460c      	mov	r4, r1
 8002784:	b913      	cbnz	r3, 800278c <_fflush_r+0x10>
 8002786:	2500      	movs	r5, #0
 8002788:	4628      	mov	r0, r5
 800278a:	bd38      	pop	{r3, r4, r5, pc}
 800278c:	b118      	cbz	r0, 8002796 <_fflush_r+0x1a>
 800278e:	6a03      	ldr	r3, [r0, #32]
 8002790:	b90b      	cbnz	r3, 8002796 <_fflush_r+0x1a>
 8002792:	f7ff f9b3 	bl	8001afc <__sinit>
 8002796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f3      	beq.n	8002786 <_fflush_r+0xa>
 800279e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80027a0:	07d0      	lsls	r0, r2, #31
 80027a2:	d404      	bmi.n	80027ae <_fflush_r+0x32>
 80027a4:	0599      	lsls	r1, r3, #22
 80027a6:	d402      	bmi.n	80027ae <_fflush_r+0x32>
 80027a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80027aa:	f7ff fb9e 	bl	8001eea <__retarget_lock_acquire_recursive>
 80027ae:	4628      	mov	r0, r5
 80027b0:	4621      	mov	r1, r4
 80027b2:	f7ff ff63 	bl	800267c <__sflush_r>
 80027b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80027b8:	4605      	mov	r5, r0
 80027ba:	07da      	lsls	r2, r3, #31
 80027bc:	d4e4      	bmi.n	8002788 <_fflush_r+0xc>
 80027be:	89a3      	ldrh	r3, [r4, #12]
 80027c0:	059b      	lsls	r3, r3, #22
 80027c2:	d4e1      	bmi.n	8002788 <_fflush_r+0xc>
 80027c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80027c6:	f7ff fb91 	bl	8001eec <__retarget_lock_release_recursive>
 80027ca:	e7dd      	b.n	8002788 <_fflush_r+0xc>

080027cc <__swhatbuf_r>:
 80027cc:	b570      	push	{r4, r5, r6, lr}
 80027ce:	460c      	mov	r4, r1
 80027d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027d4:	4615      	mov	r5, r2
 80027d6:	2900      	cmp	r1, #0
 80027d8:	461e      	mov	r6, r3
 80027da:	b096      	sub	sp, #88	@ 0x58
 80027dc:	da0c      	bge.n	80027f8 <__swhatbuf_r+0x2c>
 80027de:	89a3      	ldrh	r3, [r4, #12]
 80027e0:	2100      	movs	r1, #0
 80027e2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80027e6:	bf14      	ite	ne
 80027e8:	2340      	movne	r3, #64	@ 0x40
 80027ea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80027ee:	2000      	movs	r0, #0
 80027f0:	6031      	str	r1, [r6, #0]
 80027f2:	602b      	str	r3, [r5, #0]
 80027f4:	b016      	add	sp, #88	@ 0x58
 80027f6:	bd70      	pop	{r4, r5, r6, pc}
 80027f8:	466a      	mov	r2, sp
 80027fa:	f000 f849 	bl	8002890 <_fstat_r>
 80027fe:	2800      	cmp	r0, #0
 8002800:	dbed      	blt.n	80027de <__swhatbuf_r+0x12>
 8002802:	9901      	ldr	r1, [sp, #4]
 8002804:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002808:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800280c:	4259      	negs	r1, r3
 800280e:	4159      	adcs	r1, r3
 8002810:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002814:	e7eb      	b.n	80027ee <__swhatbuf_r+0x22>

08002816 <__smakebuf_r>:
 8002816:	898b      	ldrh	r3, [r1, #12]
 8002818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800281a:	079d      	lsls	r5, r3, #30
 800281c:	4606      	mov	r6, r0
 800281e:	460c      	mov	r4, r1
 8002820:	d507      	bpl.n	8002832 <__smakebuf_r+0x1c>
 8002822:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002826:	6023      	str	r3, [r4, #0]
 8002828:	6123      	str	r3, [r4, #16]
 800282a:	2301      	movs	r3, #1
 800282c:	6163      	str	r3, [r4, #20]
 800282e:	b003      	add	sp, #12
 8002830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002832:	466a      	mov	r2, sp
 8002834:	ab01      	add	r3, sp, #4
 8002836:	f7ff ffc9 	bl	80027cc <__swhatbuf_r>
 800283a:	9f00      	ldr	r7, [sp, #0]
 800283c:	4605      	mov	r5, r0
 800283e:	4639      	mov	r1, r7
 8002840:	4630      	mov	r0, r6
 8002842:	f7ff fbbf 	bl	8001fc4 <_malloc_r>
 8002846:	b948      	cbnz	r0, 800285c <__smakebuf_r+0x46>
 8002848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800284c:	059a      	lsls	r2, r3, #22
 800284e:	d4ee      	bmi.n	800282e <__smakebuf_r+0x18>
 8002850:	f023 0303 	bic.w	r3, r3, #3
 8002854:	f043 0302 	orr.w	r3, r3, #2
 8002858:	81a3      	strh	r3, [r4, #12]
 800285a:	e7e2      	b.n	8002822 <__smakebuf_r+0xc>
 800285c:	89a3      	ldrh	r3, [r4, #12]
 800285e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002866:	81a3      	strh	r3, [r4, #12]
 8002868:	9b01      	ldr	r3, [sp, #4]
 800286a:	6020      	str	r0, [r4, #0]
 800286c:	b15b      	cbz	r3, 8002886 <__smakebuf_r+0x70>
 800286e:	4630      	mov	r0, r6
 8002870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002874:	f000 f81e 	bl	80028b4 <_isatty_r>
 8002878:	b128      	cbz	r0, 8002886 <__smakebuf_r+0x70>
 800287a:	89a3      	ldrh	r3, [r4, #12]
 800287c:	f023 0303 	bic.w	r3, r3, #3
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	81a3      	strh	r3, [r4, #12]
 8002886:	89a3      	ldrh	r3, [r4, #12]
 8002888:	431d      	orrs	r5, r3
 800288a:	81a5      	strh	r5, [r4, #12]
 800288c:	e7cf      	b.n	800282e <__smakebuf_r+0x18>
	...

08002890 <_fstat_r>:
 8002890:	b538      	push	{r3, r4, r5, lr}
 8002892:	2300      	movs	r3, #0
 8002894:	4d06      	ldr	r5, [pc, #24]	@ (80028b0 <_fstat_r+0x20>)
 8002896:	4604      	mov	r4, r0
 8002898:	4608      	mov	r0, r1
 800289a:	4611      	mov	r1, r2
 800289c:	602b      	str	r3, [r5, #0]
 800289e:	f7fd fe93 	bl	80005c8 <_fstat>
 80028a2:	1c43      	adds	r3, r0, #1
 80028a4:	d102      	bne.n	80028ac <_fstat_r+0x1c>
 80028a6:	682b      	ldr	r3, [r5, #0]
 80028a8:	b103      	cbz	r3, 80028ac <_fstat_r+0x1c>
 80028aa:	6023      	str	r3, [r4, #0]
 80028ac:	bd38      	pop	{r3, r4, r5, pc}
 80028ae:	bf00      	nop
 80028b0:	20000214 	.word	0x20000214

080028b4 <_isatty_r>:
 80028b4:	b538      	push	{r3, r4, r5, lr}
 80028b6:	2300      	movs	r3, #0
 80028b8:	4d05      	ldr	r5, [pc, #20]	@ (80028d0 <_isatty_r+0x1c>)
 80028ba:	4604      	mov	r4, r0
 80028bc:	4608      	mov	r0, r1
 80028be:	602b      	str	r3, [r5, #0]
 80028c0:	f7fd fe91 	bl	80005e6 <_isatty>
 80028c4:	1c43      	adds	r3, r0, #1
 80028c6:	d102      	bne.n	80028ce <_isatty_r+0x1a>
 80028c8:	682b      	ldr	r3, [r5, #0]
 80028ca:	b103      	cbz	r3, 80028ce <_isatty_r+0x1a>
 80028cc:	6023      	str	r3, [r4, #0]
 80028ce:	bd38      	pop	{r3, r4, r5, pc}
 80028d0:	20000214 	.word	0x20000214

080028d4 <_sbrk_r>:
 80028d4:	b538      	push	{r3, r4, r5, lr}
 80028d6:	2300      	movs	r3, #0
 80028d8:	4d05      	ldr	r5, [pc, #20]	@ (80028f0 <_sbrk_r+0x1c>)
 80028da:	4604      	mov	r4, r0
 80028dc:	4608      	mov	r0, r1
 80028de:	602b      	str	r3, [r5, #0]
 80028e0:	f7fd fe98 	bl	8000614 <_sbrk>
 80028e4:	1c43      	adds	r3, r0, #1
 80028e6:	d102      	bne.n	80028ee <_sbrk_r+0x1a>
 80028e8:	682b      	ldr	r3, [r5, #0]
 80028ea:	b103      	cbz	r3, 80028ee <_sbrk_r+0x1a>
 80028ec:	6023      	str	r3, [r4, #0]
 80028ee:	bd38      	pop	{r3, r4, r5, pc}
 80028f0:	20000214 	.word	0x20000214

080028f4 <memchr>:
 80028f4:	4603      	mov	r3, r0
 80028f6:	b510      	push	{r4, lr}
 80028f8:	b2c9      	uxtb	r1, r1
 80028fa:	4402      	add	r2, r0
 80028fc:	4293      	cmp	r3, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	d101      	bne.n	8002906 <memchr+0x12>
 8002902:	2000      	movs	r0, #0
 8002904:	e003      	b.n	800290e <memchr+0x1a>
 8002906:	7804      	ldrb	r4, [r0, #0]
 8002908:	3301      	adds	r3, #1
 800290a:	428c      	cmp	r4, r1
 800290c:	d1f6      	bne.n	80028fc <memchr+0x8>
 800290e:	bd10      	pop	{r4, pc}

08002910 <_init>:
 8002910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002912:	bf00      	nop
 8002914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002916:	bc08      	pop	{r3}
 8002918:	469e      	mov	lr, r3
 800291a:	4770      	bx	lr

0800291c <_fini>:
 800291c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291e:	bf00      	nop
 8002920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002922:	bc08      	pop	{r3}
 8002924:	469e      	mov	lr, r3
 8002926:	4770      	bx	lr
