
stmDemoApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027fc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08002908  08002908  00003908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029ac  080029ac  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080029ac  080029ac  00004068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080029ac  080029ac  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029ac  080029ac  000039ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080029b0  080029b0  000039b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080029b4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000068  08002a1c  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08002a1c  00004224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006fc9  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016dd  00000000  00000000  0000b05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  0000c738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000546  00000000  00000000  0000ce40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d2b  00000000  00000000  0000d386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008bb2  00000000  00000000  000250b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d6c  00000000  00000000  0002dc63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b19cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002244  00000000  00000000  000b1a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000b3c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080028f0 	.word	0x080028f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080028f0 	.word	0x080028f0

0800014c <AppMain>:
//Outputs : None
//Return  : 0 - exit success- send status code to OS
//Notes   : None
//*****************************************************************************
void AppMain()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	bool blFlag = FALSE;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]

	printf("Hello from STM32 via UART!\r\n");
 8000156:	4808      	ldr	r0, [pc, #32]	@ (8000178 <AppMain+0x2c>)
 8000158:	f001 fd5e 	bl	8001c18 <puts>
	while (TRUE)
	{
		blFlag = LEDBlink();
 800015c:	f000 f810 	bl	8000180 <LEDBlink>
 8000160:	4603      	mov	r3, r0
 8000162:	71fb      	strb	r3, [r7, #7]
		if(blFlag == FALSE)
 8000164:	79fb      	ldrb	r3, [r7, #7]
 8000166:	f083 0301 	eor.w	r3, r3, #1
 800016a:	b2db      	uxtb	r3, r3
 800016c:	2b00      	cmp	r3, #0
 800016e:	d0f5      	beq.n	800015c <AppMain+0x10>
		{
			printf("LED Blinking Failed");
 8000170:	4802      	ldr	r0, [pc, #8]	@ (800017c <AppMain+0x30>)
 8000172:	f001 fce9 	bl	8001b48 <iprintf>
		blFlag = LEDBlink();
 8000176:	e7f1      	b.n	800015c <AppMain+0x10>
 8000178:	08002908 	.word	0x08002908
 800017c:	08002924 	.word	0x08002924

08000180 <LEDBlink>:
//Outputs : None
//Return  : 0 - exit success- send status code to OS
//Notes   : None
//*****************************************************************************
bool LEDBlink()
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	static bool sblLEDState = FALSE;
	bool blFlag = FALSE;
 8000186:	2300      	movs	r3, #0
 8000188:	71fb      	strb	r3, [r7, #7]

	if(sblLEDState == FALSE)
 800018a:	4b15      	ldr	r3, [pc, #84]	@ (80001e0 <LEDBlink+0x60>)
 800018c:	781b      	ldrb	r3, [r3, #0]
 800018e:	f083 0301 	eor.w	r3, r3, #1
 8000192:	b2db      	uxtb	r3, r3
 8000194:	2b00      	cmp	r3, #0
 8000196:	d00d      	beq.n	80001b4 <LEDBlink+0x34>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000198:	2201      	movs	r2, #1
 800019a:	2120      	movs	r1, #32
 800019c:	4811      	ldr	r0, [pc, #68]	@ (80001e4 <LEDBlink+0x64>)
 800019e:	f000 fda3 	bl	8000ce8 <HAL_GPIO_WritePin>
		printf("LED ON\r\n");
 80001a2:	4811      	ldr	r0, [pc, #68]	@ (80001e8 <LEDBlink+0x68>)
 80001a4:	f001 fd38 	bl	8001c18 <puts>
		sblLEDState = TRUE;
 80001a8:	4b0d      	ldr	r3, [pc, #52]	@ (80001e0 <LEDBlink+0x60>)
 80001aa:	2201      	movs	r2, #1
 80001ac:	701a      	strb	r2, [r3, #0]
		blFlag = TRUE;
 80001ae:	2301      	movs	r3, #1
 80001b0:	71fb      	strb	r3, [r7, #7]
 80001b2:	e00c      	b.n	80001ce <LEDBlink+0x4e>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2120      	movs	r1, #32
 80001b8:	480a      	ldr	r0, [pc, #40]	@ (80001e4 <LEDBlink+0x64>)
 80001ba:	f000 fd95 	bl	8000ce8 <HAL_GPIO_WritePin>
		printf("LED OFF\r\n");
 80001be:	480b      	ldr	r0, [pc, #44]	@ (80001ec <LEDBlink+0x6c>)
 80001c0:	f001 fd2a 	bl	8001c18 <puts>
		sblLEDState = FALSE;
 80001c4:	4b06      	ldr	r3, [pc, #24]	@ (80001e0 <LEDBlink+0x60>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	701a      	strb	r2, [r3, #0]
		blFlag = TRUE;
 80001ca:	2301      	movs	r3, #1
 80001cc:	71fb      	strb	r3, [r7, #7]
	}
	HAL_Delay(1000);
 80001ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001d2:	f000 fad3 	bl	800077c <HAL_Delay>

	return blFlag;
 80001d6:	79fb      	ldrb	r3, [r7, #7]
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3708      	adds	r7, #8
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	20000084 	.word	0x20000084
 80001e4:	40010800 	.word	0x40010800
 80001e8:	08002938 	.word	0x08002938
 80001ec:	08002940 	.word	0x08002940

080001f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f4:	f000 fa60 	bl	80006b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f8:	f000 f809 	bl	800020e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fc:	f000 f872 	bl	80002e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000200:	f000 f846 	bl	8000290 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  AppMain();
 8000204:	f7ff ffa2 	bl	800014c <AppMain>
 8000208:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800020a:	4618      	mov	r0, r3
 800020c:	bd80      	pop	{r7, pc}

0800020e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020e:	b580      	push	{r7, lr}
 8000210:	b090      	sub	sp, #64	@ 0x40
 8000212:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000214:	f107 0318 	add.w	r3, r7, #24
 8000218:	2228      	movs	r2, #40	@ 0x28
 800021a:	2100      	movs	r1, #0
 800021c:	4618      	mov	r0, r3
 800021e:	f001 fddb 	bl	8001dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	605a      	str	r2, [r3, #4]
 800022a:	609a      	str	r2, [r3, #8]
 800022c:	60da      	str	r2, [r3, #12]
 800022e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000230:	2302      	movs	r3, #2
 8000232:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000234:	2301      	movs	r3, #1
 8000236:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000238:	2310      	movs	r3, #16
 800023a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023c:	2302      	movs	r3, #2
 800023e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000240:	2300      	movs	r3, #0
 8000242:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000244:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000248:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024a:	f107 0318 	add.w	r3, r7, #24
 800024e:	4618      	mov	r0, r3
 8000250:	f000 fd84 	bl	8000d5c <HAL_RCC_OscConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x50>
  {
    Error_Handler();
 800025a:	f000 f8b1 	bl	80003c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025e:	230f      	movs	r3, #15
 8000260:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000262:	2302      	movs	r3, #2
 8000264:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800026e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	2102      	movs	r1, #2
 8000278:	4618      	mov	r0, r3
 800027a:	f000 fff1 	bl	8001260 <HAL_RCC_ClockConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000284:	f000 f89c 	bl	80003c0 <Error_Handler>
  }
}
 8000288:	bf00      	nop
 800028a:	3740      	adds	r7, #64	@ 0x40
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}

08000290 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000294:	4b11      	ldr	r3, [pc, #68]	@ (80002dc <MX_USART2_UART_Init+0x4c>)
 8000296:	4a12      	ldr	r2, [pc, #72]	@ (80002e0 <MX_USART2_UART_Init+0x50>)
 8000298:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800029a:	4b10      	ldr	r3, [pc, #64]	@ (80002dc <MX_USART2_UART_Init+0x4c>)
 800029c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002a2:	4b0e      	ldr	r3, [pc, #56]	@ (80002dc <MX_USART2_UART_Init+0x4c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	@ (80002dc <MX_USART2_UART_Init+0x4c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002ae:	4b0b      	ldr	r3, [pc, #44]	@ (80002dc <MX_USART2_UART_Init+0x4c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002b4:	4b09      	ldr	r3, [pc, #36]	@ (80002dc <MX_USART2_UART_Init+0x4c>)
 80002b6:	220c      	movs	r2, #12
 80002b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ba:	4b08      	ldr	r3, [pc, #32]	@ (80002dc <MX_USART2_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c0:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <MX_USART2_UART_Init+0x4c>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002c6:	4805      	ldr	r0, [pc, #20]	@ (80002dc <MX_USART2_UART_Init+0x4c>)
 80002c8:	f001 f958 	bl	800157c <HAL_UART_Init>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002d2:	f000 f875 	bl	80003c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20000088 	.word	0x20000088
 80002e0:	40004400 	.word	0x40004400

080002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 0310 	add.w	r3, r7, #16
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f8:	4b2d      	ldr	r3, [pc, #180]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a2c      	ldr	r2, [pc, #176]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 80002fe:	f043 0310 	orr.w	r3, r3, #16
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b2a      	ldr	r3, [pc, #168]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0310 	and.w	r3, r3, #16
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000310:	4b27      	ldr	r3, [pc, #156]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a26      	ldr	r2, [pc, #152]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 8000316:	f043 0320 	orr.w	r3, r3, #32
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b24      	ldr	r3, [pc, #144]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0320 	and.w	r3, r3, #32
 8000324:	60bb      	str	r3, [r7, #8]
 8000326:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000328:	4b21      	ldr	r3, [pc, #132]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a20      	ldr	r2, [pc, #128]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b1e      	ldr	r3, [pc, #120]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0304 	and.w	r3, r3, #4
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000340:	4b1b      	ldr	r3, [pc, #108]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a1a      	ldr	r2, [pc, #104]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b18      	ldr	r3, [pc, #96]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0308 	and.w	r3, r3, #8
 8000354:	603b      	str	r3, [r7, #0]
 8000356:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	2120      	movs	r1, #32
 800035c:	4815      	ldr	r0, [pc, #84]	@ (80003b4 <MX_GPIO_Init+0xd0>)
 800035e:	f000 fcc3 	bl	8000ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000362:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000368:	4b13      	ldr	r3, [pc, #76]	@ (80003b8 <MX_GPIO_Init+0xd4>)
 800036a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036c:	2300      	movs	r3, #0
 800036e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000370:	f107 0310 	add.w	r3, r7, #16
 8000374:	4619      	mov	r1, r3
 8000376:	4811      	ldr	r0, [pc, #68]	@ (80003bc <MX_GPIO_Init+0xd8>)
 8000378:	f000 fb32 	bl	80009e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800037c:	2320      	movs	r3, #32
 800037e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000380:	2301      	movs	r3, #1
 8000382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000384:	2300      	movs	r3, #0
 8000386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000388:	2302      	movs	r3, #2
 800038a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800038c:	f107 0310 	add.w	r3, r7, #16
 8000390:	4619      	mov	r1, r3
 8000392:	4808      	ldr	r0, [pc, #32]	@ (80003b4 <MX_GPIO_Init+0xd0>)
 8000394:	f000 fb24 	bl	80009e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000398:	2200      	movs	r2, #0
 800039a:	2100      	movs	r1, #0
 800039c:	2028      	movs	r0, #40	@ 0x28
 800039e:	f000 fae8 	bl	8000972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003a2:	2028      	movs	r0, #40	@ 0x28
 80003a4:	f000 fb01 	bl	80009aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003a8:	bf00      	nop
 80003aa:	3720      	adds	r7, #32
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40021000 	.word	0x40021000
 80003b4:	40010800 	.word	0x40010800
 80003b8:	10110000 	.word	0x10110000
 80003bc:	40011000 	.word	0x40011000

080003c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c4:	b672      	cpsid	i
}
 80003c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c8:	bf00      	nop
 80003ca:	e7fd      	b.n	80003c8 <Error_Handler+0x8>

080003cc <_write>:
  }
  /* USER CODE END Error_Handler_Debug */
}

int _write(int file, char *ptr, int len)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	b29a      	uxth	r2, r3
 80003dc:	f04f 33ff 	mov.w	r3, #4294967295
 80003e0:	68b9      	ldr	r1, [r7, #8]
 80003e2:	4804      	ldr	r0, [pc, #16]	@ (80003f4 <_write+0x28>)
 80003e4:	f001 f91a 	bl	800161c <HAL_UART_Transmit>
    return len;
 80003e8:	687b      	ldr	r3, [r7, #4]
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3710      	adds	r7, #16
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000088 	.word	0x20000088

080003f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003fe:	4b15      	ldr	r3, [pc, #84]	@ (8000454 <HAL_MspInit+0x5c>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	4a14      	ldr	r2, [pc, #80]	@ (8000454 <HAL_MspInit+0x5c>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6193      	str	r3, [r2, #24]
 800040a:	4b12      	ldr	r3, [pc, #72]	@ (8000454 <HAL_MspInit+0x5c>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	60bb      	str	r3, [r7, #8]
 8000414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000416:	4b0f      	ldr	r3, [pc, #60]	@ (8000454 <HAL_MspInit+0x5c>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	4a0e      	ldr	r2, [pc, #56]	@ (8000454 <HAL_MspInit+0x5c>)
 800041c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000420:	61d3      	str	r3, [r2, #28]
 8000422:	4b0c      	ldr	r3, [pc, #48]	@ (8000454 <HAL_MspInit+0x5c>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800042e:	4b0a      	ldr	r3, [pc, #40]	@ (8000458 <HAL_MspInit+0x60>)
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	4a04      	ldr	r2, [pc, #16]	@ (8000458 <HAL_MspInit+0x60>)
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044a:	bf00      	nop
 800044c:	3714      	adds	r7, #20
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr
 8000454:	40021000 	.word	0x40021000
 8000458:	40010000 	.word	0x40010000

0800045c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b088      	sub	sp, #32
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	609a      	str	r2, [r3, #8]
 8000470:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a1b      	ldr	r2, [pc, #108]	@ (80004e4 <HAL_UART_MspInit+0x88>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d12f      	bne.n	80004dc <HAL_UART_MspInit+0x80>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800047c:	4b1a      	ldr	r3, [pc, #104]	@ (80004e8 <HAL_UART_MspInit+0x8c>)
 800047e:	69db      	ldr	r3, [r3, #28]
 8000480:	4a19      	ldr	r2, [pc, #100]	@ (80004e8 <HAL_UART_MspInit+0x8c>)
 8000482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000486:	61d3      	str	r3, [r2, #28]
 8000488:	4b17      	ldr	r3, [pc, #92]	@ (80004e8 <HAL_UART_MspInit+0x8c>)
 800048a:	69db      	ldr	r3, [r3, #28]
 800048c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000494:	4b14      	ldr	r3, [pc, #80]	@ (80004e8 <HAL_UART_MspInit+0x8c>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a13      	ldr	r2, [pc, #76]	@ (80004e8 <HAL_UART_MspInit+0x8c>)
 800049a:	f043 0304 	orr.w	r3, r3, #4
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b11      	ldr	r3, [pc, #68]	@ (80004e8 <HAL_UART_MspInit+0x8c>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f003 0304 	and.w	r3, r3, #4
 80004a8:	60bb      	str	r3, [r7, #8]
 80004aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004ac:	2304      	movs	r3, #4
 80004ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b0:	2302      	movs	r3, #2
 80004b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b4:	2303      	movs	r3, #3
 80004b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	4619      	mov	r1, r3
 80004be:	480b      	ldr	r0, [pc, #44]	@ (80004ec <HAL_UART_MspInit+0x90>)
 80004c0:	f000 fa8e 	bl	80009e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004c4:	2308      	movs	r3, #8
 80004c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d0:	f107 0310 	add.w	r3, r7, #16
 80004d4:	4619      	mov	r1, r3
 80004d6:	4805      	ldr	r0, [pc, #20]	@ (80004ec <HAL_UART_MspInit+0x90>)
 80004d8:	f000 fa82 	bl	80009e0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80004dc:	bf00      	nop
 80004de:	3720      	adds	r7, #32
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40004400 	.word	0x40004400
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40010800 	.word	0x40010800

080004f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <NMI_Handler+0x4>

080004f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <HardFault_Handler+0x4>

08000500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000504:	bf00      	nop
 8000506:	e7fd      	b.n	8000504 <MemManage_Handler+0x4>

08000508 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <BusFault_Handler+0x4>

08000510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <UsageFault_Handler+0x4>

08000518 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000540:	f000 f900 	bl	8000744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}

08000548 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800054c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000550:	f000 fbe2 	bl	8000d18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}

08000558 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	60b9      	str	r1, [r7, #8]
 8000562:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
 8000568:	e00a      	b.n	8000580 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800056a:	f3af 8000 	nop.w
 800056e:	4601      	mov	r1, r0
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	1c5a      	adds	r2, r3, #1
 8000574:	60ba      	str	r2, [r7, #8]
 8000576:	b2ca      	uxtb	r2, r1
 8000578:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	3301      	adds	r3, #1
 800057e:	617b      	str	r3, [r7, #20]
 8000580:	697a      	ldr	r2, [r7, #20]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	429a      	cmp	r2, r3
 8000586:	dbf0      	blt.n	800056a <_read+0x12>
  }

  return len;
 8000588:	687b      	ldr	r3, [r7, #4]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3718      	adds	r7, #24
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800059a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800059e:	4618      	mov	r0, r3
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005b8:	605a      	str	r2, [r3, #4]
  return 0;
 80005ba:	2300      	movs	r3, #0
}
 80005bc:	4618      	mov	r0, r3
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr

080005c6 <_isatty>:

int _isatty(int file)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b083      	sub	sp, #12
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005ce:	2301      	movs	r3, #1
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr

080005da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005da:	b480      	push	{r7}
 80005dc:	b085      	sub	sp, #20
 80005de:	af00      	add	r7, sp, #0
 80005e0:	60f8      	str	r0, [r7, #12]
 80005e2:	60b9      	str	r1, [r7, #8]
 80005e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005e6:	2300      	movs	r3, #0
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr
	...

080005f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005fc:	4a14      	ldr	r2, [pc, #80]	@ (8000650 <_sbrk+0x5c>)
 80005fe:	4b15      	ldr	r3, [pc, #84]	@ (8000654 <_sbrk+0x60>)
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000608:	4b13      	ldr	r3, [pc, #76]	@ (8000658 <_sbrk+0x64>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d102      	bne.n	8000616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000610:	4b11      	ldr	r3, [pc, #68]	@ (8000658 <_sbrk+0x64>)
 8000612:	4a12      	ldr	r2, [pc, #72]	@ (800065c <_sbrk+0x68>)
 8000614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000616:	4b10      	ldr	r3, [pc, #64]	@ (8000658 <_sbrk+0x64>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4413      	add	r3, r2
 800061e:	693a      	ldr	r2, [r7, #16]
 8000620:	429a      	cmp	r2, r3
 8000622:	d207      	bcs.n	8000634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000624:	f001 fc26 	bl	8001e74 <__errno>
 8000628:	4603      	mov	r3, r0
 800062a:	220c      	movs	r2, #12
 800062c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800062e:	f04f 33ff 	mov.w	r3, #4294967295
 8000632:	e009      	b.n	8000648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000634:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <_sbrk+0x64>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800063a:	4b07      	ldr	r3, [pc, #28]	@ (8000658 <_sbrk+0x64>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4413      	add	r3, r2
 8000642:	4a05      	ldr	r2, [pc, #20]	@ (8000658 <_sbrk+0x64>)
 8000644:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000646:	68fb      	ldr	r3, [r7, #12]
}
 8000648:	4618      	mov	r0, r3
 800064a:	3718      	adds	r7, #24
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20005000 	.word	0x20005000
 8000654:	00000400 	.word	0x00000400
 8000658:	200000d0 	.word	0x200000d0
 800065c:	20000228 	.word	0x20000228

08000660 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr

0800066c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800066c:	f7ff fff8 	bl	8000660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000670:	480b      	ldr	r0, [pc, #44]	@ (80006a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000672:	490c      	ldr	r1, [pc, #48]	@ (80006a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000674:	4a0c      	ldr	r2, [pc, #48]	@ (80006a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000678:	e002      	b.n	8000680 <LoopCopyDataInit>

0800067a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800067c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067e:	3304      	adds	r3, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000684:	d3f9      	bcc.n	800067a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000686:	4a09      	ldr	r2, [pc, #36]	@ (80006ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000688:	4c09      	ldr	r4, [pc, #36]	@ (80006b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800068c:	e001      	b.n	8000692 <LoopFillZerobss>

0800068e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000690:	3204      	adds	r2, #4

08000692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000694:	d3fb      	bcc.n	800068e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000696:	f001 fbf3 	bl	8001e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069a:	f7ff fda9 	bl	80001f0 <main>
  bx lr
 800069e:	4770      	bx	lr
  ldr r0, =_sdata
 80006a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80006a8:	080029b4 	.word	0x080029b4
  ldr r2, =_sbss
 80006ac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80006b0:	20000224 	.word	0x20000224

080006b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b4:	e7fe      	b.n	80006b4 <ADC1_2_IRQHandler>
	...

080006b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006bc:	4b08      	ldr	r3, [pc, #32]	@ (80006e0 <HAL_Init+0x28>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a07      	ldr	r2, [pc, #28]	@ (80006e0 <HAL_Init+0x28>)
 80006c2:	f043 0310 	orr.w	r3, r3, #16
 80006c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c8:	2003      	movs	r0, #3
 80006ca:	f000 f947 	bl	800095c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ce:	2000      	movs	r0, #0
 80006d0:	f000 f808 	bl	80006e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006d4:	f7ff fe90 	bl	80003f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40022000 	.word	0x40022000

080006e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006ec:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <HAL_InitTick+0x54>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4b12      	ldr	r3, [pc, #72]	@ (800073c <HAL_InitTick+0x58>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4619      	mov	r1, r3
 80006f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80006fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f95f 	bl	80009c6 <HAL_SYSTICK_Config>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	e00e      	b.n	8000730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b0f      	cmp	r3, #15
 8000716:	d80a      	bhi.n	800072e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000718:	2200      	movs	r2, #0
 800071a:	6879      	ldr	r1, [r7, #4]
 800071c:	f04f 30ff 	mov.w	r0, #4294967295
 8000720:	f000 f927 	bl	8000972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000724:	4a06      	ldr	r2, [pc, #24]	@ (8000740 <HAL_InitTick+0x5c>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800072a:	2300      	movs	r3, #0
 800072c:	e000      	b.n	8000730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800072e:	2301      	movs	r3, #1
}
 8000730:	4618      	mov	r0, r3
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000000 	.word	0x20000000
 800073c:	20000008 	.word	0x20000008
 8000740:	20000004 	.word	0x20000004

08000744 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000748:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <HAL_IncTick+0x1c>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	461a      	mov	r2, r3
 800074e:	4b05      	ldr	r3, [pc, #20]	@ (8000764 <HAL_IncTick+0x20>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4413      	add	r3, r2
 8000754:	4a03      	ldr	r2, [pc, #12]	@ (8000764 <HAL_IncTick+0x20>)
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	20000008 	.word	0x20000008
 8000764:	200000d4 	.word	0x200000d4

08000768 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return uwTick;
 800076c:	4b02      	ldr	r3, [pc, #8]	@ (8000778 <HAL_GetTick+0x10>)
 800076e:	681b      	ldr	r3, [r3, #0]
}
 8000770:	4618      	mov	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	200000d4 	.word	0x200000d4

0800077c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000784:	f7ff fff0 	bl	8000768 <HAL_GetTick>
 8000788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000794:	d005      	beq.n	80007a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000796:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <HAL_Delay+0x44>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	461a      	mov	r2, r3
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	4413      	add	r3, r2
 80007a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007a2:	bf00      	nop
 80007a4:	f7ff ffe0 	bl	8000768 <HAL_GetTick>
 80007a8:	4602      	mov	r2, r0
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	68fa      	ldr	r2, [r7, #12]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d8f7      	bhi.n	80007a4 <HAL_Delay+0x28>
  {
  }
}
 80007b4:	bf00      	nop
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000008 	.word	0x20000008

080007c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007e0:	4013      	ands	r3, r2
 80007e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f6:	4a04      	ldr	r2, [pc, #16]	@ (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	60d3      	str	r3, [r2, #12]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000810:	4b04      	ldr	r3, [pc, #16]	@ (8000824 <__NVIC_GetPriorityGrouping+0x18>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	f003 0307 	and.w	r3, r3, #7
}
 800081a:	4618      	mov	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	2b00      	cmp	r3, #0
 8000838:	db0b      	blt.n	8000852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	f003 021f 	and.w	r2, r3, #31
 8000840:	4906      	ldr	r1, [pc, #24]	@ (800085c <__NVIC_EnableIRQ+0x34>)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	095b      	lsrs	r3, r3, #5
 8000848:	2001      	movs	r0, #1
 800084a:	fa00 f202 	lsl.w	r2, r0, r2
 800084e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	e000e100 	.word	0xe000e100

08000860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	6039      	str	r1, [r7, #0]
 800086a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000870:	2b00      	cmp	r3, #0
 8000872:	db0a      	blt.n	800088a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	b2da      	uxtb	r2, r3
 8000878:	490c      	ldr	r1, [pc, #48]	@ (80008ac <__NVIC_SetPriority+0x4c>)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	0112      	lsls	r2, r2, #4
 8000880:	b2d2      	uxtb	r2, r2
 8000882:	440b      	add	r3, r1
 8000884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000888:	e00a      	b.n	80008a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4908      	ldr	r1, [pc, #32]	@ (80008b0 <__NVIC_SetPriority+0x50>)
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	f003 030f 	and.w	r3, r3, #15
 8000896:	3b04      	subs	r3, #4
 8000898:	0112      	lsls	r2, r2, #4
 800089a:	b2d2      	uxtb	r2, r2
 800089c:	440b      	add	r3, r1
 800089e:	761a      	strb	r2, [r3, #24]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000e100 	.word	0xe000e100
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b089      	sub	sp, #36	@ 0x24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	f1c3 0307 	rsb	r3, r3, #7
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	bf28      	it	cs
 80008d2:	2304      	movcs	r3, #4
 80008d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	3304      	adds	r3, #4
 80008da:	2b06      	cmp	r3, #6
 80008dc:	d902      	bls.n	80008e4 <NVIC_EncodePriority+0x30>
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3b03      	subs	r3, #3
 80008e2:	e000      	b.n	80008e6 <NVIC_EncodePriority+0x32>
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	f04f 32ff 	mov.w	r2, #4294967295
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	43da      	mvns	r2, r3
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	401a      	ands	r2, r3
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	fa01 f303 	lsl.w	r3, r1, r3
 8000906:	43d9      	mvns	r1, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800090c:	4313      	orrs	r3, r2
         );
}
 800090e:	4618      	mov	r0, r3
 8000910:	3724      	adds	r7, #36	@ 0x24
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3b01      	subs	r3, #1
 8000924:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000928:	d301      	bcc.n	800092e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800092a:	2301      	movs	r3, #1
 800092c:	e00f      	b.n	800094e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800092e:	4a0a      	ldr	r2, [pc, #40]	@ (8000958 <SysTick_Config+0x40>)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3b01      	subs	r3, #1
 8000934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000936:	210f      	movs	r1, #15
 8000938:	f04f 30ff 	mov.w	r0, #4294967295
 800093c:	f7ff ff90 	bl	8000860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000940:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <SysTick_Config+0x40>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000946:	4b04      	ldr	r3, [pc, #16]	@ (8000958 <SysTick_Config+0x40>)
 8000948:	2207      	movs	r2, #7
 800094a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	e000e010 	.word	0xe000e010

0800095c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f7ff ff2d 	bl	80007c4 <__NVIC_SetPriorityGrouping>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000972:	b580      	push	{r7, lr}
 8000974:	b086      	sub	sp, #24
 8000976:	af00      	add	r7, sp, #0
 8000978:	4603      	mov	r3, r0
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607a      	str	r2, [r7, #4]
 800097e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000984:	f7ff ff42 	bl	800080c <__NVIC_GetPriorityGrouping>
 8000988:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	68b9      	ldr	r1, [r7, #8]
 800098e:	6978      	ldr	r0, [r7, #20]
 8000990:	f7ff ff90 	bl	80008b4 <NVIC_EncodePriority>
 8000994:	4602      	mov	r2, r0
 8000996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff ff5f 	bl	8000860 <__NVIC_SetPriority>
}
 80009a2:	bf00      	nop
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b082      	sub	sp, #8
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	4603      	mov	r3, r0
 80009b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff35 	bl	8000828 <__NVIC_EnableIRQ>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f7ff ffa2 	bl	8000918 <SysTick_Config>
 80009d4:	4603      	mov	r3, r0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b08b      	sub	sp, #44	@ 0x2c
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009f2:	e169      	b.n	8000cc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009f4:	2201      	movs	r2, #1
 80009f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	69fa      	ldr	r2, [r7, #28]
 8000a04:	4013      	ands	r3, r2
 8000a06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	f040 8158 	bne.w	8000cc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	4a9a      	ldr	r2, [pc, #616]	@ (8000c80 <HAL_GPIO_Init+0x2a0>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d05e      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a1c:	4a98      	ldr	r2, [pc, #608]	@ (8000c80 <HAL_GPIO_Init+0x2a0>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d875      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a22:	4a98      	ldr	r2, [pc, #608]	@ (8000c84 <HAL_GPIO_Init+0x2a4>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d058      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a28:	4a96      	ldr	r2, [pc, #600]	@ (8000c84 <HAL_GPIO_Init+0x2a4>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d86f      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a2e:	4a96      	ldr	r2, [pc, #600]	@ (8000c88 <HAL_GPIO_Init+0x2a8>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d052      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a34:	4a94      	ldr	r2, [pc, #592]	@ (8000c88 <HAL_GPIO_Init+0x2a8>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d869      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a3a:	4a94      	ldr	r2, [pc, #592]	@ (8000c8c <HAL_GPIO_Init+0x2ac>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d04c      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a40:	4a92      	ldr	r2, [pc, #584]	@ (8000c8c <HAL_GPIO_Init+0x2ac>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d863      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a46:	4a92      	ldr	r2, [pc, #584]	@ (8000c90 <HAL_GPIO_Init+0x2b0>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d046      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a4c:	4a90      	ldr	r2, [pc, #576]	@ (8000c90 <HAL_GPIO_Init+0x2b0>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d85d      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a52:	2b12      	cmp	r3, #18
 8000a54:	d82a      	bhi.n	8000aac <HAL_GPIO_Init+0xcc>
 8000a56:	2b12      	cmp	r3, #18
 8000a58:	d859      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8000a60 <HAL_GPIO_Init+0x80>)
 8000a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a60:	08000adb 	.word	0x08000adb
 8000a64:	08000ab5 	.word	0x08000ab5
 8000a68:	08000ac7 	.word	0x08000ac7
 8000a6c:	08000b09 	.word	0x08000b09
 8000a70:	08000b0f 	.word	0x08000b0f
 8000a74:	08000b0f 	.word	0x08000b0f
 8000a78:	08000b0f 	.word	0x08000b0f
 8000a7c:	08000b0f 	.word	0x08000b0f
 8000a80:	08000b0f 	.word	0x08000b0f
 8000a84:	08000b0f 	.word	0x08000b0f
 8000a88:	08000b0f 	.word	0x08000b0f
 8000a8c:	08000b0f 	.word	0x08000b0f
 8000a90:	08000b0f 	.word	0x08000b0f
 8000a94:	08000b0f 	.word	0x08000b0f
 8000a98:	08000b0f 	.word	0x08000b0f
 8000a9c:	08000b0f 	.word	0x08000b0f
 8000aa0:	08000b0f 	.word	0x08000b0f
 8000aa4:	08000abd 	.word	0x08000abd
 8000aa8:	08000ad1 	.word	0x08000ad1
 8000aac:	4a79      	ldr	r2, [pc, #484]	@ (8000c94 <HAL_GPIO_Init+0x2b4>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d013      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ab2:	e02c      	b.n	8000b0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	623b      	str	r3, [r7, #32]
          break;
 8000aba:	e029      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	623b      	str	r3, [r7, #32]
          break;
 8000ac4:	e024      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	3308      	adds	r3, #8
 8000acc:	623b      	str	r3, [r7, #32]
          break;
 8000ace:	e01f      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	330c      	adds	r3, #12
 8000ad6:	623b      	str	r3, [r7, #32]
          break;
 8000ad8:	e01a      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d102      	bne.n	8000ae8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	623b      	str	r3, [r7, #32]
          break;
 8000ae6:	e013      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d105      	bne.n	8000afc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000af0:	2308      	movs	r3, #8
 8000af2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	69fa      	ldr	r2, [r7, #28]
 8000af8:	611a      	str	r2, [r3, #16]
          break;
 8000afa:	e009      	b.n	8000b10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000afc:	2308      	movs	r3, #8
 8000afe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	69fa      	ldr	r2, [r7, #28]
 8000b04:	615a      	str	r2, [r3, #20]
          break;
 8000b06:	e003      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
          break;
 8000b0c:	e000      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          break;
 8000b0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	2bff      	cmp	r3, #255	@ 0xff
 8000b14:	d801      	bhi.n	8000b1a <HAL_GPIO_Init+0x13a>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	e001      	b.n	8000b1e <HAL_GPIO_Init+0x13e>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	2bff      	cmp	r3, #255	@ 0xff
 8000b24:	d802      	bhi.n	8000b2c <HAL_GPIO_Init+0x14c>
 8000b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	e002      	b.n	8000b32 <HAL_GPIO_Init+0x152>
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2e:	3b08      	subs	r3, #8
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	210f      	movs	r1, #15
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b40:	43db      	mvns	r3, r3
 8000b42:	401a      	ands	r2, r3
 8000b44:	6a39      	ldr	r1, [r7, #32]
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4c:	431a      	orrs	r2, r3
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f000 80b1 	beq.w	8000cc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b60:	4b4d      	ldr	r3, [pc, #308]	@ (8000c98 <HAL_GPIO_Init+0x2b8>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a4c      	ldr	r2, [pc, #304]	@ (8000c98 <HAL_GPIO_Init+0x2b8>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b4a      	ldr	r3, [pc, #296]	@ (8000c98 <HAL_GPIO_Init+0x2b8>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b78:	4a48      	ldr	r2, [pc, #288]	@ (8000c9c <HAL_GPIO_Init+0x2bc>)
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7c:	089b      	lsrs	r3, r3, #2
 8000b7e:	3302      	adds	r3, #2
 8000b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b88:	f003 0303 	and.w	r3, r3, #3
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	220f      	movs	r2, #15
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a40      	ldr	r2, [pc, #256]	@ (8000ca0 <HAL_GPIO_Init+0x2c0>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d013      	beq.n	8000bcc <HAL_GPIO_Init+0x1ec>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a3f      	ldr	r2, [pc, #252]	@ (8000ca4 <HAL_GPIO_Init+0x2c4>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d00d      	beq.n	8000bc8 <HAL_GPIO_Init+0x1e8>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a3e      	ldr	r2, [pc, #248]	@ (8000ca8 <HAL_GPIO_Init+0x2c8>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d007      	beq.n	8000bc4 <HAL_GPIO_Init+0x1e4>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a3d      	ldr	r2, [pc, #244]	@ (8000cac <HAL_GPIO_Init+0x2cc>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d101      	bne.n	8000bc0 <HAL_GPIO_Init+0x1e0>
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	e006      	b.n	8000bce <HAL_GPIO_Init+0x1ee>
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	e004      	b.n	8000bce <HAL_GPIO_Init+0x1ee>
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	e002      	b.n	8000bce <HAL_GPIO_Init+0x1ee>
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e000      	b.n	8000bce <HAL_GPIO_Init+0x1ee>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bd0:	f002 0203 	and.w	r2, r2, #3
 8000bd4:	0092      	lsls	r2, r2, #2
 8000bd6:	4093      	lsls	r3, r2
 8000bd8:	68fa      	ldr	r2, [r7, #12]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bde:	492f      	ldr	r1, [pc, #188]	@ (8000c9c <HAL_GPIO_Init+0x2bc>)
 8000be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be2:	089b      	lsrs	r3, r3, #2
 8000be4:	3302      	adds	r3, #2
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d006      	beq.n	8000c06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000bfa:	689a      	ldr	r2, [r3, #8]
 8000bfc:	492c      	ldr	r1, [pc, #176]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	608b      	str	r3, [r1, #8]
 8000c04:	e006      	b.n	8000c14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c06:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c08:	689a      	ldr	r2, [r3, #8]
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	4928      	ldr	r1, [pc, #160]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c10:	4013      	ands	r3, r2
 8000c12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d006      	beq.n	8000c2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c20:	4b23      	ldr	r3, [pc, #140]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c22:	68da      	ldr	r2, [r3, #12]
 8000c24:	4922      	ldr	r1, [pc, #136]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	60cb      	str	r3, [r1, #12]
 8000c2c:	e006      	b.n	8000c3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c2e:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c30:	68da      	ldr	r2, [r3, #12]
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	491e      	ldr	r1, [pc, #120]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d006      	beq.n	8000c56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c48:	4b19      	ldr	r3, [pc, #100]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c4a:	685a      	ldr	r2, [r3, #4]
 8000c4c:	4918      	ldr	r1, [pc, #96]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	604b      	str	r3, [r1, #4]
 8000c54:	e006      	b.n	8000c64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c56:	4b16      	ldr	r3, [pc, #88]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c58:	685a      	ldr	r2, [r3, #4]
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	4914      	ldr	r1, [pc, #80]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c60:	4013      	ands	r3, r2
 8000c62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d021      	beq.n	8000cb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c70:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	490e      	ldr	r1, [pc, #56]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	600b      	str	r3, [r1, #0]
 8000c7c:	e021      	b.n	8000cc2 <HAL_GPIO_Init+0x2e2>
 8000c7e:	bf00      	nop
 8000c80:	10320000 	.word	0x10320000
 8000c84:	10310000 	.word	0x10310000
 8000c88:	10220000 	.word	0x10220000
 8000c8c:	10210000 	.word	0x10210000
 8000c90:	10120000 	.word	0x10120000
 8000c94:	10110000 	.word	0x10110000
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40010000 	.word	0x40010000
 8000ca0:	40010800 	.word	0x40010800
 8000ca4:	40010c00 	.word	0x40010c00
 8000ca8:	40011000 	.word	0x40011000
 8000cac:	40011400 	.word	0x40011400
 8000cb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <HAL_GPIO_Init+0x304>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	4909      	ldr	r1, [pc, #36]	@ (8000ce4 <HAL_GPIO_Init+0x304>)
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cce:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f47f ae8e 	bne.w	80009f4 <HAL_GPIO_Init+0x14>
  }
}
 8000cd8:	bf00      	nop
 8000cda:	bf00      	nop
 8000cdc:	372c      	adds	r7, #44	@ 0x2c
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	40010400 	.word	0x40010400

08000ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	807b      	strh	r3, [r7, #2]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cf8:	787b      	ldrb	r3, [r7, #1]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d003      	beq.n	8000d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cfe:	887a      	ldrh	r2, [r7, #2]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d04:	e003      	b.n	8000d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d06:	887b      	ldrh	r3, [r7, #2]
 8000d08:	041a      	lsls	r2, r3, #16
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	611a      	str	r2, [r3, #16]
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d22:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d24:	695a      	ldr	r2, [r3, #20]
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d006      	beq.n	8000d3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d2e:	4a05      	ldr	r2, [pc, #20]	@ (8000d44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d34:	88fb      	ldrh	r3, [r7, #6]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f806 	bl	8000d48 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40010400 	.word	0x40010400

08000d48 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d101      	bne.n	8000d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e272      	b.n	8001254 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f000 8087 	beq.w	8000e8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d7c:	4b92      	ldr	r3, [pc, #584]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 030c 	and.w	r3, r3, #12
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	d00c      	beq.n	8000da2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d88:	4b8f      	ldr	r3, [pc, #572]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 030c 	and.w	r3, r3, #12
 8000d90:	2b08      	cmp	r3, #8
 8000d92:	d112      	bne.n	8000dba <HAL_RCC_OscConfig+0x5e>
 8000d94:	4b8c      	ldr	r3, [pc, #560]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000da0:	d10b      	bne.n	8000dba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da2:	4b89      	ldr	r3, [pc, #548]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d06c      	beq.n	8000e88 <HAL_RCC_OscConfig+0x12c>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d168      	bne.n	8000e88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e24c      	b.n	8001254 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dc2:	d106      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x76>
 8000dc4:	4b80      	ldr	r3, [pc, #512]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a7f      	ldr	r2, [pc, #508]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000dca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	e02e      	b.n	8000e30 <HAL_RCC_OscConfig+0xd4>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10c      	bne.n	8000df4 <HAL_RCC_OscConfig+0x98>
 8000dda:	4b7b      	ldr	r3, [pc, #492]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a7a      	ldr	r2, [pc, #488]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000de0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	4b78      	ldr	r3, [pc, #480]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a77      	ldr	r2, [pc, #476]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	e01d      	b.n	8000e30 <HAL_RCC_OscConfig+0xd4>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000dfc:	d10c      	bne.n	8000e18 <HAL_RCC_OscConfig+0xbc>
 8000dfe:	4b72      	ldr	r3, [pc, #456]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a71      	ldr	r2, [pc, #452]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	4b6f      	ldr	r3, [pc, #444]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a6e      	ldr	r2, [pc, #440]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	e00b      	b.n	8000e30 <HAL_RCC_OscConfig+0xd4>
 8000e18:	4b6b      	ldr	r3, [pc, #428]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a6a      	ldr	r2, [pc, #424]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	4b68      	ldr	r3, [pc, #416]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a67      	ldr	r2, [pc, #412]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d013      	beq.n	8000e60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e38:	f7ff fc96 	bl	8000768 <HAL_GetTick>
 8000e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3e:	e008      	b.n	8000e52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e40:	f7ff fc92 	bl	8000768 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	2b64      	cmp	r3, #100	@ 0x64
 8000e4c:	d901      	bls.n	8000e52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e200      	b.n	8001254 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e52:	4b5d      	ldr	r3, [pc, #372]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d0f0      	beq.n	8000e40 <HAL_RCC_OscConfig+0xe4>
 8000e5e:	e014      	b.n	8000e8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e60:	f7ff fc82 	bl	8000768 <HAL_GetTick>
 8000e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e66:	e008      	b.n	8000e7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e68:	f7ff fc7e 	bl	8000768 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b64      	cmp	r3, #100	@ 0x64
 8000e74:	d901      	bls.n	8000e7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e1ec      	b.n	8001254 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e7a:	4b53      	ldr	r3, [pc, #332]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1f0      	bne.n	8000e68 <HAL_RCC_OscConfig+0x10c>
 8000e86:	e000      	b.n	8000e8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d063      	beq.n	8000f5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e96:	4b4c      	ldr	r3, [pc, #304]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 030c 	and.w	r3, r3, #12
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d00b      	beq.n	8000eba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ea2:	4b49      	ldr	r3, [pc, #292]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 030c 	and.w	r3, r3, #12
 8000eaa:	2b08      	cmp	r3, #8
 8000eac:	d11c      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x18c>
 8000eae:	4b46      	ldr	r3, [pc, #280]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d116      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eba:	4b43      	ldr	r3, [pc, #268]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d005      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x176>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	691b      	ldr	r3, [r3, #16]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d001      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e1c0      	b.n	8001254 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed2:	4b3d      	ldr	r3, [pc, #244]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	4939      	ldr	r1, [pc, #228]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ee6:	e03a      	b.n	8000f5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d020      	beq.n	8000f32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ef0:	4b36      	ldr	r3, [pc, #216]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef6:	f7ff fc37 	bl	8000768 <HAL_GetTick>
 8000efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000efc:	e008      	b.n	8000f10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000efe:	f7ff fc33 	bl	8000768 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d901      	bls.n	8000f10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e1a1      	b.n	8001254 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f10:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0f0      	beq.n	8000efe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	4927      	ldr	r1, [pc, #156]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	600b      	str	r3, [r1, #0]
 8000f30:	e015      	b.n	8000f5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f32:	4b26      	ldr	r3, [pc, #152]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f38:	f7ff fc16 	bl	8000768 <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f40:	f7ff fc12 	bl	8000768 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e180      	b.n	8001254 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f52:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1f0      	bne.n	8000f40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0308 	and.w	r3, r3, #8
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d03a      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d019      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f72:	4b17      	ldr	r3, [pc, #92]	@ (8000fd0 <HAL_RCC_OscConfig+0x274>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f78:	f7ff fbf6 	bl	8000768 <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f80:	f7ff fbf2 	bl	8000768 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e160      	b.n	8001254 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f92:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0f0      	beq.n	8000f80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f000 face 	bl	8001540 <RCC_Delay>
 8000fa4:	e01c      	b.n	8000fe0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <HAL_RCC_OscConfig+0x274>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fac:	f7ff fbdc 	bl	8000768 <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fb2:	e00f      	b.n	8000fd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb4:	f7ff fbd8 	bl	8000768 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d908      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e146      	b.n	8001254 <HAL_RCC_OscConfig+0x4f8>
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	42420000 	.word	0x42420000
 8000fd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd4:	4b92      	ldr	r3, [pc, #584]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1e9      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 80a6 	beq.w	800113a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ff2:	4b8b      	ldr	r3, [pc, #556]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10d      	bne.n	800101a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b88      	ldr	r3, [pc, #544]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	4a87      	ldr	r2, [pc, #540]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001008:	61d3      	str	r3, [r2, #28]
 800100a:	4b85      	ldr	r3, [pc, #532]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001016:	2301      	movs	r3, #1
 8001018:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800101a:	4b82      	ldr	r3, [pc, #520]	@ (8001224 <HAL_RCC_OscConfig+0x4c8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001022:	2b00      	cmp	r3, #0
 8001024:	d118      	bne.n	8001058 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001026:	4b7f      	ldr	r3, [pc, #508]	@ (8001224 <HAL_RCC_OscConfig+0x4c8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a7e      	ldr	r2, [pc, #504]	@ (8001224 <HAL_RCC_OscConfig+0x4c8>)
 800102c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001032:	f7ff fb99 	bl	8000768 <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800103a:	f7ff fb95 	bl	8000768 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b64      	cmp	r3, #100	@ 0x64
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e103      	b.n	8001254 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800104c:	4b75      	ldr	r3, [pc, #468]	@ (8001224 <HAL_RCC_OscConfig+0x4c8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f0      	beq.n	800103a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d106      	bne.n	800106e <HAL_RCC_OscConfig+0x312>
 8001060:	4b6f      	ldr	r3, [pc, #444]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	4a6e      	ldr	r2, [pc, #440]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6213      	str	r3, [r2, #32]
 800106c:	e02d      	b.n	80010ca <HAL_RCC_OscConfig+0x36e>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10c      	bne.n	8001090 <HAL_RCC_OscConfig+0x334>
 8001076:	4b6a      	ldr	r3, [pc, #424]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	4a69      	ldr	r2, [pc, #420]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 800107c:	f023 0301 	bic.w	r3, r3, #1
 8001080:	6213      	str	r3, [r2, #32]
 8001082:	4b67      	ldr	r3, [pc, #412]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	4a66      	ldr	r2, [pc, #408]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 8001088:	f023 0304 	bic.w	r3, r3, #4
 800108c:	6213      	str	r3, [r2, #32]
 800108e:	e01c      	b.n	80010ca <HAL_RCC_OscConfig+0x36e>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	2b05      	cmp	r3, #5
 8001096:	d10c      	bne.n	80010b2 <HAL_RCC_OscConfig+0x356>
 8001098:	4b61      	ldr	r3, [pc, #388]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	4a60      	ldr	r2, [pc, #384]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	6213      	str	r3, [r2, #32]
 80010a4:	4b5e      	ldr	r3, [pc, #376]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	4a5d      	ldr	r2, [pc, #372]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	6213      	str	r3, [r2, #32]
 80010b0:	e00b      	b.n	80010ca <HAL_RCC_OscConfig+0x36e>
 80010b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	4a5a      	ldr	r2, [pc, #360]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 80010b8:	f023 0301 	bic.w	r3, r3, #1
 80010bc:	6213      	str	r3, [r2, #32]
 80010be:	4b58      	ldr	r3, [pc, #352]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	4a57      	ldr	r2, [pc, #348]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 80010c4:	f023 0304 	bic.w	r3, r3, #4
 80010c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d015      	beq.n	80010fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d2:	f7ff fb49 	bl	8000768 <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d8:	e00a      	b.n	80010f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010da:	f7ff fb45 	bl	8000768 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e0b1      	b.n	8001254 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0ee      	beq.n	80010da <HAL_RCC_OscConfig+0x37e>
 80010fc:	e014      	b.n	8001128 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fe:	f7ff fb33 	bl	8000768 <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001104:	e00a      	b.n	800111c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001106:	f7ff fb2f 	bl	8000768 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001114:	4293      	cmp	r3, r2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e09b      	b.n	8001254 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800111c:	4b40      	ldr	r3, [pc, #256]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1ee      	bne.n	8001106 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001128:	7dfb      	ldrb	r3, [r7, #23]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d105      	bne.n	800113a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800112e:	4b3c      	ldr	r3, [pc, #240]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	4a3b      	ldr	r2, [pc, #236]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 8001134:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001138:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	2b00      	cmp	r3, #0
 8001140:	f000 8087 	beq.w	8001252 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001144:	4b36      	ldr	r3, [pc, #216]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 030c 	and.w	r3, r3, #12
 800114c:	2b08      	cmp	r3, #8
 800114e:	d061      	beq.n	8001214 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69db      	ldr	r3, [r3, #28]
 8001154:	2b02      	cmp	r3, #2
 8001156:	d146      	bne.n	80011e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001158:	4b33      	ldr	r3, [pc, #204]	@ (8001228 <HAL_RCC_OscConfig+0x4cc>)
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115e:	f7ff fb03 	bl	8000768 <HAL_GetTick>
 8001162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001164:	e008      	b.n	8001178 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001166:	f7ff faff 	bl	8000768 <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e06d      	b.n	8001254 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001178:	4b29      	ldr	r3, [pc, #164]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1f0      	bne.n	8001166 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800118c:	d108      	bne.n	80011a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800118e:	4b24      	ldr	r3, [pc, #144]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	4921      	ldr	r1, [pc, #132]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	4313      	orrs	r3, r2
 800119e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a19      	ldr	r1, [r3, #32]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b0:	430b      	orrs	r3, r1
 80011b2:	491b      	ldr	r1, [pc, #108]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <HAL_RCC_OscConfig+0x4cc>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff fad3 	bl	8000768 <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c6:	f7ff facf 	bl	8000768 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e03d      	b.n	8001254 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f0      	beq.n	80011c6 <HAL_RCC_OscConfig+0x46a>
 80011e4:	e035      	b.n	8001252 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e6:	4b10      	ldr	r3, [pc, #64]	@ (8001228 <HAL_RCC_OscConfig+0x4cc>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fabc 	bl	8000768 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f4:	f7ff fab8 	bl	8000768 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e026      	b.n	8001254 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_RCC_OscConfig+0x4c4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f0      	bne.n	80011f4 <HAL_RCC_OscConfig+0x498>
 8001212:	e01e      	b.n	8001252 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69db      	ldr	r3, [r3, #28]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d107      	bne.n	800122c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e019      	b.n	8001254 <HAL_RCC_OscConfig+0x4f8>
 8001220:	40021000 	.word	0x40021000
 8001224:	40007000 	.word	0x40007000
 8001228:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800122c:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <HAL_RCC_OscConfig+0x500>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	429a      	cmp	r2, r3
 800123e:	d106      	bne.n	800124e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800124a:	429a      	cmp	r2, r3
 800124c:	d001      	beq.n	8001252 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40021000 	.word	0x40021000

08001260 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d101      	bne.n	8001274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e0d0      	b.n	8001416 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001274:	4b6a      	ldr	r3, [pc, #424]	@ (8001420 <HAL_RCC_ClockConfig+0x1c0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d910      	bls.n	80012a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001282:	4b67      	ldr	r3, [pc, #412]	@ (8001420 <HAL_RCC_ClockConfig+0x1c0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f023 0207 	bic.w	r2, r3, #7
 800128a:	4965      	ldr	r1, [pc, #404]	@ (8001420 <HAL_RCC_ClockConfig+0x1c0>)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	4313      	orrs	r3, r2
 8001290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001292:	4b63      	ldr	r3, [pc, #396]	@ (8001420 <HAL_RCC_ClockConfig+0x1c0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	429a      	cmp	r2, r3
 800129e:	d001      	beq.n	80012a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e0b8      	b.n	8001416 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d020      	beq.n	80012f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d005      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012bc:	4b59      	ldr	r3, [pc, #356]	@ (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	4a58      	ldr	r2, [pc, #352]	@ (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 80012c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80012c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d005      	beq.n	80012e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012d4:	4b53      	ldr	r3, [pc, #332]	@ (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	4a52      	ldr	r2, [pc, #328]	@ (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 80012da:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80012de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012e0:	4b50      	ldr	r3, [pc, #320]	@ (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	494d      	ldr	r1, [pc, #308]	@ (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d040      	beq.n	8001380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d107      	bne.n	8001316 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001306:	4b47      	ldr	r3, [pc, #284]	@ (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d115      	bne.n	800133e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e07f      	b.n	8001416 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b02      	cmp	r3, #2
 800131c:	d107      	bne.n	800132e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131e:	4b41      	ldr	r3, [pc, #260]	@ (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d109      	bne.n	800133e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e073      	b.n	8001416 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132e:	4b3d      	ldr	r3, [pc, #244]	@ (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e06b      	b.n	8001416 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800133e:	4b39      	ldr	r3, [pc, #228]	@ (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f023 0203 	bic.w	r2, r3, #3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	4936      	ldr	r1, [pc, #216]	@ (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 800134c:	4313      	orrs	r3, r2
 800134e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001350:	f7ff fa0a 	bl	8000768 <HAL_GetTick>
 8001354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001356:	e00a      	b.n	800136e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001358:	f7ff fa06 	bl	8000768 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001366:	4293      	cmp	r3, r2
 8001368:	d901      	bls.n	800136e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e053      	b.n	8001416 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800136e:	4b2d      	ldr	r3, [pc, #180]	@ (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 020c 	and.w	r2, r3, #12
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	429a      	cmp	r2, r3
 800137e:	d1eb      	bne.n	8001358 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001380:	4b27      	ldr	r3, [pc, #156]	@ (8001420 <HAL_RCC_ClockConfig+0x1c0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d210      	bcs.n	80013b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138e:	4b24      	ldr	r3, [pc, #144]	@ (8001420 <HAL_RCC_ClockConfig+0x1c0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 0207 	bic.w	r2, r3, #7
 8001396:	4922      	ldr	r1, [pc, #136]	@ (8001420 <HAL_RCC_ClockConfig+0x1c0>)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	4313      	orrs	r3, r2
 800139c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800139e:	4b20      	ldr	r3, [pc, #128]	@ (8001420 <HAL_RCC_ClockConfig+0x1c0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d001      	beq.n	80013b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e032      	b.n	8001416 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d008      	beq.n	80013ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013bc:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	4916      	ldr	r1, [pc, #88]	@ (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d009      	beq.n	80013ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013da:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	490e      	ldr	r1, [pc, #56]	@ (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013ee:	f000 f821 	bl	8001434 <HAL_RCC_GetSysClockFreq>
 80013f2:	4602      	mov	r2, r0
 80013f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	091b      	lsrs	r3, r3, #4
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	490a      	ldr	r1, [pc, #40]	@ (8001428 <HAL_RCC_ClockConfig+0x1c8>)
 8001400:	5ccb      	ldrb	r3, [r1, r3]
 8001402:	fa22 f303 	lsr.w	r3, r2, r3
 8001406:	4a09      	ldr	r2, [pc, #36]	@ (800142c <HAL_RCC_ClockConfig+0x1cc>)
 8001408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <HAL_RCC_ClockConfig+0x1d0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f968 	bl	80006e4 <HAL_InitTick>

  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40022000 	.word	0x40022000
 8001424:	40021000 	.word	0x40021000
 8001428:	0800294c 	.word	0x0800294c
 800142c:	20000000 	.word	0x20000000
 8001430:	20000004 	.word	0x20000004

08001434 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800144e:	4b1e      	ldr	r3, [pc, #120]	@ (80014c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b04      	cmp	r3, #4
 800145c:	d002      	beq.n	8001464 <HAL_RCC_GetSysClockFreq+0x30>
 800145e:	2b08      	cmp	r3, #8
 8001460:	d003      	beq.n	800146a <HAL_RCC_GetSysClockFreq+0x36>
 8001462:	e027      	b.n	80014b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001464:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <HAL_RCC_GetSysClockFreq+0x98>)
 8001466:	613b      	str	r3, [r7, #16]
      break;
 8001468:	e027      	b.n	80014ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	0c9b      	lsrs	r3, r3, #18
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	4a17      	ldr	r2, [pc, #92]	@ (80014d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001474:	5cd3      	ldrb	r3, [r2, r3]
 8001476:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d010      	beq.n	80014a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001482:	4b11      	ldr	r3, [pc, #68]	@ (80014c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	0c5b      	lsrs	r3, r3, #17
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	4a11      	ldr	r2, [pc, #68]	@ (80014d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800148e:	5cd3      	ldrb	r3, [r2, r3]
 8001490:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a0d      	ldr	r2, [pc, #52]	@ (80014cc <HAL_RCC_GetSysClockFreq+0x98>)
 8001496:	fb03 f202 	mul.w	r2, r3, r2
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	e004      	b.n	80014ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a0c      	ldr	r2, [pc, #48]	@ (80014d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80014a8:	fb02 f303 	mul.w	r3, r2, r3
 80014ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	613b      	str	r3, [r7, #16]
      break;
 80014b2:	e002      	b.n	80014ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014b4:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <HAL_RCC_GetSysClockFreq+0x98>)
 80014b6:	613b      	str	r3, [r7, #16]
      break;
 80014b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ba:	693b      	ldr	r3, [r7, #16]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	371c      	adds	r7, #28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000
 80014cc:	007a1200 	.word	0x007a1200
 80014d0:	08002964 	.word	0x08002964
 80014d4:	08002974 	.word	0x08002974
 80014d8:	003d0900 	.word	0x003d0900

080014dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014e0:	4b02      	ldr	r3, [pc, #8]	@ (80014ec <HAL_RCC_GetHCLKFreq+0x10>)
 80014e2:	681b      	ldr	r3, [r3, #0]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	20000000 	.word	0x20000000

080014f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014f4:	f7ff fff2 	bl	80014dc <HAL_RCC_GetHCLKFreq>
 80014f8:	4602      	mov	r2, r0
 80014fa:	4b05      	ldr	r3, [pc, #20]	@ (8001510 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	0a1b      	lsrs	r3, r3, #8
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	4903      	ldr	r1, [pc, #12]	@ (8001514 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001506:	5ccb      	ldrb	r3, [r1, r3]
 8001508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800150c:	4618      	mov	r0, r3
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40021000 	.word	0x40021000
 8001514:	0800295c 	.word	0x0800295c

08001518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800151c:	f7ff ffde 	bl	80014dc <HAL_RCC_GetHCLKFreq>
 8001520:	4602      	mov	r2, r0
 8001522:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	0adb      	lsrs	r3, r3, #11
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	4903      	ldr	r1, [pc, #12]	@ (800153c <HAL_RCC_GetPCLK2Freq+0x24>)
 800152e:	5ccb      	ldrb	r3, [r1, r3]
 8001530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001534:	4618      	mov	r0, r3
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40021000 	.word	0x40021000
 800153c:	0800295c 	.word	0x0800295c

08001540 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001548:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <RCC_Delay+0x34>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0a      	ldr	r2, [pc, #40]	@ (8001578 <RCC_Delay+0x38>)
 800154e:	fba2 2303 	umull	r2, r3, r2, r3
 8001552:	0a5b      	lsrs	r3, r3, #9
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	fb02 f303 	mul.w	r3, r2, r3
 800155a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800155c:	bf00      	nop
  }
  while (Delay --);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	1e5a      	subs	r2, r3, #1
 8001562:	60fa      	str	r2, [r7, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f9      	bne.n	800155c <RCC_Delay+0x1c>
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	20000000 	.word	0x20000000
 8001578:	10624dd3 	.word	0x10624dd3

0800157c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e042      	b.n	8001614 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d106      	bne.n	80015a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7fe ff5a 	bl	800045c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2224      	movs	r2, #36	@ 0x24
 80015ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80015be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f971 	bl	80018a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	691a      	ldr	r2, [r3, #16]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80015d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	695a      	ldr	r2, [r3, #20]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80015e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80015f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2220      	movs	r2, #32
 8001600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2220      	movs	r2, #32
 8001608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	@ 0x28
 8001620:	af02      	add	r7, sp, #8
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	4613      	mov	r3, r2
 800162a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b20      	cmp	r3, #32
 800163a:	d175      	bne.n	8001728 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d002      	beq.n	8001648 <HAL_UART_Transmit+0x2c>
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e06e      	b.n	800172a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2200      	movs	r2, #0
 8001650:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2221      	movs	r2, #33	@ 0x21
 8001656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800165a:	f7ff f885 	bl	8000768 <HAL_GetTick>
 800165e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	88fa      	ldrh	r2, [r7, #6]
 8001664:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	88fa      	ldrh	r2, [r7, #6]
 800166a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001674:	d108      	bne.n	8001688 <HAL_UART_Transmit+0x6c>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d104      	bne.n	8001688 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	61bb      	str	r3, [r7, #24]
 8001686:	e003      	b.n	8001690 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001690:	e02e      	b.n	80016f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2200      	movs	r2, #0
 800169a:	2180      	movs	r1, #128	@ 0x80
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f000 f848 	bl	8001732 <UART_WaitOnFlagUntilTimeout>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d005      	beq.n	80016b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2220      	movs	r2, #32
 80016ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e03a      	b.n	800172a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10b      	bne.n	80016d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80016c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	3302      	adds	r3, #2
 80016ce:	61bb      	str	r3, [r7, #24]
 80016d0:	e007      	b.n	80016e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	3301      	adds	r3, #1
 80016e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	3b01      	subs	r3, #1
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1cb      	bne.n	8001692 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	2200      	movs	r2, #0
 8001702:	2140      	movs	r1, #64	@ 0x40
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f000 f814 	bl	8001732 <UART_WaitOnFlagUntilTimeout>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2220      	movs	r2, #32
 8001714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e006      	b.n	800172a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2220      	movs	r2, #32
 8001720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	e000      	b.n	800172a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001728:	2302      	movs	r3, #2
  }
}
 800172a:	4618      	mov	r0, r3
 800172c:	3720      	adds	r7, #32
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	603b      	str	r3, [r7, #0]
 800173e:	4613      	mov	r3, r2
 8001740:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001742:	e03b      	b.n	80017bc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001744:	6a3b      	ldr	r3, [r7, #32]
 8001746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174a:	d037      	beq.n	80017bc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800174c:	f7ff f80c 	bl	8000768 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	6a3a      	ldr	r2, [r7, #32]
 8001758:	429a      	cmp	r2, r3
 800175a:	d302      	bcc.n	8001762 <UART_WaitOnFlagUntilTimeout+0x30>
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e03a      	b.n	80017dc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d023      	beq.n	80017bc <UART_WaitOnFlagUntilTimeout+0x8a>
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	2b80      	cmp	r3, #128	@ 0x80
 8001778:	d020      	beq.n	80017bc <UART_WaitOnFlagUntilTimeout+0x8a>
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	2b40      	cmp	r3, #64	@ 0x40
 800177e:	d01d      	beq.n	80017bc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	2b08      	cmp	r3, #8
 800178c:	d116      	bne.n	80017bc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f000 f81d 	bl	80017e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2208      	movs	r2, #8
 80017ae:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e00f      	b.n	80017dc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	4013      	ands	r3, r2
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	bf0c      	ite	eq
 80017cc:	2301      	moveq	r3, #1
 80017ce:	2300      	movne	r3, #0
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	461a      	mov	r2, r3
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d0b4      	beq.n	8001744 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b095      	sub	sp, #84	@ 0x54
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	330c      	adds	r3, #12
 80017f2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017f6:	e853 3f00 	ldrex	r3, [r3]
 80017fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80017fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001802:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	330c      	adds	r3, #12
 800180a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800180c:	643a      	str	r2, [r7, #64]	@ 0x40
 800180e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001810:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001812:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001814:	e841 2300 	strex	r3, r2, [r1]
 8001818:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800181a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1e5      	bne.n	80017ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3314      	adds	r3, #20
 8001826:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	e853 3f00 	ldrex	r3, [r3]
 800182e:	61fb      	str	r3, [r7, #28]
   return(result);
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f023 0301 	bic.w	r3, r3, #1
 8001836:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3314      	adds	r3, #20
 800183e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001840:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001842:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001844:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001846:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001848:	e841 2300 	strex	r3, r2, [r1]
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800184e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1e5      	bne.n	8001820 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001858:	2b01      	cmp	r3, #1
 800185a:	d119      	bne.n	8001890 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	330c      	adds	r3, #12
 8001862:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	e853 3f00 	ldrex	r3, [r3]
 800186a:	60bb      	str	r3, [r7, #8]
   return(result);
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f023 0310 	bic.w	r3, r3, #16
 8001872:	647b      	str	r3, [r7, #68]	@ 0x44
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	330c      	adds	r3, #12
 800187a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800187c:	61ba      	str	r2, [r7, #24]
 800187e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001880:	6979      	ldr	r1, [r7, #20]
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	e841 2300 	strex	r3, r2, [r1]
 8001888:	613b      	str	r3, [r7, #16]
   return(result);
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1e5      	bne.n	800185c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2220      	movs	r2, #32
 8001894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800189e:	bf00      	nop
 80018a0:	3754      	adds	r7, #84	@ 0x54
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80018e2:	f023 030c 	bic.w	r3, r3, #12
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6812      	ldr	r2, [r2, #0]
 80018ea:	68b9      	ldr	r1, [r7, #8]
 80018ec:	430b      	orrs	r3, r1
 80018ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699a      	ldr	r2, [r3, #24]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a2c      	ldr	r2, [pc, #176]	@ (80019bc <UART_SetConfig+0x114>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d103      	bne.n	8001918 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001910:	f7ff fe02 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	e002      	b.n	800191e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001918:	f7ff fdea 	bl	80014f0 <HAL_RCC_GetPCLK1Freq>
 800191c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	009a      	lsls	r2, r3, #2
 8001928:	441a      	add	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	fbb2 f3f3 	udiv	r3, r2, r3
 8001934:	4a22      	ldr	r2, [pc, #136]	@ (80019c0 <UART_SetConfig+0x118>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	0119      	lsls	r1, r3, #4
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	009a      	lsls	r2, r3, #2
 8001948:	441a      	add	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	fbb2 f2f3 	udiv	r2, r2, r3
 8001954:	4b1a      	ldr	r3, [pc, #104]	@ (80019c0 <UART_SetConfig+0x118>)
 8001956:	fba3 0302 	umull	r0, r3, r3, r2
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	2064      	movs	r0, #100	@ 0x64
 800195e:	fb00 f303 	mul.w	r3, r0, r3
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	3332      	adds	r3, #50	@ 0x32
 8001968:	4a15      	ldr	r2, [pc, #84]	@ (80019c0 <UART_SetConfig+0x118>)
 800196a:	fba2 2303 	umull	r2, r3, r2, r3
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001974:	4419      	add	r1, r3
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	009a      	lsls	r2, r3, #2
 8001980:	441a      	add	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	fbb2 f2f3 	udiv	r2, r2, r3
 800198c:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <UART_SetConfig+0x118>)
 800198e:	fba3 0302 	umull	r0, r3, r3, r2
 8001992:	095b      	lsrs	r3, r3, #5
 8001994:	2064      	movs	r0, #100	@ 0x64
 8001996:	fb00 f303 	mul.w	r3, r0, r3
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	011b      	lsls	r3, r3, #4
 800199e:	3332      	adds	r3, #50	@ 0x32
 80019a0:	4a07      	ldr	r2, [pc, #28]	@ (80019c0 <UART_SetConfig+0x118>)
 80019a2:	fba2 2303 	umull	r2, r3, r2, r3
 80019a6:	095b      	lsrs	r3, r3, #5
 80019a8:	f003 020f 	and.w	r2, r3, #15
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	440a      	add	r2, r1
 80019b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40013800 	.word	0x40013800
 80019c0:	51eb851f 	.word	0x51eb851f

080019c4 <std>:
 80019c4:	2300      	movs	r3, #0
 80019c6:	b510      	push	{r4, lr}
 80019c8:	4604      	mov	r4, r0
 80019ca:	e9c0 3300 	strd	r3, r3, [r0]
 80019ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80019d2:	6083      	str	r3, [r0, #8]
 80019d4:	8181      	strh	r1, [r0, #12]
 80019d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80019d8:	81c2      	strh	r2, [r0, #14]
 80019da:	6183      	str	r3, [r0, #24]
 80019dc:	4619      	mov	r1, r3
 80019de:	2208      	movs	r2, #8
 80019e0:	305c      	adds	r0, #92	@ 0x5c
 80019e2:	f000 f9f9 	bl	8001dd8 <memset>
 80019e6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a1c <std+0x58>)
 80019e8:	6224      	str	r4, [r4, #32]
 80019ea:	6263      	str	r3, [r4, #36]	@ 0x24
 80019ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <std+0x5c>)
 80019ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 80019f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <std+0x60>)
 80019f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80019f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <std+0x64>)
 80019f6:	6323      	str	r3, [r4, #48]	@ 0x30
 80019f8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a2c <std+0x68>)
 80019fa:	429c      	cmp	r4, r3
 80019fc:	d006      	beq.n	8001a0c <std+0x48>
 80019fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001a02:	4294      	cmp	r4, r2
 8001a04:	d002      	beq.n	8001a0c <std+0x48>
 8001a06:	33d0      	adds	r3, #208	@ 0xd0
 8001a08:	429c      	cmp	r4, r3
 8001a0a:	d105      	bne.n	8001a18 <std+0x54>
 8001a0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a14:	f000 ba58 	b.w	8001ec8 <__retarget_lock_init_recursive>
 8001a18:	bd10      	pop	{r4, pc}
 8001a1a:	bf00      	nop
 8001a1c:	08001c29 	.word	0x08001c29
 8001a20:	08001c4b 	.word	0x08001c4b
 8001a24:	08001c83 	.word	0x08001c83
 8001a28:	08001ca7 	.word	0x08001ca7
 8001a2c:	200000d8 	.word	0x200000d8

08001a30 <stdio_exit_handler>:
 8001a30:	4a02      	ldr	r2, [pc, #8]	@ (8001a3c <stdio_exit_handler+0xc>)
 8001a32:	4903      	ldr	r1, [pc, #12]	@ (8001a40 <stdio_exit_handler+0x10>)
 8001a34:	4803      	ldr	r0, [pc, #12]	@ (8001a44 <stdio_exit_handler+0x14>)
 8001a36:	f000 b869 	b.w	8001b0c <_fwalk_sglue>
 8001a3a:	bf00      	nop
 8001a3c:	2000000c 	.word	0x2000000c
 8001a40:	0800275d 	.word	0x0800275d
 8001a44:	2000001c 	.word	0x2000001c

08001a48 <cleanup_stdio>:
 8001a48:	6841      	ldr	r1, [r0, #4]
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <cleanup_stdio+0x34>)
 8001a4c:	b510      	push	{r4, lr}
 8001a4e:	4299      	cmp	r1, r3
 8001a50:	4604      	mov	r4, r0
 8001a52:	d001      	beq.n	8001a58 <cleanup_stdio+0x10>
 8001a54:	f000 fe82 	bl	800275c <_fflush_r>
 8001a58:	68a1      	ldr	r1, [r4, #8]
 8001a5a:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <cleanup_stdio+0x38>)
 8001a5c:	4299      	cmp	r1, r3
 8001a5e:	d002      	beq.n	8001a66 <cleanup_stdio+0x1e>
 8001a60:	4620      	mov	r0, r4
 8001a62:	f000 fe7b 	bl	800275c <_fflush_r>
 8001a66:	68e1      	ldr	r1, [r4, #12]
 8001a68:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <cleanup_stdio+0x3c>)
 8001a6a:	4299      	cmp	r1, r3
 8001a6c:	d004      	beq.n	8001a78 <cleanup_stdio+0x30>
 8001a6e:	4620      	mov	r0, r4
 8001a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a74:	f000 be72 	b.w	800275c <_fflush_r>
 8001a78:	bd10      	pop	{r4, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200000d8 	.word	0x200000d8
 8001a80:	20000140 	.word	0x20000140
 8001a84:	200001a8 	.word	0x200001a8

08001a88 <global_stdio_init.part.0>:
 8001a88:	b510      	push	{r4, lr}
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab8 <global_stdio_init.part.0+0x30>)
 8001a8c:	4c0b      	ldr	r4, [pc, #44]	@ (8001abc <global_stdio_init.part.0+0x34>)
 8001a8e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac0 <global_stdio_init.part.0+0x38>)
 8001a90:	4620      	mov	r0, r4
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	2104      	movs	r1, #4
 8001a96:	2200      	movs	r2, #0
 8001a98:	f7ff ff94 	bl	80019c4 <std>
 8001a9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	2109      	movs	r1, #9
 8001aa4:	f7ff ff8e 	bl	80019c4 <std>
 8001aa8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001aac:	2202      	movs	r2, #2
 8001aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ab2:	2112      	movs	r1, #18
 8001ab4:	f7ff bf86 	b.w	80019c4 <std>
 8001ab8:	20000210 	.word	0x20000210
 8001abc:	200000d8 	.word	0x200000d8
 8001ac0:	08001a31 	.word	0x08001a31

08001ac4 <__sfp_lock_acquire>:
 8001ac4:	4801      	ldr	r0, [pc, #4]	@ (8001acc <__sfp_lock_acquire+0x8>)
 8001ac6:	f000 ba00 	b.w	8001eca <__retarget_lock_acquire_recursive>
 8001aca:	bf00      	nop
 8001acc:	20000219 	.word	0x20000219

08001ad0 <__sfp_lock_release>:
 8001ad0:	4801      	ldr	r0, [pc, #4]	@ (8001ad8 <__sfp_lock_release+0x8>)
 8001ad2:	f000 b9fb 	b.w	8001ecc <__retarget_lock_release_recursive>
 8001ad6:	bf00      	nop
 8001ad8:	20000219 	.word	0x20000219

08001adc <__sinit>:
 8001adc:	b510      	push	{r4, lr}
 8001ade:	4604      	mov	r4, r0
 8001ae0:	f7ff fff0 	bl	8001ac4 <__sfp_lock_acquire>
 8001ae4:	6a23      	ldr	r3, [r4, #32]
 8001ae6:	b11b      	cbz	r3, 8001af0 <__sinit+0x14>
 8001ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001aec:	f7ff bff0 	b.w	8001ad0 <__sfp_lock_release>
 8001af0:	4b04      	ldr	r3, [pc, #16]	@ (8001b04 <__sinit+0x28>)
 8001af2:	6223      	str	r3, [r4, #32]
 8001af4:	4b04      	ldr	r3, [pc, #16]	@ (8001b08 <__sinit+0x2c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1f5      	bne.n	8001ae8 <__sinit+0xc>
 8001afc:	f7ff ffc4 	bl	8001a88 <global_stdio_init.part.0>
 8001b00:	e7f2      	b.n	8001ae8 <__sinit+0xc>
 8001b02:	bf00      	nop
 8001b04:	08001a49 	.word	0x08001a49
 8001b08:	20000210 	.word	0x20000210

08001b0c <_fwalk_sglue>:
 8001b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b10:	4607      	mov	r7, r0
 8001b12:	4688      	mov	r8, r1
 8001b14:	4614      	mov	r4, r2
 8001b16:	2600      	movs	r6, #0
 8001b18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001b1c:	f1b9 0901 	subs.w	r9, r9, #1
 8001b20:	d505      	bpl.n	8001b2e <_fwalk_sglue+0x22>
 8001b22:	6824      	ldr	r4, [r4, #0]
 8001b24:	2c00      	cmp	r4, #0
 8001b26:	d1f7      	bne.n	8001b18 <_fwalk_sglue+0xc>
 8001b28:	4630      	mov	r0, r6
 8001b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b2e:	89ab      	ldrh	r3, [r5, #12]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d907      	bls.n	8001b44 <_fwalk_sglue+0x38>
 8001b34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	d003      	beq.n	8001b44 <_fwalk_sglue+0x38>
 8001b3c:	4629      	mov	r1, r5
 8001b3e:	4638      	mov	r0, r7
 8001b40:	47c0      	blx	r8
 8001b42:	4306      	orrs	r6, r0
 8001b44:	3568      	adds	r5, #104	@ 0x68
 8001b46:	e7e9      	b.n	8001b1c <_fwalk_sglue+0x10>

08001b48 <iprintf>:
 8001b48:	b40f      	push	{r0, r1, r2, r3}
 8001b4a:	b507      	push	{r0, r1, r2, lr}
 8001b4c:	4906      	ldr	r1, [pc, #24]	@ (8001b68 <iprintf+0x20>)
 8001b4e:	ab04      	add	r3, sp, #16
 8001b50:	6808      	ldr	r0, [r1, #0]
 8001b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8001b56:	6881      	ldr	r1, [r0, #8]
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	f000 fad7 	bl	800210c <_vfiprintf_r>
 8001b5e:	b003      	add	sp, #12
 8001b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8001b64:	b004      	add	sp, #16
 8001b66:	4770      	bx	lr
 8001b68:	20000018 	.word	0x20000018

08001b6c <_puts_r>:
 8001b6c:	6a03      	ldr	r3, [r0, #32]
 8001b6e:	b570      	push	{r4, r5, r6, lr}
 8001b70:	4605      	mov	r5, r0
 8001b72:	460e      	mov	r6, r1
 8001b74:	6884      	ldr	r4, [r0, #8]
 8001b76:	b90b      	cbnz	r3, 8001b7c <_puts_r+0x10>
 8001b78:	f7ff ffb0 	bl	8001adc <__sinit>
 8001b7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001b7e:	07db      	lsls	r3, r3, #31
 8001b80:	d405      	bmi.n	8001b8e <_puts_r+0x22>
 8001b82:	89a3      	ldrh	r3, [r4, #12]
 8001b84:	0598      	lsls	r0, r3, #22
 8001b86:	d402      	bmi.n	8001b8e <_puts_r+0x22>
 8001b88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001b8a:	f000 f99e 	bl	8001eca <__retarget_lock_acquire_recursive>
 8001b8e:	89a3      	ldrh	r3, [r4, #12]
 8001b90:	0719      	lsls	r1, r3, #28
 8001b92:	d502      	bpl.n	8001b9a <_puts_r+0x2e>
 8001b94:	6923      	ldr	r3, [r4, #16]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d135      	bne.n	8001c06 <_puts_r+0x9a>
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	4628      	mov	r0, r5
 8001b9e:	f000 f8c5 	bl	8001d2c <__swsetup_r>
 8001ba2:	b380      	cbz	r0, 8001c06 <_puts_r+0x9a>
 8001ba4:	f04f 35ff 	mov.w	r5, #4294967295
 8001ba8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001baa:	07da      	lsls	r2, r3, #31
 8001bac:	d405      	bmi.n	8001bba <_puts_r+0x4e>
 8001bae:	89a3      	ldrh	r3, [r4, #12]
 8001bb0:	059b      	lsls	r3, r3, #22
 8001bb2:	d402      	bmi.n	8001bba <_puts_r+0x4e>
 8001bb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001bb6:	f000 f989 	bl	8001ecc <__retarget_lock_release_recursive>
 8001bba:	4628      	mov	r0, r5
 8001bbc:	bd70      	pop	{r4, r5, r6, pc}
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	da04      	bge.n	8001bcc <_puts_r+0x60>
 8001bc2:	69a2      	ldr	r2, [r4, #24]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	dc17      	bgt.n	8001bf8 <_puts_r+0x8c>
 8001bc8:	290a      	cmp	r1, #10
 8001bca:	d015      	beq.n	8001bf8 <_puts_r+0x8c>
 8001bcc:	6823      	ldr	r3, [r4, #0]
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	6022      	str	r2, [r4, #0]
 8001bd2:	7019      	strb	r1, [r3, #0]
 8001bd4:	68a3      	ldr	r3, [r4, #8]
 8001bd6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	60a3      	str	r3, [r4, #8]
 8001bde:	2900      	cmp	r1, #0
 8001be0:	d1ed      	bne.n	8001bbe <_puts_r+0x52>
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	da11      	bge.n	8001c0a <_puts_r+0x9e>
 8001be6:	4622      	mov	r2, r4
 8001be8:	210a      	movs	r1, #10
 8001bea:	4628      	mov	r0, r5
 8001bec:	f000 f85f 	bl	8001cae <__swbuf_r>
 8001bf0:	3001      	adds	r0, #1
 8001bf2:	d0d7      	beq.n	8001ba4 <_puts_r+0x38>
 8001bf4:	250a      	movs	r5, #10
 8001bf6:	e7d7      	b.n	8001ba8 <_puts_r+0x3c>
 8001bf8:	4622      	mov	r2, r4
 8001bfa:	4628      	mov	r0, r5
 8001bfc:	f000 f857 	bl	8001cae <__swbuf_r>
 8001c00:	3001      	adds	r0, #1
 8001c02:	d1e7      	bne.n	8001bd4 <_puts_r+0x68>
 8001c04:	e7ce      	b.n	8001ba4 <_puts_r+0x38>
 8001c06:	3e01      	subs	r6, #1
 8001c08:	e7e4      	b.n	8001bd4 <_puts_r+0x68>
 8001c0a:	6823      	ldr	r3, [r4, #0]
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	6022      	str	r2, [r4, #0]
 8001c10:	220a      	movs	r2, #10
 8001c12:	701a      	strb	r2, [r3, #0]
 8001c14:	e7ee      	b.n	8001bf4 <_puts_r+0x88>
	...

08001c18 <puts>:
 8001c18:	4b02      	ldr	r3, [pc, #8]	@ (8001c24 <puts+0xc>)
 8001c1a:	4601      	mov	r1, r0
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	f7ff bfa5 	b.w	8001b6c <_puts_r>
 8001c22:	bf00      	nop
 8001c24:	20000018 	.word	0x20000018

08001c28 <__sread>:
 8001c28:	b510      	push	{r4, lr}
 8001c2a:	460c      	mov	r4, r1
 8001c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c30:	f000 f8fc 	bl	8001e2c <_read_r>
 8001c34:	2800      	cmp	r0, #0
 8001c36:	bfab      	itete	ge
 8001c38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001c3a:	89a3      	ldrhlt	r3, [r4, #12]
 8001c3c:	181b      	addge	r3, r3, r0
 8001c3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001c42:	bfac      	ite	ge
 8001c44:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001c46:	81a3      	strhlt	r3, [r4, #12]
 8001c48:	bd10      	pop	{r4, pc}

08001c4a <__swrite>:
 8001c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c4e:	461f      	mov	r7, r3
 8001c50:	898b      	ldrh	r3, [r1, #12]
 8001c52:	4605      	mov	r5, r0
 8001c54:	05db      	lsls	r3, r3, #23
 8001c56:	460c      	mov	r4, r1
 8001c58:	4616      	mov	r6, r2
 8001c5a:	d505      	bpl.n	8001c68 <__swrite+0x1e>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c64:	f000 f8d0 	bl	8001e08 <_lseek_r>
 8001c68:	89a3      	ldrh	r3, [r4, #12]
 8001c6a:	4632      	mov	r2, r6
 8001c6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c70:	81a3      	strh	r3, [r4, #12]
 8001c72:	4628      	mov	r0, r5
 8001c74:	463b      	mov	r3, r7
 8001c76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c7e:	f000 b8e7 	b.w	8001e50 <_write_r>

08001c82 <__sseek>:
 8001c82:	b510      	push	{r4, lr}
 8001c84:	460c      	mov	r4, r1
 8001c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c8a:	f000 f8bd 	bl	8001e08 <_lseek_r>
 8001c8e:	1c43      	adds	r3, r0, #1
 8001c90:	89a3      	ldrh	r3, [r4, #12]
 8001c92:	bf15      	itete	ne
 8001c94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001c96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001c9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001c9e:	81a3      	strheq	r3, [r4, #12]
 8001ca0:	bf18      	it	ne
 8001ca2:	81a3      	strhne	r3, [r4, #12]
 8001ca4:	bd10      	pop	{r4, pc}

08001ca6 <__sclose>:
 8001ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001caa:	f000 b89d 	b.w	8001de8 <_close_r>

08001cae <__swbuf_r>:
 8001cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb0:	460e      	mov	r6, r1
 8001cb2:	4614      	mov	r4, r2
 8001cb4:	4605      	mov	r5, r0
 8001cb6:	b118      	cbz	r0, 8001cc0 <__swbuf_r+0x12>
 8001cb8:	6a03      	ldr	r3, [r0, #32]
 8001cba:	b90b      	cbnz	r3, 8001cc0 <__swbuf_r+0x12>
 8001cbc:	f7ff ff0e 	bl	8001adc <__sinit>
 8001cc0:	69a3      	ldr	r3, [r4, #24]
 8001cc2:	60a3      	str	r3, [r4, #8]
 8001cc4:	89a3      	ldrh	r3, [r4, #12]
 8001cc6:	071a      	lsls	r2, r3, #28
 8001cc8:	d501      	bpl.n	8001cce <__swbuf_r+0x20>
 8001cca:	6923      	ldr	r3, [r4, #16]
 8001ccc:	b943      	cbnz	r3, 8001ce0 <__swbuf_r+0x32>
 8001cce:	4621      	mov	r1, r4
 8001cd0:	4628      	mov	r0, r5
 8001cd2:	f000 f82b 	bl	8001d2c <__swsetup_r>
 8001cd6:	b118      	cbz	r0, 8001ce0 <__swbuf_r+0x32>
 8001cd8:	f04f 37ff 	mov.w	r7, #4294967295
 8001cdc:	4638      	mov	r0, r7
 8001cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ce0:	6823      	ldr	r3, [r4, #0]
 8001ce2:	6922      	ldr	r2, [r4, #16]
 8001ce4:	b2f6      	uxtb	r6, r6
 8001ce6:	1a98      	subs	r0, r3, r2
 8001ce8:	6963      	ldr	r3, [r4, #20]
 8001cea:	4637      	mov	r7, r6
 8001cec:	4283      	cmp	r3, r0
 8001cee:	dc05      	bgt.n	8001cfc <__swbuf_r+0x4e>
 8001cf0:	4621      	mov	r1, r4
 8001cf2:	4628      	mov	r0, r5
 8001cf4:	f000 fd32 	bl	800275c <_fflush_r>
 8001cf8:	2800      	cmp	r0, #0
 8001cfa:	d1ed      	bne.n	8001cd8 <__swbuf_r+0x2a>
 8001cfc:	68a3      	ldr	r3, [r4, #8]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	60a3      	str	r3, [r4, #8]
 8001d02:	6823      	ldr	r3, [r4, #0]
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	6022      	str	r2, [r4, #0]
 8001d08:	701e      	strb	r6, [r3, #0]
 8001d0a:	6962      	ldr	r2, [r4, #20]
 8001d0c:	1c43      	adds	r3, r0, #1
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d004      	beq.n	8001d1c <__swbuf_r+0x6e>
 8001d12:	89a3      	ldrh	r3, [r4, #12]
 8001d14:	07db      	lsls	r3, r3, #31
 8001d16:	d5e1      	bpl.n	8001cdc <__swbuf_r+0x2e>
 8001d18:	2e0a      	cmp	r6, #10
 8001d1a:	d1df      	bne.n	8001cdc <__swbuf_r+0x2e>
 8001d1c:	4621      	mov	r1, r4
 8001d1e:	4628      	mov	r0, r5
 8001d20:	f000 fd1c 	bl	800275c <_fflush_r>
 8001d24:	2800      	cmp	r0, #0
 8001d26:	d0d9      	beq.n	8001cdc <__swbuf_r+0x2e>
 8001d28:	e7d6      	b.n	8001cd8 <__swbuf_r+0x2a>
	...

08001d2c <__swsetup_r>:
 8001d2c:	b538      	push	{r3, r4, r5, lr}
 8001d2e:	4b29      	ldr	r3, [pc, #164]	@ (8001dd4 <__swsetup_r+0xa8>)
 8001d30:	4605      	mov	r5, r0
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	460c      	mov	r4, r1
 8001d36:	b118      	cbz	r0, 8001d40 <__swsetup_r+0x14>
 8001d38:	6a03      	ldr	r3, [r0, #32]
 8001d3a:	b90b      	cbnz	r3, 8001d40 <__swsetup_r+0x14>
 8001d3c:	f7ff fece 	bl	8001adc <__sinit>
 8001d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d44:	0719      	lsls	r1, r3, #28
 8001d46:	d422      	bmi.n	8001d8e <__swsetup_r+0x62>
 8001d48:	06da      	lsls	r2, r3, #27
 8001d4a:	d407      	bmi.n	8001d5c <__swsetup_r+0x30>
 8001d4c:	2209      	movs	r2, #9
 8001d4e:	602a      	str	r2, [r5, #0]
 8001d50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295
 8001d58:	81a3      	strh	r3, [r4, #12]
 8001d5a:	e033      	b.n	8001dc4 <__swsetup_r+0x98>
 8001d5c:	0758      	lsls	r0, r3, #29
 8001d5e:	d512      	bpl.n	8001d86 <__swsetup_r+0x5a>
 8001d60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001d62:	b141      	cbz	r1, 8001d76 <__swsetup_r+0x4a>
 8001d64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001d68:	4299      	cmp	r1, r3
 8001d6a:	d002      	beq.n	8001d72 <__swsetup_r+0x46>
 8001d6c:	4628      	mov	r0, r5
 8001d6e:	f000 f8af 	bl	8001ed0 <_free_r>
 8001d72:	2300      	movs	r3, #0
 8001d74:	6363      	str	r3, [r4, #52]	@ 0x34
 8001d76:	89a3      	ldrh	r3, [r4, #12]
 8001d78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001d7c:	81a3      	strh	r3, [r4, #12]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	6063      	str	r3, [r4, #4]
 8001d82:	6923      	ldr	r3, [r4, #16]
 8001d84:	6023      	str	r3, [r4, #0]
 8001d86:	89a3      	ldrh	r3, [r4, #12]
 8001d88:	f043 0308 	orr.w	r3, r3, #8
 8001d8c:	81a3      	strh	r3, [r4, #12]
 8001d8e:	6923      	ldr	r3, [r4, #16]
 8001d90:	b94b      	cbnz	r3, 8001da6 <__swsetup_r+0x7a>
 8001d92:	89a3      	ldrh	r3, [r4, #12]
 8001d94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001d98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d9c:	d003      	beq.n	8001da6 <__swsetup_r+0x7a>
 8001d9e:	4621      	mov	r1, r4
 8001da0:	4628      	mov	r0, r5
 8001da2:	f000 fd28 	bl	80027f6 <__smakebuf_r>
 8001da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001daa:	f013 0201 	ands.w	r2, r3, #1
 8001dae:	d00a      	beq.n	8001dc6 <__swsetup_r+0x9a>
 8001db0:	2200      	movs	r2, #0
 8001db2:	60a2      	str	r2, [r4, #8]
 8001db4:	6962      	ldr	r2, [r4, #20]
 8001db6:	4252      	negs	r2, r2
 8001db8:	61a2      	str	r2, [r4, #24]
 8001dba:	6922      	ldr	r2, [r4, #16]
 8001dbc:	b942      	cbnz	r2, 8001dd0 <__swsetup_r+0xa4>
 8001dbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001dc2:	d1c5      	bne.n	8001d50 <__swsetup_r+0x24>
 8001dc4:	bd38      	pop	{r3, r4, r5, pc}
 8001dc6:	0799      	lsls	r1, r3, #30
 8001dc8:	bf58      	it	pl
 8001dca:	6962      	ldrpl	r2, [r4, #20]
 8001dcc:	60a2      	str	r2, [r4, #8]
 8001dce:	e7f4      	b.n	8001dba <__swsetup_r+0x8e>
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	e7f7      	b.n	8001dc4 <__swsetup_r+0x98>
 8001dd4:	20000018 	.word	0x20000018

08001dd8 <memset>:
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4402      	add	r2, r0
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d100      	bne.n	8001de2 <memset+0xa>
 8001de0:	4770      	bx	lr
 8001de2:	f803 1b01 	strb.w	r1, [r3], #1
 8001de6:	e7f9      	b.n	8001ddc <memset+0x4>

08001de8 <_close_r>:
 8001de8:	b538      	push	{r3, r4, r5, lr}
 8001dea:	2300      	movs	r3, #0
 8001dec:	4d05      	ldr	r5, [pc, #20]	@ (8001e04 <_close_r+0x1c>)
 8001dee:	4604      	mov	r4, r0
 8001df0:	4608      	mov	r0, r1
 8001df2:	602b      	str	r3, [r5, #0]
 8001df4:	f7fe fbcd 	bl	8000592 <_close>
 8001df8:	1c43      	adds	r3, r0, #1
 8001dfa:	d102      	bne.n	8001e02 <_close_r+0x1a>
 8001dfc:	682b      	ldr	r3, [r5, #0]
 8001dfe:	b103      	cbz	r3, 8001e02 <_close_r+0x1a>
 8001e00:	6023      	str	r3, [r4, #0]
 8001e02:	bd38      	pop	{r3, r4, r5, pc}
 8001e04:	20000214 	.word	0x20000214

08001e08 <_lseek_r>:
 8001e08:	b538      	push	{r3, r4, r5, lr}
 8001e0a:	4604      	mov	r4, r0
 8001e0c:	4608      	mov	r0, r1
 8001e0e:	4611      	mov	r1, r2
 8001e10:	2200      	movs	r2, #0
 8001e12:	4d05      	ldr	r5, [pc, #20]	@ (8001e28 <_lseek_r+0x20>)
 8001e14:	602a      	str	r2, [r5, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	f7fe fbdf 	bl	80005da <_lseek>
 8001e1c:	1c43      	adds	r3, r0, #1
 8001e1e:	d102      	bne.n	8001e26 <_lseek_r+0x1e>
 8001e20:	682b      	ldr	r3, [r5, #0]
 8001e22:	b103      	cbz	r3, 8001e26 <_lseek_r+0x1e>
 8001e24:	6023      	str	r3, [r4, #0]
 8001e26:	bd38      	pop	{r3, r4, r5, pc}
 8001e28:	20000214 	.word	0x20000214

08001e2c <_read_r>:
 8001e2c:	b538      	push	{r3, r4, r5, lr}
 8001e2e:	4604      	mov	r4, r0
 8001e30:	4608      	mov	r0, r1
 8001e32:	4611      	mov	r1, r2
 8001e34:	2200      	movs	r2, #0
 8001e36:	4d05      	ldr	r5, [pc, #20]	@ (8001e4c <_read_r+0x20>)
 8001e38:	602a      	str	r2, [r5, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	f7fe fb8c 	bl	8000558 <_read>
 8001e40:	1c43      	adds	r3, r0, #1
 8001e42:	d102      	bne.n	8001e4a <_read_r+0x1e>
 8001e44:	682b      	ldr	r3, [r5, #0]
 8001e46:	b103      	cbz	r3, 8001e4a <_read_r+0x1e>
 8001e48:	6023      	str	r3, [r4, #0]
 8001e4a:	bd38      	pop	{r3, r4, r5, pc}
 8001e4c:	20000214 	.word	0x20000214

08001e50 <_write_r>:
 8001e50:	b538      	push	{r3, r4, r5, lr}
 8001e52:	4604      	mov	r4, r0
 8001e54:	4608      	mov	r0, r1
 8001e56:	4611      	mov	r1, r2
 8001e58:	2200      	movs	r2, #0
 8001e5a:	4d05      	ldr	r5, [pc, #20]	@ (8001e70 <_write_r+0x20>)
 8001e5c:	602a      	str	r2, [r5, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	f7fe fab4 	bl	80003cc <_write>
 8001e64:	1c43      	adds	r3, r0, #1
 8001e66:	d102      	bne.n	8001e6e <_write_r+0x1e>
 8001e68:	682b      	ldr	r3, [r5, #0]
 8001e6a:	b103      	cbz	r3, 8001e6e <_write_r+0x1e>
 8001e6c:	6023      	str	r3, [r4, #0]
 8001e6e:	bd38      	pop	{r3, r4, r5, pc}
 8001e70:	20000214 	.word	0x20000214

08001e74 <__errno>:
 8001e74:	4b01      	ldr	r3, [pc, #4]	@ (8001e7c <__errno+0x8>)
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000018 	.word	0x20000018

08001e80 <__libc_init_array>:
 8001e80:	b570      	push	{r4, r5, r6, lr}
 8001e82:	2600      	movs	r6, #0
 8001e84:	4d0c      	ldr	r5, [pc, #48]	@ (8001eb8 <__libc_init_array+0x38>)
 8001e86:	4c0d      	ldr	r4, [pc, #52]	@ (8001ebc <__libc_init_array+0x3c>)
 8001e88:	1b64      	subs	r4, r4, r5
 8001e8a:	10a4      	asrs	r4, r4, #2
 8001e8c:	42a6      	cmp	r6, r4
 8001e8e:	d109      	bne.n	8001ea4 <__libc_init_array+0x24>
 8001e90:	f000 fd2e 	bl	80028f0 <_init>
 8001e94:	2600      	movs	r6, #0
 8001e96:	4d0a      	ldr	r5, [pc, #40]	@ (8001ec0 <__libc_init_array+0x40>)
 8001e98:	4c0a      	ldr	r4, [pc, #40]	@ (8001ec4 <__libc_init_array+0x44>)
 8001e9a:	1b64      	subs	r4, r4, r5
 8001e9c:	10a4      	asrs	r4, r4, #2
 8001e9e:	42a6      	cmp	r6, r4
 8001ea0:	d105      	bne.n	8001eae <__libc_init_array+0x2e>
 8001ea2:	bd70      	pop	{r4, r5, r6, pc}
 8001ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ea8:	4798      	blx	r3
 8001eaa:	3601      	adds	r6, #1
 8001eac:	e7ee      	b.n	8001e8c <__libc_init_array+0xc>
 8001eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eb2:	4798      	blx	r3
 8001eb4:	3601      	adds	r6, #1
 8001eb6:	e7f2      	b.n	8001e9e <__libc_init_array+0x1e>
 8001eb8:	080029ac 	.word	0x080029ac
 8001ebc:	080029ac 	.word	0x080029ac
 8001ec0:	080029ac 	.word	0x080029ac
 8001ec4:	080029b0 	.word	0x080029b0

08001ec8 <__retarget_lock_init_recursive>:
 8001ec8:	4770      	bx	lr

08001eca <__retarget_lock_acquire_recursive>:
 8001eca:	4770      	bx	lr

08001ecc <__retarget_lock_release_recursive>:
 8001ecc:	4770      	bx	lr
	...

08001ed0 <_free_r>:
 8001ed0:	b538      	push	{r3, r4, r5, lr}
 8001ed2:	4605      	mov	r5, r0
 8001ed4:	2900      	cmp	r1, #0
 8001ed6:	d040      	beq.n	8001f5a <_free_r+0x8a>
 8001ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001edc:	1f0c      	subs	r4, r1, #4
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	bfb8      	it	lt
 8001ee2:	18e4      	addlt	r4, r4, r3
 8001ee4:	f000 f8de 	bl	80020a4 <__malloc_lock>
 8001ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f5c <_free_r+0x8c>)
 8001eea:	6813      	ldr	r3, [r2, #0]
 8001eec:	b933      	cbnz	r3, 8001efc <_free_r+0x2c>
 8001eee:	6063      	str	r3, [r4, #4]
 8001ef0:	6014      	str	r4, [r2, #0]
 8001ef2:	4628      	mov	r0, r5
 8001ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ef8:	f000 b8da 	b.w	80020b0 <__malloc_unlock>
 8001efc:	42a3      	cmp	r3, r4
 8001efe:	d908      	bls.n	8001f12 <_free_r+0x42>
 8001f00:	6820      	ldr	r0, [r4, #0]
 8001f02:	1821      	adds	r1, r4, r0
 8001f04:	428b      	cmp	r3, r1
 8001f06:	bf01      	itttt	eq
 8001f08:	6819      	ldreq	r1, [r3, #0]
 8001f0a:	685b      	ldreq	r3, [r3, #4]
 8001f0c:	1809      	addeq	r1, r1, r0
 8001f0e:	6021      	streq	r1, [r4, #0]
 8001f10:	e7ed      	b.n	8001eee <_free_r+0x1e>
 8001f12:	461a      	mov	r2, r3
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	b10b      	cbz	r3, 8001f1c <_free_r+0x4c>
 8001f18:	42a3      	cmp	r3, r4
 8001f1a:	d9fa      	bls.n	8001f12 <_free_r+0x42>
 8001f1c:	6811      	ldr	r1, [r2, #0]
 8001f1e:	1850      	adds	r0, r2, r1
 8001f20:	42a0      	cmp	r0, r4
 8001f22:	d10b      	bne.n	8001f3c <_free_r+0x6c>
 8001f24:	6820      	ldr	r0, [r4, #0]
 8001f26:	4401      	add	r1, r0
 8001f28:	1850      	adds	r0, r2, r1
 8001f2a:	4283      	cmp	r3, r0
 8001f2c:	6011      	str	r1, [r2, #0]
 8001f2e:	d1e0      	bne.n	8001ef2 <_free_r+0x22>
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4408      	add	r0, r1
 8001f36:	6010      	str	r0, [r2, #0]
 8001f38:	6053      	str	r3, [r2, #4]
 8001f3a:	e7da      	b.n	8001ef2 <_free_r+0x22>
 8001f3c:	d902      	bls.n	8001f44 <_free_r+0x74>
 8001f3e:	230c      	movs	r3, #12
 8001f40:	602b      	str	r3, [r5, #0]
 8001f42:	e7d6      	b.n	8001ef2 <_free_r+0x22>
 8001f44:	6820      	ldr	r0, [r4, #0]
 8001f46:	1821      	adds	r1, r4, r0
 8001f48:	428b      	cmp	r3, r1
 8001f4a:	bf01      	itttt	eq
 8001f4c:	6819      	ldreq	r1, [r3, #0]
 8001f4e:	685b      	ldreq	r3, [r3, #4]
 8001f50:	1809      	addeq	r1, r1, r0
 8001f52:	6021      	streq	r1, [r4, #0]
 8001f54:	6063      	str	r3, [r4, #4]
 8001f56:	6054      	str	r4, [r2, #4]
 8001f58:	e7cb      	b.n	8001ef2 <_free_r+0x22>
 8001f5a:	bd38      	pop	{r3, r4, r5, pc}
 8001f5c:	20000220 	.word	0x20000220

08001f60 <sbrk_aligned>:
 8001f60:	b570      	push	{r4, r5, r6, lr}
 8001f62:	4e0f      	ldr	r6, [pc, #60]	@ (8001fa0 <sbrk_aligned+0x40>)
 8001f64:	460c      	mov	r4, r1
 8001f66:	6831      	ldr	r1, [r6, #0]
 8001f68:	4605      	mov	r5, r0
 8001f6a:	b911      	cbnz	r1, 8001f72 <sbrk_aligned+0x12>
 8001f6c:	f000 fca2 	bl	80028b4 <_sbrk_r>
 8001f70:	6030      	str	r0, [r6, #0]
 8001f72:	4621      	mov	r1, r4
 8001f74:	4628      	mov	r0, r5
 8001f76:	f000 fc9d 	bl	80028b4 <_sbrk_r>
 8001f7a:	1c43      	adds	r3, r0, #1
 8001f7c:	d103      	bne.n	8001f86 <sbrk_aligned+0x26>
 8001f7e:	f04f 34ff 	mov.w	r4, #4294967295
 8001f82:	4620      	mov	r0, r4
 8001f84:	bd70      	pop	{r4, r5, r6, pc}
 8001f86:	1cc4      	adds	r4, r0, #3
 8001f88:	f024 0403 	bic.w	r4, r4, #3
 8001f8c:	42a0      	cmp	r0, r4
 8001f8e:	d0f8      	beq.n	8001f82 <sbrk_aligned+0x22>
 8001f90:	1a21      	subs	r1, r4, r0
 8001f92:	4628      	mov	r0, r5
 8001f94:	f000 fc8e 	bl	80028b4 <_sbrk_r>
 8001f98:	3001      	adds	r0, #1
 8001f9a:	d1f2      	bne.n	8001f82 <sbrk_aligned+0x22>
 8001f9c:	e7ef      	b.n	8001f7e <sbrk_aligned+0x1e>
 8001f9e:	bf00      	nop
 8001fa0:	2000021c 	.word	0x2000021c

08001fa4 <_malloc_r>:
 8001fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fa8:	1ccd      	adds	r5, r1, #3
 8001faa:	f025 0503 	bic.w	r5, r5, #3
 8001fae:	3508      	adds	r5, #8
 8001fb0:	2d0c      	cmp	r5, #12
 8001fb2:	bf38      	it	cc
 8001fb4:	250c      	movcc	r5, #12
 8001fb6:	2d00      	cmp	r5, #0
 8001fb8:	4606      	mov	r6, r0
 8001fba:	db01      	blt.n	8001fc0 <_malloc_r+0x1c>
 8001fbc:	42a9      	cmp	r1, r5
 8001fbe:	d904      	bls.n	8001fca <_malloc_r+0x26>
 8001fc0:	230c      	movs	r3, #12
 8001fc2:	6033      	str	r3, [r6, #0]
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80020a0 <_malloc_r+0xfc>
 8001fce:	f000 f869 	bl	80020a4 <__malloc_lock>
 8001fd2:	f8d8 3000 	ldr.w	r3, [r8]
 8001fd6:	461c      	mov	r4, r3
 8001fd8:	bb44      	cbnz	r4, 800202c <_malloc_r+0x88>
 8001fda:	4629      	mov	r1, r5
 8001fdc:	4630      	mov	r0, r6
 8001fde:	f7ff ffbf 	bl	8001f60 <sbrk_aligned>
 8001fe2:	1c43      	adds	r3, r0, #1
 8001fe4:	4604      	mov	r4, r0
 8001fe6:	d158      	bne.n	800209a <_malloc_r+0xf6>
 8001fe8:	f8d8 4000 	ldr.w	r4, [r8]
 8001fec:	4627      	mov	r7, r4
 8001fee:	2f00      	cmp	r7, #0
 8001ff0:	d143      	bne.n	800207a <_malloc_r+0xd6>
 8001ff2:	2c00      	cmp	r4, #0
 8001ff4:	d04b      	beq.n	800208e <_malloc_r+0xea>
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	4639      	mov	r1, r7
 8001ffa:	4630      	mov	r0, r6
 8001ffc:	eb04 0903 	add.w	r9, r4, r3
 8002000:	f000 fc58 	bl	80028b4 <_sbrk_r>
 8002004:	4581      	cmp	r9, r0
 8002006:	d142      	bne.n	800208e <_malloc_r+0xea>
 8002008:	6821      	ldr	r1, [r4, #0]
 800200a:	4630      	mov	r0, r6
 800200c:	1a6d      	subs	r5, r5, r1
 800200e:	4629      	mov	r1, r5
 8002010:	f7ff ffa6 	bl	8001f60 <sbrk_aligned>
 8002014:	3001      	adds	r0, #1
 8002016:	d03a      	beq.n	800208e <_malloc_r+0xea>
 8002018:	6823      	ldr	r3, [r4, #0]
 800201a:	442b      	add	r3, r5
 800201c:	6023      	str	r3, [r4, #0]
 800201e:	f8d8 3000 	ldr.w	r3, [r8]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	bb62      	cbnz	r2, 8002080 <_malloc_r+0xdc>
 8002026:	f8c8 7000 	str.w	r7, [r8]
 800202a:	e00f      	b.n	800204c <_malloc_r+0xa8>
 800202c:	6822      	ldr	r2, [r4, #0]
 800202e:	1b52      	subs	r2, r2, r5
 8002030:	d420      	bmi.n	8002074 <_malloc_r+0xd0>
 8002032:	2a0b      	cmp	r2, #11
 8002034:	d917      	bls.n	8002066 <_malloc_r+0xc2>
 8002036:	1961      	adds	r1, r4, r5
 8002038:	42a3      	cmp	r3, r4
 800203a:	6025      	str	r5, [r4, #0]
 800203c:	bf18      	it	ne
 800203e:	6059      	strne	r1, [r3, #4]
 8002040:	6863      	ldr	r3, [r4, #4]
 8002042:	bf08      	it	eq
 8002044:	f8c8 1000 	streq.w	r1, [r8]
 8002048:	5162      	str	r2, [r4, r5]
 800204a:	604b      	str	r3, [r1, #4]
 800204c:	4630      	mov	r0, r6
 800204e:	f000 f82f 	bl	80020b0 <__malloc_unlock>
 8002052:	f104 000b 	add.w	r0, r4, #11
 8002056:	1d23      	adds	r3, r4, #4
 8002058:	f020 0007 	bic.w	r0, r0, #7
 800205c:	1ac2      	subs	r2, r0, r3
 800205e:	bf1c      	itt	ne
 8002060:	1a1b      	subne	r3, r3, r0
 8002062:	50a3      	strne	r3, [r4, r2]
 8002064:	e7af      	b.n	8001fc6 <_malloc_r+0x22>
 8002066:	6862      	ldr	r2, [r4, #4]
 8002068:	42a3      	cmp	r3, r4
 800206a:	bf0c      	ite	eq
 800206c:	f8c8 2000 	streq.w	r2, [r8]
 8002070:	605a      	strne	r2, [r3, #4]
 8002072:	e7eb      	b.n	800204c <_malloc_r+0xa8>
 8002074:	4623      	mov	r3, r4
 8002076:	6864      	ldr	r4, [r4, #4]
 8002078:	e7ae      	b.n	8001fd8 <_malloc_r+0x34>
 800207a:	463c      	mov	r4, r7
 800207c:	687f      	ldr	r7, [r7, #4]
 800207e:	e7b6      	b.n	8001fee <_malloc_r+0x4a>
 8002080:	461a      	mov	r2, r3
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	42a3      	cmp	r3, r4
 8002086:	d1fb      	bne.n	8002080 <_malloc_r+0xdc>
 8002088:	2300      	movs	r3, #0
 800208a:	6053      	str	r3, [r2, #4]
 800208c:	e7de      	b.n	800204c <_malloc_r+0xa8>
 800208e:	230c      	movs	r3, #12
 8002090:	4630      	mov	r0, r6
 8002092:	6033      	str	r3, [r6, #0]
 8002094:	f000 f80c 	bl	80020b0 <__malloc_unlock>
 8002098:	e794      	b.n	8001fc4 <_malloc_r+0x20>
 800209a:	6005      	str	r5, [r0, #0]
 800209c:	e7d6      	b.n	800204c <_malloc_r+0xa8>
 800209e:	bf00      	nop
 80020a0:	20000220 	.word	0x20000220

080020a4 <__malloc_lock>:
 80020a4:	4801      	ldr	r0, [pc, #4]	@ (80020ac <__malloc_lock+0x8>)
 80020a6:	f7ff bf10 	b.w	8001eca <__retarget_lock_acquire_recursive>
 80020aa:	bf00      	nop
 80020ac:	20000218 	.word	0x20000218

080020b0 <__malloc_unlock>:
 80020b0:	4801      	ldr	r0, [pc, #4]	@ (80020b8 <__malloc_unlock+0x8>)
 80020b2:	f7ff bf0b 	b.w	8001ecc <__retarget_lock_release_recursive>
 80020b6:	bf00      	nop
 80020b8:	20000218 	.word	0x20000218

080020bc <__sfputc_r>:
 80020bc:	6893      	ldr	r3, [r2, #8]
 80020be:	b410      	push	{r4}
 80020c0:	3b01      	subs	r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	6093      	str	r3, [r2, #8]
 80020c6:	da07      	bge.n	80020d8 <__sfputc_r+0x1c>
 80020c8:	6994      	ldr	r4, [r2, #24]
 80020ca:	42a3      	cmp	r3, r4
 80020cc:	db01      	blt.n	80020d2 <__sfputc_r+0x16>
 80020ce:	290a      	cmp	r1, #10
 80020d0:	d102      	bne.n	80020d8 <__sfputc_r+0x1c>
 80020d2:	bc10      	pop	{r4}
 80020d4:	f7ff bdeb 	b.w	8001cae <__swbuf_r>
 80020d8:	6813      	ldr	r3, [r2, #0]
 80020da:	1c58      	adds	r0, r3, #1
 80020dc:	6010      	str	r0, [r2, #0]
 80020de:	7019      	strb	r1, [r3, #0]
 80020e0:	4608      	mov	r0, r1
 80020e2:	bc10      	pop	{r4}
 80020e4:	4770      	bx	lr

080020e6 <__sfputs_r>:
 80020e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e8:	4606      	mov	r6, r0
 80020ea:	460f      	mov	r7, r1
 80020ec:	4614      	mov	r4, r2
 80020ee:	18d5      	adds	r5, r2, r3
 80020f0:	42ac      	cmp	r4, r5
 80020f2:	d101      	bne.n	80020f8 <__sfputs_r+0x12>
 80020f4:	2000      	movs	r0, #0
 80020f6:	e007      	b.n	8002108 <__sfputs_r+0x22>
 80020f8:	463a      	mov	r2, r7
 80020fa:	4630      	mov	r0, r6
 80020fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002100:	f7ff ffdc 	bl	80020bc <__sfputc_r>
 8002104:	1c43      	adds	r3, r0, #1
 8002106:	d1f3      	bne.n	80020f0 <__sfputs_r+0xa>
 8002108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800210c <_vfiprintf_r>:
 800210c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002110:	460d      	mov	r5, r1
 8002112:	4614      	mov	r4, r2
 8002114:	4698      	mov	r8, r3
 8002116:	4606      	mov	r6, r0
 8002118:	b09d      	sub	sp, #116	@ 0x74
 800211a:	b118      	cbz	r0, 8002124 <_vfiprintf_r+0x18>
 800211c:	6a03      	ldr	r3, [r0, #32]
 800211e:	b90b      	cbnz	r3, 8002124 <_vfiprintf_r+0x18>
 8002120:	f7ff fcdc 	bl	8001adc <__sinit>
 8002124:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002126:	07d9      	lsls	r1, r3, #31
 8002128:	d405      	bmi.n	8002136 <_vfiprintf_r+0x2a>
 800212a:	89ab      	ldrh	r3, [r5, #12]
 800212c:	059a      	lsls	r2, r3, #22
 800212e:	d402      	bmi.n	8002136 <_vfiprintf_r+0x2a>
 8002130:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002132:	f7ff feca 	bl	8001eca <__retarget_lock_acquire_recursive>
 8002136:	89ab      	ldrh	r3, [r5, #12]
 8002138:	071b      	lsls	r3, r3, #28
 800213a:	d501      	bpl.n	8002140 <_vfiprintf_r+0x34>
 800213c:	692b      	ldr	r3, [r5, #16]
 800213e:	b99b      	cbnz	r3, 8002168 <_vfiprintf_r+0x5c>
 8002140:	4629      	mov	r1, r5
 8002142:	4630      	mov	r0, r6
 8002144:	f7ff fdf2 	bl	8001d2c <__swsetup_r>
 8002148:	b170      	cbz	r0, 8002168 <_vfiprintf_r+0x5c>
 800214a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800214c:	07dc      	lsls	r4, r3, #31
 800214e:	d504      	bpl.n	800215a <_vfiprintf_r+0x4e>
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	b01d      	add	sp, #116	@ 0x74
 8002156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800215a:	89ab      	ldrh	r3, [r5, #12]
 800215c:	0598      	lsls	r0, r3, #22
 800215e:	d4f7      	bmi.n	8002150 <_vfiprintf_r+0x44>
 8002160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002162:	f7ff feb3 	bl	8001ecc <__retarget_lock_release_recursive>
 8002166:	e7f3      	b.n	8002150 <_vfiprintf_r+0x44>
 8002168:	2300      	movs	r3, #0
 800216a:	9309      	str	r3, [sp, #36]	@ 0x24
 800216c:	2320      	movs	r3, #32
 800216e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002172:	2330      	movs	r3, #48	@ 0x30
 8002174:	f04f 0901 	mov.w	r9, #1
 8002178:	f8cd 800c 	str.w	r8, [sp, #12]
 800217c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002328 <_vfiprintf_r+0x21c>
 8002180:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002184:	4623      	mov	r3, r4
 8002186:	469a      	mov	sl, r3
 8002188:	f813 2b01 	ldrb.w	r2, [r3], #1
 800218c:	b10a      	cbz	r2, 8002192 <_vfiprintf_r+0x86>
 800218e:	2a25      	cmp	r2, #37	@ 0x25
 8002190:	d1f9      	bne.n	8002186 <_vfiprintf_r+0x7a>
 8002192:	ebba 0b04 	subs.w	fp, sl, r4
 8002196:	d00b      	beq.n	80021b0 <_vfiprintf_r+0xa4>
 8002198:	465b      	mov	r3, fp
 800219a:	4622      	mov	r2, r4
 800219c:	4629      	mov	r1, r5
 800219e:	4630      	mov	r0, r6
 80021a0:	f7ff ffa1 	bl	80020e6 <__sfputs_r>
 80021a4:	3001      	adds	r0, #1
 80021a6:	f000 80a7 	beq.w	80022f8 <_vfiprintf_r+0x1ec>
 80021aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80021ac:	445a      	add	r2, fp
 80021ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80021b0:	f89a 3000 	ldrb.w	r3, [sl]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 809f 	beq.w	80022f8 <_vfiprintf_r+0x1ec>
 80021ba:	2300      	movs	r3, #0
 80021bc:	f04f 32ff 	mov.w	r2, #4294967295
 80021c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80021c4:	f10a 0a01 	add.w	sl, sl, #1
 80021c8:	9304      	str	r3, [sp, #16]
 80021ca:	9307      	str	r3, [sp, #28]
 80021cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80021d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80021d2:	4654      	mov	r4, sl
 80021d4:	2205      	movs	r2, #5
 80021d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021da:	4853      	ldr	r0, [pc, #332]	@ (8002328 <_vfiprintf_r+0x21c>)
 80021dc:	f000 fb7a 	bl	80028d4 <memchr>
 80021e0:	9a04      	ldr	r2, [sp, #16]
 80021e2:	b9d8      	cbnz	r0, 800221c <_vfiprintf_r+0x110>
 80021e4:	06d1      	lsls	r1, r2, #27
 80021e6:	bf44      	itt	mi
 80021e8:	2320      	movmi	r3, #32
 80021ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80021ee:	0713      	lsls	r3, r2, #28
 80021f0:	bf44      	itt	mi
 80021f2:	232b      	movmi	r3, #43	@ 0x2b
 80021f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80021f8:	f89a 3000 	ldrb.w	r3, [sl]
 80021fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80021fe:	d015      	beq.n	800222c <_vfiprintf_r+0x120>
 8002200:	4654      	mov	r4, sl
 8002202:	2000      	movs	r0, #0
 8002204:	f04f 0c0a 	mov.w	ip, #10
 8002208:	9a07      	ldr	r2, [sp, #28]
 800220a:	4621      	mov	r1, r4
 800220c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002210:	3b30      	subs	r3, #48	@ 0x30
 8002212:	2b09      	cmp	r3, #9
 8002214:	d94b      	bls.n	80022ae <_vfiprintf_r+0x1a2>
 8002216:	b1b0      	cbz	r0, 8002246 <_vfiprintf_r+0x13a>
 8002218:	9207      	str	r2, [sp, #28]
 800221a:	e014      	b.n	8002246 <_vfiprintf_r+0x13a>
 800221c:	eba0 0308 	sub.w	r3, r0, r8
 8002220:	fa09 f303 	lsl.w	r3, r9, r3
 8002224:	4313      	orrs	r3, r2
 8002226:	46a2      	mov	sl, r4
 8002228:	9304      	str	r3, [sp, #16]
 800222a:	e7d2      	b.n	80021d2 <_vfiprintf_r+0xc6>
 800222c:	9b03      	ldr	r3, [sp, #12]
 800222e:	1d19      	adds	r1, r3, #4
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	9103      	str	r1, [sp, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	bfbb      	ittet	lt
 8002238:	425b      	neglt	r3, r3
 800223a:	f042 0202 	orrlt.w	r2, r2, #2
 800223e:	9307      	strge	r3, [sp, #28]
 8002240:	9307      	strlt	r3, [sp, #28]
 8002242:	bfb8      	it	lt
 8002244:	9204      	strlt	r2, [sp, #16]
 8002246:	7823      	ldrb	r3, [r4, #0]
 8002248:	2b2e      	cmp	r3, #46	@ 0x2e
 800224a:	d10a      	bne.n	8002262 <_vfiprintf_r+0x156>
 800224c:	7863      	ldrb	r3, [r4, #1]
 800224e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002250:	d132      	bne.n	80022b8 <_vfiprintf_r+0x1ac>
 8002252:	9b03      	ldr	r3, [sp, #12]
 8002254:	3402      	adds	r4, #2
 8002256:	1d1a      	adds	r2, r3, #4
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	9203      	str	r2, [sp, #12]
 800225c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002260:	9305      	str	r3, [sp, #20]
 8002262:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800232c <_vfiprintf_r+0x220>
 8002266:	2203      	movs	r2, #3
 8002268:	4650      	mov	r0, sl
 800226a:	7821      	ldrb	r1, [r4, #0]
 800226c:	f000 fb32 	bl	80028d4 <memchr>
 8002270:	b138      	cbz	r0, 8002282 <_vfiprintf_r+0x176>
 8002272:	2240      	movs	r2, #64	@ 0x40
 8002274:	9b04      	ldr	r3, [sp, #16]
 8002276:	eba0 000a 	sub.w	r0, r0, sl
 800227a:	4082      	lsls	r2, r0
 800227c:	4313      	orrs	r3, r2
 800227e:	3401      	adds	r4, #1
 8002280:	9304      	str	r3, [sp, #16]
 8002282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002286:	2206      	movs	r2, #6
 8002288:	4829      	ldr	r0, [pc, #164]	@ (8002330 <_vfiprintf_r+0x224>)
 800228a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800228e:	f000 fb21 	bl	80028d4 <memchr>
 8002292:	2800      	cmp	r0, #0
 8002294:	d03f      	beq.n	8002316 <_vfiprintf_r+0x20a>
 8002296:	4b27      	ldr	r3, [pc, #156]	@ (8002334 <_vfiprintf_r+0x228>)
 8002298:	bb1b      	cbnz	r3, 80022e2 <_vfiprintf_r+0x1d6>
 800229a:	9b03      	ldr	r3, [sp, #12]
 800229c:	3307      	adds	r3, #7
 800229e:	f023 0307 	bic.w	r3, r3, #7
 80022a2:	3308      	adds	r3, #8
 80022a4:	9303      	str	r3, [sp, #12]
 80022a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80022a8:	443b      	add	r3, r7
 80022aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80022ac:	e76a      	b.n	8002184 <_vfiprintf_r+0x78>
 80022ae:	460c      	mov	r4, r1
 80022b0:	2001      	movs	r0, #1
 80022b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80022b6:	e7a8      	b.n	800220a <_vfiprintf_r+0xfe>
 80022b8:	2300      	movs	r3, #0
 80022ba:	f04f 0c0a 	mov.w	ip, #10
 80022be:	4619      	mov	r1, r3
 80022c0:	3401      	adds	r4, #1
 80022c2:	9305      	str	r3, [sp, #20]
 80022c4:	4620      	mov	r0, r4
 80022c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80022ca:	3a30      	subs	r2, #48	@ 0x30
 80022cc:	2a09      	cmp	r2, #9
 80022ce:	d903      	bls.n	80022d8 <_vfiprintf_r+0x1cc>
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0c6      	beq.n	8002262 <_vfiprintf_r+0x156>
 80022d4:	9105      	str	r1, [sp, #20]
 80022d6:	e7c4      	b.n	8002262 <_vfiprintf_r+0x156>
 80022d8:	4604      	mov	r4, r0
 80022da:	2301      	movs	r3, #1
 80022dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80022e0:	e7f0      	b.n	80022c4 <_vfiprintf_r+0x1b8>
 80022e2:	ab03      	add	r3, sp, #12
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	462a      	mov	r2, r5
 80022e8:	4630      	mov	r0, r6
 80022ea:	4b13      	ldr	r3, [pc, #76]	@ (8002338 <_vfiprintf_r+0x22c>)
 80022ec:	a904      	add	r1, sp, #16
 80022ee:	f3af 8000 	nop.w
 80022f2:	4607      	mov	r7, r0
 80022f4:	1c78      	adds	r0, r7, #1
 80022f6:	d1d6      	bne.n	80022a6 <_vfiprintf_r+0x19a>
 80022f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80022fa:	07d9      	lsls	r1, r3, #31
 80022fc:	d405      	bmi.n	800230a <_vfiprintf_r+0x1fe>
 80022fe:	89ab      	ldrh	r3, [r5, #12]
 8002300:	059a      	lsls	r2, r3, #22
 8002302:	d402      	bmi.n	800230a <_vfiprintf_r+0x1fe>
 8002304:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002306:	f7ff fde1 	bl	8001ecc <__retarget_lock_release_recursive>
 800230a:	89ab      	ldrh	r3, [r5, #12]
 800230c:	065b      	lsls	r3, r3, #25
 800230e:	f53f af1f 	bmi.w	8002150 <_vfiprintf_r+0x44>
 8002312:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002314:	e71e      	b.n	8002154 <_vfiprintf_r+0x48>
 8002316:	ab03      	add	r3, sp, #12
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	462a      	mov	r2, r5
 800231c:	4630      	mov	r0, r6
 800231e:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <_vfiprintf_r+0x22c>)
 8002320:	a904      	add	r1, sp, #16
 8002322:	f000 f87d 	bl	8002420 <_printf_i>
 8002326:	e7e4      	b.n	80022f2 <_vfiprintf_r+0x1e6>
 8002328:	08002976 	.word	0x08002976
 800232c:	0800297c 	.word	0x0800297c
 8002330:	08002980 	.word	0x08002980
 8002334:	00000000 	.word	0x00000000
 8002338:	080020e7 	.word	0x080020e7

0800233c <_printf_common>:
 800233c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002340:	4616      	mov	r6, r2
 8002342:	4698      	mov	r8, r3
 8002344:	688a      	ldr	r2, [r1, #8]
 8002346:	690b      	ldr	r3, [r1, #16]
 8002348:	4607      	mov	r7, r0
 800234a:	4293      	cmp	r3, r2
 800234c:	bfb8      	it	lt
 800234e:	4613      	movlt	r3, r2
 8002350:	6033      	str	r3, [r6, #0]
 8002352:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002356:	460c      	mov	r4, r1
 8002358:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800235c:	b10a      	cbz	r2, 8002362 <_printf_common+0x26>
 800235e:	3301      	adds	r3, #1
 8002360:	6033      	str	r3, [r6, #0]
 8002362:	6823      	ldr	r3, [r4, #0]
 8002364:	0699      	lsls	r1, r3, #26
 8002366:	bf42      	ittt	mi
 8002368:	6833      	ldrmi	r3, [r6, #0]
 800236a:	3302      	addmi	r3, #2
 800236c:	6033      	strmi	r3, [r6, #0]
 800236e:	6825      	ldr	r5, [r4, #0]
 8002370:	f015 0506 	ands.w	r5, r5, #6
 8002374:	d106      	bne.n	8002384 <_printf_common+0x48>
 8002376:	f104 0a19 	add.w	sl, r4, #25
 800237a:	68e3      	ldr	r3, [r4, #12]
 800237c:	6832      	ldr	r2, [r6, #0]
 800237e:	1a9b      	subs	r3, r3, r2
 8002380:	42ab      	cmp	r3, r5
 8002382:	dc2b      	bgt.n	80023dc <_printf_common+0xa0>
 8002384:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002388:	6822      	ldr	r2, [r4, #0]
 800238a:	3b00      	subs	r3, #0
 800238c:	bf18      	it	ne
 800238e:	2301      	movne	r3, #1
 8002390:	0692      	lsls	r2, r2, #26
 8002392:	d430      	bmi.n	80023f6 <_printf_common+0xba>
 8002394:	4641      	mov	r1, r8
 8002396:	4638      	mov	r0, r7
 8002398:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800239c:	47c8      	blx	r9
 800239e:	3001      	adds	r0, #1
 80023a0:	d023      	beq.n	80023ea <_printf_common+0xae>
 80023a2:	6823      	ldr	r3, [r4, #0]
 80023a4:	6922      	ldr	r2, [r4, #16]
 80023a6:	f003 0306 	and.w	r3, r3, #6
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	bf14      	ite	ne
 80023ae:	2500      	movne	r5, #0
 80023b0:	6833      	ldreq	r3, [r6, #0]
 80023b2:	f04f 0600 	mov.w	r6, #0
 80023b6:	bf08      	it	eq
 80023b8:	68e5      	ldreq	r5, [r4, #12]
 80023ba:	f104 041a 	add.w	r4, r4, #26
 80023be:	bf08      	it	eq
 80023c0:	1aed      	subeq	r5, r5, r3
 80023c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80023c6:	bf08      	it	eq
 80023c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80023cc:	4293      	cmp	r3, r2
 80023ce:	bfc4      	itt	gt
 80023d0:	1a9b      	subgt	r3, r3, r2
 80023d2:	18ed      	addgt	r5, r5, r3
 80023d4:	42b5      	cmp	r5, r6
 80023d6:	d11a      	bne.n	800240e <_printf_common+0xd2>
 80023d8:	2000      	movs	r0, #0
 80023da:	e008      	b.n	80023ee <_printf_common+0xb2>
 80023dc:	2301      	movs	r3, #1
 80023de:	4652      	mov	r2, sl
 80023e0:	4641      	mov	r1, r8
 80023e2:	4638      	mov	r0, r7
 80023e4:	47c8      	blx	r9
 80023e6:	3001      	adds	r0, #1
 80023e8:	d103      	bne.n	80023f2 <_printf_common+0xb6>
 80023ea:	f04f 30ff 	mov.w	r0, #4294967295
 80023ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023f2:	3501      	adds	r5, #1
 80023f4:	e7c1      	b.n	800237a <_printf_common+0x3e>
 80023f6:	2030      	movs	r0, #48	@ 0x30
 80023f8:	18e1      	adds	r1, r4, r3
 80023fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002404:	4422      	add	r2, r4
 8002406:	3302      	adds	r3, #2
 8002408:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800240c:	e7c2      	b.n	8002394 <_printf_common+0x58>
 800240e:	2301      	movs	r3, #1
 8002410:	4622      	mov	r2, r4
 8002412:	4641      	mov	r1, r8
 8002414:	4638      	mov	r0, r7
 8002416:	47c8      	blx	r9
 8002418:	3001      	adds	r0, #1
 800241a:	d0e6      	beq.n	80023ea <_printf_common+0xae>
 800241c:	3601      	adds	r6, #1
 800241e:	e7d9      	b.n	80023d4 <_printf_common+0x98>

08002420 <_printf_i>:
 8002420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002424:	7e0f      	ldrb	r7, [r1, #24]
 8002426:	4691      	mov	r9, r2
 8002428:	2f78      	cmp	r7, #120	@ 0x78
 800242a:	4680      	mov	r8, r0
 800242c:	460c      	mov	r4, r1
 800242e:	469a      	mov	sl, r3
 8002430:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002432:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002436:	d807      	bhi.n	8002448 <_printf_i+0x28>
 8002438:	2f62      	cmp	r7, #98	@ 0x62
 800243a:	d80a      	bhi.n	8002452 <_printf_i+0x32>
 800243c:	2f00      	cmp	r7, #0
 800243e:	f000 80d1 	beq.w	80025e4 <_printf_i+0x1c4>
 8002442:	2f58      	cmp	r7, #88	@ 0x58
 8002444:	f000 80b8 	beq.w	80025b8 <_printf_i+0x198>
 8002448:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800244c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002450:	e03a      	b.n	80024c8 <_printf_i+0xa8>
 8002452:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002456:	2b15      	cmp	r3, #21
 8002458:	d8f6      	bhi.n	8002448 <_printf_i+0x28>
 800245a:	a101      	add	r1, pc, #4	@ (adr r1, 8002460 <_printf_i+0x40>)
 800245c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002460:	080024b9 	.word	0x080024b9
 8002464:	080024cd 	.word	0x080024cd
 8002468:	08002449 	.word	0x08002449
 800246c:	08002449 	.word	0x08002449
 8002470:	08002449 	.word	0x08002449
 8002474:	08002449 	.word	0x08002449
 8002478:	080024cd 	.word	0x080024cd
 800247c:	08002449 	.word	0x08002449
 8002480:	08002449 	.word	0x08002449
 8002484:	08002449 	.word	0x08002449
 8002488:	08002449 	.word	0x08002449
 800248c:	080025cb 	.word	0x080025cb
 8002490:	080024f7 	.word	0x080024f7
 8002494:	08002585 	.word	0x08002585
 8002498:	08002449 	.word	0x08002449
 800249c:	08002449 	.word	0x08002449
 80024a0:	080025ed 	.word	0x080025ed
 80024a4:	08002449 	.word	0x08002449
 80024a8:	080024f7 	.word	0x080024f7
 80024ac:	08002449 	.word	0x08002449
 80024b0:	08002449 	.word	0x08002449
 80024b4:	0800258d 	.word	0x0800258d
 80024b8:	6833      	ldr	r3, [r6, #0]
 80024ba:	1d1a      	adds	r2, r3, #4
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6032      	str	r2, [r6, #0]
 80024c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80024c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80024c8:	2301      	movs	r3, #1
 80024ca:	e09c      	b.n	8002606 <_printf_i+0x1e6>
 80024cc:	6833      	ldr	r3, [r6, #0]
 80024ce:	6820      	ldr	r0, [r4, #0]
 80024d0:	1d19      	adds	r1, r3, #4
 80024d2:	6031      	str	r1, [r6, #0]
 80024d4:	0606      	lsls	r6, r0, #24
 80024d6:	d501      	bpl.n	80024dc <_printf_i+0xbc>
 80024d8:	681d      	ldr	r5, [r3, #0]
 80024da:	e003      	b.n	80024e4 <_printf_i+0xc4>
 80024dc:	0645      	lsls	r5, r0, #25
 80024de:	d5fb      	bpl.n	80024d8 <_printf_i+0xb8>
 80024e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80024e4:	2d00      	cmp	r5, #0
 80024e6:	da03      	bge.n	80024f0 <_printf_i+0xd0>
 80024e8:	232d      	movs	r3, #45	@ 0x2d
 80024ea:	426d      	negs	r5, r5
 80024ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80024f0:	230a      	movs	r3, #10
 80024f2:	4858      	ldr	r0, [pc, #352]	@ (8002654 <_printf_i+0x234>)
 80024f4:	e011      	b.n	800251a <_printf_i+0xfa>
 80024f6:	6821      	ldr	r1, [r4, #0]
 80024f8:	6833      	ldr	r3, [r6, #0]
 80024fa:	0608      	lsls	r0, r1, #24
 80024fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8002500:	d402      	bmi.n	8002508 <_printf_i+0xe8>
 8002502:	0649      	lsls	r1, r1, #25
 8002504:	bf48      	it	mi
 8002506:	b2ad      	uxthmi	r5, r5
 8002508:	2f6f      	cmp	r7, #111	@ 0x6f
 800250a:	6033      	str	r3, [r6, #0]
 800250c:	bf14      	ite	ne
 800250e:	230a      	movne	r3, #10
 8002510:	2308      	moveq	r3, #8
 8002512:	4850      	ldr	r0, [pc, #320]	@ (8002654 <_printf_i+0x234>)
 8002514:	2100      	movs	r1, #0
 8002516:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800251a:	6866      	ldr	r6, [r4, #4]
 800251c:	2e00      	cmp	r6, #0
 800251e:	60a6      	str	r6, [r4, #8]
 8002520:	db05      	blt.n	800252e <_printf_i+0x10e>
 8002522:	6821      	ldr	r1, [r4, #0]
 8002524:	432e      	orrs	r6, r5
 8002526:	f021 0104 	bic.w	r1, r1, #4
 800252a:	6021      	str	r1, [r4, #0]
 800252c:	d04b      	beq.n	80025c6 <_printf_i+0x1a6>
 800252e:	4616      	mov	r6, r2
 8002530:	fbb5 f1f3 	udiv	r1, r5, r3
 8002534:	fb03 5711 	mls	r7, r3, r1, r5
 8002538:	5dc7      	ldrb	r7, [r0, r7]
 800253a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800253e:	462f      	mov	r7, r5
 8002540:	42bb      	cmp	r3, r7
 8002542:	460d      	mov	r5, r1
 8002544:	d9f4      	bls.n	8002530 <_printf_i+0x110>
 8002546:	2b08      	cmp	r3, #8
 8002548:	d10b      	bne.n	8002562 <_printf_i+0x142>
 800254a:	6823      	ldr	r3, [r4, #0]
 800254c:	07df      	lsls	r7, r3, #31
 800254e:	d508      	bpl.n	8002562 <_printf_i+0x142>
 8002550:	6923      	ldr	r3, [r4, #16]
 8002552:	6861      	ldr	r1, [r4, #4]
 8002554:	4299      	cmp	r1, r3
 8002556:	bfde      	ittt	le
 8002558:	2330      	movle	r3, #48	@ 0x30
 800255a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800255e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002562:	1b92      	subs	r2, r2, r6
 8002564:	6122      	str	r2, [r4, #16]
 8002566:	464b      	mov	r3, r9
 8002568:	4621      	mov	r1, r4
 800256a:	4640      	mov	r0, r8
 800256c:	f8cd a000 	str.w	sl, [sp]
 8002570:	aa03      	add	r2, sp, #12
 8002572:	f7ff fee3 	bl	800233c <_printf_common>
 8002576:	3001      	adds	r0, #1
 8002578:	d14a      	bne.n	8002610 <_printf_i+0x1f0>
 800257a:	f04f 30ff 	mov.w	r0, #4294967295
 800257e:	b004      	add	sp, #16
 8002580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002584:	6823      	ldr	r3, [r4, #0]
 8002586:	f043 0320 	orr.w	r3, r3, #32
 800258a:	6023      	str	r3, [r4, #0]
 800258c:	2778      	movs	r7, #120	@ 0x78
 800258e:	4832      	ldr	r0, [pc, #200]	@ (8002658 <_printf_i+0x238>)
 8002590:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002594:	6823      	ldr	r3, [r4, #0]
 8002596:	6831      	ldr	r1, [r6, #0]
 8002598:	061f      	lsls	r7, r3, #24
 800259a:	f851 5b04 	ldr.w	r5, [r1], #4
 800259e:	d402      	bmi.n	80025a6 <_printf_i+0x186>
 80025a0:	065f      	lsls	r7, r3, #25
 80025a2:	bf48      	it	mi
 80025a4:	b2ad      	uxthmi	r5, r5
 80025a6:	6031      	str	r1, [r6, #0]
 80025a8:	07d9      	lsls	r1, r3, #31
 80025aa:	bf44      	itt	mi
 80025ac:	f043 0320 	orrmi.w	r3, r3, #32
 80025b0:	6023      	strmi	r3, [r4, #0]
 80025b2:	b11d      	cbz	r5, 80025bc <_printf_i+0x19c>
 80025b4:	2310      	movs	r3, #16
 80025b6:	e7ad      	b.n	8002514 <_printf_i+0xf4>
 80025b8:	4826      	ldr	r0, [pc, #152]	@ (8002654 <_printf_i+0x234>)
 80025ba:	e7e9      	b.n	8002590 <_printf_i+0x170>
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	f023 0320 	bic.w	r3, r3, #32
 80025c2:	6023      	str	r3, [r4, #0]
 80025c4:	e7f6      	b.n	80025b4 <_printf_i+0x194>
 80025c6:	4616      	mov	r6, r2
 80025c8:	e7bd      	b.n	8002546 <_printf_i+0x126>
 80025ca:	6833      	ldr	r3, [r6, #0]
 80025cc:	6825      	ldr	r5, [r4, #0]
 80025ce:	1d18      	adds	r0, r3, #4
 80025d0:	6961      	ldr	r1, [r4, #20]
 80025d2:	6030      	str	r0, [r6, #0]
 80025d4:	062e      	lsls	r6, r5, #24
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	d501      	bpl.n	80025de <_printf_i+0x1be>
 80025da:	6019      	str	r1, [r3, #0]
 80025dc:	e002      	b.n	80025e4 <_printf_i+0x1c4>
 80025de:	0668      	lsls	r0, r5, #25
 80025e0:	d5fb      	bpl.n	80025da <_printf_i+0x1ba>
 80025e2:	8019      	strh	r1, [r3, #0]
 80025e4:	2300      	movs	r3, #0
 80025e6:	4616      	mov	r6, r2
 80025e8:	6123      	str	r3, [r4, #16]
 80025ea:	e7bc      	b.n	8002566 <_printf_i+0x146>
 80025ec:	6833      	ldr	r3, [r6, #0]
 80025ee:	2100      	movs	r1, #0
 80025f0:	1d1a      	adds	r2, r3, #4
 80025f2:	6032      	str	r2, [r6, #0]
 80025f4:	681e      	ldr	r6, [r3, #0]
 80025f6:	6862      	ldr	r2, [r4, #4]
 80025f8:	4630      	mov	r0, r6
 80025fa:	f000 f96b 	bl	80028d4 <memchr>
 80025fe:	b108      	cbz	r0, 8002604 <_printf_i+0x1e4>
 8002600:	1b80      	subs	r0, r0, r6
 8002602:	6060      	str	r0, [r4, #4]
 8002604:	6863      	ldr	r3, [r4, #4]
 8002606:	6123      	str	r3, [r4, #16]
 8002608:	2300      	movs	r3, #0
 800260a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800260e:	e7aa      	b.n	8002566 <_printf_i+0x146>
 8002610:	4632      	mov	r2, r6
 8002612:	4649      	mov	r1, r9
 8002614:	4640      	mov	r0, r8
 8002616:	6923      	ldr	r3, [r4, #16]
 8002618:	47d0      	blx	sl
 800261a:	3001      	adds	r0, #1
 800261c:	d0ad      	beq.n	800257a <_printf_i+0x15a>
 800261e:	6823      	ldr	r3, [r4, #0]
 8002620:	079b      	lsls	r3, r3, #30
 8002622:	d413      	bmi.n	800264c <_printf_i+0x22c>
 8002624:	68e0      	ldr	r0, [r4, #12]
 8002626:	9b03      	ldr	r3, [sp, #12]
 8002628:	4298      	cmp	r0, r3
 800262a:	bfb8      	it	lt
 800262c:	4618      	movlt	r0, r3
 800262e:	e7a6      	b.n	800257e <_printf_i+0x15e>
 8002630:	2301      	movs	r3, #1
 8002632:	4632      	mov	r2, r6
 8002634:	4649      	mov	r1, r9
 8002636:	4640      	mov	r0, r8
 8002638:	47d0      	blx	sl
 800263a:	3001      	adds	r0, #1
 800263c:	d09d      	beq.n	800257a <_printf_i+0x15a>
 800263e:	3501      	adds	r5, #1
 8002640:	68e3      	ldr	r3, [r4, #12]
 8002642:	9903      	ldr	r1, [sp, #12]
 8002644:	1a5b      	subs	r3, r3, r1
 8002646:	42ab      	cmp	r3, r5
 8002648:	dcf2      	bgt.n	8002630 <_printf_i+0x210>
 800264a:	e7eb      	b.n	8002624 <_printf_i+0x204>
 800264c:	2500      	movs	r5, #0
 800264e:	f104 0619 	add.w	r6, r4, #25
 8002652:	e7f5      	b.n	8002640 <_printf_i+0x220>
 8002654:	08002987 	.word	0x08002987
 8002658:	08002998 	.word	0x08002998

0800265c <__sflush_r>:
 800265c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002662:	0716      	lsls	r6, r2, #28
 8002664:	4605      	mov	r5, r0
 8002666:	460c      	mov	r4, r1
 8002668:	d454      	bmi.n	8002714 <__sflush_r+0xb8>
 800266a:	684b      	ldr	r3, [r1, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	dc02      	bgt.n	8002676 <__sflush_r+0x1a>
 8002670:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002672:	2b00      	cmp	r3, #0
 8002674:	dd48      	ble.n	8002708 <__sflush_r+0xac>
 8002676:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002678:	2e00      	cmp	r6, #0
 800267a:	d045      	beq.n	8002708 <__sflush_r+0xac>
 800267c:	2300      	movs	r3, #0
 800267e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002682:	682f      	ldr	r7, [r5, #0]
 8002684:	6a21      	ldr	r1, [r4, #32]
 8002686:	602b      	str	r3, [r5, #0]
 8002688:	d030      	beq.n	80026ec <__sflush_r+0x90>
 800268a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800268c:	89a3      	ldrh	r3, [r4, #12]
 800268e:	0759      	lsls	r1, r3, #29
 8002690:	d505      	bpl.n	800269e <__sflush_r+0x42>
 8002692:	6863      	ldr	r3, [r4, #4]
 8002694:	1ad2      	subs	r2, r2, r3
 8002696:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002698:	b10b      	cbz	r3, 800269e <__sflush_r+0x42>
 800269a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800269c:	1ad2      	subs	r2, r2, r3
 800269e:	2300      	movs	r3, #0
 80026a0:	4628      	mov	r0, r5
 80026a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80026a4:	6a21      	ldr	r1, [r4, #32]
 80026a6:	47b0      	blx	r6
 80026a8:	1c43      	adds	r3, r0, #1
 80026aa:	89a3      	ldrh	r3, [r4, #12]
 80026ac:	d106      	bne.n	80026bc <__sflush_r+0x60>
 80026ae:	6829      	ldr	r1, [r5, #0]
 80026b0:	291d      	cmp	r1, #29
 80026b2:	d82b      	bhi.n	800270c <__sflush_r+0xb0>
 80026b4:	4a28      	ldr	r2, [pc, #160]	@ (8002758 <__sflush_r+0xfc>)
 80026b6:	40ca      	lsrs	r2, r1
 80026b8:	07d6      	lsls	r6, r2, #31
 80026ba:	d527      	bpl.n	800270c <__sflush_r+0xb0>
 80026bc:	2200      	movs	r2, #0
 80026be:	6062      	str	r2, [r4, #4]
 80026c0:	6922      	ldr	r2, [r4, #16]
 80026c2:	04d9      	lsls	r1, r3, #19
 80026c4:	6022      	str	r2, [r4, #0]
 80026c6:	d504      	bpl.n	80026d2 <__sflush_r+0x76>
 80026c8:	1c42      	adds	r2, r0, #1
 80026ca:	d101      	bne.n	80026d0 <__sflush_r+0x74>
 80026cc:	682b      	ldr	r3, [r5, #0]
 80026ce:	b903      	cbnz	r3, 80026d2 <__sflush_r+0x76>
 80026d0:	6560      	str	r0, [r4, #84]	@ 0x54
 80026d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80026d4:	602f      	str	r7, [r5, #0]
 80026d6:	b1b9      	cbz	r1, 8002708 <__sflush_r+0xac>
 80026d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80026dc:	4299      	cmp	r1, r3
 80026de:	d002      	beq.n	80026e6 <__sflush_r+0x8a>
 80026e0:	4628      	mov	r0, r5
 80026e2:	f7ff fbf5 	bl	8001ed0 <_free_r>
 80026e6:	2300      	movs	r3, #0
 80026e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80026ea:	e00d      	b.n	8002708 <__sflush_r+0xac>
 80026ec:	2301      	movs	r3, #1
 80026ee:	4628      	mov	r0, r5
 80026f0:	47b0      	blx	r6
 80026f2:	4602      	mov	r2, r0
 80026f4:	1c50      	adds	r0, r2, #1
 80026f6:	d1c9      	bne.n	800268c <__sflush_r+0x30>
 80026f8:	682b      	ldr	r3, [r5, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0c6      	beq.n	800268c <__sflush_r+0x30>
 80026fe:	2b1d      	cmp	r3, #29
 8002700:	d001      	beq.n	8002706 <__sflush_r+0xaa>
 8002702:	2b16      	cmp	r3, #22
 8002704:	d11d      	bne.n	8002742 <__sflush_r+0xe6>
 8002706:	602f      	str	r7, [r5, #0]
 8002708:	2000      	movs	r0, #0
 800270a:	e021      	b.n	8002750 <__sflush_r+0xf4>
 800270c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002710:	b21b      	sxth	r3, r3
 8002712:	e01a      	b.n	800274a <__sflush_r+0xee>
 8002714:	690f      	ldr	r7, [r1, #16]
 8002716:	2f00      	cmp	r7, #0
 8002718:	d0f6      	beq.n	8002708 <__sflush_r+0xac>
 800271a:	0793      	lsls	r3, r2, #30
 800271c:	bf18      	it	ne
 800271e:	2300      	movne	r3, #0
 8002720:	680e      	ldr	r6, [r1, #0]
 8002722:	bf08      	it	eq
 8002724:	694b      	ldreq	r3, [r1, #20]
 8002726:	1bf6      	subs	r6, r6, r7
 8002728:	600f      	str	r7, [r1, #0]
 800272a:	608b      	str	r3, [r1, #8]
 800272c:	2e00      	cmp	r6, #0
 800272e:	ddeb      	ble.n	8002708 <__sflush_r+0xac>
 8002730:	4633      	mov	r3, r6
 8002732:	463a      	mov	r2, r7
 8002734:	4628      	mov	r0, r5
 8002736:	6a21      	ldr	r1, [r4, #32]
 8002738:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800273c:	47e0      	blx	ip
 800273e:	2800      	cmp	r0, #0
 8002740:	dc07      	bgt.n	8002752 <__sflush_r+0xf6>
 8002742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800274a:	f04f 30ff 	mov.w	r0, #4294967295
 800274e:	81a3      	strh	r3, [r4, #12]
 8002750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002752:	4407      	add	r7, r0
 8002754:	1a36      	subs	r6, r6, r0
 8002756:	e7e9      	b.n	800272c <__sflush_r+0xd0>
 8002758:	20400001 	.word	0x20400001

0800275c <_fflush_r>:
 800275c:	b538      	push	{r3, r4, r5, lr}
 800275e:	690b      	ldr	r3, [r1, #16]
 8002760:	4605      	mov	r5, r0
 8002762:	460c      	mov	r4, r1
 8002764:	b913      	cbnz	r3, 800276c <_fflush_r+0x10>
 8002766:	2500      	movs	r5, #0
 8002768:	4628      	mov	r0, r5
 800276a:	bd38      	pop	{r3, r4, r5, pc}
 800276c:	b118      	cbz	r0, 8002776 <_fflush_r+0x1a>
 800276e:	6a03      	ldr	r3, [r0, #32]
 8002770:	b90b      	cbnz	r3, 8002776 <_fflush_r+0x1a>
 8002772:	f7ff f9b3 	bl	8001adc <__sinit>
 8002776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f3      	beq.n	8002766 <_fflush_r+0xa>
 800277e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002780:	07d0      	lsls	r0, r2, #31
 8002782:	d404      	bmi.n	800278e <_fflush_r+0x32>
 8002784:	0599      	lsls	r1, r3, #22
 8002786:	d402      	bmi.n	800278e <_fflush_r+0x32>
 8002788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800278a:	f7ff fb9e 	bl	8001eca <__retarget_lock_acquire_recursive>
 800278e:	4628      	mov	r0, r5
 8002790:	4621      	mov	r1, r4
 8002792:	f7ff ff63 	bl	800265c <__sflush_r>
 8002796:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002798:	4605      	mov	r5, r0
 800279a:	07da      	lsls	r2, r3, #31
 800279c:	d4e4      	bmi.n	8002768 <_fflush_r+0xc>
 800279e:	89a3      	ldrh	r3, [r4, #12]
 80027a0:	059b      	lsls	r3, r3, #22
 80027a2:	d4e1      	bmi.n	8002768 <_fflush_r+0xc>
 80027a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80027a6:	f7ff fb91 	bl	8001ecc <__retarget_lock_release_recursive>
 80027aa:	e7dd      	b.n	8002768 <_fflush_r+0xc>

080027ac <__swhatbuf_r>:
 80027ac:	b570      	push	{r4, r5, r6, lr}
 80027ae:	460c      	mov	r4, r1
 80027b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027b4:	4615      	mov	r5, r2
 80027b6:	2900      	cmp	r1, #0
 80027b8:	461e      	mov	r6, r3
 80027ba:	b096      	sub	sp, #88	@ 0x58
 80027bc:	da0c      	bge.n	80027d8 <__swhatbuf_r+0x2c>
 80027be:	89a3      	ldrh	r3, [r4, #12]
 80027c0:	2100      	movs	r1, #0
 80027c2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80027c6:	bf14      	ite	ne
 80027c8:	2340      	movne	r3, #64	@ 0x40
 80027ca:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80027ce:	2000      	movs	r0, #0
 80027d0:	6031      	str	r1, [r6, #0]
 80027d2:	602b      	str	r3, [r5, #0]
 80027d4:	b016      	add	sp, #88	@ 0x58
 80027d6:	bd70      	pop	{r4, r5, r6, pc}
 80027d8:	466a      	mov	r2, sp
 80027da:	f000 f849 	bl	8002870 <_fstat_r>
 80027de:	2800      	cmp	r0, #0
 80027e0:	dbed      	blt.n	80027be <__swhatbuf_r+0x12>
 80027e2:	9901      	ldr	r1, [sp, #4]
 80027e4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80027e8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80027ec:	4259      	negs	r1, r3
 80027ee:	4159      	adcs	r1, r3
 80027f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027f4:	e7eb      	b.n	80027ce <__swhatbuf_r+0x22>

080027f6 <__smakebuf_r>:
 80027f6:	898b      	ldrh	r3, [r1, #12]
 80027f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027fa:	079d      	lsls	r5, r3, #30
 80027fc:	4606      	mov	r6, r0
 80027fe:	460c      	mov	r4, r1
 8002800:	d507      	bpl.n	8002812 <__smakebuf_r+0x1c>
 8002802:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002806:	6023      	str	r3, [r4, #0]
 8002808:	6123      	str	r3, [r4, #16]
 800280a:	2301      	movs	r3, #1
 800280c:	6163      	str	r3, [r4, #20]
 800280e:	b003      	add	sp, #12
 8002810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002812:	466a      	mov	r2, sp
 8002814:	ab01      	add	r3, sp, #4
 8002816:	f7ff ffc9 	bl	80027ac <__swhatbuf_r>
 800281a:	9f00      	ldr	r7, [sp, #0]
 800281c:	4605      	mov	r5, r0
 800281e:	4639      	mov	r1, r7
 8002820:	4630      	mov	r0, r6
 8002822:	f7ff fbbf 	bl	8001fa4 <_malloc_r>
 8002826:	b948      	cbnz	r0, 800283c <__smakebuf_r+0x46>
 8002828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800282c:	059a      	lsls	r2, r3, #22
 800282e:	d4ee      	bmi.n	800280e <__smakebuf_r+0x18>
 8002830:	f023 0303 	bic.w	r3, r3, #3
 8002834:	f043 0302 	orr.w	r3, r3, #2
 8002838:	81a3      	strh	r3, [r4, #12]
 800283a:	e7e2      	b.n	8002802 <__smakebuf_r+0xc>
 800283c:	89a3      	ldrh	r3, [r4, #12]
 800283e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002846:	81a3      	strh	r3, [r4, #12]
 8002848:	9b01      	ldr	r3, [sp, #4]
 800284a:	6020      	str	r0, [r4, #0]
 800284c:	b15b      	cbz	r3, 8002866 <__smakebuf_r+0x70>
 800284e:	4630      	mov	r0, r6
 8002850:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002854:	f000 f81e 	bl	8002894 <_isatty_r>
 8002858:	b128      	cbz	r0, 8002866 <__smakebuf_r+0x70>
 800285a:	89a3      	ldrh	r3, [r4, #12]
 800285c:	f023 0303 	bic.w	r3, r3, #3
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	81a3      	strh	r3, [r4, #12]
 8002866:	89a3      	ldrh	r3, [r4, #12]
 8002868:	431d      	orrs	r5, r3
 800286a:	81a5      	strh	r5, [r4, #12]
 800286c:	e7cf      	b.n	800280e <__smakebuf_r+0x18>
	...

08002870 <_fstat_r>:
 8002870:	b538      	push	{r3, r4, r5, lr}
 8002872:	2300      	movs	r3, #0
 8002874:	4d06      	ldr	r5, [pc, #24]	@ (8002890 <_fstat_r+0x20>)
 8002876:	4604      	mov	r4, r0
 8002878:	4608      	mov	r0, r1
 800287a:	4611      	mov	r1, r2
 800287c:	602b      	str	r3, [r5, #0]
 800287e:	f7fd fe93 	bl	80005a8 <_fstat>
 8002882:	1c43      	adds	r3, r0, #1
 8002884:	d102      	bne.n	800288c <_fstat_r+0x1c>
 8002886:	682b      	ldr	r3, [r5, #0]
 8002888:	b103      	cbz	r3, 800288c <_fstat_r+0x1c>
 800288a:	6023      	str	r3, [r4, #0]
 800288c:	bd38      	pop	{r3, r4, r5, pc}
 800288e:	bf00      	nop
 8002890:	20000214 	.word	0x20000214

08002894 <_isatty_r>:
 8002894:	b538      	push	{r3, r4, r5, lr}
 8002896:	2300      	movs	r3, #0
 8002898:	4d05      	ldr	r5, [pc, #20]	@ (80028b0 <_isatty_r+0x1c>)
 800289a:	4604      	mov	r4, r0
 800289c:	4608      	mov	r0, r1
 800289e:	602b      	str	r3, [r5, #0]
 80028a0:	f7fd fe91 	bl	80005c6 <_isatty>
 80028a4:	1c43      	adds	r3, r0, #1
 80028a6:	d102      	bne.n	80028ae <_isatty_r+0x1a>
 80028a8:	682b      	ldr	r3, [r5, #0]
 80028aa:	b103      	cbz	r3, 80028ae <_isatty_r+0x1a>
 80028ac:	6023      	str	r3, [r4, #0]
 80028ae:	bd38      	pop	{r3, r4, r5, pc}
 80028b0:	20000214 	.word	0x20000214

080028b4 <_sbrk_r>:
 80028b4:	b538      	push	{r3, r4, r5, lr}
 80028b6:	2300      	movs	r3, #0
 80028b8:	4d05      	ldr	r5, [pc, #20]	@ (80028d0 <_sbrk_r+0x1c>)
 80028ba:	4604      	mov	r4, r0
 80028bc:	4608      	mov	r0, r1
 80028be:	602b      	str	r3, [r5, #0]
 80028c0:	f7fd fe98 	bl	80005f4 <_sbrk>
 80028c4:	1c43      	adds	r3, r0, #1
 80028c6:	d102      	bne.n	80028ce <_sbrk_r+0x1a>
 80028c8:	682b      	ldr	r3, [r5, #0]
 80028ca:	b103      	cbz	r3, 80028ce <_sbrk_r+0x1a>
 80028cc:	6023      	str	r3, [r4, #0]
 80028ce:	bd38      	pop	{r3, r4, r5, pc}
 80028d0:	20000214 	.word	0x20000214

080028d4 <memchr>:
 80028d4:	4603      	mov	r3, r0
 80028d6:	b510      	push	{r4, lr}
 80028d8:	b2c9      	uxtb	r1, r1
 80028da:	4402      	add	r2, r0
 80028dc:	4293      	cmp	r3, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	d101      	bne.n	80028e6 <memchr+0x12>
 80028e2:	2000      	movs	r0, #0
 80028e4:	e003      	b.n	80028ee <memchr+0x1a>
 80028e6:	7804      	ldrb	r4, [r0, #0]
 80028e8:	3301      	adds	r3, #1
 80028ea:	428c      	cmp	r4, r1
 80028ec:	d1f6      	bne.n	80028dc <memchr+0x8>
 80028ee:	bd10      	pop	{r4, pc}

080028f0 <_init>:
 80028f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f2:	bf00      	nop
 80028f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028f6:	bc08      	pop	{r3}
 80028f8:	469e      	mov	lr, r3
 80028fa:	4770      	bx	lr

080028fc <_fini>:
 80028fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fe:	bf00      	nop
 8002900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002902:	bc08      	pop	{r3}
 8002904:	469e      	mov	lr, r3
 8002906:	4770      	bx	lr
