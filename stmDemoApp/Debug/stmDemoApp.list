
stmDemoApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c08  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08005d18  08005d18  00006d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ee0  08005ee0  00007094  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005ee0  08005ee0  00007094  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005ee0  08005ee0  00007094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee0  08005ee0  00006ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ee4  08005ee4  00006ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  08005ee8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b2c  20000094  08005f7c  00007094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bc0  08005f7c  00007bc0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b74  00000000  00000000  000070bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032bb  00000000  00000000  00018c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  0001bef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c2e  00000000  00000000  0001cf10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019da3  00000000  00000000  0001db3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013701  00000000  00000000  000378e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e8fa  00000000  00000000  0004afe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d98dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047cc  00000000  00000000  000d9920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000de0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000094 	.word	0x20000094
 800012c:	00000000 	.word	0x00000000
 8000130:	08005d00 	.word	0x08005d00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000098 	.word	0x20000098
 800014c:	08005d00 	.word	0x08005d00

08000150 <AppMain>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void AppMain()
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
	bool blFlag =  FALSE;
 8000156:	2300      	movs	r3, #0
 8000158:	71fb      	strb	r3, [r7, #7]

	printf("Hello from STM32 via UART!\r\n");
 800015a:	480a      	ldr	r0, [pc, #40]	@ (8000184 <AppMain+0x34>)
 800015c:	f004 ff56 	bl	800500c <puts>
	blFlag = TaskInit();
 8000160:	f000 f966 	bl	8000430 <TaskInit>
 8000164:	4603      	mov	r3, r0
 8000166:	71fb      	strb	r3, [r7, #7]

	if(blFlag == FALSE)
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	f083 0301 	eor.w	r3, r3, #1
 800016e:	b2db      	uxtb	r3, r3
 8000170:	2b00      	cmp	r3, #0
 8000172:	d002      	beq.n	800017a <AppMain+0x2a>
	{
		printf("Thread Creation Failed\r\n");
 8000174:	4804      	ldr	r0, [pc, #16]	@ (8000188 <AppMain+0x38>)
 8000176:	f004 ff49 	bl	800500c <puts>
	}
}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	08005d18 	.word	0x08005d18
 8000188:	08005d34 	.word	0x08005d34

0800018c <GPIOLEDSet>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
bool GPIOLEDSet(PORT_TYPE LEDPort, PIN_NUMBER LEDPin, bool blLEDStatus)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b086      	sub	sp, #24
 8000190:	af00      	add	r7, sp, #0
 8000192:	4603      	mov	r3, r0
 8000194:	71fb      	strb	r3, [r7, #7]
 8000196:	460b      	mov	r3, r1
 8000198:	71bb      	strb	r3, [r7, #6]
 800019a:	4613      	mov	r3, r2
 800019c:	717b      	strb	r3, [r7, #5]
	bool blFlag = FALSE;
 800019e:	2300      	movs	r3, #0
 80001a0:	75fb      	strb	r3, [r7, #23]
	GPIO_TypeDef* gpioPort = NULL;
 80001a2:	2300      	movs	r3, #0
 80001a4:	613b      	str	r3, [r7, #16]
	uint32_t gpioPin = 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	60fb      	str	r3, [r7, #12]
	uint8 ucIndex = 0;
 80001aa:	2300      	movs	r3, #0
 80001ac:	72fb      	strb	r3, [r7, #11]

	switch(LEDPort)
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	2b03      	cmp	r3, #3
 80001b2:	d817      	bhi.n	80001e4 <GPIOLEDSet+0x58>
 80001b4:	a201      	add	r2, pc, #4	@ (adr r2, 80001bc <GPIOLEDSet+0x30>)
 80001b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ba:	bf00      	nop
 80001bc:	080001cd 	.word	0x080001cd
 80001c0:	080001d3 	.word	0x080001d3
 80001c4:	080001d9 	.word	0x080001d9
 80001c8:	080001df 	.word	0x080001df
	{
		case PORT_A:
			gpioPort = GPIOA;
 80001cc:	4b17      	ldr	r3, [pc, #92]	@ (800022c <GPIOLEDSet+0xa0>)
 80001ce:	613b      	str	r3, [r7, #16]
			break;
 80001d0:	e008      	b.n	80001e4 <GPIOLEDSet+0x58>
		case PORT_B:
			gpioPort = GPIOB;
 80001d2:	4b17      	ldr	r3, [pc, #92]	@ (8000230 <GPIOLEDSet+0xa4>)
 80001d4:	613b      	str	r3, [r7, #16]
			break;
 80001d6:	e005      	b.n	80001e4 <GPIOLEDSet+0x58>
		case PORT_C:
			gpioPort = GPIOC;
 80001d8:	4b16      	ldr	r3, [pc, #88]	@ (8000234 <GPIOLEDSet+0xa8>)
 80001da:	613b      	str	r3, [r7, #16]
			break;
 80001dc:	e002      	b.n	80001e4 <GPIOLEDSet+0x58>
		case PORT_D:
			gpioPort = GPIOD;
 80001de:	4b16      	ldr	r3, [pc, #88]	@ (8000238 <GPIOLEDSet+0xac>)
 80001e0:	613b      	str	r3, [r7, #16]
			break;
 80001e2:	bf00      	nop
	}

	for(ucIndex = 0; ucIndex<16; ucIndex++)
 80001e4:	2300      	movs	r3, #0
 80001e6:	72fb      	strb	r3, [r7, #11]
 80001e8:	e00b      	b.n	8000202 <GPIOLEDSet+0x76>
	{
		if(LEDPin == ucIndex)
 80001ea:	79ba      	ldrb	r2, [r7, #6]
 80001ec:	7afb      	ldrb	r3, [r7, #11]
 80001ee:	429a      	cmp	r2, r3
 80001f0:	d104      	bne.n	80001fc <GPIOLEDSet+0x70>
		{
			gpioPin = gpioPin << LEDPin;
 80001f2:	79bb      	ldrb	r3, [r7, #6]
 80001f4:	68fa      	ldr	r2, [r7, #12]
 80001f6:	fa02 f303 	lsl.w	r3, r2, r3
 80001fa:	60fb      	str	r3, [r7, #12]
	for(ucIndex = 0; ucIndex<16; ucIndex++)
 80001fc:	7afb      	ldrb	r3, [r7, #11]
 80001fe:	3301      	adds	r3, #1
 8000200:	72fb      	strb	r3, [r7, #11]
 8000202:	7afb      	ldrb	r3, [r7, #11]
 8000204:	2b0f      	cmp	r3, #15
 8000206:	d9f0      	bls.n	80001ea <GPIOLEDSet+0x5e>
		}
	}

	if(gpioPort != NULL)
 8000208:	693b      	ldr	r3, [r7, #16]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d008      	beq.n	8000220 <GPIOLEDSet+0x94>
	{
		HAL_GPIO_WritePin(gpioPort, gpioPin, blLEDStatus);
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	b29b      	uxth	r3, r3
 8000212:	797a      	ldrb	r2, [r7, #5]
 8000214:	4619      	mov	r1, r3
 8000216:	6938      	ldr	r0, [r7, #16]
 8000218:	f001 f84b 	bl	80012b2 <HAL_GPIO_WritePin>
		blFlag = TRUE;
 800021c:	2301      	movs	r3, #1
 800021e:	75fb      	strb	r3, [r7, #23]
	}

	return blFlag;
 8000220:	7dfb      	ldrb	r3, [r7, #23]
}
 8000222:	4618      	mov	r0, r3
 8000224:	3718      	adds	r7, #24
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	40010800 	.word	0x40010800
 8000230:	40010c00 	.word	0x40010c00
 8000234:	40011000 	.word	0x40011000
 8000238:	40011400 	.word	0x40011400

0800023c <GPIOReadButtonPress>:
//Outputs : None
//Return  : TRUE - Button Pressed , FALSE - Button Not pressed
//Notes   : None
//*****************************************************************************
bool GPIOReadButtonPress()
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
	bool blFlag = FALSE;
 8000242:	2300      	movs	r3, #0
 8000244:	71fb      	strb	r3, [r7, #7]

	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000246:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800024a:	4806      	ldr	r0, [pc, #24]	@ (8000264 <GPIOReadButtonPress+0x28>)
 800024c:	f001 f81a 	bl	8001284 <HAL_GPIO_ReadPin>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d101      	bne.n	800025a <GPIOReadButtonPress+0x1e>
	{
		blFlag = TRUE;
 8000256:	2301      	movs	r3, #1
 8000258:	71fb      	strb	r3, [r7, #7]
	}

	return blFlag;
 800025a:	79fb      	ldrb	r3, [r7, #7]
}
 800025c:	4618      	mov	r0, r3
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40011000 	.word	0x40011000

08000268 <LEDToggle>:
//Outputs : None
//Return  : TRUE - LED Blinking success, FALSE - failed
//Notes   : None
//*****************************************************************************
bool LEDToggle()
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
	static bool sblLEDState = FALSE;
	bool blFlag = FALSE;
 800026e:	2300      	movs	r3, #0
 8000270:	71fb      	strb	r3, [r7, #7]
	PORT_TYPE port = PORT_A;
 8000272:	2300      	movs	r3, #0
 8000274:	71bb      	strb	r3, [r7, #6]
	PIN_NUMBER pin = PIN_5;
 8000276:	2305      	movs	r3, #5
 8000278:	717b      	strb	r3, [r7, #5]

	if(sblLEDState == FALSE)
 800027a:	4b14      	ldr	r3, [pc, #80]	@ (80002cc <LEDToggle+0x64>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	f083 0301 	eor.w	r3, r3, #1
 8000282:	b2db      	uxtb	r3, r3
 8000284:	2b00      	cmp	r3, #0
 8000286:	d00e      	beq.n	80002a6 <LEDToggle+0x3e>
	{
		blFlag = GPIOLEDSet(port, pin, TRUE);
 8000288:	7979      	ldrb	r1, [r7, #5]
 800028a:	79bb      	ldrb	r3, [r7, #6]
 800028c:	2201      	movs	r2, #1
 800028e:	4618      	mov	r0, r3
 8000290:	f7ff ff7c 	bl	800018c <GPIOLEDSet>
 8000294:	4603      	mov	r3, r0
 8000296:	71fb      	strb	r3, [r7, #7]
		printf("LED ON\r\n");
 8000298:	480d      	ldr	r0, [pc, #52]	@ (80002d0 <LEDToggle+0x68>)
 800029a:	f004 feb7 	bl	800500c <puts>
		sblLEDState = TRUE;
 800029e:	4b0b      	ldr	r3, [pc, #44]	@ (80002cc <LEDToggle+0x64>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	701a      	strb	r2, [r3, #0]
 80002a4:	e00d      	b.n	80002c2 <LEDToggle+0x5a>
	}
	else
	{
		blFlag = GPIOLEDSet(port, pin, FALSE);
 80002a6:	7979      	ldrb	r1, [r7, #5]
 80002a8:	79bb      	ldrb	r3, [r7, #6]
 80002aa:	2200      	movs	r2, #0
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ff6d 	bl	800018c <GPIOLEDSet>
 80002b2:	4603      	mov	r3, r0
 80002b4:	71fb      	strb	r3, [r7, #7]
		printf("LED OFF\r\n");
 80002b6:	4807      	ldr	r0, [pc, #28]	@ (80002d4 <LEDToggle+0x6c>)
 80002b8:	f004 fea8 	bl	800500c <puts>
		sblLEDState = FALSE;
 80002bc:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <LEDToggle+0x64>)
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
	}

	return blFlag;
 80002c2:	79fb      	ldrb	r3, [r7, #7]
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	200000b0 	.word	0x200000b0
 80002d0:	08005d4c 	.word	0x08005d4c
 80002d4:	08005d54 	.word	0x08005d54

080002d8 <osMsgqPollerToRecieverInit>:
//Outputs : None
//Return  : TRUE - Message Queue Initialization completed, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqPollerToRecieverInit(uint32 MsgSize)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 80002e0:	2300      	movs	r3, #0
 80002e2:	73fb      	strb	r3, [r7, #15]

	PollerToReceiverId = osMessageQueueNew(MSG_COUNT, MsgSize, NULL);
 80002e4:	2200      	movs	r2, #0
 80002e6:	6879      	ldr	r1, [r7, #4]
 80002e8:	2005      	movs	r0, #5
 80002ea:	f001 ff58 	bl	800219e <osMessageQueueNew>
 80002ee:	4603      	mov	r3, r0
 80002f0:	4a06      	ldr	r2, [pc, #24]	@ (800030c <osMsgqPollerToRecieverInit+0x34>)
 80002f2:	6013      	str	r3, [r2, #0]

	if(PollerToReceiverId != NULL)
 80002f4:	4b05      	ldr	r3, [pc, #20]	@ (800030c <osMsgqPollerToRecieverInit+0x34>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <osMsgqPollerToRecieverInit+0x28>
	{
		blFlag = TRUE;
 80002fc:	2301      	movs	r3, #1
 80002fe:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000300:	7bfb      	ldrb	r3, [r7, #15]
}
 8000302:	4618      	mov	r0, r3
 8000304:	3710      	adds	r7, #16
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	200000b4 	.word	0x200000b4

08000310 <osMsgqRecieverToPollerInit>:
//Outputs : None
//Return  : TRUE - Message Queue Initialization completed, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqRecieverToPollerInit(uint32 MsgSize)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000318:	2300      	movs	r3, #0
 800031a:	73fb      	strb	r3, [r7, #15]

	ReceiverToPollerId = osMessageQueueNew(MSG_COUNT, MsgSize, NULL);
 800031c:	2200      	movs	r2, #0
 800031e:	6879      	ldr	r1, [r7, #4]
 8000320:	2005      	movs	r0, #5
 8000322:	f001 ff3c 	bl	800219e <osMessageQueueNew>
 8000326:	4603      	mov	r3, r0
 8000328:	4a06      	ldr	r2, [pc, #24]	@ (8000344 <osMsgqRecieverToPollerInit+0x34>)
 800032a:	6013      	str	r3, [r2, #0]

	if(ReceiverToPollerId != NULL)
 800032c:	4b05      	ldr	r3, [pc, #20]	@ (8000344 <osMsgqRecieverToPollerInit+0x34>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <osMsgqRecieverToPollerInit+0x28>
	{
		blFlag = TRUE;
 8000334:	2301      	movs	r3, #1
 8000336:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000338:	7bfb      	ldrb	r3, [r7, #15]
}
 800033a:	4618      	mov	r0, r3
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	200000b8 	.word	0x200000b8

08000348 <osMsgqMessageSendToReceiver>:
//Outputs : None
//Return  : TRUE - Message sent, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMessageSendToReceiver(REQUEST_MSG stReqMsg)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	bool blFlag = FALSE;
 8000354:	2300      	movs	r3, #0
 8000356:	75fb      	strb	r3, [r7, #23]

	if(osMessageQueuePut(PollerToReceiverId, &stReqMsg, MSG_PRIORITY,
 8000358:	4b08      	ldr	r3, [pc, #32]	@ (800037c <osMsgqMessageSendToReceiver+0x34>)
 800035a:	6818      	ldr	r0, [r3, #0]
 800035c:	1d39      	adds	r1, r7, #4
 800035e:	f04f 33ff 	mov.w	r3, #4294967295
 8000362:	2200      	movs	r2, #0
 8000364:	f001 ff8e 	bl	8002284 <osMessageQueuePut>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d101      	bne.n	8000372 <osMsgqMessageSendToReceiver+0x2a>
			osWaitForever) == osOK)
	{
		blFlag = TRUE;
 800036e:	2301      	movs	r3, #1
 8000370:	75fb      	strb	r3, [r7, #23]
	}

	return blFlag;
 8000372:	7dfb      	ldrb	r3, [r7, #23]
}
 8000374:	4618      	mov	r0, r3
 8000376:	3718      	adds	r7, #24
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	200000b4 	.word	0x200000b4

08000380 <osMsgqMessageRcvFromPoller>:
//Outputs : None
//Return  : TRUE - Message Received, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMessageRcvFromPoller(REQUEST_MSG* stReqMsg)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000388:	2300      	movs	r3, #0
 800038a:	73fb      	strb	r3, [r7, #15]

	if(stReqMsg != NULL)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d00c      	beq.n	80003ac <osMsgqMessageRcvFromPoller+0x2c>
	{
		if (osMessageQueueGet(PollerToReceiverId, stReqMsg, NULL,
 8000392:	4b09      	ldr	r3, [pc, #36]	@ (80003b8 <osMsgqMessageRcvFromPoller+0x38>)
 8000394:	6818      	ldr	r0, [r3, #0]
 8000396:	f04f 33ff 	mov.w	r3, #4294967295
 800039a:	2200      	movs	r2, #0
 800039c:	6879      	ldr	r1, [r7, #4]
 800039e:	f001 ffd1 	bl	8002344 <osMessageQueueGet>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d101      	bne.n	80003ac <osMsgqMessageRcvFromPoller+0x2c>
				osWaitForever) == osOK)
		{
			blFlag = TRUE;
 80003a8:	2301      	movs	r3, #1
 80003aa:	73fb      	strb	r3, [r7, #15]
		}
	}

	return blFlag;
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3710      	adds	r7, #16
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	200000b4 	.word	0x200000b4

080003bc <osMsgqMessageSendToPoller>:
//Outputs : None
//Return  : TRUE - Message Sent, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMessageSendToPoller(ACK_MSG stAckMsg)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	bool blFlag = FALSE;
 80003c8:	2300      	movs	r3, #0
 80003ca:	75fb      	strb	r3, [r7, #23]

	if(osMessageQueuePut(ReceiverToPollerId, &stAckMsg, MSG_PRIORITY,
 80003cc:	4b08      	ldr	r3, [pc, #32]	@ (80003f0 <osMsgqMessageSendToPoller+0x34>)
 80003ce:	6818      	ldr	r0, [r3, #0]
 80003d0:	1d39      	adds	r1, r7, #4
 80003d2:	f04f 33ff 	mov.w	r3, #4294967295
 80003d6:	2200      	movs	r2, #0
 80003d8:	f001 ff54 	bl	8002284 <osMessageQueuePut>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d101      	bne.n	80003e6 <osMsgqMessageSendToPoller+0x2a>
			                                 osWaitForever) == osOK)
	{
		blFlag = TRUE;
 80003e2:	2301      	movs	r3, #1
 80003e4:	75fb      	strb	r3, [r7, #23]
	}

	return blFlag;
 80003e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	3718      	adds	r7, #24
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	200000b8 	.word	0x200000b8

080003f4 <osMsgqMessageRcvFromReceiver>:
//Outputs : None
//Return  : TRUE - Message Received, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMessageRcvFromReceiver(ACK_MSG* stAckMsg)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 80003fc:	2300      	movs	r3, #0
 80003fe:	73fb      	strb	r3, [r7, #15]

	if(stAckMsg != NULL)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d00c      	beq.n	8000420 <osMsgqMessageRcvFromReceiver+0x2c>
	{
		if (osMessageQueueGet(ReceiverToPollerId, stAckMsg, NULL,
 8000406:	4b09      	ldr	r3, [pc, #36]	@ (800042c <osMsgqMessageRcvFromReceiver+0x38>)
 8000408:	6818      	ldr	r0, [r3, #0]
 800040a:	f04f 33ff 	mov.w	r3, #4294967295
 800040e:	2200      	movs	r2, #0
 8000410:	6879      	ldr	r1, [r7, #4]
 8000412:	f001 ff97 	bl	8002344 <osMessageQueueGet>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d101      	bne.n	8000420 <osMsgqMessageRcvFromReceiver+0x2c>
										osWaitForever) == osOK)
		{
			blFlag = TRUE;
 800041c:	2301      	movs	r3, #1
 800041e:	73fb      	strb	r3, [r7, #15]
		}
	}

	return blFlag;
 8000420:	7bfb      	ldrb	r3, [r7, #15]
}
 8000422:	4618      	mov	r0, r3
 8000424:	3710      	adds	r7, #16
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	200000b8 	.word	0x200000b8

08000430 <TaskInit>:
//Outputs : None
//Return  : TRUE - initialized , FALSE - Error
//Notes   : None
//*****************************************************************************
bool TaskInit()
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
	uint8 ucIndex = 0;
 8000436:	2300      	movs	r3, #0
 8000438:	71fb      	strb	r3, [r7, #7]
	bool blFlag = FALSE;
 800043a:	2300      	movs	r3, #0
 800043c:	71bb      	strb	r3, [r7, #6]

	for(ucIndex = 0; ucIndex < TASKS_MAX_SIZE; ucIndex++)
 800043e:	2300      	movs	r3, #0
 8000440:	71fb      	strb	r3, [r7, #7]
 8000442:	e00b      	b.n	800045c <TaskInit+0x2c>
	{
		blFlag = osTaskCreate(&stTasks[ucIndex]);
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	011b      	lsls	r3, r3, #4
 8000448:	4a08      	ldr	r2, [pc, #32]	@ (800046c <TaskInit+0x3c>)
 800044a:	4413      	add	r3, r2
 800044c:	4618      	mov	r0, r3
 800044e:	f000 f80f 	bl	8000470 <osTaskCreate>
 8000452:	4603      	mov	r3, r0
 8000454:	71bb      	strb	r3, [r7, #6]
	for(ucIndex = 0; ucIndex < TASKS_MAX_SIZE; ucIndex++)
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	3301      	adds	r3, #1
 800045a:	71fb      	strb	r3, [r7, #7]
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d9f0      	bls.n	8000444 <TaskInit+0x14>
	}

	return blFlag;
 8000462:	79bb      	ldrb	r3, [r7, #6]
}
 8000464:	4618      	mov	r0, r3
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000000 	.word	0x20000000

08000470 <osTaskCreate>:
//Outputs : None
//Return  : TRUE - created thread successfully , FALSE - error
//Notes   : None
//*****************************************************************************
bool osTaskCreate(TASKS *stTask)
{
 8000470:	b590      	push	{r4, r7, lr}
 8000472:	b08d      	sub	sp, #52	@ 0x34
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000478:	2300      	movs	r3, #0
 800047a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	osThreadAttr_t attr = {0, 0, 0, 0, 0, 0, 0, 0, 0};
 800047e:	f107 0308 	add.w	r3, r7, #8
 8000482:	2224      	movs	r2, #36	@ 0x24
 8000484:	2100      	movs	r1, #0
 8000486:	4618      	mov	r0, r3
 8000488:	f004 fea0 	bl	80051cc <memset>

	if(stTask != NULL)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d037      	beq.n	8000502 <osTaskCreate+0x92>
	{
		attr.name = (const char *)stTask->pucTaskName;
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	60bb      	str	r3, [r7, #8]
		attr.stack_size = stTask->ulStackSize;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	61fb      	str	r3, [r7, #28]
		attr.priority = (osPriority_t)osPriorityNormal;
 800049e:	2318      	movs	r3, #24
 80004a0:	623b      	str	r3, [r7, #32]

		ThreadHandles[ucThreadIndex] = osThreadNew(stTask->pTaskFunc,
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	68db      	ldr	r3, [r3, #12]
 80004a6:	4a1a      	ldr	r2, [pc, #104]	@ (8000510 <osTaskCreate+0xa0>)
 80004a8:	7812      	ldrb	r2, [r2, #0]
 80004aa:	4614      	mov	r4, r2
 80004ac:	f107 0208 	add.w	r2, r7, #8
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f001 fdc6 	bl	8002044 <osThreadNew>
 80004b8:	4603      	mov	r3, r0
 80004ba:	4a16      	ldr	r2, [pc, #88]	@ (8000514 <osTaskCreate+0xa4>)
 80004bc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
														NULL, &attr);

		if(ThreadHandles[ucThreadIndex] == NULL)
 80004c0:	4b13      	ldr	r3, [pc, #76]	@ (8000510 <osTaskCreate+0xa0>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	461a      	mov	r2, r3
 80004c6:	4b13      	ldr	r3, [pc, #76]	@ (8000514 <osTaskCreate+0xa4>)
 80004c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d109      	bne.n	80004e4 <osTaskCreate+0x74>
		{
			blFlag = FALSE;
 80004d0:	2300      	movs	r3, #0
 80004d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		    printf("Failed to create thread: %s\r\n", stTask->pucTaskName);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4619      	mov	r1, r3
 80004dc:	480e      	ldr	r0, [pc, #56]	@ (8000518 <osTaskCreate+0xa8>)
 80004de:	f004 fd2d 	bl	8004f3c <iprintf>
 80004e2:	e00e      	b.n	8000502 <osTaskCreate+0x92>
		}
		else
		{
			printf("Created thread: %s\r\n", stTask->pucTaskName);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4619      	mov	r1, r3
 80004ea:	480c      	ldr	r0, [pc, #48]	@ (800051c <osTaskCreate+0xac>)
 80004ec:	f004 fd26 	bl	8004f3c <iprintf>
			ucThreadIndex++;
 80004f0:	4b07      	ldr	r3, [pc, #28]	@ (8000510 <osTaskCreate+0xa0>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	3301      	adds	r3, #1
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	4b05      	ldr	r3, [pc, #20]	@ (8000510 <osTaskCreate+0xa0>)
 80004fa:	701a      	strb	r2, [r3, #0]
			blFlag = TRUE;
 80004fc:	2301      	movs	r3, #1
 80004fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}

	}

	return blFlag;
 8000502:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000506:	4618      	mov	r0, r3
 8000508:	3734      	adds	r7, #52	@ 0x34
 800050a:	46bd      	mov	sp, r7
 800050c:	bd90      	pop	{r4, r7, pc}
 800050e:	bf00      	nop
 8000510:	200000c4 	.word	0x200000c4
 8000514:	200000bc 	.word	0x200000bc
 8000518:	08005d74 	.word	0x08005d74
 800051c:	08005d94 	.word	0x08005d94

08000520 <osTaskDelay>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void osTaskDelay(uint32 delay)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	osDelay(delay);
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f001 fe1d 	bl	8002168 <osDelay>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <PollerTask>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void PollerTask()
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af02      	add	r7, sp, #8
	REQUEST_MSG stReqMsg = {0, 0, 0};
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	2300      	movs	r3, #0
 8000544:	743b      	strb	r3, [r7, #16]
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
	ACK_MSG stAckMsg = {0, 0, 0, 0};
 800054a:	463b      	mov	r3, r7
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]

	if(osMsgqPollerToRecieverInit(sizeof(stReqMsg)))
 8000554:	200c      	movs	r0, #12
 8000556:	f7ff febf 	bl	80002d8 <osMsgqPollerToRecieverInit>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d035      	beq.n	80005cc <PollerTask+0x94>
	{
		while(1)
		{
			if(GPIOReadButtonPress())
 8000560:	f7ff fe6c 	bl	800023c <GPIOReadButtonPress>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d02c      	beq.n	80005c4 <PollerTask+0x8c>
			{
				printf("\nButton Pressed\r\n");
 800056a:	481a      	ldr	r0, [pc, #104]	@ (80005d4 <PollerTask+0x9c>)
 800056c:	f004 fd4e 	bl	800500c <puts>

				if(PollerTaskBuildRequest(&stReqMsg))
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	4618      	mov	r0, r3
 8000576:	f000 f833 	bl	80005e0 <PollerTaskBuildRequest>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d021      	beq.n	80005c4 <PollerTask+0x8c>
				{
					printf("Request Processed\r\n");
 8000580:	4815      	ldr	r0, [pc, #84]	@ (80005d8 <PollerTask+0xa0>)
 8000582:	f004 fd43 	bl	800500c <puts>

					if(osMsgqMessageSendToReceiver(stReqMsg))
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800058e:	f7ff fedb 	bl	8000348 <osMsgqMessageSendToReceiver>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d003      	beq.n	80005a0 <PollerTask+0x68>
					{
						osTaskDelay(DELAY_300);
 8000598:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800059c:	f7ff ffc0 	bl	8000520 <osTaskDelay>
					}

					if(osMsgqMessageRcvFromReceiver(&stAckMsg))
 80005a0:	463b      	mov	r3, r7
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff ff26 	bl	80003f4 <osMsgqMessageRcvFromReceiver>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d00a      	beq.n	80005c4 <PollerTask+0x8c>
					{
						printf("Poller: ACKUID=%lu, CMD=0x%02X, STATE=0x%02X, \
 80005ae:	6839      	ldr	r1, [r7, #0]
								DATA=0x%08lX\r\n\n",
								stAckMsg.ulUId, stAckMsg.ucCmd,
 80005b0:	793b      	ldrb	r3, [r7, #4]
						printf("Poller: ACKUID=%lu, CMD=0x%02X, STATE=0x%02X, \
 80005b2:	461a      	mov	r2, r3
								stAckMsg.ucState, stAckMsg.ulData);
 80005b4:	797b      	ldrb	r3, [r7, #5]
						printf("Poller: ACKUID=%lu, CMD=0x%02X, STATE=0x%02X, \
 80005b6:	4618      	mov	r0, r3
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	4603      	mov	r3, r0
 80005be:	4807      	ldr	r0, [pc, #28]	@ (80005dc <PollerTask+0xa4>)
 80005c0:	f004 fcbc 	bl	8004f3c <iprintf>

					}
				}
			}

			osTaskDelay(DELAY_100);
 80005c4:	2064      	movs	r0, #100	@ 0x64
 80005c6:	f7ff ffab 	bl	8000520 <osTaskDelay>
			if(GPIOReadButtonPress())
 80005ca:	e7c9      	b.n	8000560 <PollerTask+0x28>
		}
	}
}
 80005cc:	bf00      	nop
 80005ce:	3718      	adds	r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	08005dac 	.word	0x08005dac
 80005d8:	08005dc0 	.word	0x08005dc0
 80005dc:	08005dd4 	.word	0x08005dd4

080005e0 <PollerTaskBuildRequest>:
//Outputs : None
//Return  : TRUE - Request Message built, FALSE - error
//Notes   : None
//*****************************************************************************
bool PollerTaskBuildRequest(REQUEST_MSG* stReqMsg)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 80005e8:	2300      	movs	r3, #0
 80005ea:	73fb      	strb	r3, [r7, #15]

	if(stReqMsg != NULL)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d018      	beq.n	8000624 <PollerTaskBuildRequest+0x44>
	{
		stReqMsg->ulUId = ++ulUIdCounter;
 80005f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000630 <PollerTaskBuildRequest+0x50>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	3301      	adds	r3, #1
 80005f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000630 <PollerTaskBuildRequest+0x50>)
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <PollerTaskBuildRequest+0x50>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	601a      	str	r2, [r3, #0]
		stReqMsg->ucCmd = SET_CMD;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2202      	movs	r2, #2
 8000608:	711a      	strb	r2, [r3, #4]
		ulDATA = ulDATA ^ ulMASK;
 800060a:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <PollerTaskBuildRequest+0x54>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	4b0a      	ldr	r3, [pc, #40]	@ (8000638 <PollerTaskBuildRequest+0x58>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4053      	eors	r3, r2
 8000614:	4a07      	ldr	r2, [pc, #28]	@ (8000634 <PollerTaskBuildRequest+0x54>)
 8000616:	6013      	str	r3, [r2, #0]
		stReqMsg->ulData = ulDATA;
 8000618:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <PollerTaskBuildRequest+0x54>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	609a      	str	r2, [r3, #8]
		blFlag = TRUE;
 8000620:	2301      	movs	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000624:	7bfb      	ldrb	r3, [r7, #15]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	200000c8 	.word	0x200000c8
 8000634:	200000cc 	.word	0x200000cc
 8000638:	20000020 	.word	0x20000020

0800063c <RecieverTask>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void RecieverTask()
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
	REQUEST_MSG stReqMsg = {0, 0, 0};
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]
 8000646:	2300      	movs	r3, #0
 8000648:	753b      	strb	r3, [r7, #20]
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
	ACK_MSG stAckMsg = {0, 0, 0, 0};
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
	bool blFlag = FALSE;
 8000658:	2300      	movs	r3, #0
 800065a:	77fb      	strb	r3, [r7, #31]
	uint8 ucStatus = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	77bb      	strb	r3, [r7, #30]

	if(osMsgqRecieverToPollerInit(sizeof(stAckMsg)))
 8000660:	200c      	movs	r0, #12
 8000662:	f7ff fe55 	bl	8000310 <osMsgqRecieverToPollerInit>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d02f      	beq.n	80006cc <RecieverTask+0x90>
	{
		while(1)
		{
			if(osMsgqMessageRcvFromPoller(&stReqMsg))
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff fe85 	bl	8000380 <osMsgqMessageRcvFromPoller>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d0f7      	beq.n	800066c <RecieverTask+0x30>
			{
				printf("Receiver: REQUID=%lu CMD=0x%02X DATA=0x%08lX\r\n",
 800067c:	6939      	ldr	r1, [r7, #16]
						stReqMsg.ulUId, stReqMsg.ucCmd, stReqMsg.ulData);
 800067e:	7d3b      	ldrb	r3, [r7, #20]
				printf("Receiver: REQUID=%lu CMD=0x%02X DATA=0x%08lX\r\n",
 8000680:	461a      	mov	r2, r3
 8000682:	69bb      	ldr	r3, [r7, #24]
 8000684:	4813      	ldr	r0, [pc, #76]	@ (80006d4 <RecieverTask+0x98>)
 8000686:	f004 fc59 	bl	8004f3c <iprintf>
				blFlag = RecieverTaskProcessRequest(&stReqMsg);
 800068a:	f107 0310 	add.w	r3, r7, #16
 800068e:	4618      	mov	r0, r3
 8000690:	f000 f84a 	bl	8000728 <RecieverTaskProcessRequest>
 8000694:	4603      	mov	r3, r0
 8000696:	77fb      	strb	r3, [r7, #31]
				ucStatus = (blFlag != FALSE) ? ACK_STATUS_OK : ACK_STAUS_ERROR;
 8000698:	7ffb      	ldrb	r3, [r7, #31]
 800069a:	f083 0301 	eor.w	r3, r3, #1
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	77bb      	strb	r3, [r7, #30]

				if(ReceiverTaskSetAckMsg(&stAckMsg, ucStatus))
 80006a2:	7fba      	ldrb	r2, [r7, #30]
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4611      	mov	r1, r2
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 f815 	bl	80006d8 <ReceiverTaskSetAckMsg>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d0db      	beq.n	800066c <RecieverTask+0x30>
				{
					if(osMsgqMessageSendToPoller(stAckMsg))
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80006ba:	f7ff fe7f 	bl	80003bc <osMsgqMessageSendToPoller>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d0d3      	beq.n	800066c <RecieverTask+0x30>
					{
						osTaskDelay(DELAY_100);
 80006c4:	2064      	movs	r0, #100	@ 0x64
 80006c6:	f7ff ff2b 	bl	8000520 <osTaskDelay>
			if(osMsgqMessageRcvFromPoller(&stReqMsg))
 80006ca:	e7cf      	b.n	800066c <RecieverTask+0x30>
					}
				}
			}
		}
	}
}
 80006cc:	bf00      	nop
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	08005e1c 	.word	0x08005e1c

080006d8 <ReceiverTaskSetAckMsg>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
static bool ReceiverTaskSetAckMsg(ACK_MSG* stAckMsg,uint8 ucState)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	460b      	mov	r3, r1
 80006e2:	70fb      	strb	r3, [r7, #3]
	bool blFlag = FALSE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	73fb      	strb	r3, [r7, #15]
	CMD_TYPE cmd = CMD_ACK;
 80006e8:	2300      	movs	r3, #0
 80006ea:	73bb      	strb	r3, [r7, #14]

	if(stAckMsg != NULL)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d00f      	beq.n	8000712 <ReceiverTaskSetAckMsg+0x3a>
	{
		stAckMsg->ulUId = sgulUId;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <ReceiverTaskSetAckMsg+0x48>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	601a      	str	r2, [r3, #0]
		stAckMsg->ucCmd = cmd;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	7bba      	ldrb	r2, [r7, #14]
 80006fe:	711a      	strb	r2, [r3, #4]
		stAckMsg->ulData = sgulData;
 8000700:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <ReceiverTaskSetAckMsg+0x4c>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	609a      	str	r2, [r3, #8]
		stAckMsg->ucState = ucState;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	78fa      	ldrb	r2, [r7, #3]
 800070c:	715a      	strb	r2, [r3, #5]
		blFlag = TRUE;
 800070e:	2301      	movs	r3, #1
 8000710:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	200000d0 	.word	0x200000d0
 8000724:	20000024 	.word	0x20000024

08000728 <RecieverTaskProcessRequest>:
//Outputs : None
//Return  : TRUE - Request Message Processed, FALSE - error
//Notes   : None
//*****************************************************************************
bool RecieverTaskProcessRequest(REQUEST_MSG* stReqMsg)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000730:	2300      	movs	r3, #0
 8000732:	73fb      	strb	r3, [r7, #15]

	do
	{
		if(stReqMsg == NULL)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d01d      	beq.n	8000776 <RecieverTaskProcessRequest+0x4e>
		{
			break;
		}

		if(!RecieverTaskProcessUID(stReqMsg))
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f000 f828 	bl	8000790 <RecieverTaskProcessUID>
 8000740:	4603      	mov	r3, r0
 8000742:	f083 0301 	eor.w	r3, r3, #1
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2b00      	cmp	r3, #0
 800074a:	d116      	bne.n	800077a <RecieverTaskProcessRequest+0x52>
		{
			break;
		}

		if(!RecieverTaskProcessDATA(stReqMsg))
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 f861 	bl	8000814 <RecieverTaskProcessDATA>
 8000752:	4603      	mov	r3, r0
 8000754:	f083 0301 	eor.w	r3, r3, #1
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	d10f      	bne.n	800077e <RecieverTaskProcessRequest+0x56>
		{
			break;
		}

		if(!RecieverTaskProcessCMD(stReqMsg))
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f000 f82e 	bl	80007c0 <RecieverTaskProcessCMD>
 8000764:	4603      	mov	r3, r0
 8000766:	f083 0301 	eor.w	r3, r3, #1
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	d108      	bne.n	8000782 <RecieverTaskProcessRequest+0x5a>
		{
			break;
		}

		// If all succeeded
		blFlag = TRUE;
 8000770:	2301      	movs	r3, #1
 8000772:	73fb      	strb	r3, [r7, #15]
 8000774:	e006      	b.n	8000784 <RecieverTaskProcessRequest+0x5c>
			break;
 8000776:	bf00      	nop
 8000778:	e004      	b.n	8000784 <RecieverTaskProcessRequest+0x5c>
			break;
 800077a:	bf00      	nop
 800077c:	e002      	b.n	8000784 <RecieverTaskProcessRequest+0x5c>
			break;
 800077e:	bf00      	nop
 8000780:	e000      	b.n	8000784 <RecieverTaskProcessRequest+0x5c>
			break;
 8000782:	bf00      	nop

	}while(0);

	return blFlag;
 8000784:	7bfb      	ldrb	r3, [r7, #15]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <RecieverTaskProcessUID>:
//Outputs : None
//Return  : TRUE - Request Message UID processed, FALSE - error
//Notes   : None
//*****************************************************************************
bool RecieverTaskProcessUID(REQUEST_MSG* stReqMsg)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000798:	2300      	movs	r3, #0
 800079a:	73fb      	strb	r3, [r7, #15]

	if(stReqMsg != NULL)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d005      	beq.n	80007ae <RecieverTaskProcessUID+0x1e>
	{
		sgulUId =  stReqMsg->ulUId;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a05      	ldr	r2, [pc, #20]	@ (80007bc <RecieverTaskProcessUID+0x2c>)
 80007a8:	6013      	str	r3, [r2, #0]
		blFlag = TRUE;
 80007aa:	2301      	movs	r3, #1
 80007ac:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	200000d0 	.word	0x200000d0

080007c0 <RecieverTaskProcessCMD>:
//Outputs : None
//Return  : TRUE - Request Message CMD processed, FALSE - error
//Notes   : None
//*****************************************************************************
bool RecieverTaskProcessCMD(REQUEST_MSG* stReqMsg)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	73fb      	strb	r3, [r7, #15]

	if(stReqMsg != NULL)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d018      	beq.n	8000804 <RecieverTaskProcessCMD+0x44>
	{
		switch(stReqMsg->ucCmd)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	791b      	ldrb	r3, [r3, #4]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d009      	beq.n	80007ee <RecieverTaskProcessCMD+0x2e>
 80007da:	2b02      	cmp	r3, #2
 80007dc:	d10a      	bne.n	80007f4 <RecieverTaskProcessCMD+0x34>
		{
			case CMD_SET:
				if(LEDToggle())
 80007de:	f7ff fd43 	bl	8000268 <LEDToggle>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d00c      	beq.n	8000802 <RecieverTaskProcessCMD+0x42>
				{
					blFlag = TRUE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	73fb      	strb	r3, [r7, #15]
				}
				break;
 80007ec:	e009      	b.n	8000802 <RecieverTaskProcessCMD+0x42>

			case CMD_GET:
				//:TO DO: Retrieve the current LED state
				blFlag = TRUE;
 80007ee:	2301      	movs	r3, #1
 80007f0:	73fb      	strb	r3, [r7, #15]
				break;
 80007f2:	e007      	b.n	8000804 <RecieverTaskProcessCMD+0x44>

			default:
				printf("Invalid Command: 0x%02X\r\n", stReqMsg->ucCmd);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	791b      	ldrb	r3, [r3, #4]
 80007f8:	4619      	mov	r1, r3
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <RecieverTaskProcessCMD+0x50>)
 80007fc:	f004 fb9e 	bl	8004f3c <iprintf>
				break;
 8000800:	e000      	b.n	8000804 <RecieverTaskProcessCMD+0x44>
				break;
 8000802:	bf00      	nop
		}
	}

	return blFlag;
 8000804:	7bfb      	ldrb	r3, [r7, #15]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	08005e4c 	.word	0x08005e4c

08000814 <RecieverTaskProcessDATA>:
//Outputs : None
//Return  : TRUE - Request Message DATA processed, FALSE - error
//Notes   : None
//*****************************************************************************
bool RecieverTaskProcessDATA(REQUEST_MSG* stReqMsg)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 800081c:	2300      	movs	r3, #0
 800081e:	73fb      	strb	r3, [r7, #15]

	if(stReqMsg != NULL)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d005      	beq.n	8000832 <RecieverTaskProcessDATA+0x1e>
	{
		sgulData = stReqMsg->ulData;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	4a05      	ldr	r2, [pc, #20]	@ (8000840 <RecieverTaskProcessDATA+0x2c>)
 800082c:	6013      	str	r3, [r2, #0]
		blFlag = TRUE;
 800082e:	2301      	movs	r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000832:	7bfb      	ldrb	r3, [r7, #15]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	20000024 	.word	0x20000024

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000848:	f000 fa52 	bl	8000cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084c:	f000 f80d 	bl	800086a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000850:	f000 f876 	bl	8000940 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000854:	f000 f84a 	bl	80008ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000858:	f001 fbac 	bl	8001fb4 <osKernelInitialize>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
  AppMain();
 800085c:	f7ff fc78 	bl	8000150 <AppMain>
  /* Start scheduler */
  osKernelStart();
 8000860:	f001 fbca 	bl	8001ff8 <osKernelStart>
 8000864:	2300      	movs	r3, #0
    //USER CODE END WHILE

    // USER CODE BEGIN 3
  }*/
 /* USER CODE END 3 */
}
 8000866:	4618      	mov	r0, r3
 8000868:	bd80      	pop	{r7, pc}

0800086a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b090      	sub	sp, #64	@ 0x40
 800086e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000870:	f107 0318 	add.w	r3, r7, #24
 8000874:	2228      	movs	r2, #40	@ 0x28
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f004 fca7 	bl	80051cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800088c:	2302      	movs	r3, #2
 800088e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000890:	2301      	movs	r3, #1
 8000892:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000894:	2310      	movs	r3, #16
 8000896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000898:	2302      	movs	r3, #2
 800089a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800089c:	2300      	movs	r3, #0
 800089e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80008a0:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80008a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a6:	f107 0318 	add.w	r3, r7, #24
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 fd1a 	bl	80012e4 <HAL_RCC_OscConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0x50>
  {
    Error_Handler();
 80008b6:	f000 f8a7 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ba:	230f      	movs	r3, #15
 80008bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008be:	2302      	movs	r3, #2
 80008c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2102      	movs	r1, #2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 ff87 	bl	80017e8 <HAL_RCC_ClockConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80008e0:	f000 f892 	bl	8000a08 <Error_Handler>
  }
}
 80008e4:	bf00      	nop
 80008e6:	3740      	adds	r7, #64	@ 0x40
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f0:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	@ (800093c <MX_USART2_UART_Init+0x50>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f6:	4b10      	ldr	r3, [pc, #64]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 8000924:	f001 f8ee 	bl	8001b04 <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800092e:	f000 f86b 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000d4 	.word	0x200000d4
 800093c:	40004400 	.word	0x40004400

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000954:	4b29      	ldr	r3, [pc, #164]	@ (80009fc <MX_GPIO_Init+0xbc>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a28      	ldr	r2, [pc, #160]	@ (80009fc <MX_GPIO_Init+0xbc>)
 800095a:	f043 0310 	orr.w	r3, r3, #16
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b26      	ldr	r3, [pc, #152]	@ (80009fc <MX_GPIO_Init+0xbc>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f003 0310 	and.w	r3, r3, #16
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096c:	4b23      	ldr	r3, [pc, #140]	@ (80009fc <MX_GPIO_Init+0xbc>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a22      	ldr	r2, [pc, #136]	@ (80009fc <MX_GPIO_Init+0xbc>)
 8000972:	f043 0320 	orr.w	r3, r3, #32
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b20      	ldr	r3, [pc, #128]	@ (80009fc <MX_GPIO_Init+0xbc>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0320 	and.w	r3, r3, #32
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000984:	4b1d      	ldr	r3, [pc, #116]	@ (80009fc <MX_GPIO_Init+0xbc>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a1c      	ldr	r2, [pc, #112]	@ (80009fc <MX_GPIO_Init+0xbc>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b1a      	ldr	r3, [pc, #104]	@ (80009fc <MX_GPIO_Init+0xbc>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099c:	4b17      	ldr	r3, [pc, #92]	@ (80009fc <MX_GPIO_Init+0xbc>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a16      	ldr	r2, [pc, #88]	@ (80009fc <MX_GPIO_Init+0xbc>)
 80009a2:	f043 0308 	orr.w	r3, r3, #8
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <MX_GPIO_Init+0xbc>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0308 	and.w	r3, r3, #8
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2120      	movs	r1, #32
 80009b8:	4811      	ldr	r0, [pc, #68]	@ (8000a00 <MX_GPIO_Init+0xc0>)
 80009ba:	f000 fc7a 	bl	80012b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	4619      	mov	r1, r3
 80009d2:	480c      	ldr	r0, [pc, #48]	@ (8000a04 <MX_GPIO_Init+0xc4>)
 80009d4:	f000 fad2 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009d8:	2320      	movs	r3, #32
 80009da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2302      	movs	r3, #2
 80009e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	4619      	mov	r1, r3
 80009ee:	4804      	ldr	r0, [pc, #16]	@ (8000a00 <MX_GPIO_Init+0xc0>)
 80009f0:	f000 fac4 	bl	8000f7c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009f4:	bf00      	nop
 80009f6:	3720      	adds	r7, #32
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40010800 	.word	0x40010800
 8000a04:	40011000 	.word	0x40011000

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <Error_Handler+0x8>

08000a14 <_write>:
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
int _write(int file, char *ptr, int len)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
 8000a28:	68b9      	ldr	r1, [r7, #8]
 8000a2a:	4804      	ldr	r0, [pc, #16]	@ (8000a3c <_write+0x28>)
 8000a2c:	f001 f8ba 	bl	8001ba4 <HAL_UART_Transmit>
    return len;
 8000a30:	687b      	ldr	r3, [r7, #4]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200000d4 	.word	0x200000d4

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a46:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <HAL_MspInit+0x68>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	4a17      	ldr	r2, [pc, #92]	@ (8000aa8 <HAL_MspInit+0x68>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6193      	str	r3, [r2, #24]
 8000a52:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <HAL_MspInit+0x68>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <HAL_MspInit+0x68>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	4a11      	ldr	r2, [pc, #68]	@ (8000aa8 <HAL_MspInit+0x68>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a68:	61d3      	str	r3, [r2, #28]
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <HAL_MspInit+0x68>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	210f      	movs	r1, #15
 8000a7a:	f06f 0001 	mvn.w	r0, #1
 8000a7e:	f000 fa54 	bl	8000f2a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a82:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <HAL_MspInit+0x6c>)
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	4a04      	ldr	r2, [pc, #16]	@ (8000aac <HAL_MspInit+0x6c>)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40010000 	.word	0x40010000

08000ab0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a1b      	ldr	r2, [pc, #108]	@ (8000b38 <HAL_UART_MspInit+0x88>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d12f      	bne.n	8000b30 <HAL_UART_MspInit+0x80>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b3c <HAL_UART_MspInit+0x8c>)
 8000ad2:	69db      	ldr	r3, [r3, #28]
 8000ad4:	4a19      	ldr	r2, [pc, #100]	@ (8000b3c <HAL_UART_MspInit+0x8c>)
 8000ad6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ada:	61d3      	str	r3, [r2, #28]
 8000adc:	4b17      	ldr	r3, [pc, #92]	@ (8000b3c <HAL_UART_MspInit+0x8c>)
 8000ade:	69db      	ldr	r3, [r3, #28]
 8000ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <HAL_UART_MspInit+0x8c>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	4a13      	ldr	r2, [pc, #76]	@ (8000b3c <HAL_UART_MspInit+0x8c>)
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <HAL_UART_MspInit+0x8c>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f003 0304 	and.w	r3, r3, #4
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b00:	2304      	movs	r3, #4
 8000b02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	4619      	mov	r1, r3
 8000b12:	480b      	ldr	r0, [pc, #44]	@ (8000b40 <HAL_UART_MspInit+0x90>)
 8000b14:	f000 fa32 	bl	8000f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b18:	2308      	movs	r3, #8
 8000b1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4805      	ldr	r0, [pc, #20]	@ (8000b40 <HAL_UART_MspInit+0x90>)
 8000b2c:	f000 fa26 	bl	8000f7c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b30:	bf00      	nop
 8000b32:	3720      	adds	r7, #32
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40004400 	.word	0x40004400
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40010800 	.word	0x40010800

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <NMI_Handler+0x4>

08000b4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <HardFault_Handler+0x4>

08000b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <MemManage_Handler+0x4>

08000b5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7c:	f000 f8fe 	bl	8000d7c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b80:	f003 f8fe 	bl	8003d80 <xTaskGetSchedulerState>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d001      	beq.n	8000b8e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b8a:	f003 fea5 	bl	80048d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b086      	sub	sp, #24
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	60f8      	str	r0, [r7, #12]
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	e00a      	b.n	8000bba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ba4:	f3af 8000 	nop.w
 8000ba8:	4601      	mov	r1, r0
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	1c5a      	adds	r2, r3, #1
 8000bae:	60ba      	str	r2, [r7, #8]
 8000bb0:	b2ca      	uxtb	r2, r1
 8000bb2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	697a      	ldr	r2, [r7, #20]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	dbf0      	blt.n	8000ba4 <_read+0x12>
  }

  return len;
 8000bc2:	687b      	ldr	r3, [r7, #4]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr

08000be2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
 8000bea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bf2:	605a      	str	r2, [r3, #4]
  return 0;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <_isatty>:

int _isatty(int file)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c08:	2301      	movs	r3, #1
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr

08000c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a14      	ldr	r2, [pc, #80]	@ (8000c88 <_sbrk+0x5c>)
 8000c36:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <_sbrk+0x60>)
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c40:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c48:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <_sbrk+0x64>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	@ (8000c94 <_sbrk+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d207      	bcs.n	8000c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c5c:	f004 fb04 	bl	8005268 <__errno>
 8000c60:	4603      	mov	r3, r0
 8000c62:	220c      	movs	r2, #12
 8000c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b07      	ldr	r3, [pc, #28]	@ (8000c90 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a05      	ldr	r2, [pc, #20]	@ (8000c90 <_sbrk+0x64>)
 8000c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20005000 	.word	0x20005000
 8000c8c:	00000400 	.word	0x00000400
 8000c90:	2000011c 	.word	0x2000011c
 8000c94:	20001bc0 	.word	0x20001bc0

08000c98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ca4:	f7ff fff8 	bl	8000c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca8:	480b      	ldr	r0, [pc, #44]	@ (8000cd8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000caa:	490c      	ldr	r1, [pc, #48]	@ (8000cdc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cac:	4a0c      	ldr	r2, [pc, #48]	@ (8000ce0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a09      	ldr	r2, [pc, #36]	@ (8000ce4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cc0:	4c09      	ldr	r4, [pc, #36]	@ (8000ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cce:	f004 fad1 	bl	8005274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cd2:	f7ff fdb7 	bl	8000844 <main>
  bx lr
 8000cd6:	4770      	bx	lr
  ldr r0, =_sdata
 8000cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cdc:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000ce0:	08005ee8 	.word	0x08005ee8
  ldr r2, =_sbss
 8000ce4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000ce8:	20001bc0 	.word	0x20001bc0

08000cec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC1_2_IRQHandler>
	...

08000cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf4:	4b08      	ldr	r3, [pc, #32]	@ (8000d18 <HAL_Init+0x28>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a07      	ldr	r2, [pc, #28]	@ (8000d18 <HAL_Init+0x28>)
 8000cfa:	f043 0310 	orr.w	r3, r3, #16
 8000cfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d00:	2003      	movs	r0, #3
 8000d02:	f000 f907 	bl	8000f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d06:	200f      	movs	r0, #15
 8000d08:	f000 f808 	bl	8000d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d0c:	f7ff fe98 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40022000 	.word	0x40022000

08000d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d24:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <HAL_InitTick+0x54>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <HAL_InitTick+0x58>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f911 	bl	8000f62 <HAL_SYSTICK_Config>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e00e      	b.n	8000d68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d80a      	bhi.n	8000d66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d50:	2200      	movs	r2, #0
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295
 8000d58:	f000 f8e7 	bl	8000f2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d5c:	4a06      	ldr	r2, [pc, #24]	@ (8000d78 <HAL_InitTick+0x5c>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e000      	b.n	8000d68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000028 	.word	0x20000028
 8000d74:	20000030 	.word	0x20000030
 8000d78:	2000002c 	.word	0x2000002c

08000d7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d80:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <HAL_IncTick+0x1c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <HAL_IncTick+0x20>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a03      	ldr	r2, [pc, #12]	@ (8000d9c <HAL_IncTick+0x20>)
 8000d8e:	6013      	str	r3, [r2, #0]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	20000030 	.word	0x20000030
 8000d9c:	20000120 	.word	0x20000120

08000da0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b02      	ldr	r3, [pc, #8]	@ (8000db0 <HAL_GetTick+0x10>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	20000120 	.word	0x20000120

08000db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ddc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de6:	4a04      	ldr	r2, [pc, #16]	@ (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	60d3      	str	r3, [r2, #12]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e00:	4b04      	ldr	r3, [pc, #16]	@ (8000e14 <__NVIC_GetPriorityGrouping+0x18>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	f003 0307 	and.w	r3, r3, #7
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db0a      	blt.n	8000e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	490c      	ldr	r1, [pc, #48]	@ (8000e64 <__NVIC_SetPriority+0x4c>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e40:	e00a      	b.n	8000e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4908      	ldr	r1, [pc, #32]	@ (8000e68 <__NVIC_SetPriority+0x50>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	3b04      	subs	r3, #4
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	440b      	add	r3, r1
 8000e56:	761a      	strb	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	@ 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f1c3 0307 	rsb	r3, r3, #7
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	bf28      	it	cs
 8000e8a:	2304      	movcs	r3, #4
 8000e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3304      	adds	r3, #4
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d902      	bls.n	8000e9c <NVIC_EncodePriority+0x30>
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3b03      	subs	r3, #3
 8000e9a:	e000      	b.n	8000e9e <NVIC_EncodePriority+0x32>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	4313      	orrs	r3, r2
         );
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3724      	adds	r7, #36	@ 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ee0:	d301      	bcc.n	8000ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00f      	b.n	8000f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <SysTick_Config+0x40>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eee:	210f      	movs	r1, #15
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f7ff ff90 	bl	8000e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef8:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <SysTick_Config+0x40>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efe:	4b04      	ldr	r3, [pc, #16]	@ (8000f10 <SysTick_Config+0x40>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	e000e010 	.word	0xe000e010

08000f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ff49 	bl	8000db4 <__NVIC_SetPriorityGrouping>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f3c:	f7ff ff5e 	bl	8000dfc <__NVIC_GetPriorityGrouping>
 8000f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	6978      	ldr	r0, [r7, #20]
 8000f48:	f7ff ff90 	bl	8000e6c <NVIC_EncodePriority>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff5f 	bl	8000e18 <__NVIC_SetPriority>
}
 8000f5a:	bf00      	nop
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ffb0 	bl	8000ed0 <SysTick_Config>
 8000f70:	4603      	mov	r3, r0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b08b      	sub	sp, #44	@ 0x2c
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f86:	2300      	movs	r3, #0
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f8e:	e169      	b.n	8001264 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f90:	2201      	movs	r2, #1
 8000f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	69fa      	ldr	r2, [r7, #28]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	f040 8158 	bne.w	800125e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	4a9a      	ldr	r2, [pc, #616]	@ (800121c <HAL_GPIO_Init+0x2a0>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d05e      	beq.n	8001076 <HAL_GPIO_Init+0xfa>
 8000fb8:	4a98      	ldr	r2, [pc, #608]	@ (800121c <HAL_GPIO_Init+0x2a0>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d875      	bhi.n	80010aa <HAL_GPIO_Init+0x12e>
 8000fbe:	4a98      	ldr	r2, [pc, #608]	@ (8001220 <HAL_GPIO_Init+0x2a4>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d058      	beq.n	8001076 <HAL_GPIO_Init+0xfa>
 8000fc4:	4a96      	ldr	r2, [pc, #600]	@ (8001220 <HAL_GPIO_Init+0x2a4>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d86f      	bhi.n	80010aa <HAL_GPIO_Init+0x12e>
 8000fca:	4a96      	ldr	r2, [pc, #600]	@ (8001224 <HAL_GPIO_Init+0x2a8>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d052      	beq.n	8001076 <HAL_GPIO_Init+0xfa>
 8000fd0:	4a94      	ldr	r2, [pc, #592]	@ (8001224 <HAL_GPIO_Init+0x2a8>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d869      	bhi.n	80010aa <HAL_GPIO_Init+0x12e>
 8000fd6:	4a94      	ldr	r2, [pc, #592]	@ (8001228 <HAL_GPIO_Init+0x2ac>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d04c      	beq.n	8001076 <HAL_GPIO_Init+0xfa>
 8000fdc:	4a92      	ldr	r2, [pc, #584]	@ (8001228 <HAL_GPIO_Init+0x2ac>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d863      	bhi.n	80010aa <HAL_GPIO_Init+0x12e>
 8000fe2:	4a92      	ldr	r2, [pc, #584]	@ (800122c <HAL_GPIO_Init+0x2b0>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d046      	beq.n	8001076 <HAL_GPIO_Init+0xfa>
 8000fe8:	4a90      	ldr	r2, [pc, #576]	@ (800122c <HAL_GPIO_Init+0x2b0>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d85d      	bhi.n	80010aa <HAL_GPIO_Init+0x12e>
 8000fee:	2b12      	cmp	r3, #18
 8000ff0:	d82a      	bhi.n	8001048 <HAL_GPIO_Init+0xcc>
 8000ff2:	2b12      	cmp	r3, #18
 8000ff4:	d859      	bhi.n	80010aa <HAL_GPIO_Init+0x12e>
 8000ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8000ffc <HAL_GPIO_Init+0x80>)
 8000ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffc:	08001077 	.word	0x08001077
 8001000:	08001051 	.word	0x08001051
 8001004:	08001063 	.word	0x08001063
 8001008:	080010a5 	.word	0x080010a5
 800100c:	080010ab 	.word	0x080010ab
 8001010:	080010ab 	.word	0x080010ab
 8001014:	080010ab 	.word	0x080010ab
 8001018:	080010ab 	.word	0x080010ab
 800101c:	080010ab 	.word	0x080010ab
 8001020:	080010ab 	.word	0x080010ab
 8001024:	080010ab 	.word	0x080010ab
 8001028:	080010ab 	.word	0x080010ab
 800102c:	080010ab 	.word	0x080010ab
 8001030:	080010ab 	.word	0x080010ab
 8001034:	080010ab 	.word	0x080010ab
 8001038:	080010ab 	.word	0x080010ab
 800103c:	080010ab 	.word	0x080010ab
 8001040:	08001059 	.word	0x08001059
 8001044:	0800106d 	.word	0x0800106d
 8001048:	4a79      	ldr	r2, [pc, #484]	@ (8001230 <HAL_GPIO_Init+0x2b4>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d013      	beq.n	8001076 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800104e:	e02c      	b.n	80010aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	623b      	str	r3, [r7, #32]
          break;
 8001056:	e029      	b.n	80010ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	3304      	adds	r3, #4
 800105e:	623b      	str	r3, [r7, #32]
          break;
 8001060:	e024      	b.n	80010ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	3308      	adds	r3, #8
 8001068:	623b      	str	r3, [r7, #32]
          break;
 800106a:	e01f      	b.n	80010ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	330c      	adds	r3, #12
 8001072:	623b      	str	r3, [r7, #32]
          break;
 8001074:	e01a      	b.n	80010ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d102      	bne.n	8001084 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800107e:	2304      	movs	r3, #4
 8001080:	623b      	str	r3, [r7, #32]
          break;
 8001082:	e013      	b.n	80010ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d105      	bne.n	8001098 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800108c:	2308      	movs	r3, #8
 800108e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	69fa      	ldr	r2, [r7, #28]
 8001094:	611a      	str	r2, [r3, #16]
          break;
 8001096:	e009      	b.n	80010ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001098:	2308      	movs	r3, #8
 800109a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69fa      	ldr	r2, [r7, #28]
 80010a0:	615a      	str	r2, [r3, #20]
          break;
 80010a2:	e003      	b.n	80010ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
          break;
 80010a8:	e000      	b.n	80010ac <HAL_GPIO_Init+0x130>
          break;
 80010aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	2bff      	cmp	r3, #255	@ 0xff
 80010b0:	d801      	bhi.n	80010b6 <HAL_GPIO_Init+0x13a>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	e001      	b.n	80010ba <HAL_GPIO_Init+0x13e>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3304      	adds	r3, #4
 80010ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	2bff      	cmp	r3, #255	@ 0xff
 80010c0:	d802      	bhi.n	80010c8 <HAL_GPIO_Init+0x14c>
 80010c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	e002      	b.n	80010ce <HAL_GPIO_Init+0x152>
 80010c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ca:	3b08      	subs	r3, #8
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	210f      	movs	r1, #15
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	fa01 f303 	lsl.w	r3, r1, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	401a      	ands	r2, r3
 80010e0:	6a39      	ldr	r1, [r7, #32]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	fa01 f303 	lsl.w	r3, r1, r3
 80010e8:	431a      	orrs	r2, r3
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 80b1 	beq.w	800125e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001234 <HAL_GPIO_Init+0x2b8>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	4a4c      	ldr	r2, [pc, #304]	@ (8001234 <HAL_GPIO_Init+0x2b8>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	6193      	str	r3, [r2, #24]
 8001108:	4b4a      	ldr	r3, [pc, #296]	@ (8001234 <HAL_GPIO_Init+0x2b8>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001114:	4a48      	ldr	r2, [pc, #288]	@ (8001238 <HAL_GPIO_Init+0x2bc>)
 8001116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001118:	089b      	lsrs	r3, r3, #2
 800111a:	3302      	adds	r3, #2
 800111c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001120:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	220f      	movs	r2, #15
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	4013      	ands	r3, r2
 8001136:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a40      	ldr	r2, [pc, #256]	@ (800123c <HAL_GPIO_Init+0x2c0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d013      	beq.n	8001168 <HAL_GPIO_Init+0x1ec>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a3f      	ldr	r2, [pc, #252]	@ (8001240 <HAL_GPIO_Init+0x2c4>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d00d      	beq.n	8001164 <HAL_GPIO_Init+0x1e8>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a3e      	ldr	r2, [pc, #248]	@ (8001244 <HAL_GPIO_Init+0x2c8>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d007      	beq.n	8001160 <HAL_GPIO_Init+0x1e4>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a3d      	ldr	r2, [pc, #244]	@ (8001248 <HAL_GPIO_Init+0x2cc>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d101      	bne.n	800115c <HAL_GPIO_Init+0x1e0>
 8001158:	2303      	movs	r3, #3
 800115a:	e006      	b.n	800116a <HAL_GPIO_Init+0x1ee>
 800115c:	2304      	movs	r3, #4
 800115e:	e004      	b.n	800116a <HAL_GPIO_Init+0x1ee>
 8001160:	2302      	movs	r3, #2
 8001162:	e002      	b.n	800116a <HAL_GPIO_Init+0x1ee>
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <HAL_GPIO_Init+0x1ee>
 8001168:	2300      	movs	r3, #0
 800116a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800116c:	f002 0203 	and.w	r2, r2, #3
 8001170:	0092      	lsls	r2, r2, #2
 8001172:	4093      	lsls	r3, r2
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	4313      	orrs	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800117a:	492f      	ldr	r1, [pc, #188]	@ (8001238 <HAL_GPIO_Init+0x2bc>)
 800117c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	3302      	adds	r3, #2
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d006      	beq.n	80011a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001194:	4b2d      	ldr	r3, [pc, #180]	@ (800124c <HAL_GPIO_Init+0x2d0>)
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	492c      	ldr	r1, [pc, #176]	@ (800124c <HAL_GPIO_Init+0x2d0>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	608b      	str	r3, [r1, #8]
 80011a0:	e006      	b.n	80011b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011a2:	4b2a      	ldr	r3, [pc, #168]	@ (800124c <HAL_GPIO_Init+0x2d0>)
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	4928      	ldr	r1, [pc, #160]	@ (800124c <HAL_GPIO_Init+0x2d0>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d006      	beq.n	80011ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011bc:	4b23      	ldr	r3, [pc, #140]	@ (800124c <HAL_GPIO_Init+0x2d0>)
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	4922      	ldr	r1, [pc, #136]	@ (800124c <HAL_GPIO_Init+0x2d0>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	60cb      	str	r3, [r1, #12]
 80011c8:	e006      	b.n	80011d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011ca:	4b20      	ldr	r3, [pc, #128]	@ (800124c <HAL_GPIO_Init+0x2d0>)
 80011cc:	68da      	ldr	r2, [r3, #12]
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	491e      	ldr	r1, [pc, #120]	@ (800124c <HAL_GPIO_Init+0x2d0>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d006      	beq.n	80011f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011e4:	4b19      	ldr	r3, [pc, #100]	@ (800124c <HAL_GPIO_Init+0x2d0>)
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	4918      	ldr	r1, [pc, #96]	@ (800124c <HAL_GPIO_Init+0x2d0>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	604b      	str	r3, [r1, #4]
 80011f0:	e006      	b.n	8001200 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011f2:	4b16      	ldr	r3, [pc, #88]	@ (800124c <HAL_GPIO_Init+0x2d0>)
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	4914      	ldr	r1, [pc, #80]	@ (800124c <HAL_GPIO_Init+0x2d0>)
 80011fc:	4013      	ands	r3, r2
 80011fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d021      	beq.n	8001250 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800120c:	4b0f      	ldr	r3, [pc, #60]	@ (800124c <HAL_GPIO_Init+0x2d0>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	490e      	ldr	r1, [pc, #56]	@ (800124c <HAL_GPIO_Init+0x2d0>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	600b      	str	r3, [r1, #0]
 8001218:	e021      	b.n	800125e <HAL_GPIO_Init+0x2e2>
 800121a:	bf00      	nop
 800121c:	10320000 	.word	0x10320000
 8001220:	10310000 	.word	0x10310000
 8001224:	10220000 	.word	0x10220000
 8001228:	10210000 	.word	0x10210000
 800122c:	10120000 	.word	0x10120000
 8001230:	10110000 	.word	0x10110000
 8001234:	40021000 	.word	0x40021000
 8001238:	40010000 	.word	0x40010000
 800123c:	40010800 	.word	0x40010800
 8001240:	40010c00 	.word	0x40010c00
 8001244:	40011000 	.word	0x40011000
 8001248:	40011400 	.word	0x40011400
 800124c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001250:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <HAL_GPIO_Init+0x304>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	43db      	mvns	r3, r3
 8001258:	4909      	ldr	r1, [pc, #36]	@ (8001280 <HAL_GPIO_Init+0x304>)
 800125a:	4013      	ands	r3, r2
 800125c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800125e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001260:	3301      	adds	r3, #1
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126a:	fa22 f303 	lsr.w	r3, r2, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	f47f ae8e 	bne.w	8000f90 <HAL_GPIO_Init+0x14>
  }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	372c      	adds	r7, #44	@ 0x2c
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	40010400 	.word	0x40010400

08001284 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	887b      	ldrh	r3, [r7, #2]
 8001296:	4013      	ands	r3, r2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d002      	beq.n	80012a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800129c:	2301      	movs	r3, #1
 800129e:	73fb      	strb	r3, [r7, #15]
 80012a0:	e001      	b.n	80012a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr

080012b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	807b      	strh	r3, [r7, #2]
 80012be:	4613      	mov	r3, r2
 80012c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c2:	787b      	ldrb	r3, [r7, #1]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012c8:	887a      	ldrh	r2, [r7, #2]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012ce:	e003      	b.n	80012d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012d0:	887b      	ldrh	r3, [r7, #2]
 80012d2:	041a      	lsls	r2, r3, #16
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	611a      	str	r2, [r3, #16]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
	...

080012e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e272      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 8087 	beq.w	8001412 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001304:	4b92      	ldr	r3, [pc, #584]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 030c 	and.w	r3, r3, #12
 800130c:	2b04      	cmp	r3, #4
 800130e:	d00c      	beq.n	800132a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001310:	4b8f      	ldr	r3, [pc, #572]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 030c 	and.w	r3, r3, #12
 8001318:	2b08      	cmp	r3, #8
 800131a:	d112      	bne.n	8001342 <HAL_RCC_OscConfig+0x5e>
 800131c:	4b8c      	ldr	r3, [pc, #560]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001328:	d10b      	bne.n	8001342 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132a:	4b89      	ldr	r3, [pc, #548]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d06c      	beq.n	8001410 <HAL_RCC_OscConfig+0x12c>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d168      	bne.n	8001410 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e24c      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800134a:	d106      	bne.n	800135a <HAL_RCC_OscConfig+0x76>
 800134c:	4b80      	ldr	r3, [pc, #512]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a7f      	ldr	r2, [pc, #508]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001352:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	e02e      	b.n	80013b8 <HAL_RCC_OscConfig+0xd4>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10c      	bne.n	800137c <HAL_RCC_OscConfig+0x98>
 8001362:	4b7b      	ldr	r3, [pc, #492]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a7a      	ldr	r2, [pc, #488]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001368:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	4b78      	ldr	r3, [pc, #480]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a77      	ldr	r2, [pc, #476]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001374:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	e01d      	b.n	80013b8 <HAL_RCC_OscConfig+0xd4>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001384:	d10c      	bne.n	80013a0 <HAL_RCC_OscConfig+0xbc>
 8001386:	4b72      	ldr	r3, [pc, #456]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a71      	ldr	r2, [pc, #452]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 800138c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	4b6f      	ldr	r3, [pc, #444]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a6e      	ldr	r2, [pc, #440]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	e00b      	b.n	80013b8 <HAL_RCC_OscConfig+0xd4>
 80013a0:	4b6b      	ldr	r3, [pc, #428]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a6a      	ldr	r2, [pc, #424]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 80013a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	4b68      	ldr	r3, [pc, #416]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a67      	ldr	r2, [pc, #412]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 80013b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d013      	beq.n	80013e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fcee 	bl	8000da0 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c8:	f7ff fcea 	bl	8000da0 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	@ 0x64
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e200      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013da:	4b5d      	ldr	r3, [pc, #372]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0xe4>
 80013e6:	e014      	b.n	8001412 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fcda 	bl	8000da0 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f0:	f7ff fcd6 	bl	8000da0 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	@ 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e1ec      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001402:	4b53      	ldr	r3, [pc, #332]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x10c>
 800140e:	e000      	b.n	8001412 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d063      	beq.n	80014e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800141e:	4b4c      	ldr	r3, [pc, #304]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00b      	beq.n	8001442 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800142a:	4b49      	ldr	r3, [pc, #292]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 030c 	and.w	r3, r3, #12
 8001432:	2b08      	cmp	r3, #8
 8001434:	d11c      	bne.n	8001470 <HAL_RCC_OscConfig+0x18c>
 8001436:	4b46      	ldr	r3, [pc, #280]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d116      	bne.n	8001470 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001442:	4b43      	ldr	r3, [pc, #268]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d005      	beq.n	800145a <HAL_RCC_OscConfig+0x176>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d001      	beq.n	800145a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e1c0      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145a:	4b3d      	ldr	r3, [pc, #244]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	4939      	ldr	r1, [pc, #228]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 800146a:	4313      	orrs	r3, r2
 800146c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146e:	e03a      	b.n	80014e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d020      	beq.n	80014ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001478:	4b36      	ldr	r3, [pc, #216]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 800147a:	2201      	movs	r2, #1
 800147c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7ff fc8f 	bl	8000da0 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001486:	f7ff fc8b 	bl	8000da0 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e1a1      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001498:	4b2d      	ldr	r3, [pc, #180]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	4927      	ldr	r1, [pc, #156]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	600b      	str	r3, [r1, #0]
 80014b8:	e015      	b.n	80014e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ba:	4b26      	ldr	r3, [pc, #152]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fc6e 	bl	8000da0 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c8:	f7ff fc6a 	bl	8000da0 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e180      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014da:	4b1d      	ldr	r3, [pc, #116]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d03a      	beq.n	8001568 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d019      	beq.n	800152e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014fa:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <HAL_RCC_OscConfig+0x274>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001500:	f7ff fc4e 	bl	8000da0 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001508:	f7ff fc4a 	bl	8000da0 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e160      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151a:	4b0d      	ldr	r3, [pc, #52]	@ (8001550 <HAL_RCC_OscConfig+0x26c>)
 800151c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0f0      	beq.n	8001508 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001526:	2001      	movs	r0, #1
 8001528:	f000 face 	bl	8001ac8 <RCC_Delay>
 800152c:	e01c      	b.n	8001568 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800152e:	4b0a      	ldr	r3, [pc, #40]	@ (8001558 <HAL_RCC_OscConfig+0x274>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001534:	f7ff fc34 	bl	8000da0 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153a:	e00f      	b.n	800155c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800153c:	f7ff fc30 	bl	8000da0 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d908      	bls.n	800155c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e146      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000
 8001554:	42420000 	.word	0x42420000
 8001558:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800155c:	4b92      	ldr	r3, [pc, #584]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800155e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1e9      	bne.n	800153c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 80a6 	beq.w	80016c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800157a:	4b8b      	ldr	r3, [pc, #556]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10d      	bne.n	80015a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	4b88      	ldr	r3, [pc, #544]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	4a87      	ldr	r2, [pc, #540]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001590:	61d3      	str	r3, [r2, #28]
 8001592:	4b85      	ldr	r3, [pc, #532]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800159e:	2301      	movs	r3, #1
 80015a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a2:	4b82      	ldr	r3, [pc, #520]	@ (80017ac <HAL_RCC_OscConfig+0x4c8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d118      	bne.n	80015e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ae:	4b7f      	ldr	r3, [pc, #508]	@ (80017ac <HAL_RCC_OscConfig+0x4c8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a7e      	ldr	r2, [pc, #504]	@ (80017ac <HAL_RCC_OscConfig+0x4c8>)
 80015b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ba:	f7ff fbf1 	bl	8000da0 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c2:	f7ff fbed 	bl	8000da0 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b64      	cmp	r3, #100	@ 0x64
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e103      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d4:	4b75      	ldr	r3, [pc, #468]	@ (80017ac <HAL_RCC_OscConfig+0x4c8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d106      	bne.n	80015f6 <HAL_RCC_OscConfig+0x312>
 80015e8:	4b6f      	ldr	r3, [pc, #444]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	4a6e      	ldr	r2, [pc, #440]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6213      	str	r3, [r2, #32]
 80015f4:	e02d      	b.n	8001652 <HAL_RCC_OscConfig+0x36e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10c      	bne.n	8001618 <HAL_RCC_OscConfig+0x334>
 80015fe:	4b6a      	ldr	r3, [pc, #424]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	4a69      	ldr	r2, [pc, #420]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	6213      	str	r3, [r2, #32]
 800160a:	4b67      	ldr	r3, [pc, #412]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	4a66      	ldr	r2, [pc, #408]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001610:	f023 0304 	bic.w	r3, r3, #4
 8001614:	6213      	str	r3, [r2, #32]
 8001616:	e01c      	b.n	8001652 <HAL_RCC_OscConfig+0x36e>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2b05      	cmp	r3, #5
 800161e:	d10c      	bne.n	800163a <HAL_RCC_OscConfig+0x356>
 8001620:	4b61      	ldr	r3, [pc, #388]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4a60      	ldr	r2, [pc, #384]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	6213      	str	r3, [r2, #32]
 800162c:	4b5e      	ldr	r3, [pc, #376]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	4a5d      	ldr	r2, [pc, #372]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6213      	str	r3, [r2, #32]
 8001638:	e00b      	b.n	8001652 <HAL_RCC_OscConfig+0x36e>
 800163a:	4b5b      	ldr	r3, [pc, #364]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	4a5a      	ldr	r2, [pc, #360]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	6213      	str	r3, [r2, #32]
 8001646:	4b58      	ldr	r3, [pc, #352]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	4a57      	ldr	r2, [pc, #348]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800164c:	f023 0304 	bic.w	r3, r3, #4
 8001650:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d015      	beq.n	8001686 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165a:	f7ff fba1 	bl	8000da0 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001660:	e00a      	b.n	8001678 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001662:	f7ff fb9d 	bl	8000da0 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001670:	4293      	cmp	r3, r2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e0b1      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001678:	4b4b      	ldr	r3, [pc, #300]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0ee      	beq.n	8001662 <HAL_RCC_OscConfig+0x37e>
 8001684:	e014      	b.n	80016b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001686:	f7ff fb8b 	bl	8000da0 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168c:	e00a      	b.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168e:	f7ff fb87 	bl	8000da0 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	f241 3288 	movw	r2, #5000	@ 0x1388
 800169c:	4293      	cmp	r3, r2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e09b      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a4:	4b40      	ldr	r3, [pc, #256]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1ee      	bne.n	800168e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d105      	bne.n	80016c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b6:	4b3c      	ldr	r3, [pc, #240]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	4a3b      	ldr	r2, [pc, #236]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 8087 	beq.w	80017da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016cc:	4b36      	ldr	r3, [pc, #216]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d061      	beq.n	800179c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d146      	bne.n	800176e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e0:	4b33      	ldr	r3, [pc, #204]	@ (80017b0 <HAL_RCC_OscConfig+0x4cc>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7ff fb5b 	bl	8000da0 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ee:	f7ff fb57 	bl	8000da0 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e06d      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001700:	4b29      	ldr	r3, [pc, #164]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f0      	bne.n	80016ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001714:	d108      	bne.n	8001728 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001716:	4b24      	ldr	r3, [pc, #144]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	4921      	ldr	r1, [pc, #132]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001728:	4b1f      	ldr	r3, [pc, #124]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a19      	ldr	r1, [r3, #32]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001738:	430b      	orrs	r3, r1
 800173a:	491b      	ldr	r1, [pc, #108]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001740:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <HAL_RCC_OscConfig+0x4cc>)
 8001742:	2201      	movs	r2, #1
 8001744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001746:	f7ff fb2b 	bl	8000da0 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174e:	f7ff fb27 	bl	8000da0 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e03d      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001760:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x46a>
 800176c:	e035      	b.n	80017da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176e:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <HAL_RCC_OscConfig+0x4cc>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff fb14 	bl	8000da0 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177c:	f7ff fb10 	bl	8000da0 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e026      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x498>
 800179a:	e01e      	b.n	80017da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d107      	bne.n	80017b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e019      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40007000 	.word	0x40007000
 80017b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017b4:	4b0b      	ldr	r3, [pc, #44]	@ (80017e4 <HAL_RCC_OscConfig+0x500>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d106      	bne.n	80017d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d001      	beq.n	80017da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40021000 	.word	0x40021000

080017e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0d0      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017fc:	4b6a      	ldr	r3, [pc, #424]	@ (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d910      	bls.n	800182c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	4b67      	ldr	r3, [pc, #412]	@ (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 0207 	bic.w	r2, r3, #7
 8001812:	4965      	ldr	r1, [pc, #404]	@ (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	4313      	orrs	r3, r2
 8001818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800181a:	4b63      	ldr	r3, [pc, #396]	@ (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d001      	beq.n	800182c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e0b8      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d020      	beq.n	800187a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001844:	4b59      	ldr	r3, [pc, #356]	@ (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4a58      	ldr	r2, [pc, #352]	@ (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800184e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800185c:	4b53      	ldr	r3, [pc, #332]	@ (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4a52      	ldr	r2, [pc, #328]	@ (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001866:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001868:	4b50      	ldr	r3, [pc, #320]	@ (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	494d      	ldr	r1, [pc, #308]	@ (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	4313      	orrs	r3, r2
 8001878:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d040      	beq.n	8001908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d107      	bne.n	800189e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188e:	4b47      	ldr	r3, [pc, #284]	@ (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d115      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e07f      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a6:	4b41      	ldr	r3, [pc, #260]	@ (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e073      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b6:	4b3d      	ldr	r3, [pc, #244]	@ (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e06b      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c6:	4b39      	ldr	r3, [pc, #228]	@ (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f023 0203 	bic.w	r2, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4936      	ldr	r1, [pc, #216]	@ (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d8:	f7ff fa62 	bl	8000da0 <HAL_GetTick>
 80018dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018de:	e00a      	b.n	80018f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e0:	f7ff fa5e 	bl	8000da0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e053      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f6:	4b2d      	ldr	r3, [pc, #180]	@ (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 020c 	and.w	r2, r3, #12
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	429a      	cmp	r2, r3
 8001906:	d1eb      	bne.n	80018e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001908:	4b27      	ldr	r3, [pc, #156]	@ (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d210      	bcs.n	8001938 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b24      	ldr	r3, [pc, #144]	@ (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 0207 	bic.w	r2, r3, #7
 800191e:	4922      	ldr	r1, [pc, #136]	@ (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	4313      	orrs	r3, r2
 8001924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001926:	4b20      	ldr	r3, [pc, #128]	@ (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d001      	beq.n	8001938 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e032      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	d008      	beq.n	8001956 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001944:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	4916      	ldr	r1, [pc, #88]	@ (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001952:	4313      	orrs	r3, r2
 8001954:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d009      	beq.n	8001976 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001962:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	490e      	ldr	r1, [pc, #56]	@ (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	4313      	orrs	r3, r2
 8001974:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001976:	f000 f821 	bl	80019bc <HAL_RCC_GetSysClockFreq>
 800197a:	4602      	mov	r2, r0
 800197c:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	490a      	ldr	r1, [pc, #40]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c8>)
 8001988:	5ccb      	ldrb	r3, [r1, r3]
 800198a:	fa22 f303 	lsr.w	r3, r2, r3
 800198e:	4a09      	ldr	r2, [pc, #36]	@ (80019b4 <HAL_RCC_ClockConfig+0x1cc>)
 8001990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001992:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <HAL_RCC_ClockConfig+0x1d0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff f9c0 	bl	8000d1c <HAL_InitTick>

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40022000 	.word	0x40022000
 80019ac:	40021000 	.word	0x40021000
 80019b0:	08005e80 	.word	0x08005e80
 80019b4:	20000028 	.word	0x20000028
 80019b8:	2000002c 	.word	0x2000002c

080019bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a50 <HAL_RCC_GetSysClockFreq+0x94>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d002      	beq.n	80019ec <HAL_RCC_GetSysClockFreq+0x30>
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d003      	beq.n	80019f2 <HAL_RCC_GetSysClockFreq+0x36>
 80019ea:	e027      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019ec:	4b19      	ldr	r3, [pc, #100]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0x98>)
 80019ee:	613b      	str	r3, [r7, #16]
      break;
 80019f0:	e027      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	0c9b      	lsrs	r3, r3, #18
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	4a17      	ldr	r2, [pc, #92]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019fc:	5cd3      	ldrb	r3, [r2, r3]
 80019fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d010      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a0a:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	0c5b      	lsrs	r3, r3, #17
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	4a11      	ldr	r2, [pc, #68]	@ (8001a5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a16:	5cd3      	ldrb	r3, [r2, r3]
 8001a18:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a1e:	fb03 f202 	mul.w	r2, r3, r2
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	e004      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a0c      	ldr	r2, [pc, #48]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a30:	fb02 f303 	mul.w	r3, r2, r3
 8001a34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	613b      	str	r3, [r7, #16]
      break;
 8001a3a:	e002      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a3c:	4b05      	ldr	r3, [pc, #20]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a3e:	613b      	str	r3, [r7, #16]
      break;
 8001a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a42:	693b      	ldr	r3, [r7, #16]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	371c      	adds	r7, #28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000
 8001a54:	007a1200 	.word	0x007a1200
 8001a58:	08005e98 	.word	0x08005e98
 8001a5c:	08005ea8 	.word	0x08005ea8
 8001a60:	003d0900 	.word	0x003d0900

08001a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a68:	4b02      	ldr	r3, [pc, #8]	@ (8001a74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	20000028 	.word	0x20000028

08001a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a7c:	f7ff fff2 	bl	8001a64 <HAL_RCC_GetHCLKFreq>
 8001a80:	4602      	mov	r2, r0
 8001a82:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	0a1b      	lsrs	r3, r3, #8
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	4903      	ldr	r1, [pc, #12]	@ (8001a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a8e:	5ccb      	ldrb	r3, [r1, r3]
 8001a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	08005e90 	.word	0x08005e90

08001aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001aa4:	f7ff ffde 	bl	8001a64 <HAL_RCC_GetHCLKFreq>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	4b05      	ldr	r3, [pc, #20]	@ (8001ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	0adb      	lsrs	r3, r3, #11
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	4903      	ldr	r1, [pc, #12]	@ (8001ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ab6:	5ccb      	ldrb	r3, [r1, r3]
 8001ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	08005e90 	.word	0x08005e90

08001ac8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8001afc <RCC_Delay+0x34>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8001b00 <RCC_Delay+0x38>)
 8001ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ada:	0a5b      	lsrs	r3, r3, #9
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ae4:	bf00      	nop
  }
  while (Delay --);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1e5a      	subs	r2, r3, #1
 8001aea:	60fa      	str	r2, [r7, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f9      	bne.n	8001ae4 <RCC_Delay+0x1c>
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	20000028 	.word	0x20000028
 8001b00:	10624dd3 	.word	0x10624dd3

08001b04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e042      	b.n	8001b9c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d106      	bne.n	8001b30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7fe ffc0 	bl	8000ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2224      	movs	r2, #36	@ 0x24
 8001b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f971 	bl	8001e30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001b5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2220      	movs	r2, #32
 8001b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	@ 0x28
 8001ba8:	af02      	add	r7, sp, #8
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b20      	cmp	r3, #32
 8001bc2:	d175      	bne.n	8001cb0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d002      	beq.n	8001bd0 <HAL_UART_Transmit+0x2c>
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e06e      	b.n	8001cb2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2221      	movs	r2, #33	@ 0x21
 8001bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001be2:	f7ff f8dd 	bl	8000da0 <HAL_GetTick>
 8001be6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	88fa      	ldrh	r2, [r7, #6]
 8001bec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	88fa      	ldrh	r2, [r7, #6]
 8001bf2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bfc:	d108      	bne.n	8001c10 <HAL_UART_Transmit+0x6c>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d104      	bne.n	8001c10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	61bb      	str	r3, [r7, #24]
 8001c0e:	e003      	b.n	8001c18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c18:	e02e      	b.n	8001c78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2200      	movs	r2, #0
 8001c22:	2180      	movs	r1, #128	@ 0x80
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 f848 	bl	8001cba <UART_WaitOnFlagUntilTimeout>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2220      	movs	r2, #32
 8001c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e03a      	b.n	8001cb2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10b      	bne.n	8001c5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	3302      	adds	r3, #2
 8001c56:	61bb      	str	r3, [r7, #24]
 8001c58:	e007      	b.n	8001c6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	781a      	ldrb	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	3301      	adds	r3, #1
 8001c68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	3b01      	subs	r3, #1
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1cb      	bne.n	8001c1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2140      	movs	r1, #64	@ 0x40
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f000 f814 	bl	8001cba <UART_WaitOnFlagUntilTimeout>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e006      	b.n	8001cb2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	e000      	b.n	8001cb2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001cb0:	2302      	movs	r3, #2
  }
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3720      	adds	r7, #32
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cca:	e03b      	b.n	8001d44 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd2:	d037      	beq.n	8001d44 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cd4:	f7ff f864 	bl	8000da0 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	6a3a      	ldr	r2, [r7, #32]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d302      	bcc.n	8001cea <UART_WaitOnFlagUntilTimeout+0x30>
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e03a      	b.n	8001d64 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d023      	beq.n	8001d44 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2b80      	cmp	r3, #128	@ 0x80
 8001d00:	d020      	beq.n	8001d44 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b40      	cmp	r3, #64	@ 0x40
 8001d06:	d01d      	beq.n	8001d44 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d116      	bne.n	8001d44 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f000 f81d 	bl	8001d6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2208      	movs	r2, #8
 8001d36:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e00f      	b.n	8001d64 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	bf0c      	ite	eq
 8001d54:	2301      	moveq	r3, #1
 8001d56:	2300      	movne	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d0b4      	beq.n	8001ccc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b095      	sub	sp, #84	@ 0x54
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	330c      	adds	r3, #12
 8001d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d7e:	e853 3f00 	ldrex	r3, [r3]
 8001d82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	330c      	adds	r3, #12
 8001d92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d94:	643a      	str	r2, [r7, #64]	@ 0x40
 8001d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001d9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001d9c:	e841 2300 	strex	r3, r2, [r1]
 8001da0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1e5      	bne.n	8001d74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	3314      	adds	r3, #20
 8001dae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	e853 3f00 	ldrex	r3, [r3]
 8001db6:	61fb      	str	r3, [r7, #28]
   return(result);
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f023 0301 	bic.w	r3, r3, #1
 8001dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	3314      	adds	r3, #20
 8001dc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001dc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001dca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001dce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001dd0:	e841 2300 	strex	r3, r2, [r1]
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1e5      	bne.n	8001da8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d119      	bne.n	8001e18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	330c      	adds	r3, #12
 8001dea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	e853 3f00 	ldrex	r3, [r3]
 8001df2:	60bb      	str	r3, [r7, #8]
   return(result);
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	f023 0310 	bic.w	r3, r3, #16
 8001dfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	330c      	adds	r3, #12
 8001e02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001e04:	61ba      	str	r2, [r7, #24]
 8001e06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e08:	6979      	ldr	r1, [r7, #20]
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	e841 2300 	strex	r3, r2, [r1]
 8001e10:	613b      	str	r3, [r7, #16]
   return(result);
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1e5      	bne.n	8001de4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001e26:	bf00      	nop
 8001e28:	3754      	adds	r7, #84	@ 0x54
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001e6a:	f023 030c 	bic.w	r3, r3, #12
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	430b      	orrs	r3, r1
 8001e76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699a      	ldr	r2, [r3, #24]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a2c      	ldr	r2, [pc, #176]	@ (8001f44 <UART_SetConfig+0x114>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d103      	bne.n	8001ea0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e98:	f7ff fe02 	bl	8001aa0 <HAL_RCC_GetPCLK2Freq>
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	e002      	b.n	8001ea6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ea0:	f7ff fdea 	bl	8001a78 <HAL_RCC_GetPCLK1Freq>
 8001ea4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	009a      	lsls	r2, r3, #2
 8001eb0:	441a      	add	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebc:	4a22      	ldr	r2, [pc, #136]	@ (8001f48 <UART_SetConfig+0x118>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	0119      	lsls	r1, r3, #4
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	009a      	lsls	r2, r3, #2
 8001ed0:	441a      	add	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001edc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f48 <UART_SetConfig+0x118>)
 8001ede:	fba3 0302 	umull	r0, r3, r3, r2
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	2064      	movs	r0, #100	@ 0x64
 8001ee6:	fb00 f303 	mul.w	r3, r0, r3
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	3332      	adds	r3, #50	@ 0x32
 8001ef0:	4a15      	ldr	r2, [pc, #84]	@ (8001f48 <UART_SetConfig+0x118>)
 8001ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001efc:	4419      	add	r1, r3
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	009a      	lsls	r2, r3, #2
 8001f08:	441a      	add	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f14:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <UART_SetConfig+0x118>)
 8001f16:	fba3 0302 	umull	r0, r3, r3, r2
 8001f1a:	095b      	lsrs	r3, r3, #5
 8001f1c:	2064      	movs	r0, #100	@ 0x64
 8001f1e:	fb00 f303 	mul.w	r3, r0, r3
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	011b      	lsls	r3, r3, #4
 8001f26:	3332      	adds	r3, #50	@ 0x32
 8001f28:	4a07      	ldr	r2, [pc, #28]	@ (8001f48 <UART_SetConfig+0x118>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	f003 020f 	and.w	r2, r3, #15
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	440a      	add	r2, r1
 8001f3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001f3c:	bf00      	nop
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40013800 	.word	0x40013800
 8001f48:	51eb851f 	.word	0x51eb851f

08001f4c <__NVIC_SetPriority>:
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	6039      	str	r1, [r7, #0]
 8001f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	db0a      	blt.n	8001f76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	490c      	ldr	r1, [pc, #48]	@ (8001f98 <__NVIC_SetPriority+0x4c>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	0112      	lsls	r2, r2, #4
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001f74:	e00a      	b.n	8001f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4908      	ldr	r1, [pc, #32]	@ (8001f9c <__NVIC_SetPriority+0x50>)
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	3b04      	subs	r3, #4
 8001f84:	0112      	lsls	r2, r2, #4
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	440b      	add	r3, r1
 8001f8a:	761a      	strb	r2, [r3, #24]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000e100 	.word	0xe000e100
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	f06f 0004 	mvn.w	r0, #4
 8001faa:	f7ff ffcf 	bl	8001f4c <__NVIC_SetPriority>
#endif
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fba:	f3ef 8305 	mrs	r3, IPSR
 8001fbe:	603b      	str	r3, [r7, #0]
  return(result);
 8001fc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001fc6:	f06f 0305 	mvn.w	r3, #5
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	e00c      	b.n	8001fe8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001fce:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <osKernelInitialize+0x40>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d105      	bne.n	8001fe2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001fd6:	4b07      	ldr	r3, [pc, #28]	@ (8001ff4 <osKernelInitialize+0x40>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	e002      	b.n	8001fe8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001fe8:	687b      	ldr	r3, [r7, #4]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	20000124 	.word	0x20000124

08001ff8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ffe:	f3ef 8305 	mrs	r3, IPSR
 8002002:	603b      	str	r3, [r7, #0]
  return(result);
 8002004:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <osKernelStart+0x1a>
    stat = osErrorISR;
 800200a:	f06f 0305 	mvn.w	r3, #5
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	e010      	b.n	8002034 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002012:	4b0b      	ldr	r3, [pc, #44]	@ (8002040 <osKernelStart+0x48>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d109      	bne.n	800202e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800201a:	f7ff ffc1 	bl	8001fa0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800201e:	4b08      	ldr	r3, [pc, #32]	@ (8002040 <osKernelStart+0x48>)
 8002020:	2202      	movs	r2, #2
 8002022:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002024:	f001 fa60 	bl	80034e8 <vTaskStartScheduler>
      stat = osOK;
 8002028:	2300      	movs	r3, #0
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	e002      	b.n	8002034 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800202e:	f04f 33ff 	mov.w	r3, #4294967295
 8002032:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002034:	687b      	ldr	r3, [r7, #4]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000124 	.word	0x20000124

08002044 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002044:	b580      	push	{r7, lr}
 8002046:	b08e      	sub	sp, #56	@ 0x38
 8002048:	af04      	add	r7, sp, #16
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002050:	2300      	movs	r3, #0
 8002052:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002054:	f3ef 8305 	mrs	r3, IPSR
 8002058:	617b      	str	r3, [r7, #20]
  return(result);
 800205a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800205c:	2b00      	cmp	r3, #0
 800205e:	d17e      	bne.n	800215e <osThreadNew+0x11a>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d07b      	beq.n	800215e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002066:	2380      	movs	r3, #128	@ 0x80
 8002068:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800206a:	2318      	movs	r3, #24
 800206c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800206e:	2300      	movs	r3, #0
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
 8002076:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d045      	beq.n	800210a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d002      	beq.n	800208c <osThreadNew+0x48>
        name = attr->name;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <osThreadNew+0x6e>
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	2b38      	cmp	r3, #56	@ 0x38
 80020a4:	d805      	bhi.n	80020b2 <osThreadNew+0x6e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <osThreadNew+0x72>
        return (NULL);
 80020b2:	2300      	movs	r3, #0
 80020b4:	e054      	b.n	8002160 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	089b      	lsrs	r3, r3, #2
 80020c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00e      	beq.n	80020ec <osThreadNew+0xa8>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2b5b      	cmp	r3, #91	@ 0x5b
 80020d4:	d90a      	bls.n	80020ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d006      	beq.n	80020ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <osThreadNew+0xa8>
        mem = 1;
 80020e6:	2301      	movs	r3, #1
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	e010      	b.n	800210e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10c      	bne.n	800210e <osThreadNew+0xca>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d108      	bne.n	800210e <osThreadNew+0xca>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d104      	bne.n	800210e <osThreadNew+0xca>
          mem = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	61bb      	str	r3, [r7, #24]
 8002108:	e001      	b.n	800210e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d110      	bne.n	8002136 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800211c:	9202      	str	r2, [sp, #8]
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	6a3a      	ldr	r2, [r7, #32]
 8002128:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f001 f800 	bl	8003130 <xTaskCreateStatic>
 8002130:	4603      	mov	r3, r0
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	e013      	b.n	800215e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d110      	bne.n	800215e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	b29a      	uxth	r2, r3
 8002140:	f107 0310 	add.w	r3, r7, #16
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f001 f84e 	bl	80031f0 <xTaskCreate>
 8002154:	4603      	mov	r3, r0
 8002156:	2b01      	cmp	r3, #1
 8002158:	d001      	beq.n	800215e <osThreadNew+0x11a>
            hTask = NULL;
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800215e:	693b      	ldr	r3, [r7, #16]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3728      	adds	r7, #40	@ 0x28
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002170:	f3ef 8305 	mrs	r3, IPSR
 8002174:	60bb      	str	r3, [r7, #8]
  return(result);
 8002176:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <osDelay+0x1c>
    stat = osErrorISR;
 800217c:	f06f 0305 	mvn.w	r3, #5
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	e007      	b.n	8002194 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <osDelay+0x2c>
      vTaskDelay(ticks);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f001 f974 	bl	800347c <vTaskDelay>
    }
  }

  return (stat);
 8002194:	68fb      	ldr	r3, [r7, #12]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800219e:	b580      	push	{r7, lr}
 80021a0:	b08a      	sub	sp, #40	@ 0x28
 80021a2:	af02      	add	r7, sp, #8
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021ae:	f3ef 8305 	mrs	r3, IPSR
 80021b2:	613b      	str	r3, [r7, #16]
  return(result);
 80021b4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d15f      	bne.n	800227a <osMessageQueueNew+0xdc>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d05c      	beq.n	800227a <osMessageQueueNew+0xdc>
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d059      	beq.n	800227a <osMessageQueueNew+0xdc>
    mem = -1;
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d029      	beq.n	8002226 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d012      	beq.n	8002200 <osMessageQueueNew+0x62>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2b4f      	cmp	r3, #79	@ 0x4f
 80021e0:	d90e      	bls.n	8002200 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d302      	bcc.n	8002200 <osMessageQueueNew+0x62>
        mem = 1;
 80021fa:	2301      	movs	r3, #1
 80021fc:	61bb      	str	r3, [r7, #24]
 80021fe:	e014      	b.n	800222a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d110      	bne.n	800222a <osMessageQueueNew+0x8c>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10c      	bne.n	800222a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002214:	2b00      	cmp	r3, #0
 8002216:	d108      	bne.n	800222a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d104      	bne.n	800222a <osMessageQueueNew+0x8c>
          mem = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	61bb      	str	r3, [r7, #24]
 8002224:	e001      	b.n	800222a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d10b      	bne.n	8002248 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2100      	movs	r1, #0
 800223a:	9100      	str	r1, [sp, #0]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 fa2a 	bl	8002698 <xQueueGenericCreateStatic>
 8002244:	61f8      	str	r0, [r7, #28]
 8002246:	e008      	b.n	800225a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d105      	bne.n	800225a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800224e:	2200      	movs	r2, #0
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 fa9d 	bl	8002792 <xQueueGenericCreate>
 8002258:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00c      	beq.n	800227a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <osMessageQueueNew+0xd0>
        name = attr->name;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	e001      	b.n	8002272 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8002272:	6979      	ldr	r1, [r7, #20]
 8002274:	69f8      	ldr	r0, [r7, #28]
 8002276:	f000 feff 	bl	8003078 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800227a:	69fb      	ldr	r3, [r7, #28]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3720      	adds	r7, #32
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	4613      	mov	r3, r2
 8002292:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002298:	2300      	movs	r3, #0
 800229a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800229c:	f3ef 8305 	mrs	r3, IPSR
 80022a0:	617b      	str	r3, [r7, #20]
  return(result);
 80022a2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d028      	beq.n	80022fa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <osMessageQueuePut+0x36>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <osMessageQueuePut+0x36>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80022ba:	f06f 0303 	mvn.w	r3, #3
 80022be:	61fb      	str	r3, [r7, #28]
 80022c0:	e038      	b.n	8002334 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80022c6:	f107 0210 	add.w	r2, r7, #16
 80022ca:	2300      	movs	r3, #0
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	69b8      	ldr	r0, [r7, #24]
 80022d0:	f000 fbc0 	bl	8002a54 <xQueueGenericSendFromISR>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d003      	beq.n	80022e2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80022da:	f06f 0302 	mvn.w	r3, #2
 80022de:	61fb      	str	r3, [r7, #28]
 80022e0:	e028      	b.n	8002334 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d025      	beq.n	8002334 <osMessageQueuePut+0xb0>
 80022e8:	4b15      	ldr	r3, [pc, #84]	@ (8002340 <osMessageQueuePut+0xbc>)
 80022ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	f3bf 8f4f 	dsb	sy
 80022f4:	f3bf 8f6f 	isb	sy
 80022f8:	e01c      	b.n	8002334 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <osMessageQueuePut+0x82>
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d103      	bne.n	800230e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8002306:	f06f 0303 	mvn.w	r3, #3
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	e012      	b.n	8002334 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800230e:	2300      	movs	r3, #0
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	68b9      	ldr	r1, [r7, #8]
 8002314:	69b8      	ldr	r0, [r7, #24]
 8002316:	f000 fa9b 	bl	8002850 <xQueueGenericSend>
 800231a:	4603      	mov	r3, r0
 800231c:	2b01      	cmp	r3, #1
 800231e:	d009      	beq.n	8002334 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8002326:	f06f 0301 	mvn.w	r3, #1
 800232a:	61fb      	str	r3, [r7, #28]
 800232c:	e002      	b.n	8002334 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800232e:	f06f 0302 	mvn.w	r3, #2
 8002332:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002334:	69fb      	ldr	r3, [r7, #28]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3720      	adds	r7, #32
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	e000ed04 	.word	0xe000ed04

08002344 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002344:	b580      	push	{r7, lr}
 8002346:	b088      	sub	sp, #32
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
 8002350:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800235a:	f3ef 8305 	mrs	r3, IPSR
 800235e:	617b      	str	r3, [r7, #20]
  return(result);
 8002360:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002362:	2b00      	cmp	r3, #0
 8002364:	d028      	beq.n	80023b8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <osMessageQueueGet+0x34>
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <osMessageQueueGet+0x34>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8002378:	f06f 0303 	mvn.w	r3, #3
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	e037      	b.n	80023f0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8002380:	2300      	movs	r3, #0
 8002382:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002384:	f107 0310 	add.w	r3, r7, #16
 8002388:	461a      	mov	r2, r3
 800238a:	68b9      	ldr	r1, [r7, #8]
 800238c:	69b8      	ldr	r0, [r7, #24]
 800238e:	f000 fce1 	bl	8002d54 <xQueueReceiveFromISR>
 8002392:	4603      	mov	r3, r0
 8002394:	2b01      	cmp	r3, #1
 8002396:	d003      	beq.n	80023a0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8002398:	f06f 0302 	mvn.w	r3, #2
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	e027      	b.n	80023f0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d024      	beq.n	80023f0 <osMessageQueueGet+0xac>
 80023a6:	4b15      	ldr	r3, [pc, #84]	@ (80023fc <osMessageQueueGet+0xb8>)
 80023a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	f3bf 8f4f 	dsb	sy
 80023b2:	f3bf 8f6f 	isb	sy
 80023b6:	e01b      	b.n	80023f0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d002      	beq.n	80023c4 <osMessageQueueGet+0x80>
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d103      	bne.n	80023cc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80023c4:	f06f 0303 	mvn.w	r3, #3
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	e011      	b.n	80023f0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	68b9      	ldr	r1, [r7, #8]
 80023d0:	69b8      	ldr	r0, [r7, #24]
 80023d2:	f000 fbdd 	bl	8002b90 <xQueueReceive>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d009      	beq.n	80023f0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80023e2:	f06f 0301 	mvn.w	r3, #1
 80023e6:	61fb      	str	r3, [r7, #28]
 80023e8:	e002      	b.n	80023f0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80023ea:	f06f 0302 	mvn.w	r3, #2
 80023ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80023f0:	69fb      	ldr	r3, [r7, #28]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3720      	adds	r7, #32
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	e000ed04 	.word	0xe000ed04

08002400 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4a06      	ldr	r2, [pc, #24]	@ (8002428 <vApplicationGetIdleTaskMemory+0x28>)
 8002410:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	4a05      	ldr	r2, [pc, #20]	@ (800242c <vApplicationGetIdleTaskMemory+0x2c>)
 8002416:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2280      	movs	r2, #128	@ 0x80
 800241c:	601a      	str	r2, [r3, #0]
}
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	20000128 	.word	0x20000128
 800242c:	20000184 	.word	0x20000184

08002430 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4a07      	ldr	r2, [pc, #28]	@ (800245c <vApplicationGetTimerTaskMemory+0x2c>)
 8002440:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	4a06      	ldr	r2, [pc, #24]	@ (8002460 <vApplicationGetTimerTaskMemory+0x30>)
 8002446:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800244e:	601a      	str	r2, [r3, #0]
}
 8002450:	bf00      	nop
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	20000384 	.word	0x20000384
 8002460:	200003e0 	.word	0x200003e0

08002464 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f103 0208 	add.w	r2, r3, #8
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f04f 32ff 	mov.w	r2, #4294967295
 800247c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f103 0208 	add.w	r2, r3, #8
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f103 0208 	add.w	r2, r3, #8
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr

080024a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr

080024ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024ba:	b480      	push	{r7}
 80024bc:	b085      	sub	sp, #20
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	1c5a      	adds	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	601a      	str	r2, [r3, #0]
}
 80024f6:	bf00      	nop
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002516:	d103      	bne.n	8002520 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	e00c      	b.n	800253a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3308      	adds	r3, #8
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	e002      	b.n	800252e <vListInsert+0x2e>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	429a      	cmp	r2, r3
 8002538:	d2f6      	bcs.n	8002528 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	601a      	str	r2, [r3, #0]
}
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6892      	ldr	r2, [r2, #8]
 8002586:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6852      	ldr	r2, [r2, #4]
 8002590:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	429a      	cmp	r2, r3
 800259a:	d103      	bne.n	80025a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	1e5a      	subs	r2, r3, #1
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
	...

080025c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10b      	bne.n	80025f0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025dc:	f383 8811 	msr	BASEPRI, r3
 80025e0:	f3bf 8f6f 	isb	sy
 80025e4:	f3bf 8f4f 	dsb	sy
 80025e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80025ea:	bf00      	nop
 80025ec:	bf00      	nop
 80025ee:	e7fd      	b.n	80025ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80025f0:	f002 f8f4 	bl	80047dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025fc:	68f9      	ldr	r1, [r7, #12]
 80025fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	441a      	add	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002620:	3b01      	subs	r3, #1
 8002622:	68f9      	ldr	r1, [r7, #12]
 8002624:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	441a      	add	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	22ff      	movs	r2, #255	@ 0xff
 8002634:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	22ff      	movs	r2, #255	@ 0xff
 800263c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d114      	bne.n	8002670 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d01a      	beq.n	8002684 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	3310      	adds	r3, #16
 8002652:	4618      	mov	r0, r3
 8002654:	f001 f9d4 	bl	8003a00 <xTaskRemoveFromEventList>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d012      	beq.n	8002684 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800265e:	4b0d      	ldr	r3, [pc, #52]	@ (8002694 <xQueueGenericReset+0xd0>)
 8002660:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	f3bf 8f4f 	dsb	sy
 800266a:	f3bf 8f6f 	isb	sy
 800266e:	e009      	b.n	8002684 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	3310      	adds	r3, #16
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fef5 	bl	8002464 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	3324      	adds	r3, #36	@ 0x24
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fef0 	bl	8002464 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002684:	f002 f8da 	bl	800483c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002688:	2301      	movs	r3, #1
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	e000ed04 	.word	0xe000ed04

08002698 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08e      	sub	sp, #56	@ 0x38
 800269c:	af02      	add	r7, sp, #8
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
 80026a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10b      	bne.n	80026c4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80026ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026b0:	f383 8811 	msr	BASEPRI, r3
 80026b4:	f3bf 8f6f 	isb	sy
 80026b8:	f3bf 8f4f 	dsb	sy
 80026bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80026be:	bf00      	nop
 80026c0:	bf00      	nop
 80026c2:	e7fd      	b.n	80026c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10b      	bne.n	80026e2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80026ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ce:	f383 8811 	msr	BASEPRI, r3
 80026d2:	f3bf 8f6f 	isb	sy
 80026d6:	f3bf 8f4f 	dsb	sy
 80026da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80026dc:	bf00      	nop
 80026de:	bf00      	nop
 80026e0:	e7fd      	b.n	80026de <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <xQueueGenericCreateStatic+0x56>
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <xQueueGenericCreateStatic+0x5a>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <xQueueGenericCreateStatic+0x5c>
 80026f2:	2300      	movs	r3, #0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10b      	bne.n	8002710 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80026f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026fc:	f383 8811 	msr	BASEPRI, r3
 8002700:	f3bf 8f6f 	isb	sy
 8002704:	f3bf 8f4f 	dsb	sy
 8002708:	623b      	str	r3, [r7, #32]
}
 800270a:	bf00      	nop
 800270c:	bf00      	nop
 800270e:	e7fd      	b.n	800270c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d102      	bne.n	800271c <xQueueGenericCreateStatic+0x84>
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <xQueueGenericCreateStatic+0x88>
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <xQueueGenericCreateStatic+0x8a>
 8002720:	2300      	movs	r3, #0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10b      	bne.n	800273e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800272a:	f383 8811 	msr	BASEPRI, r3
 800272e:	f3bf 8f6f 	isb	sy
 8002732:	f3bf 8f4f 	dsb	sy
 8002736:	61fb      	str	r3, [r7, #28]
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	e7fd      	b.n	800273a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800273e:	2350      	movs	r3, #80	@ 0x50
 8002740:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2b50      	cmp	r3, #80	@ 0x50
 8002746:	d00b      	beq.n	8002760 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800274c:	f383 8811 	msr	BASEPRI, r3
 8002750:	f3bf 8f6f 	isb	sy
 8002754:	f3bf 8f4f 	dsb	sy
 8002758:	61bb      	str	r3, [r7, #24]
}
 800275a:	bf00      	nop
 800275c:	bf00      	nop
 800275e:	e7fd      	b.n	800275c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002760:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00d      	beq.n	8002788 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800276c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002774:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	4613      	mov	r3, r2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 f840 	bl	8002808 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800278a:	4618      	mov	r0, r3
 800278c:	3730      	adds	r7, #48	@ 0x30
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002792:	b580      	push	{r7, lr}
 8002794:	b08a      	sub	sp, #40	@ 0x28
 8002796:	af02      	add	r7, sp, #8
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	4613      	mov	r3, r2
 800279e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10b      	bne.n	80027be <xQueueGenericCreate+0x2c>
	__asm volatile
 80027a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027aa:	f383 8811 	msr	BASEPRI, r3
 80027ae:	f3bf 8f6f 	isb	sy
 80027b2:	f3bf 8f4f 	dsb	sy
 80027b6:	613b      	str	r3, [r7, #16]
}
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
 80027bc:	e7fd      	b.n	80027ba <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	fb02 f303 	mul.w	r3, r2, r3
 80027c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	3350      	adds	r3, #80	@ 0x50
 80027cc:	4618      	mov	r0, r3
 80027ce:	f002 f907 	bl	80049e0 <pvPortMalloc>
 80027d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d011      	beq.n	80027fe <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	3350      	adds	r3, #80	@ 0x50
 80027e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80027ec:	79fa      	ldrb	r2, [r7, #7]
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	4613      	mov	r3, r2
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 f805 	bl	8002808 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80027fe:	69bb      	ldr	r3, [r7, #24]
	}
 8002800:	4618      	mov	r0, r3
 8002802:	3720      	adds	r7, #32
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d103      	bne.n	8002824 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	e002      	b.n	800282a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002836:	2101      	movs	r1, #1
 8002838:	69b8      	ldr	r0, [r7, #24]
 800283a:	f7ff fec3 	bl	80025c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002846:	bf00      	nop
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08e      	sub	sp, #56	@ 0x38
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800285e:	2300      	movs	r3, #0
 8002860:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10b      	bne.n	8002884 <xQueueGenericSend+0x34>
	__asm volatile
 800286c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002870:	f383 8811 	msr	BASEPRI, r3
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800287e:	bf00      	nop
 8002880:	bf00      	nop
 8002882:	e7fd      	b.n	8002880 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d103      	bne.n	8002892 <xQueueGenericSend+0x42>
 800288a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <xQueueGenericSend+0x46>
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <xQueueGenericSend+0x48>
 8002896:	2300      	movs	r3, #0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10b      	bne.n	80028b4 <xQueueGenericSend+0x64>
	__asm volatile
 800289c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028a0:	f383 8811 	msr	BASEPRI, r3
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80028ae:	bf00      	nop
 80028b0:	bf00      	nop
 80028b2:	e7fd      	b.n	80028b0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d103      	bne.n	80028c2 <xQueueGenericSend+0x72>
 80028ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <xQueueGenericSend+0x76>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <xQueueGenericSend+0x78>
 80028c6:	2300      	movs	r3, #0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10b      	bne.n	80028e4 <xQueueGenericSend+0x94>
	__asm volatile
 80028cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d0:	f383 8811 	msr	BASEPRI, r3
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	623b      	str	r3, [r7, #32]
}
 80028de:	bf00      	nop
 80028e0:	bf00      	nop
 80028e2:	e7fd      	b.n	80028e0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028e4:	f001 fa4c 	bl	8003d80 <xTaskGetSchedulerState>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d102      	bne.n	80028f4 <xQueueGenericSend+0xa4>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <xQueueGenericSend+0xa8>
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <xQueueGenericSend+0xaa>
 80028f8:	2300      	movs	r3, #0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10b      	bne.n	8002916 <xQueueGenericSend+0xc6>
	__asm volatile
 80028fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002902:	f383 8811 	msr	BASEPRI, r3
 8002906:	f3bf 8f6f 	isb	sy
 800290a:	f3bf 8f4f 	dsb	sy
 800290e:	61fb      	str	r3, [r7, #28]
}
 8002910:	bf00      	nop
 8002912:	bf00      	nop
 8002914:	e7fd      	b.n	8002912 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002916:	f001 ff61 	bl	80047dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800291a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800291e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002922:	429a      	cmp	r2, r3
 8002924:	d302      	bcc.n	800292c <xQueueGenericSend+0xdc>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d129      	bne.n	8002980 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	68b9      	ldr	r1, [r7, #8]
 8002930:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002932:	f000 fa91 	bl	8002e58 <prvCopyDataToQueue>
 8002936:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	2b00      	cmp	r3, #0
 800293e:	d010      	beq.n	8002962 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002942:	3324      	adds	r3, #36	@ 0x24
 8002944:	4618      	mov	r0, r3
 8002946:	f001 f85b 	bl	8003a00 <xTaskRemoveFromEventList>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d013      	beq.n	8002978 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002950:	4b3f      	ldr	r3, [pc, #252]	@ (8002a50 <xQueueGenericSend+0x200>)
 8002952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	f3bf 8f6f 	isb	sy
 8002960:	e00a      	b.n	8002978 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002964:	2b00      	cmp	r3, #0
 8002966:	d007      	beq.n	8002978 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002968:	4b39      	ldr	r3, [pc, #228]	@ (8002a50 <xQueueGenericSend+0x200>)
 800296a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	f3bf 8f4f 	dsb	sy
 8002974:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002978:	f001 ff60 	bl	800483c <vPortExitCritical>
				return pdPASS;
 800297c:	2301      	movs	r3, #1
 800297e:	e063      	b.n	8002a48 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d103      	bne.n	800298e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002986:	f001 ff59 	bl	800483c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800298a:	2300      	movs	r3, #0
 800298c:	e05c      	b.n	8002a48 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800298e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002990:	2b00      	cmp	r3, #0
 8002992:	d106      	bne.n	80029a2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002994:	f107 0314 	add.w	r3, r7, #20
 8002998:	4618      	mov	r0, r3
 800299a:	f001 f895 	bl	8003ac8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800299e:	2301      	movs	r3, #1
 80029a0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029a2:	f001 ff4b 	bl	800483c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029a6:	f000 fe07 	bl	80035b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029aa:	f001 ff17 	bl	80047dc <vPortEnterCritical>
 80029ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029b4:	b25b      	sxtb	r3, r3
 80029b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ba:	d103      	bne.n	80029c4 <xQueueGenericSend+0x174>
 80029bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029ca:	b25b      	sxtb	r3, r3
 80029cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d0:	d103      	bne.n	80029da <xQueueGenericSend+0x18a>
 80029d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029da:	f001 ff2f 	bl	800483c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029de:	1d3a      	adds	r2, r7, #4
 80029e0:	f107 0314 	add.w	r3, r7, #20
 80029e4:	4611      	mov	r1, r2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f001 f884 	bl	8003af4 <xTaskCheckForTimeOut>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d124      	bne.n	8002a3c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80029f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029f4:	f000 fb28 	bl	8003048 <prvIsQueueFull>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d018      	beq.n	8002a30 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80029fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a00:	3310      	adds	r3, #16
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	4611      	mov	r1, r2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 ffa8 	bl	800395c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a0e:	f000 fab3 	bl	8002f78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002a12:	f000 fddf 	bl	80035d4 <xTaskResumeAll>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f47f af7c 	bne.w	8002916 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a50 <xQueueGenericSend+0x200>)
 8002a20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	f3bf 8f4f 	dsb	sy
 8002a2a:	f3bf 8f6f 	isb	sy
 8002a2e:	e772      	b.n	8002916 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002a30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a32:	f000 faa1 	bl	8002f78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a36:	f000 fdcd 	bl	80035d4 <xTaskResumeAll>
 8002a3a:	e76c      	b.n	8002916 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002a3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a3e:	f000 fa9b 	bl	8002f78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a42:	f000 fdc7 	bl	80035d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002a46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3738      	adds	r7, #56	@ 0x38
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	e000ed04 	.word	0xe000ed04

08002a54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b090      	sub	sp, #64	@ 0x40
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10b      	bne.n	8002a84 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a70:	f383 8811 	msr	BASEPRI, r3
 8002a74:	f3bf 8f6f 	isb	sy
 8002a78:	f3bf 8f4f 	dsb	sy
 8002a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002a7e:	bf00      	nop
 8002a80:	bf00      	nop
 8002a82:	e7fd      	b.n	8002a80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d103      	bne.n	8002a92 <xQueueGenericSendFromISR+0x3e>
 8002a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <xQueueGenericSendFromISR+0x42>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <xQueueGenericSendFromISR+0x44>
 8002a96:	2300      	movs	r3, #0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10b      	bne.n	8002ab4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aa0:	f383 8811 	msr	BASEPRI, r3
 8002aa4:	f3bf 8f6f 	isb	sy
 8002aa8:	f3bf 8f4f 	dsb	sy
 8002aac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002aae:	bf00      	nop
 8002ab0:	bf00      	nop
 8002ab2:	e7fd      	b.n	8002ab0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d103      	bne.n	8002ac2 <xQueueGenericSendFromISR+0x6e>
 8002aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <xQueueGenericSendFromISR+0x72>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <xQueueGenericSendFromISR+0x74>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10b      	bne.n	8002ae4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ad0:	f383 8811 	msr	BASEPRI, r3
 8002ad4:	f3bf 8f6f 	isb	sy
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	623b      	str	r3, [r7, #32]
}
 8002ade:	bf00      	nop
 8002ae0:	bf00      	nop
 8002ae2:	e7fd      	b.n	8002ae0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ae4:	f001 ff3c 	bl	8004960 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ae8:	f3ef 8211 	mrs	r2, BASEPRI
 8002aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af0:	f383 8811 	msr	BASEPRI, r3
 8002af4:	f3bf 8f6f 	isb	sy
 8002af8:	f3bf 8f4f 	dsb	sy
 8002afc:	61fa      	str	r2, [r7, #28]
 8002afe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002b00:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b02:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d302      	bcc.n	8002b16 <xQueueGenericSendFromISR+0xc2>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d12f      	bne.n	8002b76 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002b2c:	f000 f994 	bl	8002e58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002b30:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b38:	d112      	bne.n	8002b60 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d016      	beq.n	8002b70 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b44:	3324      	adds	r3, #36	@ 0x24
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 ff5a 	bl	8003a00 <xTaskRemoveFromEventList>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00e      	beq.n	8002b70 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00b      	beq.n	8002b70 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	e007      	b.n	8002b70 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002b64:	3301      	adds	r3, #1
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	b25a      	sxtb	r2, r3
 8002b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002b70:	2301      	movs	r3, #1
 8002b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002b74:	e001      	b.n	8002b7a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b7c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002b84:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3740      	adds	r7, #64	@ 0x40
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08c      	sub	sp, #48	@ 0x30
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10b      	bne.n	8002bc2 <xQueueReceive+0x32>
	__asm volatile
 8002baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bae:	f383 8811 	msr	BASEPRI, r3
 8002bb2:	f3bf 8f6f 	isb	sy
 8002bb6:	f3bf 8f4f 	dsb	sy
 8002bba:	623b      	str	r3, [r7, #32]
}
 8002bbc:	bf00      	nop
 8002bbe:	bf00      	nop
 8002bc0:	e7fd      	b.n	8002bbe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d103      	bne.n	8002bd0 <xQueueReceive+0x40>
 8002bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <xQueueReceive+0x44>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <xQueueReceive+0x46>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10b      	bne.n	8002bf2 <xQueueReceive+0x62>
	__asm volatile
 8002bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bde:	f383 8811 	msr	BASEPRI, r3
 8002be2:	f3bf 8f6f 	isb	sy
 8002be6:	f3bf 8f4f 	dsb	sy
 8002bea:	61fb      	str	r3, [r7, #28]
}
 8002bec:	bf00      	nop
 8002bee:	bf00      	nop
 8002bf0:	e7fd      	b.n	8002bee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bf2:	f001 f8c5 	bl	8003d80 <xTaskGetSchedulerState>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d102      	bne.n	8002c02 <xQueueReceive+0x72>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <xQueueReceive+0x76>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <xQueueReceive+0x78>
 8002c06:	2300      	movs	r3, #0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10b      	bne.n	8002c24 <xQueueReceive+0x94>
	__asm volatile
 8002c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c10:	f383 8811 	msr	BASEPRI, r3
 8002c14:	f3bf 8f6f 	isb	sy
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	61bb      	str	r3, [r7, #24]
}
 8002c1e:	bf00      	nop
 8002c20:	bf00      	nop
 8002c22:	e7fd      	b.n	8002c20 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c24:	f001 fdda 	bl	80047dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d01f      	beq.n	8002c74 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c38:	f000 f978 	bl	8002f2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3e:	1e5a      	subs	r2, r3, #1
 8002c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c42:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00f      	beq.n	8002c6c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c4e:	3310      	adds	r3, #16
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 fed5 	bl	8003a00 <xTaskRemoveFromEventList>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d007      	beq.n	8002c6c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002c5c:	4b3c      	ldr	r3, [pc, #240]	@ (8002d50 <xQueueReceive+0x1c0>)
 8002c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002c6c:	f001 fde6 	bl	800483c <vPortExitCritical>
				return pdPASS;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e069      	b.n	8002d48 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d103      	bne.n	8002c82 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c7a:	f001 fddf 	bl	800483c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e062      	b.n	8002d48 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d106      	bne.n	8002c96 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c88:	f107 0310 	add.w	r3, r7, #16
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 ff1b 	bl	8003ac8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c92:	2301      	movs	r3, #1
 8002c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c96:	f001 fdd1 	bl	800483c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c9a:	f000 fc8d 	bl	80035b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c9e:	f001 fd9d 	bl	80047dc <vPortEnterCritical>
 8002ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ca8:	b25b      	sxtb	r3, r3
 8002caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cae:	d103      	bne.n	8002cb8 <xQueueReceive+0x128>
 8002cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002cbe:	b25b      	sxtb	r3, r3
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d103      	bne.n	8002cce <xQueueReceive+0x13e>
 8002cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002cce:	f001 fdb5 	bl	800483c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cd2:	1d3a      	adds	r2, r7, #4
 8002cd4:	f107 0310 	add.w	r3, r7, #16
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 ff0a 	bl	8003af4 <xTaskCheckForTimeOut>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d123      	bne.n	8002d2e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ce6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ce8:	f000 f998 	bl	800301c <prvIsQueueEmpty>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d017      	beq.n	8002d22 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf4:	3324      	adds	r3, #36	@ 0x24
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 fe2e 	bl	800395c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d02:	f000 f939 	bl	8002f78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d06:	f000 fc65 	bl	80035d4 <xTaskResumeAll>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d189      	bne.n	8002c24 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002d10:	4b0f      	ldr	r3, [pc, #60]	@ (8002d50 <xQueueReceive+0x1c0>)
 8002d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	e780      	b.n	8002c24 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002d22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d24:	f000 f928 	bl	8002f78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d28:	f000 fc54 	bl	80035d4 <xTaskResumeAll>
 8002d2c:	e77a      	b.n	8002c24 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002d2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d30:	f000 f922 	bl	8002f78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d34:	f000 fc4e 	bl	80035d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d3a:	f000 f96f 	bl	800301c <prvIsQueueEmpty>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f43f af6f 	beq.w	8002c24 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002d46:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3730      	adds	r7, #48	@ 0x30
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	e000ed04 	.word	0xe000ed04

08002d54 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08e      	sub	sp, #56	@ 0x38
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10b      	bne.n	8002d82 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8002d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d6e:	f383 8811 	msr	BASEPRI, r3
 8002d72:	f3bf 8f6f 	isb	sy
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	623b      	str	r3, [r7, #32]
}
 8002d7c:	bf00      	nop
 8002d7e:	bf00      	nop
 8002d80:	e7fd      	b.n	8002d7e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d103      	bne.n	8002d90 <xQueueReceiveFromISR+0x3c>
 8002d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <xQueueReceiveFromISR+0x40>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <xQueueReceiveFromISR+0x42>
 8002d94:	2300      	movs	r3, #0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10b      	bne.n	8002db2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8002d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d9e:	f383 8811 	msr	BASEPRI, r3
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	61fb      	str	r3, [r7, #28]
}
 8002dac:	bf00      	nop
 8002dae:	bf00      	nop
 8002db0:	e7fd      	b.n	8002dae <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002db2:	f001 fdd5 	bl	8004960 <vPortValidateInterruptPriority>
	__asm volatile
 8002db6:	f3ef 8211 	mrs	r2, BASEPRI
 8002dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dbe:	f383 8811 	msr	BASEPRI, r3
 8002dc2:	f3bf 8f6f 	isb	sy
 8002dc6:	f3bf 8f4f 	dsb	sy
 8002dca:	61ba      	str	r2, [r7, #24]
 8002dcc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002dce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d02f      	beq.n	8002e3e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002de4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002de8:	68b9      	ldr	r1, [r7, #8]
 8002dea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dec:	f000 f89e 	bl	8002f2c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df2:	1e5a      	subs	r2, r3, #1
 8002df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002df8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e00:	d112      	bne.n	8002e28 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d016      	beq.n	8002e38 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0c:	3310      	adds	r3, #16
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fdf6 	bl	8003a00 <xTaskRemoveFromEventList>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00e      	beq.n	8002e38 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00b      	beq.n	8002e38 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	e007      	b.n	8002e38 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002e28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	b25a      	sxtb	r2, r3
 8002e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e3c:	e001      	b.n	8002e42 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e44:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f383 8811 	msr	BASEPRI, r3
}
 8002e4c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3738      	adds	r7, #56	@ 0x38
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10d      	bne.n	8002e92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d14d      	bne.n	8002f1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 ff9a 	bl	8003dbc <xTaskPriorityDisinherit>
 8002e88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	e043      	b.n	8002f1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d119      	bne.n	8002ecc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6858      	ldr	r0, [r3, #4]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	f002 fa0d 	bl	80052c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb0:	441a      	add	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d32b      	bcc.n	8002f1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	e026      	b.n	8002f1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	68d8      	ldr	r0, [r3, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	68b9      	ldr	r1, [r7, #8]
 8002ed8:	f002 f9f3 	bl	80052c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee4:	425b      	negs	r3, r3
 8002ee6:	441a      	add	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d207      	bcs.n	8002f08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f00:	425b      	negs	r3, r3
 8002f02:	441a      	add	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d105      	bne.n	8002f1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002f22:	697b      	ldr	r3, [r7, #20]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d018      	beq.n	8002f70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	441a      	add	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d303      	bcc.n	8002f60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68d9      	ldr	r1, [r3, #12]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f68:	461a      	mov	r2, r3
 8002f6a:	6838      	ldr	r0, [r7, #0]
 8002f6c:	f002 f9a9 	bl	80052c2 <memcpy>
	}
}
 8002f70:	bf00      	nop
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f80:	f001 fc2c 	bl	80047dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f8c:	e011      	b.n	8002fb2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d012      	beq.n	8002fbc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3324      	adds	r3, #36	@ 0x24
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 fd30 	bl	8003a00 <xTaskRemoveFromEventList>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002fa6:	f000 fe09 	bl	8003bbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	dce9      	bgt.n	8002f8e <prvUnlockQueue+0x16>
 8002fba:	e000      	b.n	8002fbe <prvUnlockQueue+0x46>
					break;
 8002fbc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	22ff      	movs	r2, #255	@ 0xff
 8002fc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002fc6:	f001 fc39 	bl	800483c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002fca:	f001 fc07 	bl	80047dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002fd4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fd6:	e011      	b.n	8002ffc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d012      	beq.n	8003006 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3310      	adds	r3, #16
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fd0b 	bl	8003a00 <xTaskRemoveFromEventList>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ff0:	f000 fde4 	bl	8003bbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ff4:	7bbb      	ldrb	r3, [r7, #14]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ffc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003000:	2b00      	cmp	r3, #0
 8003002:	dce9      	bgt.n	8002fd8 <prvUnlockQueue+0x60>
 8003004:	e000      	b.n	8003008 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003006:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	22ff      	movs	r2, #255	@ 0xff
 800300c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003010:	f001 fc14 	bl	800483c <vPortExitCritical>
}
 8003014:	bf00      	nop
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003024:	f001 fbda 	bl	80047dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800302c:	2b00      	cmp	r3, #0
 800302e:	d102      	bne.n	8003036 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003030:	2301      	movs	r3, #1
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	e001      	b.n	800303a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800303a:	f001 fbff 	bl	800483c <vPortExitCritical>

	return xReturn;
 800303e:	68fb      	ldr	r3, [r7, #12]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003050:	f001 fbc4 	bl	80047dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800305c:	429a      	cmp	r2, r3
 800305e:	d102      	bne.n	8003066 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003060:	2301      	movs	r3, #1
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	e001      	b.n	800306a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800306a:	f001 fbe7 	bl	800483c <vPortExitCritical>

	return xReturn;
 800306e:	68fb      	ldr	r3, [r7, #12]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	e014      	b.n	80030b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003088:	4a0e      	ldr	r2, [pc, #56]	@ (80030c4 <vQueueAddToRegistry+0x4c>)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10b      	bne.n	80030ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003094:	490b      	ldr	r1, [pc, #44]	@ (80030c4 <vQueueAddToRegistry+0x4c>)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800309e:	4a09      	ldr	r2, [pc, #36]	@ (80030c4 <vQueueAddToRegistry+0x4c>)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4413      	add	r3, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80030aa:	e006      	b.n	80030ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3301      	adds	r3, #1
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b07      	cmp	r3, #7
 80030b6:	d9e7      	bls.n	8003088 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	200007e0 	.word	0x200007e0

080030c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80030d8:	f001 fb80 	bl	80047dc <vPortEnterCritical>
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030e2:	b25b      	sxtb	r3, r3
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d103      	bne.n	80030f2 <vQueueWaitForMessageRestricted+0x2a>
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030f8:	b25b      	sxtb	r3, r3
 80030fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fe:	d103      	bne.n	8003108 <vQueueWaitForMessageRestricted+0x40>
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003108:	f001 fb98 	bl	800483c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003110:	2b00      	cmp	r3, #0
 8003112:	d106      	bne.n	8003122 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	3324      	adds	r3, #36	@ 0x24
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	68b9      	ldr	r1, [r7, #8]
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fc43 	bl	80039a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003122:	6978      	ldr	r0, [r7, #20]
 8003124:	f7ff ff28 	bl	8002f78 <prvUnlockQueue>
	}
 8003128:	bf00      	nop
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08e      	sub	sp, #56	@ 0x38
 8003134:	af04      	add	r7, sp, #16
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800313e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10b      	bne.n	800315c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003148:	f383 8811 	msr	BASEPRI, r3
 800314c:	f3bf 8f6f 	isb	sy
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	623b      	str	r3, [r7, #32]
}
 8003156:	bf00      	nop
 8003158:	bf00      	nop
 800315a:	e7fd      	b.n	8003158 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800315c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10b      	bne.n	800317a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003166:	f383 8811 	msr	BASEPRI, r3
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	61fb      	str	r3, [r7, #28]
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop
 8003178:	e7fd      	b.n	8003176 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800317a:	235c      	movs	r3, #92	@ 0x5c
 800317c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2b5c      	cmp	r3, #92	@ 0x5c
 8003182:	d00b      	beq.n	800319c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003188:	f383 8811 	msr	BASEPRI, r3
 800318c:	f3bf 8f6f 	isb	sy
 8003190:	f3bf 8f4f 	dsb	sy
 8003194:	61bb      	str	r3, [r7, #24]
}
 8003196:	bf00      	nop
 8003198:	bf00      	nop
 800319a:	e7fd      	b.n	8003198 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800319c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800319e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d01e      	beq.n	80031e2 <xTaskCreateStatic+0xb2>
 80031a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d01b      	beq.n	80031e2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80031ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031b2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80031b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80031bc:	2300      	movs	r3, #0
 80031be:	9303      	str	r3, [sp, #12]
 80031c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c2:	9302      	str	r3, [sp, #8]
 80031c4:	f107 0314 	add.w	r3, r7, #20
 80031c8:	9301      	str	r3, [sp, #4]
 80031ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f850 	bl	800327a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80031dc:	f000 f8de 	bl	800339c <prvAddNewTaskToReadyList>
 80031e0:	e001      	b.n	80031e6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80031e6:	697b      	ldr	r3, [r7, #20]
	}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3728      	adds	r7, #40	@ 0x28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08c      	sub	sp, #48	@ 0x30
 80031f4:	af04      	add	r7, sp, #16
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	603b      	str	r3, [r7, #0]
 80031fc:	4613      	mov	r3, r2
 80031fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003200:	88fb      	ldrh	r3, [r7, #6]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4618      	mov	r0, r3
 8003206:	f001 fbeb 	bl	80049e0 <pvPortMalloc>
 800320a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00e      	beq.n	8003230 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003212:	205c      	movs	r0, #92	@ 0x5c
 8003214:	f001 fbe4 	bl	80049e0 <pvPortMalloc>
 8003218:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	631a      	str	r2, [r3, #48]	@ 0x30
 8003226:	e005      	b.n	8003234 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003228:	6978      	ldr	r0, [r7, #20]
 800322a:	f001 fca7 	bl	8004b7c <vPortFree>
 800322e:	e001      	b.n	8003234 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003230:	2300      	movs	r3, #0
 8003232:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d017      	beq.n	800326a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003242:	88fa      	ldrh	r2, [r7, #6]
 8003244:	2300      	movs	r3, #0
 8003246:	9303      	str	r3, [sp, #12]
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	9302      	str	r3, [sp, #8]
 800324c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324e:	9301      	str	r3, [sp, #4]
 8003250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 f80e 	bl	800327a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800325e:	69f8      	ldr	r0, [r7, #28]
 8003260:	f000 f89c 	bl	800339c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003264:	2301      	movs	r3, #1
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	e002      	b.n	8003270 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
 800326e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003270:	69bb      	ldr	r3, [r7, #24]
	}
 8003272:	4618      	mov	r0, r3
 8003274:	3720      	adds	r7, #32
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b088      	sub	sp, #32
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
 8003286:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	461a      	mov	r2, r3
 8003292:	21a5      	movs	r1, #165	@ 0xa5
 8003294:	f001 ff9a 	bl	80051cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800329a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032a2:	3b01      	subs	r3, #1
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	f023 0307 	bic.w	r3, r3, #7
 80032b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00b      	beq.n	80032d4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80032bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c0:	f383 8811 	msr	BASEPRI, r3
 80032c4:	f3bf 8f6f 	isb	sy
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	617b      	str	r3, [r7, #20]
}
 80032ce:	bf00      	nop
 80032d0:	bf00      	nop
 80032d2:	e7fd      	b.n	80032d0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d01f      	beq.n	800331a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032da:	2300      	movs	r3, #0
 80032dc:	61fb      	str	r3, [r7, #28]
 80032de:	e012      	b.n	8003306 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	4413      	add	r3, r2
 80032e6:	7819      	ldrb	r1, [r3, #0]
 80032e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	4413      	add	r3, r2
 80032ee:	3334      	adds	r3, #52	@ 0x34
 80032f0:	460a      	mov	r2, r1
 80032f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	4413      	add	r3, r2
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d006      	beq.n	800330e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	3301      	adds	r3, #1
 8003304:	61fb      	str	r3, [r7, #28]
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	2b0f      	cmp	r3, #15
 800330a:	d9e9      	bls.n	80032e0 <prvInitialiseNewTask+0x66>
 800330c:	e000      	b.n	8003310 <prvInitialiseNewTask+0x96>
			{
				break;
 800330e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003318:	e003      	b.n	8003322 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800331a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003324:	2b37      	cmp	r3, #55	@ 0x37
 8003326:	d901      	bls.n	800332c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003328:	2337      	movs	r3, #55	@ 0x37
 800332a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800332c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003330:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003334:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003336:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333a:	2200      	movs	r2, #0
 800333c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800333e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003340:	3304      	adds	r3, #4
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff f8ad 	bl	80024a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800334a:	3318      	adds	r3, #24
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff f8a8 	bl	80024a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003356:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800335a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800335e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003360:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003366:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800336a:	2200      	movs	r2, #0
 800336c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800336e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	68f9      	ldr	r1, [r7, #12]
 800337a:	69b8      	ldr	r0, [r7, #24]
 800337c:	f001 f93a 	bl	80045f4 <pxPortInitialiseStack>
 8003380:	4602      	mov	r2, r0
 8003382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003384:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800338c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800338e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003390:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003392:	bf00      	nop
 8003394:	3720      	adds	r7, #32
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80033a4:	f001 fa1a 	bl	80047dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80033a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003460 <prvAddNewTaskToReadyList+0xc4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3301      	adds	r3, #1
 80033ae:	4a2c      	ldr	r2, [pc, #176]	@ (8003460 <prvAddNewTaskToReadyList+0xc4>)
 80033b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80033b2:	4b2c      	ldr	r3, [pc, #176]	@ (8003464 <prvAddNewTaskToReadyList+0xc8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80033ba:	4a2a      	ldr	r2, [pc, #168]	@ (8003464 <prvAddNewTaskToReadyList+0xc8>)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033c0:	4b27      	ldr	r3, [pc, #156]	@ (8003460 <prvAddNewTaskToReadyList+0xc4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d110      	bne.n	80033ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80033c8:	f000 fc1c 	bl	8003c04 <prvInitialiseTaskLists>
 80033cc:	e00d      	b.n	80033ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80033ce:	4b26      	ldr	r3, [pc, #152]	@ (8003468 <prvAddNewTaskToReadyList+0xcc>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d109      	bne.n	80033ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033d6:	4b23      	ldr	r3, [pc, #140]	@ (8003464 <prvAddNewTaskToReadyList+0xc8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d802      	bhi.n	80033ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80033e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003464 <prvAddNewTaskToReadyList+0xc8>)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80033ea:	4b20      	ldr	r3, [pc, #128]	@ (800346c <prvAddNewTaskToReadyList+0xd0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3301      	adds	r3, #1
 80033f0:	4a1e      	ldr	r2, [pc, #120]	@ (800346c <prvAddNewTaskToReadyList+0xd0>)
 80033f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80033f4:	4b1d      	ldr	r3, [pc, #116]	@ (800346c <prvAddNewTaskToReadyList+0xd0>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003400:	4b1b      	ldr	r3, [pc, #108]	@ (8003470 <prvAddNewTaskToReadyList+0xd4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d903      	bls.n	8003410 <prvAddNewTaskToReadyList+0x74>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340c:	4a18      	ldr	r2, [pc, #96]	@ (8003470 <prvAddNewTaskToReadyList+0xd4>)
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4a15      	ldr	r2, [pc, #84]	@ (8003474 <prvAddNewTaskToReadyList+0xd8>)
 800341e:	441a      	add	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3304      	adds	r3, #4
 8003424:	4619      	mov	r1, r3
 8003426:	4610      	mov	r0, r2
 8003428:	f7ff f847 	bl	80024ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800342c:	f001 fa06 	bl	800483c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003430:	4b0d      	ldr	r3, [pc, #52]	@ (8003468 <prvAddNewTaskToReadyList+0xcc>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00e      	beq.n	8003456 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003438:	4b0a      	ldr	r3, [pc, #40]	@ (8003464 <prvAddNewTaskToReadyList+0xc8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003442:	429a      	cmp	r2, r3
 8003444:	d207      	bcs.n	8003456 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003446:	4b0c      	ldr	r3, [pc, #48]	@ (8003478 <prvAddNewTaskToReadyList+0xdc>)
 8003448:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000cf4 	.word	0x20000cf4
 8003464:	20000820 	.word	0x20000820
 8003468:	20000d00 	.word	0x20000d00
 800346c:	20000d10 	.word	0x20000d10
 8003470:	20000cfc 	.word	0x20000cfc
 8003474:	20000824 	.word	0x20000824
 8003478:	e000ed04 	.word	0xe000ed04

0800347c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d018      	beq.n	80034c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800348e:	4b14      	ldr	r3, [pc, #80]	@ (80034e0 <vTaskDelay+0x64>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00b      	beq.n	80034ae <vTaskDelay+0x32>
	__asm volatile
 8003496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800349a:	f383 8811 	msr	BASEPRI, r3
 800349e:	f3bf 8f6f 	isb	sy
 80034a2:	f3bf 8f4f 	dsb	sy
 80034a6:	60bb      	str	r3, [r7, #8]
}
 80034a8:	bf00      	nop
 80034aa:	bf00      	nop
 80034ac:	e7fd      	b.n	80034aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80034ae:	f000 f883 	bl	80035b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80034b2:	2100      	movs	r1, #0
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fcf1 	bl	8003e9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80034ba:	f000 f88b 	bl	80035d4 <xTaskResumeAll>
 80034be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d107      	bne.n	80034d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80034c6:	4b07      	ldr	r3, [pc, #28]	@ (80034e4 <vTaskDelay+0x68>)
 80034c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	f3bf 8f4f 	dsb	sy
 80034d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80034d6:	bf00      	nop
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20000d1c 	.word	0x20000d1c
 80034e4:	e000ed04 	.word	0xe000ed04

080034e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	@ 0x28
 80034ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80034f6:	463a      	mov	r2, r7
 80034f8:	1d39      	adds	r1, r7, #4
 80034fa:	f107 0308 	add.w	r3, r7, #8
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fe ff7e 	bl	8002400 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003504:	6839      	ldr	r1, [r7, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	9202      	str	r2, [sp, #8]
 800350c:	9301      	str	r3, [sp, #4]
 800350e:	2300      	movs	r3, #0
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	2300      	movs	r3, #0
 8003514:	460a      	mov	r2, r1
 8003516:	4922      	ldr	r1, [pc, #136]	@ (80035a0 <vTaskStartScheduler+0xb8>)
 8003518:	4822      	ldr	r0, [pc, #136]	@ (80035a4 <vTaskStartScheduler+0xbc>)
 800351a:	f7ff fe09 	bl	8003130 <xTaskCreateStatic>
 800351e:	4603      	mov	r3, r0
 8003520:	4a21      	ldr	r2, [pc, #132]	@ (80035a8 <vTaskStartScheduler+0xc0>)
 8003522:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003524:	4b20      	ldr	r3, [pc, #128]	@ (80035a8 <vTaskStartScheduler+0xc0>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800352c:	2301      	movs	r3, #1
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	e001      	b.n	8003536 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d102      	bne.n	8003542 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800353c:	f000 fd02 	bl	8003f44 <xTimerCreateTimerTask>
 8003540:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d116      	bne.n	8003576 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800354c:	f383 8811 	msr	BASEPRI, r3
 8003550:	f3bf 8f6f 	isb	sy
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	613b      	str	r3, [r7, #16]
}
 800355a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800355c:	4b13      	ldr	r3, [pc, #76]	@ (80035ac <vTaskStartScheduler+0xc4>)
 800355e:	f04f 32ff 	mov.w	r2, #4294967295
 8003562:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003564:	4b12      	ldr	r3, [pc, #72]	@ (80035b0 <vTaskStartScheduler+0xc8>)
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800356a:	4b12      	ldr	r3, [pc, #72]	@ (80035b4 <vTaskStartScheduler+0xcc>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003570:	f001 f8c2 	bl	80046f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003574:	e00f      	b.n	8003596 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357c:	d10b      	bne.n	8003596 <vTaskStartScheduler+0xae>
	__asm volatile
 800357e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	60fb      	str	r3, [r7, #12]
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	e7fd      	b.n	8003592 <vTaskStartScheduler+0xaa>
}
 8003596:	bf00      	nop
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	08005e68 	.word	0x08005e68
 80035a4:	08003bd5 	.word	0x08003bd5
 80035a8:	20000d18 	.word	0x20000d18
 80035ac:	20000d14 	.word	0x20000d14
 80035b0:	20000d00 	.word	0x20000d00
 80035b4:	20000cf8 	.word	0x20000cf8

080035b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80035bc:	4b04      	ldr	r3, [pc, #16]	@ (80035d0 <vTaskSuspendAll+0x18>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	3301      	adds	r3, #1
 80035c2:	4a03      	ldr	r2, [pc, #12]	@ (80035d0 <vTaskSuspendAll+0x18>)
 80035c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80035c6:	bf00      	nop
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	20000d1c 	.word	0x20000d1c

080035d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80035e2:	4b42      	ldr	r3, [pc, #264]	@ (80036ec <xTaskResumeAll+0x118>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10b      	bne.n	8003602 <xTaskResumeAll+0x2e>
	__asm volatile
 80035ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ee:	f383 8811 	msr	BASEPRI, r3
 80035f2:	f3bf 8f6f 	isb	sy
 80035f6:	f3bf 8f4f 	dsb	sy
 80035fa:	603b      	str	r3, [r7, #0]
}
 80035fc:	bf00      	nop
 80035fe:	bf00      	nop
 8003600:	e7fd      	b.n	80035fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003602:	f001 f8eb 	bl	80047dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003606:	4b39      	ldr	r3, [pc, #228]	@ (80036ec <xTaskResumeAll+0x118>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	3b01      	subs	r3, #1
 800360c:	4a37      	ldr	r2, [pc, #220]	@ (80036ec <xTaskResumeAll+0x118>)
 800360e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003610:	4b36      	ldr	r3, [pc, #216]	@ (80036ec <xTaskResumeAll+0x118>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d162      	bne.n	80036de <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003618:	4b35      	ldr	r3, [pc, #212]	@ (80036f0 <xTaskResumeAll+0x11c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d05e      	beq.n	80036de <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003620:	e02f      	b.n	8003682 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003622:	4b34      	ldr	r3, [pc, #208]	@ (80036f4 <xTaskResumeAll+0x120>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	3318      	adds	r3, #24
 800362e:	4618      	mov	r0, r3
 8003630:	f7fe ff9e 	bl	8002570 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	3304      	adds	r3, #4
 8003638:	4618      	mov	r0, r3
 800363a:	f7fe ff99 	bl	8002570 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003642:	4b2d      	ldr	r3, [pc, #180]	@ (80036f8 <xTaskResumeAll+0x124>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d903      	bls.n	8003652 <xTaskResumeAll+0x7e>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364e:	4a2a      	ldr	r2, [pc, #168]	@ (80036f8 <xTaskResumeAll+0x124>)
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4a27      	ldr	r2, [pc, #156]	@ (80036fc <xTaskResumeAll+0x128>)
 8003660:	441a      	add	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	3304      	adds	r3, #4
 8003666:	4619      	mov	r1, r3
 8003668:	4610      	mov	r0, r2
 800366a:	f7fe ff26 	bl	80024ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003672:	4b23      	ldr	r3, [pc, #140]	@ (8003700 <xTaskResumeAll+0x12c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003678:	429a      	cmp	r2, r3
 800367a:	d302      	bcc.n	8003682 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800367c:	4b21      	ldr	r3, [pc, #132]	@ (8003704 <xTaskResumeAll+0x130>)
 800367e:	2201      	movs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003682:	4b1c      	ldr	r3, [pc, #112]	@ (80036f4 <xTaskResumeAll+0x120>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1cb      	bne.n	8003622 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003690:	f000 fb56 	bl	8003d40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003694:	4b1c      	ldr	r3, [pc, #112]	@ (8003708 <xTaskResumeAll+0x134>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d010      	beq.n	80036c2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80036a0:	f000 f844 	bl	800372c <xTaskIncrementTick>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80036aa:	4b16      	ldr	r3, [pc, #88]	@ (8003704 <xTaskResumeAll+0x130>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f1      	bne.n	80036a0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80036bc:	4b12      	ldr	r3, [pc, #72]	@ (8003708 <xTaskResumeAll+0x134>)
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80036c2:	4b10      	ldr	r3, [pc, #64]	@ (8003704 <xTaskResumeAll+0x130>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d009      	beq.n	80036de <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80036ca:	2301      	movs	r3, #1
 80036cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80036ce:	4b0f      	ldr	r3, [pc, #60]	@ (800370c <xTaskResumeAll+0x138>)
 80036d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036de:	f001 f8ad 	bl	800483c <vPortExitCritical>

	return xAlreadyYielded;
 80036e2:	68bb      	ldr	r3, [r7, #8]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20000d1c 	.word	0x20000d1c
 80036f0:	20000cf4 	.word	0x20000cf4
 80036f4:	20000cb4 	.word	0x20000cb4
 80036f8:	20000cfc 	.word	0x20000cfc
 80036fc:	20000824 	.word	0x20000824
 8003700:	20000820 	.word	0x20000820
 8003704:	20000d08 	.word	0x20000d08
 8003708:	20000d04 	.word	0x20000d04
 800370c:	e000ed04 	.word	0xe000ed04

08003710 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003716:	4b04      	ldr	r3, [pc, #16]	@ (8003728 <xTaskGetTickCount+0x18>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800371c:	687b      	ldr	r3, [r7, #4]
}
 800371e:	4618      	mov	r0, r3
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr
 8003728:	20000cf8 	.word	0x20000cf8

0800372c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003736:	4b4f      	ldr	r3, [pc, #316]	@ (8003874 <xTaskIncrementTick+0x148>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	f040 8090 	bne.w	8003860 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003740:	4b4d      	ldr	r3, [pc, #308]	@ (8003878 <xTaskIncrementTick+0x14c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3301      	adds	r3, #1
 8003746:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003748:	4a4b      	ldr	r2, [pc, #300]	@ (8003878 <xTaskIncrementTick+0x14c>)
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d121      	bne.n	8003798 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003754:	4b49      	ldr	r3, [pc, #292]	@ (800387c <xTaskIncrementTick+0x150>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00b      	beq.n	8003776 <xTaskIncrementTick+0x4a>
	__asm volatile
 800375e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003762:	f383 8811 	msr	BASEPRI, r3
 8003766:	f3bf 8f6f 	isb	sy
 800376a:	f3bf 8f4f 	dsb	sy
 800376e:	603b      	str	r3, [r7, #0]
}
 8003770:	bf00      	nop
 8003772:	bf00      	nop
 8003774:	e7fd      	b.n	8003772 <xTaskIncrementTick+0x46>
 8003776:	4b41      	ldr	r3, [pc, #260]	@ (800387c <xTaskIncrementTick+0x150>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	4b40      	ldr	r3, [pc, #256]	@ (8003880 <xTaskIncrementTick+0x154>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a3e      	ldr	r2, [pc, #248]	@ (800387c <xTaskIncrementTick+0x150>)
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	4a3e      	ldr	r2, [pc, #248]	@ (8003880 <xTaskIncrementTick+0x154>)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	4b3e      	ldr	r3, [pc, #248]	@ (8003884 <xTaskIncrementTick+0x158>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3301      	adds	r3, #1
 8003790:	4a3c      	ldr	r2, [pc, #240]	@ (8003884 <xTaskIncrementTick+0x158>)
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	f000 fad4 	bl	8003d40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003798:	4b3b      	ldr	r3, [pc, #236]	@ (8003888 <xTaskIncrementTick+0x15c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d349      	bcc.n	8003836 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037a2:	4b36      	ldr	r3, [pc, #216]	@ (800387c <xTaskIncrementTick+0x150>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d104      	bne.n	80037b6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037ac:	4b36      	ldr	r3, [pc, #216]	@ (8003888 <xTaskIncrementTick+0x15c>)
 80037ae:	f04f 32ff 	mov.w	r2, #4294967295
 80037b2:	601a      	str	r2, [r3, #0]
					break;
 80037b4:	e03f      	b.n	8003836 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037b6:	4b31      	ldr	r3, [pc, #196]	@ (800387c <xTaskIncrementTick+0x150>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d203      	bcs.n	80037d6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80037ce:	4a2e      	ldr	r2, [pc, #184]	@ (8003888 <xTaskIncrementTick+0x15c>)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80037d4:	e02f      	b.n	8003836 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	3304      	adds	r3, #4
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe fec8 	bl	8002570 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d004      	beq.n	80037f2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	3318      	adds	r3, #24
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fe febf 	bl	8002570 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037f6:	4b25      	ldr	r3, [pc, #148]	@ (800388c <xTaskIncrementTick+0x160>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d903      	bls.n	8003806 <xTaskIncrementTick+0xda>
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003802:	4a22      	ldr	r2, [pc, #136]	@ (800388c <xTaskIncrementTick+0x160>)
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800380a:	4613      	mov	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4a1f      	ldr	r2, [pc, #124]	@ (8003890 <xTaskIncrementTick+0x164>)
 8003814:	441a      	add	r2, r3
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	3304      	adds	r3, #4
 800381a:	4619      	mov	r1, r3
 800381c:	4610      	mov	r0, r2
 800381e:	f7fe fe4c 	bl	80024ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003826:	4b1b      	ldr	r3, [pc, #108]	@ (8003894 <xTaskIncrementTick+0x168>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382c:	429a      	cmp	r2, r3
 800382e:	d3b8      	bcc.n	80037a2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003830:	2301      	movs	r3, #1
 8003832:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003834:	e7b5      	b.n	80037a2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003836:	4b17      	ldr	r3, [pc, #92]	@ (8003894 <xTaskIncrementTick+0x168>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800383c:	4914      	ldr	r1, [pc, #80]	@ (8003890 <xTaskIncrementTick+0x164>)
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d901      	bls.n	8003852 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800384e:	2301      	movs	r3, #1
 8003850:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003852:	4b11      	ldr	r3, [pc, #68]	@ (8003898 <xTaskIncrementTick+0x16c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800385a:	2301      	movs	r3, #1
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	e004      	b.n	800386a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003860:	4b0e      	ldr	r3, [pc, #56]	@ (800389c <xTaskIncrementTick+0x170>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3301      	adds	r3, #1
 8003866:	4a0d      	ldr	r2, [pc, #52]	@ (800389c <xTaskIncrementTick+0x170>)
 8003868:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800386a:	697b      	ldr	r3, [r7, #20]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20000d1c 	.word	0x20000d1c
 8003878:	20000cf8 	.word	0x20000cf8
 800387c:	20000cac 	.word	0x20000cac
 8003880:	20000cb0 	.word	0x20000cb0
 8003884:	20000d0c 	.word	0x20000d0c
 8003888:	20000d14 	.word	0x20000d14
 800388c:	20000cfc 	.word	0x20000cfc
 8003890:	20000824 	.word	0x20000824
 8003894:	20000820 	.word	0x20000820
 8003898:	20000d08 	.word	0x20000d08
 800389c:	20000d04 	.word	0x20000d04

080038a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038a6:	4b28      	ldr	r3, [pc, #160]	@ (8003948 <vTaskSwitchContext+0xa8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80038ae:	4b27      	ldr	r3, [pc, #156]	@ (800394c <vTaskSwitchContext+0xac>)
 80038b0:	2201      	movs	r2, #1
 80038b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80038b4:	e042      	b.n	800393c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80038b6:	4b25      	ldr	r3, [pc, #148]	@ (800394c <vTaskSwitchContext+0xac>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038bc:	4b24      	ldr	r3, [pc, #144]	@ (8003950 <vTaskSwitchContext+0xb0>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	e011      	b.n	80038e8 <vTaskSwitchContext+0x48>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10b      	bne.n	80038e2 <vTaskSwitchContext+0x42>
	__asm volatile
 80038ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ce:	f383 8811 	msr	BASEPRI, r3
 80038d2:	f3bf 8f6f 	isb	sy
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	607b      	str	r3, [r7, #4]
}
 80038dc:	bf00      	nop
 80038de:	bf00      	nop
 80038e0:	e7fd      	b.n	80038de <vTaskSwitchContext+0x3e>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	491a      	ldr	r1, [pc, #104]	@ (8003954 <vTaskSwitchContext+0xb4>)
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0e3      	beq.n	80038c4 <vTaskSwitchContext+0x24>
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4613      	mov	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4a13      	ldr	r2, [pc, #76]	@ (8003954 <vTaskSwitchContext+0xb4>)
 8003908:	4413      	add	r3, r2
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	3308      	adds	r3, #8
 800391e:	429a      	cmp	r2, r3
 8003920:	d104      	bne.n	800392c <vTaskSwitchContext+0x8c>
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	605a      	str	r2, [r3, #4]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	4a09      	ldr	r2, [pc, #36]	@ (8003958 <vTaskSwitchContext+0xb8>)
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	4a06      	ldr	r2, [pc, #24]	@ (8003950 <vTaskSwitchContext+0xb0>)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6013      	str	r3, [r2, #0]
}
 800393c:	bf00      	nop
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	20000d1c 	.word	0x20000d1c
 800394c:	20000d08 	.word	0x20000d08
 8003950:	20000cfc 	.word	0x20000cfc
 8003954:	20000824 	.word	0x20000824
 8003958:	20000820 	.word	0x20000820

0800395c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10b      	bne.n	8003984 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800396c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003970:	f383 8811 	msr	BASEPRI, r3
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	60fb      	str	r3, [r7, #12]
}
 800397e:	bf00      	nop
 8003980:	bf00      	nop
 8003982:	e7fd      	b.n	8003980 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003984:	4b07      	ldr	r3, [pc, #28]	@ (80039a4 <vTaskPlaceOnEventList+0x48>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3318      	adds	r3, #24
 800398a:	4619      	mov	r1, r3
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7fe fdb7 	bl	8002500 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003992:	2101      	movs	r1, #1
 8003994:	6838      	ldr	r0, [r7, #0]
 8003996:	f000 fa81 	bl	8003e9c <prvAddCurrentTaskToDelayedList>
}
 800399a:	bf00      	nop
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000820 	.word	0x20000820

080039a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10b      	bne.n	80039d2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80039ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	617b      	str	r3, [r7, #20]
}
 80039cc:	bf00      	nop
 80039ce:	bf00      	nop
 80039d0:	e7fd      	b.n	80039ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039d2:	4b0a      	ldr	r3, [pc, #40]	@ (80039fc <vTaskPlaceOnEventListRestricted+0x54>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3318      	adds	r3, #24
 80039d8:	4619      	mov	r1, r3
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f7fe fd6d 	bl	80024ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80039e6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	68b8      	ldr	r0, [r7, #8]
 80039f0:	f000 fa54 	bl	8003e9c <prvAddCurrentTaskToDelayedList>
	}
 80039f4:	bf00      	nop
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20000820 	.word	0x20000820

08003a00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10b      	bne.n	8003a2e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	60fb      	str	r3, [r7, #12]
}
 8003a28:	bf00      	nop
 8003a2a:	bf00      	nop
 8003a2c:	e7fd      	b.n	8003a2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	3318      	adds	r3, #24
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe fd9c 	bl	8002570 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a38:	4b1d      	ldr	r3, [pc, #116]	@ (8003ab0 <xTaskRemoveFromEventList+0xb0>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d11d      	bne.n	8003a7c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	3304      	adds	r3, #4
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fe fd93 	bl	8002570 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a4e:	4b19      	ldr	r3, [pc, #100]	@ (8003ab4 <xTaskRemoveFromEventList+0xb4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d903      	bls.n	8003a5e <xTaskRemoveFromEventList+0x5e>
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5a:	4a16      	ldr	r2, [pc, #88]	@ (8003ab4 <xTaskRemoveFromEventList+0xb4>)
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4a13      	ldr	r2, [pc, #76]	@ (8003ab8 <xTaskRemoveFromEventList+0xb8>)
 8003a6c:	441a      	add	r2, r3
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	3304      	adds	r3, #4
 8003a72:	4619      	mov	r1, r3
 8003a74:	4610      	mov	r0, r2
 8003a76:	f7fe fd20 	bl	80024ba <vListInsertEnd>
 8003a7a:	e005      	b.n	8003a88 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	3318      	adds	r3, #24
 8003a80:	4619      	mov	r1, r3
 8003a82:	480e      	ldr	r0, [pc, #56]	@ (8003abc <xTaskRemoveFromEventList+0xbc>)
 8003a84:	f7fe fd19 	bl	80024ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac0 <xTaskRemoveFromEventList+0xc0>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d905      	bls.n	8003aa2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a96:	2301      	movs	r3, #1
 8003a98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac4 <xTaskRemoveFromEventList+0xc4>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	e001      	b.n	8003aa6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003aa6:	697b      	ldr	r3, [r7, #20]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20000d1c 	.word	0x20000d1c
 8003ab4:	20000cfc 	.word	0x20000cfc
 8003ab8:	20000824 	.word	0x20000824
 8003abc:	20000cb4 	.word	0x20000cb4
 8003ac0:	20000820 	.word	0x20000820
 8003ac4:	20000d08 	.word	0x20000d08

08003ac8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ad0:	4b06      	ldr	r3, [pc, #24]	@ (8003aec <vTaskInternalSetTimeOutState+0x24>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ad8:	4b05      	ldr	r3, [pc, #20]	@ (8003af0 <vTaskInternalSetTimeOutState+0x28>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	605a      	str	r2, [r3, #4]
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bc80      	pop	{r7}
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	20000d0c 	.word	0x20000d0c
 8003af0:	20000cf8 	.word	0x20000cf8

08003af4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10b      	bne.n	8003b1c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b08:	f383 8811 	msr	BASEPRI, r3
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	613b      	str	r3, [r7, #16]
}
 8003b16:	bf00      	nop
 8003b18:	bf00      	nop
 8003b1a:	e7fd      	b.n	8003b18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10b      	bne.n	8003b3a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b26:	f383 8811 	msr	BASEPRI, r3
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	60fb      	str	r3, [r7, #12]
}
 8003b34:	bf00      	nop
 8003b36:	bf00      	nop
 8003b38:	e7fd      	b.n	8003b36 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003b3a:	f000 fe4f 	bl	80047dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8003bb4 <xTaskCheckForTimeOut+0xc0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b56:	d102      	bne.n	8003b5e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]
 8003b5c:	e023      	b.n	8003ba6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4b15      	ldr	r3, [pc, #84]	@ (8003bb8 <xTaskCheckForTimeOut+0xc4>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d007      	beq.n	8003b7a <xTaskCheckForTimeOut+0x86>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d302      	bcc.n	8003b7a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b74:	2301      	movs	r3, #1
 8003b76:	61fb      	str	r3, [r7, #28]
 8003b78:	e015      	b.n	8003ba6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d20b      	bcs.n	8003b9c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	1ad2      	subs	r2, r2, r3
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff ff99 	bl	8003ac8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
 8003b9a:	e004      	b.n	8003ba6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003ba6:	f000 fe49 	bl	800483c <vPortExitCritical>

	return xReturn;
 8003baa:	69fb      	ldr	r3, [r7, #28]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3720      	adds	r7, #32
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20000cf8 	.word	0x20000cf8
 8003bb8:	20000d0c 	.word	0x20000d0c

08003bbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	@ (8003bd0 <vTaskMissedYield+0x14>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]
}
 8003bc6:	bf00      	nop
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20000d08 	.word	0x20000d08

08003bd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003bdc:	f000 f852 	bl	8003c84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003be0:	4b06      	ldr	r3, [pc, #24]	@ (8003bfc <prvIdleTask+0x28>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d9f9      	bls.n	8003bdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8003be8:	4b05      	ldr	r3, [pc, #20]	@ (8003c00 <prvIdleTask+0x2c>)
 8003bea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003bf8:	e7f0      	b.n	8003bdc <prvIdleTask+0x8>
 8003bfa:	bf00      	nop
 8003bfc:	20000824 	.word	0x20000824
 8003c00:	e000ed04 	.word	0xe000ed04

08003c04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	607b      	str	r3, [r7, #4]
 8003c0e:	e00c      	b.n	8003c2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	4613      	mov	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4a12      	ldr	r2, [pc, #72]	@ (8003c64 <prvInitialiseTaskLists+0x60>)
 8003c1c:	4413      	add	r3, r2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fe fc20 	bl	8002464 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3301      	adds	r3, #1
 8003c28:	607b      	str	r3, [r7, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b37      	cmp	r3, #55	@ 0x37
 8003c2e:	d9ef      	bls.n	8003c10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c30:	480d      	ldr	r0, [pc, #52]	@ (8003c68 <prvInitialiseTaskLists+0x64>)
 8003c32:	f7fe fc17 	bl	8002464 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c36:	480d      	ldr	r0, [pc, #52]	@ (8003c6c <prvInitialiseTaskLists+0x68>)
 8003c38:	f7fe fc14 	bl	8002464 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c3c:	480c      	ldr	r0, [pc, #48]	@ (8003c70 <prvInitialiseTaskLists+0x6c>)
 8003c3e:	f7fe fc11 	bl	8002464 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c42:	480c      	ldr	r0, [pc, #48]	@ (8003c74 <prvInitialiseTaskLists+0x70>)
 8003c44:	f7fe fc0e 	bl	8002464 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c48:	480b      	ldr	r0, [pc, #44]	@ (8003c78 <prvInitialiseTaskLists+0x74>)
 8003c4a:	f7fe fc0b 	bl	8002464 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c7c <prvInitialiseTaskLists+0x78>)
 8003c50:	4a05      	ldr	r2, [pc, #20]	@ (8003c68 <prvInitialiseTaskLists+0x64>)
 8003c52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c54:	4b0a      	ldr	r3, [pc, #40]	@ (8003c80 <prvInitialiseTaskLists+0x7c>)
 8003c56:	4a05      	ldr	r2, [pc, #20]	@ (8003c6c <prvInitialiseTaskLists+0x68>)
 8003c58:	601a      	str	r2, [r3, #0]
}
 8003c5a:	bf00      	nop
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000824 	.word	0x20000824
 8003c68:	20000c84 	.word	0x20000c84
 8003c6c:	20000c98 	.word	0x20000c98
 8003c70:	20000cb4 	.word	0x20000cb4
 8003c74:	20000cc8 	.word	0x20000cc8
 8003c78:	20000ce0 	.word	0x20000ce0
 8003c7c:	20000cac 	.word	0x20000cac
 8003c80:	20000cb0 	.word	0x20000cb0

08003c84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c8a:	e019      	b.n	8003cc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c8c:	f000 fda6 	bl	80047dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c90:	4b10      	ldr	r3, [pc, #64]	@ (8003cd4 <prvCheckTasksWaitingTermination+0x50>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fe fc67 	bl	8002570 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd8 <prvCheckTasksWaitingTermination+0x54>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	4a0b      	ldr	r2, [pc, #44]	@ (8003cd8 <prvCheckTasksWaitingTermination+0x54>)
 8003caa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003cac:	4b0b      	ldr	r3, [pc, #44]	@ (8003cdc <prvCheckTasksWaitingTermination+0x58>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8003cdc <prvCheckTasksWaitingTermination+0x58>)
 8003cb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003cb6:	f000 fdc1 	bl	800483c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f810 	bl	8003ce0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cc0:	4b06      	ldr	r3, [pc, #24]	@ (8003cdc <prvCheckTasksWaitingTermination+0x58>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e1      	bne.n	8003c8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003cc8:	bf00      	nop
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	20000cc8 	.word	0x20000cc8
 8003cd8:	20000cf4 	.word	0x20000cf4
 8003cdc:	20000cdc 	.word	0x20000cdc

08003ce0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d108      	bne.n	8003d04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 ff40 	bl	8004b7c <vPortFree>
				vPortFree( pxTCB );
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 ff3d 	bl	8004b7c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d02:	e019      	b.n	8003d38 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d103      	bne.n	8003d16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 ff34 	bl	8004b7c <vPortFree>
	}
 8003d14:	e010      	b.n	8003d38 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d00b      	beq.n	8003d38 <prvDeleteTCB+0x58>
	__asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	60fb      	str	r3, [r7, #12]
}
 8003d32:	bf00      	nop
 8003d34:	bf00      	nop
 8003d36:	e7fd      	b.n	8003d34 <prvDeleteTCB+0x54>
	}
 8003d38:	bf00      	nop
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d46:	4b0c      	ldr	r3, [pc, #48]	@ (8003d78 <prvResetNextTaskUnblockTime+0x38>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d104      	bne.n	8003d5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d50:	4b0a      	ldr	r3, [pc, #40]	@ (8003d7c <prvResetNextTaskUnblockTime+0x3c>)
 8003d52:	f04f 32ff 	mov.w	r2, #4294967295
 8003d56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d58:	e008      	b.n	8003d6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d5a:	4b07      	ldr	r3, [pc, #28]	@ (8003d78 <prvResetNextTaskUnblockTime+0x38>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	4a04      	ldr	r2, [pc, #16]	@ (8003d7c <prvResetNextTaskUnblockTime+0x3c>)
 8003d6a:	6013      	str	r3, [r2, #0]
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	20000cac 	.word	0x20000cac
 8003d7c:	20000d14 	.word	0x20000d14

08003d80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d86:	4b0b      	ldr	r3, [pc, #44]	@ (8003db4 <xTaskGetSchedulerState+0x34>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d102      	bne.n	8003d94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	607b      	str	r3, [r7, #4]
 8003d92:	e008      	b.n	8003da6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d94:	4b08      	ldr	r3, [pc, #32]	@ (8003db8 <xTaskGetSchedulerState+0x38>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d102      	bne.n	8003da2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	607b      	str	r3, [r7, #4]
 8003da0:	e001      	b.n	8003da6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003da2:	2300      	movs	r3, #0
 8003da4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003da6:	687b      	ldr	r3, [r7, #4]
	}
 8003da8:	4618      	mov	r0, r3
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc80      	pop	{r7}
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000d00 	.word	0x20000d00
 8003db8:	20000d1c 	.word	0x20000d1c

08003dbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d058      	beq.n	8003e84 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8003e90 <xTaskPriorityDisinherit+0xd4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d00b      	beq.n	8003df4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	60fb      	str	r3, [r7, #12]
}
 8003dee:	bf00      	nop
 8003df0:	bf00      	nop
 8003df2:	e7fd      	b.n	8003df0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10b      	bne.n	8003e14 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e00:	f383 8811 	msr	BASEPRI, r3
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	60bb      	str	r3, [r7, #8]
}
 8003e0e:	bf00      	nop
 8003e10:	bf00      	nop
 8003e12:	e7fd      	b.n	8003e10 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e18:	1e5a      	subs	r2, r3, #1
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d02c      	beq.n	8003e84 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d128      	bne.n	8003e84 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	3304      	adds	r3, #4
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fe fb9a 	bl	8002570 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e48:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e54:	4b0f      	ldr	r3, [pc, #60]	@ (8003e94 <xTaskPriorityDisinherit+0xd8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d903      	bls.n	8003e64 <xTaskPriorityDisinherit+0xa8>
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e60:	4a0c      	ldr	r2, [pc, #48]	@ (8003e94 <xTaskPriorityDisinherit+0xd8>)
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4a09      	ldr	r2, [pc, #36]	@ (8003e98 <xTaskPriorityDisinherit+0xdc>)
 8003e72:	441a      	add	r2, r3
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	3304      	adds	r3, #4
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	f7fe fb1d 	bl	80024ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e80:	2301      	movs	r3, #1
 8003e82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e84:	697b      	ldr	r3, [r7, #20]
	}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20000820 	.word	0x20000820
 8003e94:	20000cfc 	.word	0x20000cfc
 8003e98:	20000824 	.word	0x20000824

08003e9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ea6:	4b21      	ldr	r3, [pc, #132]	@ (8003f2c <prvAddCurrentTaskToDelayedList+0x90>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003eac:	4b20      	ldr	r3, [pc, #128]	@ (8003f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fe fb5c 	bl	8002570 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	d10a      	bne.n	8003ed6 <prvAddCurrentTaskToDelayedList+0x3a>
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d007      	beq.n	8003ed6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8003f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3304      	adds	r3, #4
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4819      	ldr	r0, [pc, #100]	@ (8003f34 <prvAddCurrentTaskToDelayedList+0x98>)
 8003ed0:	f7fe faf3 	bl	80024ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ed4:	e026      	b.n	8003f24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4413      	add	r3, r2
 8003edc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ede:	4b14      	ldr	r3, [pc, #80]	@ (8003f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d209      	bcs.n	8003f02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eee:	4b12      	ldr	r3, [pc, #72]	@ (8003f38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8003f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4610      	mov	r0, r2
 8003efc:	f7fe fb00 	bl	8002500 <vListInsert>
}
 8003f00:	e010      	b.n	8003f24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f02:	4b0e      	ldr	r3, [pc, #56]	@ (8003f3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4b0a      	ldr	r3, [pc, #40]	@ (8003f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4610      	mov	r0, r2
 8003f10:	f7fe faf6 	bl	8002500 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f14:	4b0a      	ldr	r3, [pc, #40]	@ (8003f40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d202      	bcs.n	8003f24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003f1e:	4a08      	ldr	r2, [pc, #32]	@ (8003f40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	6013      	str	r3, [r2, #0]
}
 8003f24:	bf00      	nop
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	20000cf8 	.word	0x20000cf8
 8003f30:	20000820 	.word	0x20000820
 8003f34:	20000ce0 	.word	0x20000ce0
 8003f38:	20000cb0 	.word	0x20000cb0
 8003f3c:	20000cac 	.word	0x20000cac
 8003f40:	20000d14 	.word	0x20000d14

08003f44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08a      	sub	sp, #40	@ 0x28
 8003f48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003f4e:	f000 fb11 	bl	8004574 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003f52:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc8 <xTimerCreateTimerTask+0x84>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d021      	beq.n	8003f9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003f62:	1d3a      	adds	r2, r7, #4
 8003f64:	f107 0108 	add.w	r1, r7, #8
 8003f68:	f107 030c 	add.w	r3, r7, #12
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fe fa5f 	bl	8002430 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	9202      	str	r2, [sp, #8]
 8003f7a:	9301      	str	r3, [sp, #4]
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	2300      	movs	r3, #0
 8003f82:	460a      	mov	r2, r1
 8003f84:	4911      	ldr	r1, [pc, #68]	@ (8003fcc <xTimerCreateTimerTask+0x88>)
 8003f86:	4812      	ldr	r0, [pc, #72]	@ (8003fd0 <xTimerCreateTimerTask+0x8c>)
 8003f88:	f7ff f8d2 	bl	8003130 <xTaskCreateStatic>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	4a11      	ldr	r2, [pc, #68]	@ (8003fd4 <xTimerCreateTimerTask+0x90>)
 8003f90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003f92:	4b10      	ldr	r3, [pc, #64]	@ (8003fd4 <xTimerCreateTimerTask+0x90>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10b      	bne.n	8003fbc <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	613b      	str	r3, [r7, #16]
}
 8003fb6:	bf00      	nop
 8003fb8:	bf00      	nop
 8003fba:	e7fd      	b.n	8003fb8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003fbc:	697b      	ldr	r3, [r7, #20]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000d50 	.word	0x20000d50
 8003fcc:	08005e70 	.word	0x08005e70
 8003fd0:	08004111 	.word	0x08004111
 8003fd4:	20000d54 	.word	0x20000d54

08003fd8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08a      	sub	sp, #40	@ 0x28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10b      	bne.n	8004008 <xTimerGenericCommand+0x30>
	__asm volatile
 8003ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	623b      	str	r3, [r7, #32]
}
 8004002:	bf00      	nop
 8004004:	bf00      	nop
 8004006:	e7fd      	b.n	8004004 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004008:	4b19      	ldr	r3, [pc, #100]	@ (8004070 <xTimerGenericCommand+0x98>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d02a      	beq.n	8004066 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b05      	cmp	r3, #5
 8004020:	dc18      	bgt.n	8004054 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004022:	f7ff fead 	bl	8003d80 <xTaskGetSchedulerState>
 8004026:	4603      	mov	r3, r0
 8004028:	2b02      	cmp	r3, #2
 800402a:	d109      	bne.n	8004040 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800402c:	4b10      	ldr	r3, [pc, #64]	@ (8004070 <xTimerGenericCommand+0x98>)
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	f107 0110 	add.w	r1, r7, #16
 8004034:	2300      	movs	r3, #0
 8004036:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004038:	f7fe fc0a 	bl	8002850 <xQueueGenericSend>
 800403c:	6278      	str	r0, [r7, #36]	@ 0x24
 800403e:	e012      	b.n	8004066 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004040:	4b0b      	ldr	r3, [pc, #44]	@ (8004070 <xTimerGenericCommand+0x98>)
 8004042:	6818      	ldr	r0, [r3, #0]
 8004044:	f107 0110 	add.w	r1, r7, #16
 8004048:	2300      	movs	r3, #0
 800404a:	2200      	movs	r2, #0
 800404c:	f7fe fc00 	bl	8002850 <xQueueGenericSend>
 8004050:	6278      	str	r0, [r7, #36]	@ 0x24
 8004052:	e008      	b.n	8004066 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004054:	4b06      	ldr	r3, [pc, #24]	@ (8004070 <xTimerGenericCommand+0x98>)
 8004056:	6818      	ldr	r0, [r3, #0]
 8004058:	f107 0110 	add.w	r1, r7, #16
 800405c:	2300      	movs	r3, #0
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	f7fe fcf8 	bl	8002a54 <xQueueGenericSendFromISR>
 8004064:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004068:	4618      	mov	r0, r3
 800406a:	3728      	adds	r7, #40	@ 0x28
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	20000d50 	.word	0x20000d50

08004074 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af02      	add	r7, sp, #8
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800407e:	4b23      	ldr	r3, [pc, #140]	@ (800410c <prvProcessExpiredTimer+0x98>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	3304      	adds	r3, #4
 800408c:	4618      	mov	r0, r3
 800408e:	f7fe fa6f 	bl	8002570 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d023      	beq.n	80040e8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	699a      	ldr	r2, [r3, #24]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	18d1      	adds	r1, r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	6978      	ldr	r0, [r7, #20]
 80040ae:	f000 f8d3 	bl	8004258 <prvInsertTimerInActiveList>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d020      	beq.n	80040fa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040b8:	2300      	movs	r3, #0
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	2300      	movs	r3, #0
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	2100      	movs	r1, #0
 80040c2:	6978      	ldr	r0, [r7, #20]
 80040c4:	f7ff ff88 	bl	8003fd8 <xTimerGenericCommand>
 80040c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d114      	bne.n	80040fa <prvProcessExpiredTimer+0x86>
	__asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	60fb      	str	r3, [r7, #12]
}
 80040e2:	bf00      	nop
 80040e4:	bf00      	nop
 80040e6:	e7fd      	b.n	80040e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	6978      	ldr	r0, [r7, #20]
 8004100:	4798      	blx	r3
}
 8004102:	bf00      	nop
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000d48 	.word	0x20000d48

08004110 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004118:	f107 0308 	add.w	r3, r7, #8
 800411c:	4618      	mov	r0, r3
 800411e:	f000 f859 	bl	80041d4 <prvGetNextExpireTime>
 8004122:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4619      	mov	r1, r3
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 f805 	bl	8004138 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800412e:	f000 f8d5 	bl	80042dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004132:	bf00      	nop
 8004134:	e7f0      	b.n	8004118 <prvTimerTask+0x8>
	...

08004138 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004142:	f7ff fa39 	bl	80035b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004146:	f107 0308 	add.w	r3, r7, #8
 800414a:	4618      	mov	r0, r3
 800414c:	f000 f864 	bl	8004218 <prvSampleTimeNow>
 8004150:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d130      	bne.n	80041ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10a      	bne.n	8004174 <prvProcessTimerOrBlockTask+0x3c>
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	429a      	cmp	r2, r3
 8004164:	d806      	bhi.n	8004174 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004166:	f7ff fa35 	bl	80035d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800416a:	68f9      	ldr	r1, [r7, #12]
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff ff81 	bl	8004074 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004172:	e024      	b.n	80041be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800417a:	4b13      	ldr	r3, [pc, #76]	@ (80041c8 <prvProcessTimerOrBlockTask+0x90>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <prvProcessTimerOrBlockTask+0x50>
 8004184:	2301      	movs	r3, #1
 8004186:	e000      	b.n	800418a <prvProcessTimerOrBlockTask+0x52>
 8004188:	2300      	movs	r3, #0
 800418a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800418c:	4b0f      	ldr	r3, [pc, #60]	@ (80041cc <prvProcessTimerOrBlockTask+0x94>)
 800418e:	6818      	ldr	r0, [r3, #0]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	4619      	mov	r1, r3
 800419a:	f7fe ff95 	bl	80030c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800419e:	f7ff fa19 	bl	80035d4 <xTaskResumeAll>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10a      	bne.n	80041be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80041a8:	4b09      	ldr	r3, [pc, #36]	@ (80041d0 <prvProcessTimerOrBlockTask+0x98>)
 80041aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	f3bf 8f6f 	isb	sy
}
 80041b8:	e001      	b.n	80041be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80041ba:	f7ff fa0b 	bl	80035d4 <xTaskResumeAll>
}
 80041be:	bf00      	nop
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20000d4c 	.word	0x20000d4c
 80041cc:	20000d50 	.word	0x20000d50
 80041d0:	e000ed04 	.word	0xe000ed04

080041d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80041dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004214 <prvGetNextExpireTime+0x40>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <prvGetNextExpireTime+0x16>
 80041e6:	2201      	movs	r2, #1
 80041e8:	e000      	b.n	80041ec <prvGetNextExpireTime+0x18>
 80041ea:	2200      	movs	r2, #0
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d105      	bne.n	8004204 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041f8:	4b06      	ldr	r3, [pc, #24]	@ (8004214 <prvGetNextExpireTime+0x40>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	e001      	b.n	8004208 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004208:	68fb      	ldr	r3, [r7, #12]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr
 8004214:	20000d48 	.word	0x20000d48

08004218 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004220:	f7ff fa76 	bl	8003710 <xTaskGetTickCount>
 8004224:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004226:	4b0b      	ldr	r3, [pc, #44]	@ (8004254 <prvSampleTimeNow+0x3c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	429a      	cmp	r2, r3
 800422e:	d205      	bcs.n	800423c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004230:	f000 f93a 	bl	80044a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	e002      	b.n	8004242 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004242:	4a04      	ldr	r2, [pc, #16]	@ (8004254 <prvSampleTimeNow+0x3c>)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004248:	68fb      	ldr	r3, [r7, #12]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20000d58 	.word	0x20000d58

08004258 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004266:	2300      	movs	r3, #0
 8004268:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	429a      	cmp	r2, r3
 800427c:	d812      	bhi.n	80042a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	1ad2      	subs	r2, r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	429a      	cmp	r2, r3
 800428a:	d302      	bcc.n	8004292 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800428c:	2301      	movs	r3, #1
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	e01b      	b.n	80042ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004292:	4b10      	ldr	r3, [pc, #64]	@ (80042d4 <prvInsertTimerInActiveList+0x7c>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3304      	adds	r3, #4
 800429a:	4619      	mov	r1, r3
 800429c:	4610      	mov	r0, r2
 800429e:	f7fe f92f 	bl	8002500 <vListInsert>
 80042a2:	e012      	b.n	80042ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d206      	bcs.n	80042ba <prvInsertTimerInActiveList+0x62>
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d302      	bcc.n	80042ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80042b4:	2301      	movs	r3, #1
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	e007      	b.n	80042ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042ba:	4b07      	ldr	r3, [pc, #28]	@ (80042d8 <prvInsertTimerInActiveList+0x80>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	3304      	adds	r3, #4
 80042c2:	4619      	mov	r1, r3
 80042c4:	4610      	mov	r0, r2
 80042c6:	f7fe f91b 	bl	8002500 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80042ca:	697b      	ldr	r3, [r7, #20]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	20000d4c 	.word	0x20000d4c
 80042d8:	20000d48 	.word	0x20000d48

080042dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08e      	sub	sp, #56	@ 0x38
 80042e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042e2:	e0ce      	b.n	8004482 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	da19      	bge.n	800431e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80042ea:	1d3b      	adds	r3, r7, #4
 80042ec:	3304      	adds	r3, #4
 80042ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80042f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10b      	bne.n	800430e <prvProcessReceivedCommands+0x32>
	__asm volatile
 80042f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	61fb      	str	r3, [r7, #28]
}
 8004308:	bf00      	nop
 800430a:	bf00      	nop
 800430c:	e7fd      	b.n	800430a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800430e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004314:	6850      	ldr	r0, [r2, #4]
 8004316:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004318:	6892      	ldr	r2, [r2, #8]
 800431a:	4611      	mov	r1, r2
 800431c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	f2c0 80ae 	blt.w	8004482 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800432a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d004      	beq.n	800433c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004334:	3304      	adds	r3, #4
 8004336:	4618      	mov	r0, r3
 8004338:	f7fe f91a 	bl	8002570 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800433c:	463b      	mov	r3, r7
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff ff6a 	bl	8004218 <prvSampleTimeNow>
 8004344:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b09      	cmp	r3, #9
 800434a:	f200 8097 	bhi.w	800447c <prvProcessReceivedCommands+0x1a0>
 800434e:	a201      	add	r2, pc, #4	@ (adr r2, 8004354 <prvProcessReceivedCommands+0x78>)
 8004350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004354:	0800437d 	.word	0x0800437d
 8004358:	0800437d 	.word	0x0800437d
 800435c:	0800437d 	.word	0x0800437d
 8004360:	080043f3 	.word	0x080043f3
 8004364:	08004407 	.word	0x08004407
 8004368:	08004453 	.word	0x08004453
 800436c:	0800437d 	.word	0x0800437d
 8004370:	0800437d 	.word	0x0800437d
 8004374:	080043f3 	.word	0x080043f3
 8004378:	08004407 	.word	0x08004407
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800437c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	b2da      	uxtb	r2, r3
 8004388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	18d1      	adds	r1, r2, r3
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800439a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800439c:	f7ff ff5c 	bl	8004258 <prvInsertTimerInActiveList>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d06c      	beq.n	8004480 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d061      	beq.n	8004480 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	441a      	add	r2, r3
 80043c4:	2300      	movs	r3, #0
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	2300      	movs	r3, #0
 80043ca:	2100      	movs	r1, #0
 80043cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043ce:	f7ff fe03 	bl	8003fd8 <xTimerGenericCommand>
 80043d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d152      	bne.n	8004480 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80043da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043de:	f383 8811 	msr	BASEPRI, r3
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	61bb      	str	r3, [r7, #24]
}
 80043ec:	bf00      	nop
 80043ee:	bf00      	nop
 80043f0:	e7fd      	b.n	80043ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043f8:	f023 0301 	bic.w	r3, r3, #1
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004400:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004404:	e03d      	b.n	8004482 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004408:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	b2da      	uxtb	r2, r3
 8004412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004414:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800441e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10b      	bne.n	800443e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	617b      	str	r3, [r7, #20]
}
 8004438:	bf00      	nop
 800443a:	bf00      	nop
 800443c:	e7fd      	b.n	800443a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800443e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004444:	18d1      	adds	r1, r2, r3
 8004446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800444a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800444c:	f7ff ff04 	bl	8004258 <prvInsertTimerInActiveList>
					break;
 8004450:	e017      	b.n	8004482 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004454:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d103      	bne.n	8004468 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004460:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004462:	f000 fb8b 	bl	8004b7c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004466:	e00c      	b.n	8004482 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800446e:	f023 0301 	bic.w	r3, r3, #1
 8004472:	b2da      	uxtb	r2, r3
 8004474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004476:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800447a:	e002      	b.n	8004482 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800447c:	bf00      	nop
 800447e:	e000      	b.n	8004482 <prvProcessReceivedCommands+0x1a6>
					break;
 8004480:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004482:	4b08      	ldr	r3, [pc, #32]	@ (80044a4 <prvProcessReceivedCommands+0x1c8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	1d39      	adds	r1, r7, #4
 8004488:	2200      	movs	r2, #0
 800448a:	4618      	mov	r0, r3
 800448c:	f7fe fb80 	bl	8002b90 <xQueueReceive>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	f47f af26 	bne.w	80042e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004498:	bf00      	nop
 800449a:	bf00      	nop
 800449c:	3730      	adds	r7, #48	@ 0x30
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20000d50 	.word	0x20000d50

080044a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044ae:	e049      	b.n	8004544 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044b0:	4b2e      	ldr	r3, [pc, #184]	@ (800456c <prvSwitchTimerLists+0xc4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044ba:	4b2c      	ldr	r3, [pc, #176]	@ (800456c <prvSwitchTimerLists+0xc4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	3304      	adds	r3, #4
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7fe f851 	bl	8002570 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d02f      	beq.n	8004544 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	4413      	add	r3, r2
 80044ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d90e      	bls.n	8004514 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004502:	4b1a      	ldr	r3, [pc, #104]	@ (800456c <prvSwitchTimerLists+0xc4>)
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3304      	adds	r3, #4
 800450a:	4619      	mov	r1, r3
 800450c:	4610      	mov	r0, r2
 800450e:	f7fd fff7 	bl	8002500 <vListInsert>
 8004512:	e017      	b.n	8004544 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004514:	2300      	movs	r3, #0
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	2300      	movs	r3, #0
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	2100      	movs	r1, #0
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f7ff fd5a 	bl	8003fd8 <xTimerGenericCommand>
 8004524:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10b      	bne.n	8004544 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800452c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004530:	f383 8811 	msr	BASEPRI, r3
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	603b      	str	r3, [r7, #0]
}
 800453e:	bf00      	nop
 8004540:	bf00      	nop
 8004542:	e7fd      	b.n	8004540 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004544:	4b09      	ldr	r3, [pc, #36]	@ (800456c <prvSwitchTimerLists+0xc4>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1b0      	bne.n	80044b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800454e:	4b07      	ldr	r3, [pc, #28]	@ (800456c <prvSwitchTimerLists+0xc4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004554:	4b06      	ldr	r3, [pc, #24]	@ (8004570 <prvSwitchTimerLists+0xc8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a04      	ldr	r2, [pc, #16]	@ (800456c <prvSwitchTimerLists+0xc4>)
 800455a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800455c:	4a04      	ldr	r2, [pc, #16]	@ (8004570 <prvSwitchTimerLists+0xc8>)
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	6013      	str	r3, [r2, #0]
}
 8004562:	bf00      	nop
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20000d48 	.word	0x20000d48
 8004570:	20000d4c 	.word	0x20000d4c

08004574 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800457a:	f000 f92f 	bl	80047dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800457e:	4b15      	ldr	r3, [pc, #84]	@ (80045d4 <prvCheckForValidListAndQueue+0x60>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d120      	bne.n	80045c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004586:	4814      	ldr	r0, [pc, #80]	@ (80045d8 <prvCheckForValidListAndQueue+0x64>)
 8004588:	f7fd ff6c 	bl	8002464 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800458c:	4813      	ldr	r0, [pc, #76]	@ (80045dc <prvCheckForValidListAndQueue+0x68>)
 800458e:	f7fd ff69 	bl	8002464 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004592:	4b13      	ldr	r3, [pc, #76]	@ (80045e0 <prvCheckForValidListAndQueue+0x6c>)
 8004594:	4a10      	ldr	r2, [pc, #64]	@ (80045d8 <prvCheckForValidListAndQueue+0x64>)
 8004596:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004598:	4b12      	ldr	r3, [pc, #72]	@ (80045e4 <prvCheckForValidListAndQueue+0x70>)
 800459a:	4a10      	ldr	r2, [pc, #64]	@ (80045dc <prvCheckForValidListAndQueue+0x68>)
 800459c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800459e:	2300      	movs	r3, #0
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	4b11      	ldr	r3, [pc, #68]	@ (80045e8 <prvCheckForValidListAndQueue+0x74>)
 80045a4:	4a11      	ldr	r2, [pc, #68]	@ (80045ec <prvCheckForValidListAndQueue+0x78>)
 80045a6:	2110      	movs	r1, #16
 80045a8:	200a      	movs	r0, #10
 80045aa:	f7fe f875 	bl	8002698 <xQueueGenericCreateStatic>
 80045ae:	4603      	mov	r3, r0
 80045b0:	4a08      	ldr	r2, [pc, #32]	@ (80045d4 <prvCheckForValidListAndQueue+0x60>)
 80045b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80045b4:	4b07      	ldr	r3, [pc, #28]	@ (80045d4 <prvCheckForValidListAndQueue+0x60>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80045bc:	4b05      	ldr	r3, [pc, #20]	@ (80045d4 <prvCheckForValidListAndQueue+0x60>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	490b      	ldr	r1, [pc, #44]	@ (80045f0 <prvCheckForValidListAndQueue+0x7c>)
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fe fd58 	bl	8003078 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045c8:	f000 f938 	bl	800483c <vPortExitCritical>
}
 80045cc:	bf00      	nop
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000d50 	.word	0x20000d50
 80045d8:	20000d20 	.word	0x20000d20
 80045dc:	20000d34 	.word	0x20000d34
 80045e0:	20000d48 	.word	0x20000d48
 80045e4:	20000d4c 	.word	0x20000d4c
 80045e8:	20000dfc 	.word	0x20000dfc
 80045ec:	20000d5c 	.word	0x20000d5c
 80045f0:	08005e78 	.word	0x08005e78

080045f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	3b04      	subs	r3, #4
 8004604:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800460c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3b04      	subs	r3, #4
 8004612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f023 0201 	bic.w	r2, r3, #1
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3b04      	subs	r3, #4
 8004622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004624:	4a08      	ldr	r2, [pc, #32]	@ (8004648 <pxPortInitialiseStack+0x54>)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3b14      	subs	r3, #20
 800462e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3b20      	subs	r3, #32
 800463a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800463c:	68fb      	ldr	r3, [r7, #12]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr
 8004648:	0800464d 	.word	0x0800464d

0800464c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004652:	2300      	movs	r3, #0
 8004654:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004656:	4b12      	ldr	r3, [pc, #72]	@ (80046a0 <prvTaskExitError+0x54>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465e:	d00b      	beq.n	8004678 <prvTaskExitError+0x2c>
	__asm volatile
 8004660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004664:	f383 8811 	msr	BASEPRI, r3
 8004668:	f3bf 8f6f 	isb	sy
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	60fb      	str	r3, [r7, #12]
}
 8004672:	bf00      	nop
 8004674:	bf00      	nop
 8004676:	e7fd      	b.n	8004674 <prvTaskExitError+0x28>
	__asm volatile
 8004678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467c:	f383 8811 	msr	BASEPRI, r3
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	60bb      	str	r3, [r7, #8]
}
 800468a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800468c:	bf00      	nop
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0fc      	beq.n	800468e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004694:	bf00      	nop
 8004696:	bf00      	nop
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr
 80046a0:	20000034 	.word	0x20000034
	...

080046b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80046b0:	4b07      	ldr	r3, [pc, #28]	@ (80046d0 <pxCurrentTCBConst2>)
 80046b2:	6819      	ldr	r1, [r3, #0]
 80046b4:	6808      	ldr	r0, [r1, #0]
 80046b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80046ba:	f380 8809 	msr	PSP, r0
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f04f 0000 	mov.w	r0, #0
 80046c6:	f380 8811 	msr	BASEPRI, r0
 80046ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80046ce:	4770      	bx	lr

080046d0 <pxCurrentTCBConst2>:
 80046d0:	20000820 	.word	0x20000820
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80046d4:	bf00      	nop
 80046d6:	bf00      	nop

080046d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80046d8:	4806      	ldr	r0, [pc, #24]	@ (80046f4 <prvPortStartFirstTask+0x1c>)
 80046da:	6800      	ldr	r0, [r0, #0]
 80046dc:	6800      	ldr	r0, [r0, #0]
 80046de:	f380 8808 	msr	MSP, r0
 80046e2:	b662      	cpsie	i
 80046e4:	b661      	cpsie	f
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	df00      	svc	0
 80046f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046f2:	bf00      	nop
 80046f4:	e000ed08 	.word	0xe000ed08

080046f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046fe:	4b32      	ldr	r3, [pc, #200]	@ (80047c8 <xPortStartScheduler+0xd0>)
 8004700:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	b2db      	uxtb	r3, r3
 8004708:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	22ff      	movs	r2, #255	@ 0xff
 800470e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	b2db      	uxtb	r3, r3
 800471c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004720:	b2da      	uxtb	r2, r3
 8004722:	4b2a      	ldr	r3, [pc, #168]	@ (80047cc <xPortStartScheduler+0xd4>)
 8004724:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004726:	4b2a      	ldr	r3, [pc, #168]	@ (80047d0 <xPortStartScheduler+0xd8>)
 8004728:	2207      	movs	r2, #7
 800472a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800472c:	e009      	b.n	8004742 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800472e:	4b28      	ldr	r3, [pc, #160]	@ (80047d0 <xPortStartScheduler+0xd8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3b01      	subs	r3, #1
 8004734:	4a26      	ldr	r2, [pc, #152]	@ (80047d0 <xPortStartScheduler+0xd8>)
 8004736:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	b2db      	uxtb	r3, r3
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	b2db      	uxtb	r3, r3
 8004740:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004742:	78fb      	ldrb	r3, [r7, #3]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800474a:	2b80      	cmp	r3, #128	@ 0x80
 800474c:	d0ef      	beq.n	800472e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800474e:	4b20      	ldr	r3, [pc, #128]	@ (80047d0 <xPortStartScheduler+0xd8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f1c3 0307 	rsb	r3, r3, #7
 8004756:	2b04      	cmp	r3, #4
 8004758:	d00b      	beq.n	8004772 <xPortStartScheduler+0x7a>
	__asm volatile
 800475a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800475e:	f383 8811 	msr	BASEPRI, r3
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	60bb      	str	r3, [r7, #8]
}
 800476c:	bf00      	nop
 800476e:	bf00      	nop
 8004770:	e7fd      	b.n	800476e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004772:	4b17      	ldr	r3, [pc, #92]	@ (80047d0 <xPortStartScheduler+0xd8>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	021b      	lsls	r3, r3, #8
 8004778:	4a15      	ldr	r2, [pc, #84]	@ (80047d0 <xPortStartScheduler+0xd8>)
 800477a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800477c:	4b14      	ldr	r3, [pc, #80]	@ (80047d0 <xPortStartScheduler+0xd8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004784:	4a12      	ldr	r2, [pc, #72]	@ (80047d0 <xPortStartScheduler+0xd8>)
 8004786:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	b2da      	uxtb	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004790:	4b10      	ldr	r3, [pc, #64]	@ (80047d4 <xPortStartScheduler+0xdc>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a0f      	ldr	r2, [pc, #60]	@ (80047d4 <xPortStartScheduler+0xdc>)
 8004796:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800479a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800479c:	4b0d      	ldr	r3, [pc, #52]	@ (80047d4 <xPortStartScheduler+0xdc>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a0c      	ldr	r2, [pc, #48]	@ (80047d4 <xPortStartScheduler+0xdc>)
 80047a2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80047a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047a8:	f000 f8b8 	bl	800491c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047ac:	4b0a      	ldr	r3, [pc, #40]	@ (80047d8 <xPortStartScheduler+0xe0>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80047b2:	f7ff ff91 	bl	80046d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047b6:	f7ff f873 	bl	80038a0 <vTaskSwitchContext>
	prvTaskExitError();
 80047ba:	f7ff ff47 	bl	800464c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	e000e400 	.word	0xe000e400
 80047cc:	20000e4c 	.word	0x20000e4c
 80047d0:	20000e50 	.word	0x20000e50
 80047d4:	e000ed20 	.word	0xe000ed20
 80047d8:	20000034 	.word	0x20000034

080047dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
	__asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	607b      	str	r3, [r7, #4]
}
 80047f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004834 <vPortEnterCritical+0x58>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3301      	adds	r3, #1
 80047fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004834 <vPortEnterCritical+0x58>)
 80047fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004800:	4b0c      	ldr	r3, [pc, #48]	@ (8004834 <vPortEnterCritical+0x58>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d110      	bne.n	800482a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004808:	4b0b      	ldr	r3, [pc, #44]	@ (8004838 <vPortEnterCritical+0x5c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00b      	beq.n	800482a <vPortEnterCritical+0x4e>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	603b      	str	r3, [r7, #0]
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop
 8004828:	e7fd      	b.n	8004826 <vPortEnterCritical+0x4a>
	}
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	bc80      	pop	{r7}
 8004832:	4770      	bx	lr
 8004834:	20000034 	.word	0x20000034
 8004838:	e000ed04 	.word	0xe000ed04

0800483c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004842:	4b12      	ldr	r3, [pc, #72]	@ (800488c <vPortExitCritical+0x50>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10b      	bne.n	8004862 <vPortExitCritical+0x26>
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	607b      	str	r3, [r7, #4]
}
 800485c:	bf00      	nop
 800485e:	bf00      	nop
 8004860:	e7fd      	b.n	800485e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004862:	4b0a      	ldr	r3, [pc, #40]	@ (800488c <vPortExitCritical+0x50>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3b01      	subs	r3, #1
 8004868:	4a08      	ldr	r2, [pc, #32]	@ (800488c <vPortExitCritical+0x50>)
 800486a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800486c:	4b07      	ldr	r3, [pc, #28]	@ (800488c <vPortExitCritical+0x50>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d105      	bne.n	8004880 <vPortExitCritical+0x44>
 8004874:	2300      	movs	r3, #0
 8004876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	f383 8811 	msr	BASEPRI, r3
}
 800487e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	bc80      	pop	{r7}
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	20000034 	.word	0x20000034

08004890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004890:	f3ef 8009 	mrs	r0, PSP
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	4b0d      	ldr	r3, [pc, #52]	@ (80048d0 <pxCurrentTCBConst>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80048a0:	6010      	str	r0, [r2, #0]
 80048a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80048a6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80048aa:	f380 8811 	msr	BASEPRI, r0
 80048ae:	f7fe fff7 	bl	80038a0 <vTaskSwitchContext>
 80048b2:	f04f 0000 	mov.w	r0, #0
 80048b6:	f380 8811 	msr	BASEPRI, r0
 80048ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80048be:	6819      	ldr	r1, [r3, #0]
 80048c0:	6808      	ldr	r0, [r1, #0]
 80048c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80048c6:	f380 8809 	msr	PSP, r0
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	4770      	bx	lr

080048d0 <pxCurrentTCBConst>:
 80048d0:	20000820 	.word	0x20000820
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80048d4:	bf00      	nop
 80048d6:	bf00      	nop

080048d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
	__asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	607b      	str	r3, [r7, #4]
}
 80048f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80048f2:	f7fe ff1b 	bl	800372c <xTaskIncrementTick>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048fc:	4b06      	ldr	r3, [pc, #24]	@ (8004918 <xPortSysTickHandler+0x40>)
 80048fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	2300      	movs	r3, #0
 8004906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	f383 8811 	msr	BASEPRI, r3
}
 800490e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004910:	bf00      	nop
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	e000ed04 	.word	0xe000ed04

0800491c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004920:	4b0a      	ldr	r3, [pc, #40]	@ (800494c <vPortSetupTimerInterrupt+0x30>)
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004926:	4b0a      	ldr	r3, [pc, #40]	@ (8004950 <vPortSetupTimerInterrupt+0x34>)
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800492c:	4b09      	ldr	r3, [pc, #36]	@ (8004954 <vPortSetupTimerInterrupt+0x38>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a09      	ldr	r2, [pc, #36]	@ (8004958 <vPortSetupTimerInterrupt+0x3c>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	099b      	lsrs	r3, r3, #6
 8004938:	4a08      	ldr	r2, [pc, #32]	@ (800495c <vPortSetupTimerInterrupt+0x40>)
 800493a:	3b01      	subs	r3, #1
 800493c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800493e:	4b03      	ldr	r3, [pc, #12]	@ (800494c <vPortSetupTimerInterrupt+0x30>)
 8004940:	2207      	movs	r2, #7
 8004942:	601a      	str	r2, [r3, #0]
}
 8004944:	bf00      	nop
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr
 800494c:	e000e010 	.word	0xe000e010
 8004950:	e000e018 	.word	0xe000e018
 8004954:	20000028 	.word	0x20000028
 8004958:	10624dd3 	.word	0x10624dd3
 800495c:	e000e014 	.word	0xe000e014

08004960 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004966:	f3ef 8305 	mrs	r3, IPSR
 800496a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b0f      	cmp	r3, #15
 8004970:	d915      	bls.n	800499e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004972:	4a17      	ldr	r2, [pc, #92]	@ (80049d0 <vPortValidateInterruptPriority+0x70>)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4413      	add	r3, r2
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800497c:	4b15      	ldr	r3, [pc, #84]	@ (80049d4 <vPortValidateInterruptPriority+0x74>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	7afa      	ldrb	r2, [r7, #11]
 8004982:	429a      	cmp	r2, r3
 8004984:	d20b      	bcs.n	800499e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	607b      	str	r3, [r7, #4]
}
 8004998:	bf00      	nop
 800499a:	bf00      	nop
 800499c:	e7fd      	b.n	800499a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800499e:	4b0e      	ldr	r3, [pc, #56]	@ (80049d8 <vPortValidateInterruptPriority+0x78>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80049a6:	4b0d      	ldr	r3, [pc, #52]	@ (80049dc <vPortValidateInterruptPriority+0x7c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d90b      	bls.n	80049c6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	603b      	str	r3, [r7, #0]
}
 80049c0:	bf00      	nop
 80049c2:	bf00      	nop
 80049c4:	e7fd      	b.n	80049c2 <vPortValidateInterruptPriority+0x62>
	}
 80049c6:	bf00      	nop
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bc80      	pop	{r7}
 80049ce:	4770      	bx	lr
 80049d0:	e000e3f0 	.word	0xe000e3f0
 80049d4:	20000e4c 	.word	0x20000e4c
 80049d8:	e000ed0c 	.word	0xe000ed0c
 80049dc:	20000e50 	.word	0x20000e50

080049e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08a      	sub	sp, #40	@ 0x28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80049e8:	2300      	movs	r3, #0
 80049ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80049ec:	f7fe fde4 	bl	80035b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80049f0:	4b5c      	ldr	r3, [pc, #368]	@ (8004b64 <pvPortMalloc+0x184>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80049f8:	f000 f924 	bl	8004c44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80049fc:	4b5a      	ldr	r3, [pc, #360]	@ (8004b68 <pvPortMalloc+0x188>)
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4013      	ands	r3, r2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f040 8095 	bne.w	8004b34 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01e      	beq.n	8004a4e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004a10:	2208      	movs	r2, #8
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4413      	add	r3, r2
 8004a16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d015      	beq.n	8004a4e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f023 0307 	bic.w	r3, r3, #7
 8004a28:	3308      	adds	r3, #8
 8004a2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00b      	beq.n	8004a4e <pvPortMalloc+0x6e>
	__asm volatile
 8004a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a3a:	f383 8811 	msr	BASEPRI, r3
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	617b      	str	r3, [r7, #20]
}
 8004a48:	bf00      	nop
 8004a4a:	bf00      	nop
 8004a4c:	e7fd      	b.n	8004a4a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d06f      	beq.n	8004b34 <pvPortMalloc+0x154>
 8004a54:	4b45      	ldr	r3, [pc, #276]	@ (8004b6c <pvPortMalloc+0x18c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d86a      	bhi.n	8004b34 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a5e:	4b44      	ldr	r3, [pc, #272]	@ (8004b70 <pvPortMalloc+0x190>)
 8004a60:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a62:	4b43      	ldr	r3, [pc, #268]	@ (8004b70 <pvPortMalloc+0x190>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a68:	e004      	b.n	8004a74 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d903      	bls.n	8004a86 <pvPortMalloc+0xa6>
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f1      	bne.n	8004a6a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a86:	4b37      	ldr	r3, [pc, #220]	@ (8004b64 <pvPortMalloc+0x184>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d051      	beq.n	8004b34 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2208      	movs	r2, #8
 8004a96:	4413      	add	r3, r2
 8004a98:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	1ad2      	subs	r2, r2, r3
 8004aaa:	2308      	movs	r3, #8
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d920      	bls.n	8004af4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00b      	beq.n	8004adc <pvPortMalloc+0xfc>
	__asm volatile
 8004ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	613b      	str	r3, [r7, #16]
}
 8004ad6:	bf00      	nop
 8004ad8:	bf00      	nop
 8004ada:	e7fd      	b.n	8004ad8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	1ad2      	subs	r2, r2, r3
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004aee:	69b8      	ldr	r0, [r7, #24]
 8004af0:	f000 f90a 	bl	8004d08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004af4:	4b1d      	ldr	r3, [pc, #116]	@ (8004b6c <pvPortMalloc+0x18c>)
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	4a1b      	ldr	r2, [pc, #108]	@ (8004b6c <pvPortMalloc+0x18c>)
 8004b00:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b02:	4b1a      	ldr	r3, [pc, #104]	@ (8004b6c <pvPortMalloc+0x18c>)
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	4b1b      	ldr	r3, [pc, #108]	@ (8004b74 <pvPortMalloc+0x194>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d203      	bcs.n	8004b16 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b0e:	4b17      	ldr	r3, [pc, #92]	@ (8004b6c <pvPortMalloc+0x18c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a18      	ldr	r2, [pc, #96]	@ (8004b74 <pvPortMalloc+0x194>)
 8004b14:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	4b13      	ldr	r3, [pc, #76]	@ (8004b68 <pvPortMalloc+0x188>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b22:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b2a:	4b13      	ldr	r3, [pc, #76]	@ (8004b78 <pvPortMalloc+0x198>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	4a11      	ldr	r2, [pc, #68]	@ (8004b78 <pvPortMalloc+0x198>)
 8004b32:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b34:	f7fe fd4e 	bl	80035d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00b      	beq.n	8004b5a <pvPortMalloc+0x17a>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	60fb      	str	r3, [r7, #12]
}
 8004b54:	bf00      	nop
 8004b56:	bf00      	nop
 8004b58:	e7fd      	b.n	8004b56 <pvPortMalloc+0x176>
	return pvReturn;
 8004b5a:	69fb      	ldr	r3, [r7, #28]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3728      	adds	r7, #40	@ 0x28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	20001a5c 	.word	0x20001a5c
 8004b68:	20001a70 	.word	0x20001a70
 8004b6c:	20001a60 	.word	0x20001a60
 8004b70:	20001a54 	.word	0x20001a54
 8004b74:	20001a64 	.word	0x20001a64
 8004b78:	20001a68 	.word	0x20001a68

08004b7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d04f      	beq.n	8004c2e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b8e:	2308      	movs	r3, #8
 8004b90:	425b      	negs	r3, r3
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4413      	add	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	4b25      	ldr	r3, [pc, #148]	@ (8004c38 <vPortFree+0xbc>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10b      	bne.n	8004bc2 <vPortFree+0x46>
	__asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	60fb      	str	r3, [r7, #12]
}
 8004bbc:	bf00      	nop
 8004bbe:	bf00      	nop
 8004bc0:	e7fd      	b.n	8004bbe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00b      	beq.n	8004be2 <vPortFree+0x66>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	60bb      	str	r3, [r7, #8]
}
 8004bdc:	bf00      	nop
 8004bde:	bf00      	nop
 8004be0:	e7fd      	b.n	8004bde <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	4b14      	ldr	r3, [pc, #80]	@ (8004c38 <vPortFree+0xbc>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4013      	ands	r3, r2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d01e      	beq.n	8004c2e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d11a      	bne.n	8004c2e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8004c38 <vPortFree+0xbc>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	43db      	mvns	r3, r3
 8004c02:	401a      	ands	r2, r3
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c08:	f7fe fcd6 	bl	80035b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	4b0a      	ldr	r3, [pc, #40]	@ (8004c3c <vPortFree+0xc0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4413      	add	r3, r2
 8004c16:	4a09      	ldr	r2, [pc, #36]	@ (8004c3c <vPortFree+0xc0>)
 8004c18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c1a:	6938      	ldr	r0, [r7, #16]
 8004c1c:	f000 f874 	bl	8004d08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c20:	4b07      	ldr	r3, [pc, #28]	@ (8004c40 <vPortFree+0xc4>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3301      	adds	r3, #1
 8004c26:	4a06      	ldr	r2, [pc, #24]	@ (8004c40 <vPortFree+0xc4>)
 8004c28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c2a:	f7fe fcd3 	bl	80035d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c2e:	bf00      	nop
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	20001a70 	.word	0x20001a70
 8004c3c:	20001a60 	.word	0x20001a60
 8004c40:	20001a6c 	.word	0x20001a6c

08004c44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c4a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004c4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c50:	4b27      	ldr	r3, [pc, #156]	@ (8004cf0 <prvHeapInit+0xac>)
 8004c52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00c      	beq.n	8004c78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3307      	adds	r3, #7
 8004c62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f023 0307 	bic.w	r3, r3, #7
 8004c6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	4a1f      	ldr	r2, [pc, #124]	@ (8004cf0 <prvHeapInit+0xac>)
 8004c74:	4413      	add	r3, r2
 8004c76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004cf4 <prvHeapInit+0xb0>)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c82:	4b1c      	ldr	r3, [pc, #112]	@ (8004cf4 <prvHeapInit+0xb0>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c90:	2208      	movs	r2, #8
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	1a9b      	subs	r3, r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0307 	bic.w	r3, r3, #7
 8004c9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4a15      	ldr	r2, [pc, #84]	@ (8004cf8 <prvHeapInit+0xb4>)
 8004ca4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ca6:	4b14      	ldr	r3, [pc, #80]	@ (8004cf8 <prvHeapInit+0xb4>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2200      	movs	r2, #0
 8004cac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cae:	4b12      	ldr	r3, [pc, #72]	@ (8004cf8 <prvHeapInit+0xb4>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	1ad2      	subs	r2, r2, r3
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004cf8 <prvHeapInit+0xb4>)
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8004cfc <prvHeapInit+0xb8>)
 8004cd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	4a09      	ldr	r2, [pc, #36]	@ (8004d00 <prvHeapInit+0xbc>)
 8004cda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004cdc:	4b09      	ldr	r3, [pc, #36]	@ (8004d04 <prvHeapInit+0xc0>)
 8004cde:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004ce2:	601a      	str	r2, [r3, #0]
}
 8004ce4:	bf00      	nop
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bc80      	pop	{r7}
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	20000e54 	.word	0x20000e54
 8004cf4:	20001a54 	.word	0x20001a54
 8004cf8:	20001a5c 	.word	0x20001a5c
 8004cfc:	20001a64 	.word	0x20001a64
 8004d00:	20001a60 	.word	0x20001a60
 8004d04:	20001a70 	.word	0x20001a70

08004d08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d10:	4b27      	ldr	r3, [pc, #156]	@ (8004db0 <prvInsertBlockIntoFreeList+0xa8>)
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	e002      	b.n	8004d1c <prvInsertBlockIntoFreeList+0x14>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d8f7      	bhi.n	8004d16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	4413      	add	r3, r2
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d108      	bne.n	8004d4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	441a      	add	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	441a      	add	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d118      	bne.n	8004d90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	4b14      	ldr	r3, [pc, #80]	@ (8004db4 <prvInsertBlockIntoFreeList+0xac>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d00d      	beq.n	8004d86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	441a      	add	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	e008      	b.n	8004d98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d86:	4b0b      	ldr	r3, [pc, #44]	@ (8004db4 <prvInsertBlockIntoFreeList+0xac>)
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	e003      	b.n	8004d98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d002      	beq.n	8004da6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004da6:	bf00      	nop
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bc80      	pop	{r7}
 8004dae:	4770      	bx	lr
 8004db0:	20001a54 	.word	0x20001a54
 8004db4:	20001a5c 	.word	0x20001a5c

08004db8 <std>:
 8004db8:	2300      	movs	r3, #0
 8004dba:	b510      	push	{r4, lr}
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8004dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dc6:	6083      	str	r3, [r0, #8]
 8004dc8:	8181      	strh	r1, [r0, #12]
 8004dca:	6643      	str	r3, [r0, #100]	@ 0x64
 8004dcc:	81c2      	strh	r2, [r0, #14]
 8004dce:	6183      	str	r3, [r0, #24]
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	2208      	movs	r2, #8
 8004dd4:	305c      	adds	r0, #92	@ 0x5c
 8004dd6:	f000 f9f9 	bl	80051cc <memset>
 8004dda:	4b0d      	ldr	r3, [pc, #52]	@ (8004e10 <std+0x58>)
 8004ddc:	6224      	str	r4, [r4, #32]
 8004dde:	6263      	str	r3, [r4, #36]	@ 0x24
 8004de0:	4b0c      	ldr	r3, [pc, #48]	@ (8004e14 <std+0x5c>)
 8004de2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004de4:	4b0c      	ldr	r3, [pc, #48]	@ (8004e18 <std+0x60>)
 8004de6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004de8:	4b0c      	ldr	r3, [pc, #48]	@ (8004e1c <std+0x64>)
 8004dea:	6323      	str	r3, [r4, #48]	@ 0x30
 8004dec:	4b0c      	ldr	r3, [pc, #48]	@ (8004e20 <std+0x68>)
 8004dee:	429c      	cmp	r4, r3
 8004df0:	d006      	beq.n	8004e00 <std+0x48>
 8004df2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004df6:	4294      	cmp	r4, r2
 8004df8:	d002      	beq.n	8004e00 <std+0x48>
 8004dfa:	33d0      	adds	r3, #208	@ 0xd0
 8004dfc:	429c      	cmp	r4, r3
 8004dfe:	d105      	bne.n	8004e0c <std+0x54>
 8004e00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e08:	f000 ba58 	b.w	80052bc <__retarget_lock_init_recursive>
 8004e0c:	bd10      	pop	{r4, pc}
 8004e0e:	bf00      	nop
 8004e10:	0800501d 	.word	0x0800501d
 8004e14:	0800503f 	.word	0x0800503f
 8004e18:	08005077 	.word	0x08005077
 8004e1c:	0800509b 	.word	0x0800509b
 8004e20:	20001a74 	.word	0x20001a74

08004e24 <stdio_exit_handler>:
 8004e24:	4a02      	ldr	r2, [pc, #8]	@ (8004e30 <stdio_exit_handler+0xc>)
 8004e26:	4903      	ldr	r1, [pc, #12]	@ (8004e34 <stdio_exit_handler+0x10>)
 8004e28:	4803      	ldr	r0, [pc, #12]	@ (8004e38 <stdio_exit_handler+0x14>)
 8004e2a:	f000 b869 	b.w	8004f00 <_fwalk_sglue>
 8004e2e:	bf00      	nop
 8004e30:	20000038 	.word	0x20000038
 8004e34:	08005b6d 	.word	0x08005b6d
 8004e38:	20000048 	.word	0x20000048

08004e3c <cleanup_stdio>:
 8004e3c:	6841      	ldr	r1, [r0, #4]
 8004e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004e70 <cleanup_stdio+0x34>)
 8004e40:	b510      	push	{r4, lr}
 8004e42:	4299      	cmp	r1, r3
 8004e44:	4604      	mov	r4, r0
 8004e46:	d001      	beq.n	8004e4c <cleanup_stdio+0x10>
 8004e48:	f000 fe90 	bl	8005b6c <_fflush_r>
 8004e4c:	68a1      	ldr	r1, [r4, #8]
 8004e4e:	4b09      	ldr	r3, [pc, #36]	@ (8004e74 <cleanup_stdio+0x38>)
 8004e50:	4299      	cmp	r1, r3
 8004e52:	d002      	beq.n	8004e5a <cleanup_stdio+0x1e>
 8004e54:	4620      	mov	r0, r4
 8004e56:	f000 fe89 	bl	8005b6c <_fflush_r>
 8004e5a:	68e1      	ldr	r1, [r4, #12]
 8004e5c:	4b06      	ldr	r3, [pc, #24]	@ (8004e78 <cleanup_stdio+0x3c>)
 8004e5e:	4299      	cmp	r1, r3
 8004e60:	d004      	beq.n	8004e6c <cleanup_stdio+0x30>
 8004e62:	4620      	mov	r0, r4
 8004e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e68:	f000 be80 	b.w	8005b6c <_fflush_r>
 8004e6c:	bd10      	pop	{r4, pc}
 8004e6e:	bf00      	nop
 8004e70:	20001a74 	.word	0x20001a74
 8004e74:	20001adc 	.word	0x20001adc
 8004e78:	20001b44 	.word	0x20001b44

08004e7c <global_stdio_init.part.0>:
 8004e7c:	b510      	push	{r4, lr}
 8004e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004eac <global_stdio_init.part.0+0x30>)
 8004e80:	4c0b      	ldr	r4, [pc, #44]	@ (8004eb0 <global_stdio_init.part.0+0x34>)
 8004e82:	4a0c      	ldr	r2, [pc, #48]	@ (8004eb4 <global_stdio_init.part.0+0x38>)
 8004e84:	4620      	mov	r0, r4
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	2104      	movs	r1, #4
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f7ff ff94 	bl	8004db8 <std>
 8004e90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e94:	2201      	movs	r2, #1
 8004e96:	2109      	movs	r1, #9
 8004e98:	f7ff ff8e 	bl	8004db8 <std>
 8004e9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ea6:	2112      	movs	r1, #18
 8004ea8:	f7ff bf86 	b.w	8004db8 <std>
 8004eac:	20001bac 	.word	0x20001bac
 8004eb0:	20001a74 	.word	0x20001a74
 8004eb4:	08004e25 	.word	0x08004e25

08004eb8 <__sfp_lock_acquire>:
 8004eb8:	4801      	ldr	r0, [pc, #4]	@ (8004ec0 <__sfp_lock_acquire+0x8>)
 8004eba:	f000 ba00 	b.w	80052be <__retarget_lock_acquire_recursive>
 8004ebe:	bf00      	nop
 8004ec0:	20001bb5 	.word	0x20001bb5

08004ec4 <__sfp_lock_release>:
 8004ec4:	4801      	ldr	r0, [pc, #4]	@ (8004ecc <__sfp_lock_release+0x8>)
 8004ec6:	f000 b9fb 	b.w	80052c0 <__retarget_lock_release_recursive>
 8004eca:	bf00      	nop
 8004ecc:	20001bb5 	.word	0x20001bb5

08004ed0 <__sinit>:
 8004ed0:	b510      	push	{r4, lr}
 8004ed2:	4604      	mov	r4, r0
 8004ed4:	f7ff fff0 	bl	8004eb8 <__sfp_lock_acquire>
 8004ed8:	6a23      	ldr	r3, [r4, #32]
 8004eda:	b11b      	cbz	r3, 8004ee4 <__sinit+0x14>
 8004edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ee0:	f7ff bff0 	b.w	8004ec4 <__sfp_lock_release>
 8004ee4:	4b04      	ldr	r3, [pc, #16]	@ (8004ef8 <__sinit+0x28>)
 8004ee6:	6223      	str	r3, [r4, #32]
 8004ee8:	4b04      	ldr	r3, [pc, #16]	@ (8004efc <__sinit+0x2c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1f5      	bne.n	8004edc <__sinit+0xc>
 8004ef0:	f7ff ffc4 	bl	8004e7c <global_stdio_init.part.0>
 8004ef4:	e7f2      	b.n	8004edc <__sinit+0xc>
 8004ef6:	bf00      	nop
 8004ef8:	08004e3d 	.word	0x08004e3d
 8004efc:	20001bac 	.word	0x20001bac

08004f00 <_fwalk_sglue>:
 8004f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f04:	4607      	mov	r7, r0
 8004f06:	4688      	mov	r8, r1
 8004f08:	4614      	mov	r4, r2
 8004f0a:	2600      	movs	r6, #0
 8004f0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f10:	f1b9 0901 	subs.w	r9, r9, #1
 8004f14:	d505      	bpl.n	8004f22 <_fwalk_sglue+0x22>
 8004f16:	6824      	ldr	r4, [r4, #0]
 8004f18:	2c00      	cmp	r4, #0
 8004f1a:	d1f7      	bne.n	8004f0c <_fwalk_sglue+0xc>
 8004f1c:	4630      	mov	r0, r6
 8004f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f22:	89ab      	ldrh	r3, [r5, #12]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d907      	bls.n	8004f38 <_fwalk_sglue+0x38>
 8004f28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	d003      	beq.n	8004f38 <_fwalk_sglue+0x38>
 8004f30:	4629      	mov	r1, r5
 8004f32:	4638      	mov	r0, r7
 8004f34:	47c0      	blx	r8
 8004f36:	4306      	orrs	r6, r0
 8004f38:	3568      	adds	r5, #104	@ 0x68
 8004f3a:	e7e9      	b.n	8004f10 <_fwalk_sglue+0x10>

08004f3c <iprintf>:
 8004f3c:	b40f      	push	{r0, r1, r2, r3}
 8004f3e:	b507      	push	{r0, r1, r2, lr}
 8004f40:	4906      	ldr	r1, [pc, #24]	@ (8004f5c <iprintf+0x20>)
 8004f42:	ab04      	add	r3, sp, #16
 8004f44:	6808      	ldr	r0, [r1, #0]
 8004f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f4a:	6881      	ldr	r1, [r0, #8]
 8004f4c:	9301      	str	r3, [sp, #4]
 8004f4e:	f000 fae5 	bl	800551c <_vfiprintf_r>
 8004f52:	b003      	add	sp, #12
 8004f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f58:	b004      	add	sp, #16
 8004f5a:	4770      	bx	lr
 8004f5c:	20000044 	.word	0x20000044

08004f60 <_puts_r>:
 8004f60:	6a03      	ldr	r3, [r0, #32]
 8004f62:	b570      	push	{r4, r5, r6, lr}
 8004f64:	4605      	mov	r5, r0
 8004f66:	460e      	mov	r6, r1
 8004f68:	6884      	ldr	r4, [r0, #8]
 8004f6a:	b90b      	cbnz	r3, 8004f70 <_puts_r+0x10>
 8004f6c:	f7ff ffb0 	bl	8004ed0 <__sinit>
 8004f70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f72:	07db      	lsls	r3, r3, #31
 8004f74:	d405      	bmi.n	8004f82 <_puts_r+0x22>
 8004f76:	89a3      	ldrh	r3, [r4, #12]
 8004f78:	0598      	lsls	r0, r3, #22
 8004f7a:	d402      	bmi.n	8004f82 <_puts_r+0x22>
 8004f7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f7e:	f000 f99e 	bl	80052be <__retarget_lock_acquire_recursive>
 8004f82:	89a3      	ldrh	r3, [r4, #12]
 8004f84:	0719      	lsls	r1, r3, #28
 8004f86:	d502      	bpl.n	8004f8e <_puts_r+0x2e>
 8004f88:	6923      	ldr	r3, [r4, #16]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d135      	bne.n	8004ffa <_puts_r+0x9a>
 8004f8e:	4621      	mov	r1, r4
 8004f90:	4628      	mov	r0, r5
 8004f92:	f000 f8c5 	bl	8005120 <__swsetup_r>
 8004f96:	b380      	cbz	r0, 8004ffa <_puts_r+0x9a>
 8004f98:	f04f 35ff 	mov.w	r5, #4294967295
 8004f9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f9e:	07da      	lsls	r2, r3, #31
 8004fa0:	d405      	bmi.n	8004fae <_puts_r+0x4e>
 8004fa2:	89a3      	ldrh	r3, [r4, #12]
 8004fa4:	059b      	lsls	r3, r3, #22
 8004fa6:	d402      	bmi.n	8004fae <_puts_r+0x4e>
 8004fa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004faa:	f000 f989 	bl	80052c0 <__retarget_lock_release_recursive>
 8004fae:	4628      	mov	r0, r5
 8004fb0:	bd70      	pop	{r4, r5, r6, pc}
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	da04      	bge.n	8004fc0 <_puts_r+0x60>
 8004fb6:	69a2      	ldr	r2, [r4, #24]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	dc17      	bgt.n	8004fec <_puts_r+0x8c>
 8004fbc:	290a      	cmp	r1, #10
 8004fbe:	d015      	beq.n	8004fec <_puts_r+0x8c>
 8004fc0:	6823      	ldr	r3, [r4, #0]
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	6022      	str	r2, [r4, #0]
 8004fc6:	7019      	strb	r1, [r3, #0]
 8004fc8:	68a3      	ldr	r3, [r4, #8]
 8004fca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	60a3      	str	r3, [r4, #8]
 8004fd2:	2900      	cmp	r1, #0
 8004fd4:	d1ed      	bne.n	8004fb2 <_puts_r+0x52>
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	da11      	bge.n	8004ffe <_puts_r+0x9e>
 8004fda:	4622      	mov	r2, r4
 8004fdc:	210a      	movs	r1, #10
 8004fde:	4628      	mov	r0, r5
 8004fe0:	f000 f85f 	bl	80050a2 <__swbuf_r>
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d0d7      	beq.n	8004f98 <_puts_r+0x38>
 8004fe8:	250a      	movs	r5, #10
 8004fea:	e7d7      	b.n	8004f9c <_puts_r+0x3c>
 8004fec:	4622      	mov	r2, r4
 8004fee:	4628      	mov	r0, r5
 8004ff0:	f000 f857 	bl	80050a2 <__swbuf_r>
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	d1e7      	bne.n	8004fc8 <_puts_r+0x68>
 8004ff8:	e7ce      	b.n	8004f98 <_puts_r+0x38>
 8004ffa:	3e01      	subs	r6, #1
 8004ffc:	e7e4      	b.n	8004fc8 <_puts_r+0x68>
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	6022      	str	r2, [r4, #0]
 8005004:	220a      	movs	r2, #10
 8005006:	701a      	strb	r2, [r3, #0]
 8005008:	e7ee      	b.n	8004fe8 <_puts_r+0x88>
	...

0800500c <puts>:
 800500c:	4b02      	ldr	r3, [pc, #8]	@ (8005018 <puts+0xc>)
 800500e:	4601      	mov	r1, r0
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	f7ff bfa5 	b.w	8004f60 <_puts_r>
 8005016:	bf00      	nop
 8005018:	20000044 	.word	0x20000044

0800501c <__sread>:
 800501c:	b510      	push	{r4, lr}
 800501e:	460c      	mov	r4, r1
 8005020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005024:	f000 f8fc 	bl	8005220 <_read_r>
 8005028:	2800      	cmp	r0, #0
 800502a:	bfab      	itete	ge
 800502c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800502e:	89a3      	ldrhlt	r3, [r4, #12]
 8005030:	181b      	addge	r3, r3, r0
 8005032:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005036:	bfac      	ite	ge
 8005038:	6563      	strge	r3, [r4, #84]	@ 0x54
 800503a:	81a3      	strhlt	r3, [r4, #12]
 800503c:	bd10      	pop	{r4, pc}

0800503e <__swrite>:
 800503e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005042:	461f      	mov	r7, r3
 8005044:	898b      	ldrh	r3, [r1, #12]
 8005046:	4605      	mov	r5, r0
 8005048:	05db      	lsls	r3, r3, #23
 800504a:	460c      	mov	r4, r1
 800504c:	4616      	mov	r6, r2
 800504e:	d505      	bpl.n	800505c <__swrite+0x1e>
 8005050:	2302      	movs	r3, #2
 8005052:	2200      	movs	r2, #0
 8005054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005058:	f000 f8d0 	bl	80051fc <_lseek_r>
 800505c:	89a3      	ldrh	r3, [r4, #12]
 800505e:	4632      	mov	r2, r6
 8005060:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005064:	81a3      	strh	r3, [r4, #12]
 8005066:	4628      	mov	r0, r5
 8005068:	463b      	mov	r3, r7
 800506a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800506e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005072:	f000 b8e7 	b.w	8005244 <_write_r>

08005076 <__sseek>:
 8005076:	b510      	push	{r4, lr}
 8005078:	460c      	mov	r4, r1
 800507a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800507e:	f000 f8bd 	bl	80051fc <_lseek_r>
 8005082:	1c43      	adds	r3, r0, #1
 8005084:	89a3      	ldrh	r3, [r4, #12]
 8005086:	bf15      	itete	ne
 8005088:	6560      	strne	r0, [r4, #84]	@ 0x54
 800508a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800508e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005092:	81a3      	strheq	r3, [r4, #12]
 8005094:	bf18      	it	ne
 8005096:	81a3      	strhne	r3, [r4, #12]
 8005098:	bd10      	pop	{r4, pc}

0800509a <__sclose>:
 800509a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800509e:	f000 b89d 	b.w	80051dc <_close_r>

080050a2 <__swbuf_r>:
 80050a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a4:	460e      	mov	r6, r1
 80050a6:	4614      	mov	r4, r2
 80050a8:	4605      	mov	r5, r0
 80050aa:	b118      	cbz	r0, 80050b4 <__swbuf_r+0x12>
 80050ac:	6a03      	ldr	r3, [r0, #32]
 80050ae:	b90b      	cbnz	r3, 80050b4 <__swbuf_r+0x12>
 80050b0:	f7ff ff0e 	bl	8004ed0 <__sinit>
 80050b4:	69a3      	ldr	r3, [r4, #24]
 80050b6:	60a3      	str	r3, [r4, #8]
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	071a      	lsls	r2, r3, #28
 80050bc:	d501      	bpl.n	80050c2 <__swbuf_r+0x20>
 80050be:	6923      	ldr	r3, [r4, #16]
 80050c0:	b943      	cbnz	r3, 80050d4 <__swbuf_r+0x32>
 80050c2:	4621      	mov	r1, r4
 80050c4:	4628      	mov	r0, r5
 80050c6:	f000 f82b 	bl	8005120 <__swsetup_r>
 80050ca:	b118      	cbz	r0, 80050d4 <__swbuf_r+0x32>
 80050cc:	f04f 37ff 	mov.w	r7, #4294967295
 80050d0:	4638      	mov	r0, r7
 80050d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	6922      	ldr	r2, [r4, #16]
 80050d8:	b2f6      	uxtb	r6, r6
 80050da:	1a98      	subs	r0, r3, r2
 80050dc:	6963      	ldr	r3, [r4, #20]
 80050de:	4637      	mov	r7, r6
 80050e0:	4283      	cmp	r3, r0
 80050e2:	dc05      	bgt.n	80050f0 <__swbuf_r+0x4e>
 80050e4:	4621      	mov	r1, r4
 80050e6:	4628      	mov	r0, r5
 80050e8:	f000 fd40 	bl	8005b6c <_fflush_r>
 80050ec:	2800      	cmp	r0, #0
 80050ee:	d1ed      	bne.n	80050cc <__swbuf_r+0x2a>
 80050f0:	68a3      	ldr	r3, [r4, #8]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	60a3      	str	r3, [r4, #8]
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	6022      	str	r2, [r4, #0]
 80050fc:	701e      	strb	r6, [r3, #0]
 80050fe:	6962      	ldr	r2, [r4, #20]
 8005100:	1c43      	adds	r3, r0, #1
 8005102:	429a      	cmp	r2, r3
 8005104:	d004      	beq.n	8005110 <__swbuf_r+0x6e>
 8005106:	89a3      	ldrh	r3, [r4, #12]
 8005108:	07db      	lsls	r3, r3, #31
 800510a:	d5e1      	bpl.n	80050d0 <__swbuf_r+0x2e>
 800510c:	2e0a      	cmp	r6, #10
 800510e:	d1df      	bne.n	80050d0 <__swbuf_r+0x2e>
 8005110:	4621      	mov	r1, r4
 8005112:	4628      	mov	r0, r5
 8005114:	f000 fd2a 	bl	8005b6c <_fflush_r>
 8005118:	2800      	cmp	r0, #0
 800511a:	d0d9      	beq.n	80050d0 <__swbuf_r+0x2e>
 800511c:	e7d6      	b.n	80050cc <__swbuf_r+0x2a>
	...

08005120 <__swsetup_r>:
 8005120:	b538      	push	{r3, r4, r5, lr}
 8005122:	4b29      	ldr	r3, [pc, #164]	@ (80051c8 <__swsetup_r+0xa8>)
 8005124:	4605      	mov	r5, r0
 8005126:	6818      	ldr	r0, [r3, #0]
 8005128:	460c      	mov	r4, r1
 800512a:	b118      	cbz	r0, 8005134 <__swsetup_r+0x14>
 800512c:	6a03      	ldr	r3, [r0, #32]
 800512e:	b90b      	cbnz	r3, 8005134 <__swsetup_r+0x14>
 8005130:	f7ff fece 	bl	8004ed0 <__sinit>
 8005134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005138:	0719      	lsls	r1, r3, #28
 800513a:	d422      	bmi.n	8005182 <__swsetup_r+0x62>
 800513c:	06da      	lsls	r2, r3, #27
 800513e:	d407      	bmi.n	8005150 <__swsetup_r+0x30>
 8005140:	2209      	movs	r2, #9
 8005142:	602a      	str	r2, [r5, #0]
 8005144:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005148:	f04f 30ff 	mov.w	r0, #4294967295
 800514c:	81a3      	strh	r3, [r4, #12]
 800514e:	e033      	b.n	80051b8 <__swsetup_r+0x98>
 8005150:	0758      	lsls	r0, r3, #29
 8005152:	d512      	bpl.n	800517a <__swsetup_r+0x5a>
 8005154:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005156:	b141      	cbz	r1, 800516a <__swsetup_r+0x4a>
 8005158:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800515c:	4299      	cmp	r1, r3
 800515e:	d002      	beq.n	8005166 <__swsetup_r+0x46>
 8005160:	4628      	mov	r0, r5
 8005162:	f000 f8bd 	bl	80052e0 <_free_r>
 8005166:	2300      	movs	r3, #0
 8005168:	6363      	str	r3, [r4, #52]	@ 0x34
 800516a:	89a3      	ldrh	r3, [r4, #12]
 800516c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005170:	81a3      	strh	r3, [r4, #12]
 8005172:	2300      	movs	r3, #0
 8005174:	6063      	str	r3, [r4, #4]
 8005176:	6923      	ldr	r3, [r4, #16]
 8005178:	6023      	str	r3, [r4, #0]
 800517a:	89a3      	ldrh	r3, [r4, #12]
 800517c:	f043 0308 	orr.w	r3, r3, #8
 8005180:	81a3      	strh	r3, [r4, #12]
 8005182:	6923      	ldr	r3, [r4, #16]
 8005184:	b94b      	cbnz	r3, 800519a <__swsetup_r+0x7a>
 8005186:	89a3      	ldrh	r3, [r4, #12]
 8005188:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800518c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005190:	d003      	beq.n	800519a <__swsetup_r+0x7a>
 8005192:	4621      	mov	r1, r4
 8005194:	4628      	mov	r0, r5
 8005196:	f000 fd36 	bl	8005c06 <__smakebuf_r>
 800519a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800519e:	f013 0201 	ands.w	r2, r3, #1
 80051a2:	d00a      	beq.n	80051ba <__swsetup_r+0x9a>
 80051a4:	2200      	movs	r2, #0
 80051a6:	60a2      	str	r2, [r4, #8]
 80051a8:	6962      	ldr	r2, [r4, #20]
 80051aa:	4252      	negs	r2, r2
 80051ac:	61a2      	str	r2, [r4, #24]
 80051ae:	6922      	ldr	r2, [r4, #16]
 80051b0:	b942      	cbnz	r2, 80051c4 <__swsetup_r+0xa4>
 80051b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80051b6:	d1c5      	bne.n	8005144 <__swsetup_r+0x24>
 80051b8:	bd38      	pop	{r3, r4, r5, pc}
 80051ba:	0799      	lsls	r1, r3, #30
 80051bc:	bf58      	it	pl
 80051be:	6962      	ldrpl	r2, [r4, #20]
 80051c0:	60a2      	str	r2, [r4, #8]
 80051c2:	e7f4      	b.n	80051ae <__swsetup_r+0x8e>
 80051c4:	2000      	movs	r0, #0
 80051c6:	e7f7      	b.n	80051b8 <__swsetup_r+0x98>
 80051c8:	20000044 	.word	0x20000044

080051cc <memset>:
 80051cc:	4603      	mov	r3, r0
 80051ce:	4402      	add	r2, r0
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d100      	bne.n	80051d6 <memset+0xa>
 80051d4:	4770      	bx	lr
 80051d6:	f803 1b01 	strb.w	r1, [r3], #1
 80051da:	e7f9      	b.n	80051d0 <memset+0x4>

080051dc <_close_r>:
 80051dc:	b538      	push	{r3, r4, r5, lr}
 80051de:	2300      	movs	r3, #0
 80051e0:	4d05      	ldr	r5, [pc, #20]	@ (80051f8 <_close_r+0x1c>)
 80051e2:	4604      	mov	r4, r0
 80051e4:	4608      	mov	r0, r1
 80051e6:	602b      	str	r3, [r5, #0]
 80051e8:	f7fb fcf0 	bl	8000bcc <_close>
 80051ec:	1c43      	adds	r3, r0, #1
 80051ee:	d102      	bne.n	80051f6 <_close_r+0x1a>
 80051f0:	682b      	ldr	r3, [r5, #0]
 80051f2:	b103      	cbz	r3, 80051f6 <_close_r+0x1a>
 80051f4:	6023      	str	r3, [r4, #0]
 80051f6:	bd38      	pop	{r3, r4, r5, pc}
 80051f8:	20001bb0 	.word	0x20001bb0

080051fc <_lseek_r>:
 80051fc:	b538      	push	{r3, r4, r5, lr}
 80051fe:	4604      	mov	r4, r0
 8005200:	4608      	mov	r0, r1
 8005202:	4611      	mov	r1, r2
 8005204:	2200      	movs	r2, #0
 8005206:	4d05      	ldr	r5, [pc, #20]	@ (800521c <_lseek_r+0x20>)
 8005208:	602a      	str	r2, [r5, #0]
 800520a:	461a      	mov	r2, r3
 800520c:	f7fb fd02 	bl	8000c14 <_lseek>
 8005210:	1c43      	adds	r3, r0, #1
 8005212:	d102      	bne.n	800521a <_lseek_r+0x1e>
 8005214:	682b      	ldr	r3, [r5, #0]
 8005216:	b103      	cbz	r3, 800521a <_lseek_r+0x1e>
 8005218:	6023      	str	r3, [r4, #0]
 800521a:	bd38      	pop	{r3, r4, r5, pc}
 800521c:	20001bb0 	.word	0x20001bb0

08005220 <_read_r>:
 8005220:	b538      	push	{r3, r4, r5, lr}
 8005222:	4604      	mov	r4, r0
 8005224:	4608      	mov	r0, r1
 8005226:	4611      	mov	r1, r2
 8005228:	2200      	movs	r2, #0
 800522a:	4d05      	ldr	r5, [pc, #20]	@ (8005240 <_read_r+0x20>)
 800522c:	602a      	str	r2, [r5, #0]
 800522e:	461a      	mov	r2, r3
 8005230:	f7fb fcaf 	bl	8000b92 <_read>
 8005234:	1c43      	adds	r3, r0, #1
 8005236:	d102      	bne.n	800523e <_read_r+0x1e>
 8005238:	682b      	ldr	r3, [r5, #0]
 800523a:	b103      	cbz	r3, 800523e <_read_r+0x1e>
 800523c:	6023      	str	r3, [r4, #0]
 800523e:	bd38      	pop	{r3, r4, r5, pc}
 8005240:	20001bb0 	.word	0x20001bb0

08005244 <_write_r>:
 8005244:	b538      	push	{r3, r4, r5, lr}
 8005246:	4604      	mov	r4, r0
 8005248:	4608      	mov	r0, r1
 800524a:	4611      	mov	r1, r2
 800524c:	2200      	movs	r2, #0
 800524e:	4d05      	ldr	r5, [pc, #20]	@ (8005264 <_write_r+0x20>)
 8005250:	602a      	str	r2, [r5, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	f7fb fbde 	bl	8000a14 <_write>
 8005258:	1c43      	adds	r3, r0, #1
 800525a:	d102      	bne.n	8005262 <_write_r+0x1e>
 800525c:	682b      	ldr	r3, [r5, #0]
 800525e:	b103      	cbz	r3, 8005262 <_write_r+0x1e>
 8005260:	6023      	str	r3, [r4, #0]
 8005262:	bd38      	pop	{r3, r4, r5, pc}
 8005264:	20001bb0 	.word	0x20001bb0

08005268 <__errno>:
 8005268:	4b01      	ldr	r3, [pc, #4]	@ (8005270 <__errno+0x8>)
 800526a:	6818      	ldr	r0, [r3, #0]
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	20000044 	.word	0x20000044

08005274 <__libc_init_array>:
 8005274:	b570      	push	{r4, r5, r6, lr}
 8005276:	2600      	movs	r6, #0
 8005278:	4d0c      	ldr	r5, [pc, #48]	@ (80052ac <__libc_init_array+0x38>)
 800527a:	4c0d      	ldr	r4, [pc, #52]	@ (80052b0 <__libc_init_array+0x3c>)
 800527c:	1b64      	subs	r4, r4, r5
 800527e:	10a4      	asrs	r4, r4, #2
 8005280:	42a6      	cmp	r6, r4
 8005282:	d109      	bne.n	8005298 <__libc_init_array+0x24>
 8005284:	f000 fd3c 	bl	8005d00 <_init>
 8005288:	2600      	movs	r6, #0
 800528a:	4d0a      	ldr	r5, [pc, #40]	@ (80052b4 <__libc_init_array+0x40>)
 800528c:	4c0a      	ldr	r4, [pc, #40]	@ (80052b8 <__libc_init_array+0x44>)
 800528e:	1b64      	subs	r4, r4, r5
 8005290:	10a4      	asrs	r4, r4, #2
 8005292:	42a6      	cmp	r6, r4
 8005294:	d105      	bne.n	80052a2 <__libc_init_array+0x2e>
 8005296:	bd70      	pop	{r4, r5, r6, pc}
 8005298:	f855 3b04 	ldr.w	r3, [r5], #4
 800529c:	4798      	blx	r3
 800529e:	3601      	adds	r6, #1
 80052a0:	e7ee      	b.n	8005280 <__libc_init_array+0xc>
 80052a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a6:	4798      	blx	r3
 80052a8:	3601      	adds	r6, #1
 80052aa:	e7f2      	b.n	8005292 <__libc_init_array+0x1e>
 80052ac:	08005ee0 	.word	0x08005ee0
 80052b0:	08005ee0 	.word	0x08005ee0
 80052b4:	08005ee0 	.word	0x08005ee0
 80052b8:	08005ee4 	.word	0x08005ee4

080052bc <__retarget_lock_init_recursive>:
 80052bc:	4770      	bx	lr

080052be <__retarget_lock_acquire_recursive>:
 80052be:	4770      	bx	lr

080052c0 <__retarget_lock_release_recursive>:
 80052c0:	4770      	bx	lr

080052c2 <memcpy>:
 80052c2:	440a      	add	r2, r1
 80052c4:	4291      	cmp	r1, r2
 80052c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80052ca:	d100      	bne.n	80052ce <memcpy+0xc>
 80052cc:	4770      	bx	lr
 80052ce:	b510      	push	{r4, lr}
 80052d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052d4:	4291      	cmp	r1, r2
 80052d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052da:	d1f9      	bne.n	80052d0 <memcpy+0xe>
 80052dc:	bd10      	pop	{r4, pc}
	...

080052e0 <_free_r>:
 80052e0:	b538      	push	{r3, r4, r5, lr}
 80052e2:	4605      	mov	r5, r0
 80052e4:	2900      	cmp	r1, #0
 80052e6:	d040      	beq.n	800536a <_free_r+0x8a>
 80052e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052ec:	1f0c      	subs	r4, r1, #4
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	bfb8      	it	lt
 80052f2:	18e4      	addlt	r4, r4, r3
 80052f4:	f000 f8de 	bl	80054b4 <__malloc_lock>
 80052f8:	4a1c      	ldr	r2, [pc, #112]	@ (800536c <_free_r+0x8c>)
 80052fa:	6813      	ldr	r3, [r2, #0]
 80052fc:	b933      	cbnz	r3, 800530c <_free_r+0x2c>
 80052fe:	6063      	str	r3, [r4, #4]
 8005300:	6014      	str	r4, [r2, #0]
 8005302:	4628      	mov	r0, r5
 8005304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005308:	f000 b8da 	b.w	80054c0 <__malloc_unlock>
 800530c:	42a3      	cmp	r3, r4
 800530e:	d908      	bls.n	8005322 <_free_r+0x42>
 8005310:	6820      	ldr	r0, [r4, #0]
 8005312:	1821      	adds	r1, r4, r0
 8005314:	428b      	cmp	r3, r1
 8005316:	bf01      	itttt	eq
 8005318:	6819      	ldreq	r1, [r3, #0]
 800531a:	685b      	ldreq	r3, [r3, #4]
 800531c:	1809      	addeq	r1, r1, r0
 800531e:	6021      	streq	r1, [r4, #0]
 8005320:	e7ed      	b.n	80052fe <_free_r+0x1e>
 8005322:	461a      	mov	r2, r3
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	b10b      	cbz	r3, 800532c <_free_r+0x4c>
 8005328:	42a3      	cmp	r3, r4
 800532a:	d9fa      	bls.n	8005322 <_free_r+0x42>
 800532c:	6811      	ldr	r1, [r2, #0]
 800532e:	1850      	adds	r0, r2, r1
 8005330:	42a0      	cmp	r0, r4
 8005332:	d10b      	bne.n	800534c <_free_r+0x6c>
 8005334:	6820      	ldr	r0, [r4, #0]
 8005336:	4401      	add	r1, r0
 8005338:	1850      	adds	r0, r2, r1
 800533a:	4283      	cmp	r3, r0
 800533c:	6011      	str	r1, [r2, #0]
 800533e:	d1e0      	bne.n	8005302 <_free_r+0x22>
 8005340:	6818      	ldr	r0, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	4408      	add	r0, r1
 8005346:	6010      	str	r0, [r2, #0]
 8005348:	6053      	str	r3, [r2, #4]
 800534a:	e7da      	b.n	8005302 <_free_r+0x22>
 800534c:	d902      	bls.n	8005354 <_free_r+0x74>
 800534e:	230c      	movs	r3, #12
 8005350:	602b      	str	r3, [r5, #0]
 8005352:	e7d6      	b.n	8005302 <_free_r+0x22>
 8005354:	6820      	ldr	r0, [r4, #0]
 8005356:	1821      	adds	r1, r4, r0
 8005358:	428b      	cmp	r3, r1
 800535a:	bf01      	itttt	eq
 800535c:	6819      	ldreq	r1, [r3, #0]
 800535e:	685b      	ldreq	r3, [r3, #4]
 8005360:	1809      	addeq	r1, r1, r0
 8005362:	6021      	streq	r1, [r4, #0]
 8005364:	6063      	str	r3, [r4, #4]
 8005366:	6054      	str	r4, [r2, #4]
 8005368:	e7cb      	b.n	8005302 <_free_r+0x22>
 800536a:	bd38      	pop	{r3, r4, r5, pc}
 800536c:	20001bbc 	.word	0x20001bbc

08005370 <sbrk_aligned>:
 8005370:	b570      	push	{r4, r5, r6, lr}
 8005372:	4e0f      	ldr	r6, [pc, #60]	@ (80053b0 <sbrk_aligned+0x40>)
 8005374:	460c      	mov	r4, r1
 8005376:	6831      	ldr	r1, [r6, #0]
 8005378:	4605      	mov	r5, r0
 800537a:	b911      	cbnz	r1, 8005382 <sbrk_aligned+0x12>
 800537c:	f000 fca2 	bl	8005cc4 <_sbrk_r>
 8005380:	6030      	str	r0, [r6, #0]
 8005382:	4621      	mov	r1, r4
 8005384:	4628      	mov	r0, r5
 8005386:	f000 fc9d 	bl	8005cc4 <_sbrk_r>
 800538a:	1c43      	adds	r3, r0, #1
 800538c:	d103      	bne.n	8005396 <sbrk_aligned+0x26>
 800538e:	f04f 34ff 	mov.w	r4, #4294967295
 8005392:	4620      	mov	r0, r4
 8005394:	bd70      	pop	{r4, r5, r6, pc}
 8005396:	1cc4      	adds	r4, r0, #3
 8005398:	f024 0403 	bic.w	r4, r4, #3
 800539c:	42a0      	cmp	r0, r4
 800539e:	d0f8      	beq.n	8005392 <sbrk_aligned+0x22>
 80053a0:	1a21      	subs	r1, r4, r0
 80053a2:	4628      	mov	r0, r5
 80053a4:	f000 fc8e 	bl	8005cc4 <_sbrk_r>
 80053a8:	3001      	adds	r0, #1
 80053aa:	d1f2      	bne.n	8005392 <sbrk_aligned+0x22>
 80053ac:	e7ef      	b.n	800538e <sbrk_aligned+0x1e>
 80053ae:	bf00      	nop
 80053b0:	20001bb8 	.word	0x20001bb8

080053b4 <_malloc_r>:
 80053b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053b8:	1ccd      	adds	r5, r1, #3
 80053ba:	f025 0503 	bic.w	r5, r5, #3
 80053be:	3508      	adds	r5, #8
 80053c0:	2d0c      	cmp	r5, #12
 80053c2:	bf38      	it	cc
 80053c4:	250c      	movcc	r5, #12
 80053c6:	2d00      	cmp	r5, #0
 80053c8:	4606      	mov	r6, r0
 80053ca:	db01      	blt.n	80053d0 <_malloc_r+0x1c>
 80053cc:	42a9      	cmp	r1, r5
 80053ce:	d904      	bls.n	80053da <_malloc_r+0x26>
 80053d0:	230c      	movs	r3, #12
 80053d2:	6033      	str	r3, [r6, #0]
 80053d4:	2000      	movs	r0, #0
 80053d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054b0 <_malloc_r+0xfc>
 80053de:	f000 f869 	bl	80054b4 <__malloc_lock>
 80053e2:	f8d8 3000 	ldr.w	r3, [r8]
 80053e6:	461c      	mov	r4, r3
 80053e8:	bb44      	cbnz	r4, 800543c <_malloc_r+0x88>
 80053ea:	4629      	mov	r1, r5
 80053ec:	4630      	mov	r0, r6
 80053ee:	f7ff ffbf 	bl	8005370 <sbrk_aligned>
 80053f2:	1c43      	adds	r3, r0, #1
 80053f4:	4604      	mov	r4, r0
 80053f6:	d158      	bne.n	80054aa <_malloc_r+0xf6>
 80053f8:	f8d8 4000 	ldr.w	r4, [r8]
 80053fc:	4627      	mov	r7, r4
 80053fe:	2f00      	cmp	r7, #0
 8005400:	d143      	bne.n	800548a <_malloc_r+0xd6>
 8005402:	2c00      	cmp	r4, #0
 8005404:	d04b      	beq.n	800549e <_malloc_r+0xea>
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	4639      	mov	r1, r7
 800540a:	4630      	mov	r0, r6
 800540c:	eb04 0903 	add.w	r9, r4, r3
 8005410:	f000 fc58 	bl	8005cc4 <_sbrk_r>
 8005414:	4581      	cmp	r9, r0
 8005416:	d142      	bne.n	800549e <_malloc_r+0xea>
 8005418:	6821      	ldr	r1, [r4, #0]
 800541a:	4630      	mov	r0, r6
 800541c:	1a6d      	subs	r5, r5, r1
 800541e:	4629      	mov	r1, r5
 8005420:	f7ff ffa6 	bl	8005370 <sbrk_aligned>
 8005424:	3001      	adds	r0, #1
 8005426:	d03a      	beq.n	800549e <_malloc_r+0xea>
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	442b      	add	r3, r5
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	f8d8 3000 	ldr.w	r3, [r8]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	bb62      	cbnz	r2, 8005490 <_malloc_r+0xdc>
 8005436:	f8c8 7000 	str.w	r7, [r8]
 800543a:	e00f      	b.n	800545c <_malloc_r+0xa8>
 800543c:	6822      	ldr	r2, [r4, #0]
 800543e:	1b52      	subs	r2, r2, r5
 8005440:	d420      	bmi.n	8005484 <_malloc_r+0xd0>
 8005442:	2a0b      	cmp	r2, #11
 8005444:	d917      	bls.n	8005476 <_malloc_r+0xc2>
 8005446:	1961      	adds	r1, r4, r5
 8005448:	42a3      	cmp	r3, r4
 800544a:	6025      	str	r5, [r4, #0]
 800544c:	bf18      	it	ne
 800544e:	6059      	strne	r1, [r3, #4]
 8005450:	6863      	ldr	r3, [r4, #4]
 8005452:	bf08      	it	eq
 8005454:	f8c8 1000 	streq.w	r1, [r8]
 8005458:	5162      	str	r2, [r4, r5]
 800545a:	604b      	str	r3, [r1, #4]
 800545c:	4630      	mov	r0, r6
 800545e:	f000 f82f 	bl	80054c0 <__malloc_unlock>
 8005462:	f104 000b 	add.w	r0, r4, #11
 8005466:	1d23      	adds	r3, r4, #4
 8005468:	f020 0007 	bic.w	r0, r0, #7
 800546c:	1ac2      	subs	r2, r0, r3
 800546e:	bf1c      	itt	ne
 8005470:	1a1b      	subne	r3, r3, r0
 8005472:	50a3      	strne	r3, [r4, r2]
 8005474:	e7af      	b.n	80053d6 <_malloc_r+0x22>
 8005476:	6862      	ldr	r2, [r4, #4]
 8005478:	42a3      	cmp	r3, r4
 800547a:	bf0c      	ite	eq
 800547c:	f8c8 2000 	streq.w	r2, [r8]
 8005480:	605a      	strne	r2, [r3, #4]
 8005482:	e7eb      	b.n	800545c <_malloc_r+0xa8>
 8005484:	4623      	mov	r3, r4
 8005486:	6864      	ldr	r4, [r4, #4]
 8005488:	e7ae      	b.n	80053e8 <_malloc_r+0x34>
 800548a:	463c      	mov	r4, r7
 800548c:	687f      	ldr	r7, [r7, #4]
 800548e:	e7b6      	b.n	80053fe <_malloc_r+0x4a>
 8005490:	461a      	mov	r2, r3
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	42a3      	cmp	r3, r4
 8005496:	d1fb      	bne.n	8005490 <_malloc_r+0xdc>
 8005498:	2300      	movs	r3, #0
 800549a:	6053      	str	r3, [r2, #4]
 800549c:	e7de      	b.n	800545c <_malloc_r+0xa8>
 800549e:	230c      	movs	r3, #12
 80054a0:	4630      	mov	r0, r6
 80054a2:	6033      	str	r3, [r6, #0]
 80054a4:	f000 f80c 	bl	80054c0 <__malloc_unlock>
 80054a8:	e794      	b.n	80053d4 <_malloc_r+0x20>
 80054aa:	6005      	str	r5, [r0, #0]
 80054ac:	e7d6      	b.n	800545c <_malloc_r+0xa8>
 80054ae:	bf00      	nop
 80054b0:	20001bbc 	.word	0x20001bbc

080054b4 <__malloc_lock>:
 80054b4:	4801      	ldr	r0, [pc, #4]	@ (80054bc <__malloc_lock+0x8>)
 80054b6:	f7ff bf02 	b.w	80052be <__retarget_lock_acquire_recursive>
 80054ba:	bf00      	nop
 80054bc:	20001bb4 	.word	0x20001bb4

080054c0 <__malloc_unlock>:
 80054c0:	4801      	ldr	r0, [pc, #4]	@ (80054c8 <__malloc_unlock+0x8>)
 80054c2:	f7ff befd 	b.w	80052c0 <__retarget_lock_release_recursive>
 80054c6:	bf00      	nop
 80054c8:	20001bb4 	.word	0x20001bb4

080054cc <__sfputc_r>:
 80054cc:	6893      	ldr	r3, [r2, #8]
 80054ce:	b410      	push	{r4}
 80054d0:	3b01      	subs	r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	6093      	str	r3, [r2, #8]
 80054d6:	da07      	bge.n	80054e8 <__sfputc_r+0x1c>
 80054d8:	6994      	ldr	r4, [r2, #24]
 80054da:	42a3      	cmp	r3, r4
 80054dc:	db01      	blt.n	80054e2 <__sfputc_r+0x16>
 80054de:	290a      	cmp	r1, #10
 80054e0:	d102      	bne.n	80054e8 <__sfputc_r+0x1c>
 80054e2:	bc10      	pop	{r4}
 80054e4:	f7ff bddd 	b.w	80050a2 <__swbuf_r>
 80054e8:	6813      	ldr	r3, [r2, #0]
 80054ea:	1c58      	adds	r0, r3, #1
 80054ec:	6010      	str	r0, [r2, #0]
 80054ee:	7019      	strb	r1, [r3, #0]
 80054f0:	4608      	mov	r0, r1
 80054f2:	bc10      	pop	{r4}
 80054f4:	4770      	bx	lr

080054f6 <__sfputs_r>:
 80054f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f8:	4606      	mov	r6, r0
 80054fa:	460f      	mov	r7, r1
 80054fc:	4614      	mov	r4, r2
 80054fe:	18d5      	adds	r5, r2, r3
 8005500:	42ac      	cmp	r4, r5
 8005502:	d101      	bne.n	8005508 <__sfputs_r+0x12>
 8005504:	2000      	movs	r0, #0
 8005506:	e007      	b.n	8005518 <__sfputs_r+0x22>
 8005508:	463a      	mov	r2, r7
 800550a:	4630      	mov	r0, r6
 800550c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005510:	f7ff ffdc 	bl	80054cc <__sfputc_r>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d1f3      	bne.n	8005500 <__sfputs_r+0xa>
 8005518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800551c <_vfiprintf_r>:
 800551c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005520:	460d      	mov	r5, r1
 8005522:	4614      	mov	r4, r2
 8005524:	4698      	mov	r8, r3
 8005526:	4606      	mov	r6, r0
 8005528:	b09d      	sub	sp, #116	@ 0x74
 800552a:	b118      	cbz	r0, 8005534 <_vfiprintf_r+0x18>
 800552c:	6a03      	ldr	r3, [r0, #32]
 800552e:	b90b      	cbnz	r3, 8005534 <_vfiprintf_r+0x18>
 8005530:	f7ff fcce 	bl	8004ed0 <__sinit>
 8005534:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005536:	07d9      	lsls	r1, r3, #31
 8005538:	d405      	bmi.n	8005546 <_vfiprintf_r+0x2a>
 800553a:	89ab      	ldrh	r3, [r5, #12]
 800553c:	059a      	lsls	r2, r3, #22
 800553e:	d402      	bmi.n	8005546 <_vfiprintf_r+0x2a>
 8005540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005542:	f7ff febc 	bl	80052be <__retarget_lock_acquire_recursive>
 8005546:	89ab      	ldrh	r3, [r5, #12]
 8005548:	071b      	lsls	r3, r3, #28
 800554a:	d501      	bpl.n	8005550 <_vfiprintf_r+0x34>
 800554c:	692b      	ldr	r3, [r5, #16]
 800554e:	b99b      	cbnz	r3, 8005578 <_vfiprintf_r+0x5c>
 8005550:	4629      	mov	r1, r5
 8005552:	4630      	mov	r0, r6
 8005554:	f7ff fde4 	bl	8005120 <__swsetup_r>
 8005558:	b170      	cbz	r0, 8005578 <_vfiprintf_r+0x5c>
 800555a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800555c:	07dc      	lsls	r4, r3, #31
 800555e:	d504      	bpl.n	800556a <_vfiprintf_r+0x4e>
 8005560:	f04f 30ff 	mov.w	r0, #4294967295
 8005564:	b01d      	add	sp, #116	@ 0x74
 8005566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800556a:	89ab      	ldrh	r3, [r5, #12]
 800556c:	0598      	lsls	r0, r3, #22
 800556e:	d4f7      	bmi.n	8005560 <_vfiprintf_r+0x44>
 8005570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005572:	f7ff fea5 	bl	80052c0 <__retarget_lock_release_recursive>
 8005576:	e7f3      	b.n	8005560 <_vfiprintf_r+0x44>
 8005578:	2300      	movs	r3, #0
 800557a:	9309      	str	r3, [sp, #36]	@ 0x24
 800557c:	2320      	movs	r3, #32
 800557e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005582:	2330      	movs	r3, #48	@ 0x30
 8005584:	f04f 0901 	mov.w	r9, #1
 8005588:	f8cd 800c 	str.w	r8, [sp, #12]
 800558c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005738 <_vfiprintf_r+0x21c>
 8005590:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005594:	4623      	mov	r3, r4
 8005596:	469a      	mov	sl, r3
 8005598:	f813 2b01 	ldrb.w	r2, [r3], #1
 800559c:	b10a      	cbz	r2, 80055a2 <_vfiprintf_r+0x86>
 800559e:	2a25      	cmp	r2, #37	@ 0x25
 80055a0:	d1f9      	bne.n	8005596 <_vfiprintf_r+0x7a>
 80055a2:	ebba 0b04 	subs.w	fp, sl, r4
 80055a6:	d00b      	beq.n	80055c0 <_vfiprintf_r+0xa4>
 80055a8:	465b      	mov	r3, fp
 80055aa:	4622      	mov	r2, r4
 80055ac:	4629      	mov	r1, r5
 80055ae:	4630      	mov	r0, r6
 80055b0:	f7ff ffa1 	bl	80054f6 <__sfputs_r>
 80055b4:	3001      	adds	r0, #1
 80055b6:	f000 80a7 	beq.w	8005708 <_vfiprintf_r+0x1ec>
 80055ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055bc:	445a      	add	r2, fp
 80055be:	9209      	str	r2, [sp, #36]	@ 0x24
 80055c0:	f89a 3000 	ldrb.w	r3, [sl]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 809f 	beq.w	8005708 <_vfiprintf_r+0x1ec>
 80055ca:	2300      	movs	r3, #0
 80055cc:	f04f 32ff 	mov.w	r2, #4294967295
 80055d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055d4:	f10a 0a01 	add.w	sl, sl, #1
 80055d8:	9304      	str	r3, [sp, #16]
 80055da:	9307      	str	r3, [sp, #28]
 80055dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80055e2:	4654      	mov	r4, sl
 80055e4:	2205      	movs	r2, #5
 80055e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ea:	4853      	ldr	r0, [pc, #332]	@ (8005738 <_vfiprintf_r+0x21c>)
 80055ec:	f000 fb7a 	bl	8005ce4 <memchr>
 80055f0:	9a04      	ldr	r2, [sp, #16]
 80055f2:	b9d8      	cbnz	r0, 800562c <_vfiprintf_r+0x110>
 80055f4:	06d1      	lsls	r1, r2, #27
 80055f6:	bf44      	itt	mi
 80055f8:	2320      	movmi	r3, #32
 80055fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055fe:	0713      	lsls	r3, r2, #28
 8005600:	bf44      	itt	mi
 8005602:	232b      	movmi	r3, #43	@ 0x2b
 8005604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005608:	f89a 3000 	ldrb.w	r3, [sl]
 800560c:	2b2a      	cmp	r3, #42	@ 0x2a
 800560e:	d015      	beq.n	800563c <_vfiprintf_r+0x120>
 8005610:	4654      	mov	r4, sl
 8005612:	2000      	movs	r0, #0
 8005614:	f04f 0c0a 	mov.w	ip, #10
 8005618:	9a07      	ldr	r2, [sp, #28]
 800561a:	4621      	mov	r1, r4
 800561c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005620:	3b30      	subs	r3, #48	@ 0x30
 8005622:	2b09      	cmp	r3, #9
 8005624:	d94b      	bls.n	80056be <_vfiprintf_r+0x1a2>
 8005626:	b1b0      	cbz	r0, 8005656 <_vfiprintf_r+0x13a>
 8005628:	9207      	str	r2, [sp, #28]
 800562a:	e014      	b.n	8005656 <_vfiprintf_r+0x13a>
 800562c:	eba0 0308 	sub.w	r3, r0, r8
 8005630:	fa09 f303 	lsl.w	r3, r9, r3
 8005634:	4313      	orrs	r3, r2
 8005636:	46a2      	mov	sl, r4
 8005638:	9304      	str	r3, [sp, #16]
 800563a:	e7d2      	b.n	80055e2 <_vfiprintf_r+0xc6>
 800563c:	9b03      	ldr	r3, [sp, #12]
 800563e:	1d19      	adds	r1, r3, #4
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	9103      	str	r1, [sp, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	bfbb      	ittet	lt
 8005648:	425b      	neglt	r3, r3
 800564a:	f042 0202 	orrlt.w	r2, r2, #2
 800564e:	9307      	strge	r3, [sp, #28]
 8005650:	9307      	strlt	r3, [sp, #28]
 8005652:	bfb8      	it	lt
 8005654:	9204      	strlt	r2, [sp, #16]
 8005656:	7823      	ldrb	r3, [r4, #0]
 8005658:	2b2e      	cmp	r3, #46	@ 0x2e
 800565a:	d10a      	bne.n	8005672 <_vfiprintf_r+0x156>
 800565c:	7863      	ldrb	r3, [r4, #1]
 800565e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005660:	d132      	bne.n	80056c8 <_vfiprintf_r+0x1ac>
 8005662:	9b03      	ldr	r3, [sp, #12]
 8005664:	3402      	adds	r4, #2
 8005666:	1d1a      	adds	r2, r3, #4
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	9203      	str	r2, [sp, #12]
 800566c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005670:	9305      	str	r3, [sp, #20]
 8005672:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800573c <_vfiprintf_r+0x220>
 8005676:	2203      	movs	r2, #3
 8005678:	4650      	mov	r0, sl
 800567a:	7821      	ldrb	r1, [r4, #0]
 800567c:	f000 fb32 	bl	8005ce4 <memchr>
 8005680:	b138      	cbz	r0, 8005692 <_vfiprintf_r+0x176>
 8005682:	2240      	movs	r2, #64	@ 0x40
 8005684:	9b04      	ldr	r3, [sp, #16]
 8005686:	eba0 000a 	sub.w	r0, r0, sl
 800568a:	4082      	lsls	r2, r0
 800568c:	4313      	orrs	r3, r2
 800568e:	3401      	adds	r4, #1
 8005690:	9304      	str	r3, [sp, #16]
 8005692:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005696:	2206      	movs	r2, #6
 8005698:	4829      	ldr	r0, [pc, #164]	@ (8005740 <_vfiprintf_r+0x224>)
 800569a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800569e:	f000 fb21 	bl	8005ce4 <memchr>
 80056a2:	2800      	cmp	r0, #0
 80056a4:	d03f      	beq.n	8005726 <_vfiprintf_r+0x20a>
 80056a6:	4b27      	ldr	r3, [pc, #156]	@ (8005744 <_vfiprintf_r+0x228>)
 80056a8:	bb1b      	cbnz	r3, 80056f2 <_vfiprintf_r+0x1d6>
 80056aa:	9b03      	ldr	r3, [sp, #12]
 80056ac:	3307      	adds	r3, #7
 80056ae:	f023 0307 	bic.w	r3, r3, #7
 80056b2:	3308      	adds	r3, #8
 80056b4:	9303      	str	r3, [sp, #12]
 80056b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056b8:	443b      	add	r3, r7
 80056ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80056bc:	e76a      	b.n	8005594 <_vfiprintf_r+0x78>
 80056be:	460c      	mov	r4, r1
 80056c0:	2001      	movs	r0, #1
 80056c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80056c6:	e7a8      	b.n	800561a <_vfiprintf_r+0xfe>
 80056c8:	2300      	movs	r3, #0
 80056ca:	f04f 0c0a 	mov.w	ip, #10
 80056ce:	4619      	mov	r1, r3
 80056d0:	3401      	adds	r4, #1
 80056d2:	9305      	str	r3, [sp, #20]
 80056d4:	4620      	mov	r0, r4
 80056d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056da:	3a30      	subs	r2, #48	@ 0x30
 80056dc:	2a09      	cmp	r2, #9
 80056de:	d903      	bls.n	80056e8 <_vfiprintf_r+0x1cc>
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0c6      	beq.n	8005672 <_vfiprintf_r+0x156>
 80056e4:	9105      	str	r1, [sp, #20]
 80056e6:	e7c4      	b.n	8005672 <_vfiprintf_r+0x156>
 80056e8:	4604      	mov	r4, r0
 80056ea:	2301      	movs	r3, #1
 80056ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80056f0:	e7f0      	b.n	80056d4 <_vfiprintf_r+0x1b8>
 80056f2:	ab03      	add	r3, sp, #12
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	462a      	mov	r2, r5
 80056f8:	4630      	mov	r0, r6
 80056fa:	4b13      	ldr	r3, [pc, #76]	@ (8005748 <_vfiprintf_r+0x22c>)
 80056fc:	a904      	add	r1, sp, #16
 80056fe:	f3af 8000 	nop.w
 8005702:	4607      	mov	r7, r0
 8005704:	1c78      	adds	r0, r7, #1
 8005706:	d1d6      	bne.n	80056b6 <_vfiprintf_r+0x19a>
 8005708:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800570a:	07d9      	lsls	r1, r3, #31
 800570c:	d405      	bmi.n	800571a <_vfiprintf_r+0x1fe>
 800570e:	89ab      	ldrh	r3, [r5, #12]
 8005710:	059a      	lsls	r2, r3, #22
 8005712:	d402      	bmi.n	800571a <_vfiprintf_r+0x1fe>
 8005714:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005716:	f7ff fdd3 	bl	80052c0 <__retarget_lock_release_recursive>
 800571a:	89ab      	ldrh	r3, [r5, #12]
 800571c:	065b      	lsls	r3, r3, #25
 800571e:	f53f af1f 	bmi.w	8005560 <_vfiprintf_r+0x44>
 8005722:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005724:	e71e      	b.n	8005564 <_vfiprintf_r+0x48>
 8005726:	ab03      	add	r3, sp, #12
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	462a      	mov	r2, r5
 800572c:	4630      	mov	r0, r6
 800572e:	4b06      	ldr	r3, [pc, #24]	@ (8005748 <_vfiprintf_r+0x22c>)
 8005730:	a904      	add	r1, sp, #16
 8005732:	f000 f87d 	bl	8005830 <_printf_i>
 8005736:	e7e4      	b.n	8005702 <_vfiprintf_r+0x1e6>
 8005738:	08005eaa 	.word	0x08005eaa
 800573c:	08005eb0 	.word	0x08005eb0
 8005740:	08005eb4 	.word	0x08005eb4
 8005744:	00000000 	.word	0x00000000
 8005748:	080054f7 	.word	0x080054f7

0800574c <_printf_common>:
 800574c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005750:	4616      	mov	r6, r2
 8005752:	4698      	mov	r8, r3
 8005754:	688a      	ldr	r2, [r1, #8]
 8005756:	690b      	ldr	r3, [r1, #16]
 8005758:	4607      	mov	r7, r0
 800575a:	4293      	cmp	r3, r2
 800575c:	bfb8      	it	lt
 800575e:	4613      	movlt	r3, r2
 8005760:	6033      	str	r3, [r6, #0]
 8005762:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005766:	460c      	mov	r4, r1
 8005768:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800576c:	b10a      	cbz	r2, 8005772 <_printf_common+0x26>
 800576e:	3301      	adds	r3, #1
 8005770:	6033      	str	r3, [r6, #0]
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	0699      	lsls	r1, r3, #26
 8005776:	bf42      	ittt	mi
 8005778:	6833      	ldrmi	r3, [r6, #0]
 800577a:	3302      	addmi	r3, #2
 800577c:	6033      	strmi	r3, [r6, #0]
 800577e:	6825      	ldr	r5, [r4, #0]
 8005780:	f015 0506 	ands.w	r5, r5, #6
 8005784:	d106      	bne.n	8005794 <_printf_common+0x48>
 8005786:	f104 0a19 	add.w	sl, r4, #25
 800578a:	68e3      	ldr	r3, [r4, #12]
 800578c:	6832      	ldr	r2, [r6, #0]
 800578e:	1a9b      	subs	r3, r3, r2
 8005790:	42ab      	cmp	r3, r5
 8005792:	dc2b      	bgt.n	80057ec <_printf_common+0xa0>
 8005794:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005798:	6822      	ldr	r2, [r4, #0]
 800579a:	3b00      	subs	r3, #0
 800579c:	bf18      	it	ne
 800579e:	2301      	movne	r3, #1
 80057a0:	0692      	lsls	r2, r2, #26
 80057a2:	d430      	bmi.n	8005806 <_printf_common+0xba>
 80057a4:	4641      	mov	r1, r8
 80057a6:	4638      	mov	r0, r7
 80057a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057ac:	47c8      	blx	r9
 80057ae:	3001      	adds	r0, #1
 80057b0:	d023      	beq.n	80057fa <_printf_common+0xae>
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	6922      	ldr	r2, [r4, #16]
 80057b6:	f003 0306 	and.w	r3, r3, #6
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	bf14      	ite	ne
 80057be:	2500      	movne	r5, #0
 80057c0:	6833      	ldreq	r3, [r6, #0]
 80057c2:	f04f 0600 	mov.w	r6, #0
 80057c6:	bf08      	it	eq
 80057c8:	68e5      	ldreq	r5, [r4, #12]
 80057ca:	f104 041a 	add.w	r4, r4, #26
 80057ce:	bf08      	it	eq
 80057d0:	1aed      	subeq	r5, r5, r3
 80057d2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80057d6:	bf08      	it	eq
 80057d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057dc:	4293      	cmp	r3, r2
 80057de:	bfc4      	itt	gt
 80057e0:	1a9b      	subgt	r3, r3, r2
 80057e2:	18ed      	addgt	r5, r5, r3
 80057e4:	42b5      	cmp	r5, r6
 80057e6:	d11a      	bne.n	800581e <_printf_common+0xd2>
 80057e8:	2000      	movs	r0, #0
 80057ea:	e008      	b.n	80057fe <_printf_common+0xb2>
 80057ec:	2301      	movs	r3, #1
 80057ee:	4652      	mov	r2, sl
 80057f0:	4641      	mov	r1, r8
 80057f2:	4638      	mov	r0, r7
 80057f4:	47c8      	blx	r9
 80057f6:	3001      	adds	r0, #1
 80057f8:	d103      	bne.n	8005802 <_printf_common+0xb6>
 80057fa:	f04f 30ff 	mov.w	r0, #4294967295
 80057fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005802:	3501      	adds	r5, #1
 8005804:	e7c1      	b.n	800578a <_printf_common+0x3e>
 8005806:	2030      	movs	r0, #48	@ 0x30
 8005808:	18e1      	adds	r1, r4, r3
 800580a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005814:	4422      	add	r2, r4
 8005816:	3302      	adds	r3, #2
 8005818:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800581c:	e7c2      	b.n	80057a4 <_printf_common+0x58>
 800581e:	2301      	movs	r3, #1
 8005820:	4622      	mov	r2, r4
 8005822:	4641      	mov	r1, r8
 8005824:	4638      	mov	r0, r7
 8005826:	47c8      	blx	r9
 8005828:	3001      	adds	r0, #1
 800582a:	d0e6      	beq.n	80057fa <_printf_common+0xae>
 800582c:	3601      	adds	r6, #1
 800582e:	e7d9      	b.n	80057e4 <_printf_common+0x98>

08005830 <_printf_i>:
 8005830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005834:	7e0f      	ldrb	r7, [r1, #24]
 8005836:	4691      	mov	r9, r2
 8005838:	2f78      	cmp	r7, #120	@ 0x78
 800583a:	4680      	mov	r8, r0
 800583c:	460c      	mov	r4, r1
 800583e:	469a      	mov	sl, r3
 8005840:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005842:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005846:	d807      	bhi.n	8005858 <_printf_i+0x28>
 8005848:	2f62      	cmp	r7, #98	@ 0x62
 800584a:	d80a      	bhi.n	8005862 <_printf_i+0x32>
 800584c:	2f00      	cmp	r7, #0
 800584e:	f000 80d1 	beq.w	80059f4 <_printf_i+0x1c4>
 8005852:	2f58      	cmp	r7, #88	@ 0x58
 8005854:	f000 80b8 	beq.w	80059c8 <_printf_i+0x198>
 8005858:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800585c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005860:	e03a      	b.n	80058d8 <_printf_i+0xa8>
 8005862:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005866:	2b15      	cmp	r3, #21
 8005868:	d8f6      	bhi.n	8005858 <_printf_i+0x28>
 800586a:	a101      	add	r1, pc, #4	@ (adr r1, 8005870 <_printf_i+0x40>)
 800586c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005870:	080058c9 	.word	0x080058c9
 8005874:	080058dd 	.word	0x080058dd
 8005878:	08005859 	.word	0x08005859
 800587c:	08005859 	.word	0x08005859
 8005880:	08005859 	.word	0x08005859
 8005884:	08005859 	.word	0x08005859
 8005888:	080058dd 	.word	0x080058dd
 800588c:	08005859 	.word	0x08005859
 8005890:	08005859 	.word	0x08005859
 8005894:	08005859 	.word	0x08005859
 8005898:	08005859 	.word	0x08005859
 800589c:	080059db 	.word	0x080059db
 80058a0:	08005907 	.word	0x08005907
 80058a4:	08005995 	.word	0x08005995
 80058a8:	08005859 	.word	0x08005859
 80058ac:	08005859 	.word	0x08005859
 80058b0:	080059fd 	.word	0x080059fd
 80058b4:	08005859 	.word	0x08005859
 80058b8:	08005907 	.word	0x08005907
 80058bc:	08005859 	.word	0x08005859
 80058c0:	08005859 	.word	0x08005859
 80058c4:	0800599d 	.word	0x0800599d
 80058c8:	6833      	ldr	r3, [r6, #0]
 80058ca:	1d1a      	adds	r2, r3, #4
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6032      	str	r2, [r6, #0]
 80058d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058d8:	2301      	movs	r3, #1
 80058da:	e09c      	b.n	8005a16 <_printf_i+0x1e6>
 80058dc:	6833      	ldr	r3, [r6, #0]
 80058de:	6820      	ldr	r0, [r4, #0]
 80058e0:	1d19      	adds	r1, r3, #4
 80058e2:	6031      	str	r1, [r6, #0]
 80058e4:	0606      	lsls	r6, r0, #24
 80058e6:	d501      	bpl.n	80058ec <_printf_i+0xbc>
 80058e8:	681d      	ldr	r5, [r3, #0]
 80058ea:	e003      	b.n	80058f4 <_printf_i+0xc4>
 80058ec:	0645      	lsls	r5, r0, #25
 80058ee:	d5fb      	bpl.n	80058e8 <_printf_i+0xb8>
 80058f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80058f4:	2d00      	cmp	r5, #0
 80058f6:	da03      	bge.n	8005900 <_printf_i+0xd0>
 80058f8:	232d      	movs	r3, #45	@ 0x2d
 80058fa:	426d      	negs	r5, r5
 80058fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005900:	230a      	movs	r3, #10
 8005902:	4858      	ldr	r0, [pc, #352]	@ (8005a64 <_printf_i+0x234>)
 8005904:	e011      	b.n	800592a <_printf_i+0xfa>
 8005906:	6821      	ldr	r1, [r4, #0]
 8005908:	6833      	ldr	r3, [r6, #0]
 800590a:	0608      	lsls	r0, r1, #24
 800590c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005910:	d402      	bmi.n	8005918 <_printf_i+0xe8>
 8005912:	0649      	lsls	r1, r1, #25
 8005914:	bf48      	it	mi
 8005916:	b2ad      	uxthmi	r5, r5
 8005918:	2f6f      	cmp	r7, #111	@ 0x6f
 800591a:	6033      	str	r3, [r6, #0]
 800591c:	bf14      	ite	ne
 800591e:	230a      	movne	r3, #10
 8005920:	2308      	moveq	r3, #8
 8005922:	4850      	ldr	r0, [pc, #320]	@ (8005a64 <_printf_i+0x234>)
 8005924:	2100      	movs	r1, #0
 8005926:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800592a:	6866      	ldr	r6, [r4, #4]
 800592c:	2e00      	cmp	r6, #0
 800592e:	60a6      	str	r6, [r4, #8]
 8005930:	db05      	blt.n	800593e <_printf_i+0x10e>
 8005932:	6821      	ldr	r1, [r4, #0]
 8005934:	432e      	orrs	r6, r5
 8005936:	f021 0104 	bic.w	r1, r1, #4
 800593a:	6021      	str	r1, [r4, #0]
 800593c:	d04b      	beq.n	80059d6 <_printf_i+0x1a6>
 800593e:	4616      	mov	r6, r2
 8005940:	fbb5 f1f3 	udiv	r1, r5, r3
 8005944:	fb03 5711 	mls	r7, r3, r1, r5
 8005948:	5dc7      	ldrb	r7, [r0, r7]
 800594a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800594e:	462f      	mov	r7, r5
 8005950:	42bb      	cmp	r3, r7
 8005952:	460d      	mov	r5, r1
 8005954:	d9f4      	bls.n	8005940 <_printf_i+0x110>
 8005956:	2b08      	cmp	r3, #8
 8005958:	d10b      	bne.n	8005972 <_printf_i+0x142>
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	07df      	lsls	r7, r3, #31
 800595e:	d508      	bpl.n	8005972 <_printf_i+0x142>
 8005960:	6923      	ldr	r3, [r4, #16]
 8005962:	6861      	ldr	r1, [r4, #4]
 8005964:	4299      	cmp	r1, r3
 8005966:	bfde      	ittt	le
 8005968:	2330      	movle	r3, #48	@ 0x30
 800596a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800596e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005972:	1b92      	subs	r2, r2, r6
 8005974:	6122      	str	r2, [r4, #16]
 8005976:	464b      	mov	r3, r9
 8005978:	4621      	mov	r1, r4
 800597a:	4640      	mov	r0, r8
 800597c:	f8cd a000 	str.w	sl, [sp]
 8005980:	aa03      	add	r2, sp, #12
 8005982:	f7ff fee3 	bl	800574c <_printf_common>
 8005986:	3001      	adds	r0, #1
 8005988:	d14a      	bne.n	8005a20 <_printf_i+0x1f0>
 800598a:	f04f 30ff 	mov.w	r0, #4294967295
 800598e:	b004      	add	sp, #16
 8005990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	f043 0320 	orr.w	r3, r3, #32
 800599a:	6023      	str	r3, [r4, #0]
 800599c:	2778      	movs	r7, #120	@ 0x78
 800599e:	4832      	ldr	r0, [pc, #200]	@ (8005a68 <_printf_i+0x238>)
 80059a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	6831      	ldr	r1, [r6, #0]
 80059a8:	061f      	lsls	r7, r3, #24
 80059aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80059ae:	d402      	bmi.n	80059b6 <_printf_i+0x186>
 80059b0:	065f      	lsls	r7, r3, #25
 80059b2:	bf48      	it	mi
 80059b4:	b2ad      	uxthmi	r5, r5
 80059b6:	6031      	str	r1, [r6, #0]
 80059b8:	07d9      	lsls	r1, r3, #31
 80059ba:	bf44      	itt	mi
 80059bc:	f043 0320 	orrmi.w	r3, r3, #32
 80059c0:	6023      	strmi	r3, [r4, #0]
 80059c2:	b11d      	cbz	r5, 80059cc <_printf_i+0x19c>
 80059c4:	2310      	movs	r3, #16
 80059c6:	e7ad      	b.n	8005924 <_printf_i+0xf4>
 80059c8:	4826      	ldr	r0, [pc, #152]	@ (8005a64 <_printf_i+0x234>)
 80059ca:	e7e9      	b.n	80059a0 <_printf_i+0x170>
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	f023 0320 	bic.w	r3, r3, #32
 80059d2:	6023      	str	r3, [r4, #0]
 80059d4:	e7f6      	b.n	80059c4 <_printf_i+0x194>
 80059d6:	4616      	mov	r6, r2
 80059d8:	e7bd      	b.n	8005956 <_printf_i+0x126>
 80059da:	6833      	ldr	r3, [r6, #0]
 80059dc:	6825      	ldr	r5, [r4, #0]
 80059de:	1d18      	adds	r0, r3, #4
 80059e0:	6961      	ldr	r1, [r4, #20]
 80059e2:	6030      	str	r0, [r6, #0]
 80059e4:	062e      	lsls	r6, r5, #24
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	d501      	bpl.n	80059ee <_printf_i+0x1be>
 80059ea:	6019      	str	r1, [r3, #0]
 80059ec:	e002      	b.n	80059f4 <_printf_i+0x1c4>
 80059ee:	0668      	lsls	r0, r5, #25
 80059f0:	d5fb      	bpl.n	80059ea <_printf_i+0x1ba>
 80059f2:	8019      	strh	r1, [r3, #0]
 80059f4:	2300      	movs	r3, #0
 80059f6:	4616      	mov	r6, r2
 80059f8:	6123      	str	r3, [r4, #16]
 80059fa:	e7bc      	b.n	8005976 <_printf_i+0x146>
 80059fc:	6833      	ldr	r3, [r6, #0]
 80059fe:	2100      	movs	r1, #0
 8005a00:	1d1a      	adds	r2, r3, #4
 8005a02:	6032      	str	r2, [r6, #0]
 8005a04:	681e      	ldr	r6, [r3, #0]
 8005a06:	6862      	ldr	r2, [r4, #4]
 8005a08:	4630      	mov	r0, r6
 8005a0a:	f000 f96b 	bl	8005ce4 <memchr>
 8005a0e:	b108      	cbz	r0, 8005a14 <_printf_i+0x1e4>
 8005a10:	1b80      	subs	r0, r0, r6
 8005a12:	6060      	str	r0, [r4, #4]
 8005a14:	6863      	ldr	r3, [r4, #4]
 8005a16:	6123      	str	r3, [r4, #16]
 8005a18:	2300      	movs	r3, #0
 8005a1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a1e:	e7aa      	b.n	8005976 <_printf_i+0x146>
 8005a20:	4632      	mov	r2, r6
 8005a22:	4649      	mov	r1, r9
 8005a24:	4640      	mov	r0, r8
 8005a26:	6923      	ldr	r3, [r4, #16]
 8005a28:	47d0      	blx	sl
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	d0ad      	beq.n	800598a <_printf_i+0x15a>
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	079b      	lsls	r3, r3, #30
 8005a32:	d413      	bmi.n	8005a5c <_printf_i+0x22c>
 8005a34:	68e0      	ldr	r0, [r4, #12]
 8005a36:	9b03      	ldr	r3, [sp, #12]
 8005a38:	4298      	cmp	r0, r3
 8005a3a:	bfb8      	it	lt
 8005a3c:	4618      	movlt	r0, r3
 8005a3e:	e7a6      	b.n	800598e <_printf_i+0x15e>
 8005a40:	2301      	movs	r3, #1
 8005a42:	4632      	mov	r2, r6
 8005a44:	4649      	mov	r1, r9
 8005a46:	4640      	mov	r0, r8
 8005a48:	47d0      	blx	sl
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	d09d      	beq.n	800598a <_printf_i+0x15a>
 8005a4e:	3501      	adds	r5, #1
 8005a50:	68e3      	ldr	r3, [r4, #12]
 8005a52:	9903      	ldr	r1, [sp, #12]
 8005a54:	1a5b      	subs	r3, r3, r1
 8005a56:	42ab      	cmp	r3, r5
 8005a58:	dcf2      	bgt.n	8005a40 <_printf_i+0x210>
 8005a5a:	e7eb      	b.n	8005a34 <_printf_i+0x204>
 8005a5c:	2500      	movs	r5, #0
 8005a5e:	f104 0619 	add.w	r6, r4, #25
 8005a62:	e7f5      	b.n	8005a50 <_printf_i+0x220>
 8005a64:	08005ebb 	.word	0x08005ebb
 8005a68:	08005ecc 	.word	0x08005ecc

08005a6c <__sflush_r>:
 8005a6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a72:	0716      	lsls	r6, r2, #28
 8005a74:	4605      	mov	r5, r0
 8005a76:	460c      	mov	r4, r1
 8005a78:	d454      	bmi.n	8005b24 <__sflush_r+0xb8>
 8005a7a:	684b      	ldr	r3, [r1, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	dc02      	bgt.n	8005a86 <__sflush_r+0x1a>
 8005a80:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	dd48      	ble.n	8005b18 <__sflush_r+0xac>
 8005a86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a88:	2e00      	cmp	r6, #0
 8005a8a:	d045      	beq.n	8005b18 <__sflush_r+0xac>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005a92:	682f      	ldr	r7, [r5, #0]
 8005a94:	6a21      	ldr	r1, [r4, #32]
 8005a96:	602b      	str	r3, [r5, #0]
 8005a98:	d030      	beq.n	8005afc <__sflush_r+0x90>
 8005a9a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005a9c:	89a3      	ldrh	r3, [r4, #12]
 8005a9e:	0759      	lsls	r1, r3, #29
 8005aa0:	d505      	bpl.n	8005aae <__sflush_r+0x42>
 8005aa2:	6863      	ldr	r3, [r4, #4]
 8005aa4:	1ad2      	subs	r2, r2, r3
 8005aa6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005aa8:	b10b      	cbz	r3, 8005aae <__sflush_r+0x42>
 8005aaa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005aac:	1ad2      	subs	r2, r2, r3
 8005aae:	2300      	movs	r3, #0
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ab4:	6a21      	ldr	r1, [r4, #32]
 8005ab6:	47b0      	blx	r6
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	89a3      	ldrh	r3, [r4, #12]
 8005abc:	d106      	bne.n	8005acc <__sflush_r+0x60>
 8005abe:	6829      	ldr	r1, [r5, #0]
 8005ac0:	291d      	cmp	r1, #29
 8005ac2:	d82b      	bhi.n	8005b1c <__sflush_r+0xb0>
 8005ac4:	4a28      	ldr	r2, [pc, #160]	@ (8005b68 <__sflush_r+0xfc>)
 8005ac6:	40ca      	lsrs	r2, r1
 8005ac8:	07d6      	lsls	r6, r2, #31
 8005aca:	d527      	bpl.n	8005b1c <__sflush_r+0xb0>
 8005acc:	2200      	movs	r2, #0
 8005ace:	6062      	str	r2, [r4, #4]
 8005ad0:	6922      	ldr	r2, [r4, #16]
 8005ad2:	04d9      	lsls	r1, r3, #19
 8005ad4:	6022      	str	r2, [r4, #0]
 8005ad6:	d504      	bpl.n	8005ae2 <__sflush_r+0x76>
 8005ad8:	1c42      	adds	r2, r0, #1
 8005ada:	d101      	bne.n	8005ae0 <__sflush_r+0x74>
 8005adc:	682b      	ldr	r3, [r5, #0]
 8005ade:	b903      	cbnz	r3, 8005ae2 <__sflush_r+0x76>
 8005ae0:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ae2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ae4:	602f      	str	r7, [r5, #0]
 8005ae6:	b1b9      	cbz	r1, 8005b18 <__sflush_r+0xac>
 8005ae8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005aec:	4299      	cmp	r1, r3
 8005aee:	d002      	beq.n	8005af6 <__sflush_r+0x8a>
 8005af0:	4628      	mov	r0, r5
 8005af2:	f7ff fbf5 	bl	80052e0 <_free_r>
 8005af6:	2300      	movs	r3, #0
 8005af8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005afa:	e00d      	b.n	8005b18 <__sflush_r+0xac>
 8005afc:	2301      	movs	r3, #1
 8005afe:	4628      	mov	r0, r5
 8005b00:	47b0      	blx	r6
 8005b02:	4602      	mov	r2, r0
 8005b04:	1c50      	adds	r0, r2, #1
 8005b06:	d1c9      	bne.n	8005a9c <__sflush_r+0x30>
 8005b08:	682b      	ldr	r3, [r5, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d0c6      	beq.n	8005a9c <__sflush_r+0x30>
 8005b0e:	2b1d      	cmp	r3, #29
 8005b10:	d001      	beq.n	8005b16 <__sflush_r+0xaa>
 8005b12:	2b16      	cmp	r3, #22
 8005b14:	d11d      	bne.n	8005b52 <__sflush_r+0xe6>
 8005b16:	602f      	str	r7, [r5, #0]
 8005b18:	2000      	movs	r0, #0
 8005b1a:	e021      	b.n	8005b60 <__sflush_r+0xf4>
 8005b1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b20:	b21b      	sxth	r3, r3
 8005b22:	e01a      	b.n	8005b5a <__sflush_r+0xee>
 8005b24:	690f      	ldr	r7, [r1, #16]
 8005b26:	2f00      	cmp	r7, #0
 8005b28:	d0f6      	beq.n	8005b18 <__sflush_r+0xac>
 8005b2a:	0793      	lsls	r3, r2, #30
 8005b2c:	bf18      	it	ne
 8005b2e:	2300      	movne	r3, #0
 8005b30:	680e      	ldr	r6, [r1, #0]
 8005b32:	bf08      	it	eq
 8005b34:	694b      	ldreq	r3, [r1, #20]
 8005b36:	1bf6      	subs	r6, r6, r7
 8005b38:	600f      	str	r7, [r1, #0]
 8005b3a:	608b      	str	r3, [r1, #8]
 8005b3c:	2e00      	cmp	r6, #0
 8005b3e:	ddeb      	ble.n	8005b18 <__sflush_r+0xac>
 8005b40:	4633      	mov	r3, r6
 8005b42:	463a      	mov	r2, r7
 8005b44:	4628      	mov	r0, r5
 8005b46:	6a21      	ldr	r1, [r4, #32]
 8005b48:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005b4c:	47e0      	blx	ip
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	dc07      	bgt.n	8005b62 <__sflush_r+0xf6>
 8005b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5e:	81a3      	strh	r3, [r4, #12]
 8005b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b62:	4407      	add	r7, r0
 8005b64:	1a36      	subs	r6, r6, r0
 8005b66:	e7e9      	b.n	8005b3c <__sflush_r+0xd0>
 8005b68:	20400001 	.word	0x20400001

08005b6c <_fflush_r>:
 8005b6c:	b538      	push	{r3, r4, r5, lr}
 8005b6e:	690b      	ldr	r3, [r1, #16]
 8005b70:	4605      	mov	r5, r0
 8005b72:	460c      	mov	r4, r1
 8005b74:	b913      	cbnz	r3, 8005b7c <_fflush_r+0x10>
 8005b76:	2500      	movs	r5, #0
 8005b78:	4628      	mov	r0, r5
 8005b7a:	bd38      	pop	{r3, r4, r5, pc}
 8005b7c:	b118      	cbz	r0, 8005b86 <_fflush_r+0x1a>
 8005b7e:	6a03      	ldr	r3, [r0, #32]
 8005b80:	b90b      	cbnz	r3, 8005b86 <_fflush_r+0x1a>
 8005b82:	f7ff f9a5 	bl	8004ed0 <__sinit>
 8005b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0f3      	beq.n	8005b76 <_fflush_r+0xa>
 8005b8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005b90:	07d0      	lsls	r0, r2, #31
 8005b92:	d404      	bmi.n	8005b9e <_fflush_r+0x32>
 8005b94:	0599      	lsls	r1, r3, #22
 8005b96:	d402      	bmi.n	8005b9e <_fflush_r+0x32>
 8005b98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b9a:	f7ff fb90 	bl	80052be <__retarget_lock_acquire_recursive>
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	4621      	mov	r1, r4
 8005ba2:	f7ff ff63 	bl	8005a6c <__sflush_r>
 8005ba6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ba8:	4605      	mov	r5, r0
 8005baa:	07da      	lsls	r2, r3, #31
 8005bac:	d4e4      	bmi.n	8005b78 <_fflush_r+0xc>
 8005bae:	89a3      	ldrh	r3, [r4, #12]
 8005bb0:	059b      	lsls	r3, r3, #22
 8005bb2:	d4e1      	bmi.n	8005b78 <_fflush_r+0xc>
 8005bb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bb6:	f7ff fb83 	bl	80052c0 <__retarget_lock_release_recursive>
 8005bba:	e7dd      	b.n	8005b78 <_fflush_r+0xc>

08005bbc <__swhatbuf_r>:
 8005bbc:	b570      	push	{r4, r5, r6, lr}
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc4:	4615      	mov	r5, r2
 8005bc6:	2900      	cmp	r1, #0
 8005bc8:	461e      	mov	r6, r3
 8005bca:	b096      	sub	sp, #88	@ 0x58
 8005bcc:	da0c      	bge.n	8005be8 <__swhatbuf_r+0x2c>
 8005bce:	89a3      	ldrh	r3, [r4, #12]
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005bd6:	bf14      	ite	ne
 8005bd8:	2340      	movne	r3, #64	@ 0x40
 8005bda:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005bde:	2000      	movs	r0, #0
 8005be0:	6031      	str	r1, [r6, #0]
 8005be2:	602b      	str	r3, [r5, #0]
 8005be4:	b016      	add	sp, #88	@ 0x58
 8005be6:	bd70      	pop	{r4, r5, r6, pc}
 8005be8:	466a      	mov	r2, sp
 8005bea:	f000 f849 	bl	8005c80 <_fstat_r>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	dbed      	blt.n	8005bce <__swhatbuf_r+0x12>
 8005bf2:	9901      	ldr	r1, [sp, #4]
 8005bf4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005bf8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005bfc:	4259      	negs	r1, r3
 8005bfe:	4159      	adcs	r1, r3
 8005c00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c04:	e7eb      	b.n	8005bde <__swhatbuf_r+0x22>

08005c06 <__smakebuf_r>:
 8005c06:	898b      	ldrh	r3, [r1, #12]
 8005c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c0a:	079d      	lsls	r5, r3, #30
 8005c0c:	4606      	mov	r6, r0
 8005c0e:	460c      	mov	r4, r1
 8005c10:	d507      	bpl.n	8005c22 <__smakebuf_r+0x1c>
 8005c12:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c16:	6023      	str	r3, [r4, #0]
 8005c18:	6123      	str	r3, [r4, #16]
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	6163      	str	r3, [r4, #20]
 8005c1e:	b003      	add	sp, #12
 8005c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c22:	466a      	mov	r2, sp
 8005c24:	ab01      	add	r3, sp, #4
 8005c26:	f7ff ffc9 	bl	8005bbc <__swhatbuf_r>
 8005c2a:	9f00      	ldr	r7, [sp, #0]
 8005c2c:	4605      	mov	r5, r0
 8005c2e:	4639      	mov	r1, r7
 8005c30:	4630      	mov	r0, r6
 8005c32:	f7ff fbbf 	bl	80053b4 <_malloc_r>
 8005c36:	b948      	cbnz	r0, 8005c4c <__smakebuf_r+0x46>
 8005c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c3c:	059a      	lsls	r2, r3, #22
 8005c3e:	d4ee      	bmi.n	8005c1e <__smakebuf_r+0x18>
 8005c40:	f023 0303 	bic.w	r3, r3, #3
 8005c44:	f043 0302 	orr.w	r3, r3, #2
 8005c48:	81a3      	strh	r3, [r4, #12]
 8005c4a:	e7e2      	b.n	8005c12 <__smakebuf_r+0xc>
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c56:	81a3      	strh	r3, [r4, #12]
 8005c58:	9b01      	ldr	r3, [sp, #4]
 8005c5a:	6020      	str	r0, [r4, #0]
 8005c5c:	b15b      	cbz	r3, 8005c76 <__smakebuf_r+0x70>
 8005c5e:	4630      	mov	r0, r6
 8005c60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c64:	f000 f81e 	bl	8005ca4 <_isatty_r>
 8005c68:	b128      	cbz	r0, 8005c76 <__smakebuf_r+0x70>
 8005c6a:	89a3      	ldrh	r3, [r4, #12]
 8005c6c:	f023 0303 	bic.w	r3, r3, #3
 8005c70:	f043 0301 	orr.w	r3, r3, #1
 8005c74:	81a3      	strh	r3, [r4, #12]
 8005c76:	89a3      	ldrh	r3, [r4, #12]
 8005c78:	431d      	orrs	r5, r3
 8005c7a:	81a5      	strh	r5, [r4, #12]
 8005c7c:	e7cf      	b.n	8005c1e <__smakebuf_r+0x18>
	...

08005c80 <_fstat_r>:
 8005c80:	b538      	push	{r3, r4, r5, lr}
 8005c82:	2300      	movs	r3, #0
 8005c84:	4d06      	ldr	r5, [pc, #24]	@ (8005ca0 <_fstat_r+0x20>)
 8005c86:	4604      	mov	r4, r0
 8005c88:	4608      	mov	r0, r1
 8005c8a:	4611      	mov	r1, r2
 8005c8c:	602b      	str	r3, [r5, #0]
 8005c8e:	f7fa ffa8 	bl	8000be2 <_fstat>
 8005c92:	1c43      	adds	r3, r0, #1
 8005c94:	d102      	bne.n	8005c9c <_fstat_r+0x1c>
 8005c96:	682b      	ldr	r3, [r5, #0]
 8005c98:	b103      	cbz	r3, 8005c9c <_fstat_r+0x1c>
 8005c9a:	6023      	str	r3, [r4, #0]
 8005c9c:	bd38      	pop	{r3, r4, r5, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20001bb0 	.word	0x20001bb0

08005ca4 <_isatty_r>:
 8005ca4:	b538      	push	{r3, r4, r5, lr}
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	4d05      	ldr	r5, [pc, #20]	@ (8005cc0 <_isatty_r+0x1c>)
 8005caa:	4604      	mov	r4, r0
 8005cac:	4608      	mov	r0, r1
 8005cae:	602b      	str	r3, [r5, #0]
 8005cb0:	f7fa ffa6 	bl	8000c00 <_isatty>
 8005cb4:	1c43      	adds	r3, r0, #1
 8005cb6:	d102      	bne.n	8005cbe <_isatty_r+0x1a>
 8005cb8:	682b      	ldr	r3, [r5, #0]
 8005cba:	b103      	cbz	r3, 8005cbe <_isatty_r+0x1a>
 8005cbc:	6023      	str	r3, [r4, #0]
 8005cbe:	bd38      	pop	{r3, r4, r5, pc}
 8005cc0:	20001bb0 	.word	0x20001bb0

08005cc4 <_sbrk_r>:
 8005cc4:	b538      	push	{r3, r4, r5, lr}
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	4d05      	ldr	r5, [pc, #20]	@ (8005ce0 <_sbrk_r+0x1c>)
 8005cca:	4604      	mov	r4, r0
 8005ccc:	4608      	mov	r0, r1
 8005cce:	602b      	str	r3, [r5, #0]
 8005cd0:	f7fa ffac 	bl	8000c2c <_sbrk>
 8005cd4:	1c43      	adds	r3, r0, #1
 8005cd6:	d102      	bne.n	8005cde <_sbrk_r+0x1a>
 8005cd8:	682b      	ldr	r3, [r5, #0]
 8005cda:	b103      	cbz	r3, 8005cde <_sbrk_r+0x1a>
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	bd38      	pop	{r3, r4, r5, pc}
 8005ce0:	20001bb0 	.word	0x20001bb0

08005ce4 <memchr>:
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	b510      	push	{r4, lr}
 8005ce8:	b2c9      	uxtb	r1, r1
 8005cea:	4402      	add	r2, r0
 8005cec:	4293      	cmp	r3, r2
 8005cee:	4618      	mov	r0, r3
 8005cf0:	d101      	bne.n	8005cf6 <memchr+0x12>
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	e003      	b.n	8005cfe <memchr+0x1a>
 8005cf6:	7804      	ldrb	r4, [r0, #0]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	428c      	cmp	r4, r1
 8005cfc:	d1f6      	bne.n	8005cec <memchr+0x8>
 8005cfe:	bd10      	pop	{r4, pc}

08005d00 <_init>:
 8005d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d02:	bf00      	nop
 8005d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d06:	bc08      	pop	{r3}
 8005d08:	469e      	mov	lr, r3
 8005d0a:	4770      	bx	lr

08005d0c <_fini>:
 8005d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0e:	bf00      	nop
 8005d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d12:	bc08      	pop	{r3}
 8005d14:	469e      	mov	lr, r3
 8005d16:	4770      	bx	lr
