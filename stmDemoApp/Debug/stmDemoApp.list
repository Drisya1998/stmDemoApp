
stmDemoApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b58  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  08006c68  08006c68  00007c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fec  08006fec  000080c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006fec  08006fec  000080c8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006fec  08006fec  000080c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fec  08006fec  00007fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ff0  08006ff0  00007ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c8  20000000  08006ff4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f54  200000c8  080070bc  000080c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000401c  080070bc  0000901c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000080c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a54  00000000  00000000  000080f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037cd  00000000  00000000  0001ab45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  0001e318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce2  00000000  00000000  0001f438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a39b  00000000  00000000  0002011a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001549b  00000000  00000000  0003a4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee88  00000000  00000000  0004f950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de7d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b3c  00000000  00000000  000de81c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e3358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000c8 	.word	0x200000c8
 800012c:	00000000 	.word	0x00000000
 8000130:	08006c50 	.word	0x08006c50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000cc 	.word	0x200000cc
 800014c:	08006c50 	.word	0x08006c50

08000150 <AppMain>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void AppMain()
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
	bool blFlag =  FALSE;
 8000156:	2300      	movs	r3, #0
 8000158:	71fb      	strb	r3, [r7, #7]

	printf("Hello from STM32 via UART!\r\n");
 800015a:	480a      	ldr	r0, [pc, #40]	@ (8000184 <AppMain+0x34>)
 800015c:	f005 fefe 	bl	8005f5c <puts>
	blFlag = TaskInit();
 8000160:	f000 fb78 	bl	8000854 <TaskInit>
 8000164:	4603      	mov	r3, r0
 8000166:	71fb      	strb	r3, [r7, #7]

	if(blFlag == FALSE)
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	f083 0301 	eor.w	r3, r3, #1
 800016e:	b2db      	uxtb	r3, r3
 8000170:	2b00      	cmp	r3, #0
 8000172:	d002      	beq.n	800017a <AppMain+0x2a>
	{
		printf("Thread Creation Failed\r\n");
 8000174:	4804      	ldr	r0, [pc, #16]	@ (8000188 <AppMain+0x38>)
 8000176:	f005 fef1 	bl	8005f5c <puts>
	}
}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	08006c68 	.word	0x08006c68
 8000188:	08006c84 	.word	0x08006c84

0800018c <WatchDogTimerInit>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void WatchDogTimerInit()
{
 800018c:	b480      	push	{r7}
 800018e:	af00      	add	r7, sp, #0
	pstIWDG->stKR.ulKEY = WRITE_ACCESS;
 8000190:	4b10      	ldr	r3, [pc, #64]	@ (80001d4 <WatchDogTimerInit+0x48>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000198:	801a      	strh	r2, [r3, #0]
	pstIWDG->stPR.ulPR = PRESCALAR_VALUE;
 800019a:	4b0e      	ldr	r3, [pc, #56]	@ (80001d4 <WatchDogTimerInit+0x48>)
 800019c:	681a      	ldr	r2, [r3, #0]
 800019e:	7913      	ldrb	r3, [r2, #4]
 80001a0:	2106      	movs	r1, #6
 80001a2:	f361 0302 	bfi	r3, r1, #0, #3
 80001a6:	7113      	strb	r3, [r2, #4]
	pstIWDG->stRLR.ulRLR = RELOAD_VALUE;
 80001a8:	4b0a      	ldr	r3, [pc, #40]	@ (80001d4 <WatchDogTimerInit+0x48>)
 80001aa:	681a      	ldr	r2, [r3, #0]
 80001ac:	8913      	ldrh	r3, [r2, #8]
 80001ae:	f44f 7189 	mov.w	r1, #274	@ 0x112
 80001b2:	f361 030b 	bfi	r3, r1, #0, #12
 80001b6:	8113      	strh	r3, [r2, #8]
	pstIWDG->stKR.ulKEY = RESET_COUNTER;
 80001b8:	4b06      	ldr	r3, [pc, #24]	@ (80001d4 <WatchDogTimerInit+0x48>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80001c0:	801a      	strh	r2, [r3, #0]
	pstIWDG->stKR.ulKEY = START_WATCHDOG;
 80001c2:	4b04      	ldr	r3, [pc, #16]	@ (80001d4 <WatchDogTimerInit+0x48>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80001ca:	801a      	strh	r2, [r3, #0]
}
 80001cc:	bf00      	nop
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr
 80001d4:	20000000 	.word	0x20000000

080001d8 <WatchdogTimerClear>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void WatchdogTimerClear()
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	pstIWDG->stKR.ulKEY = RESET_COUNTER;
 80001dc:	4b04      	ldr	r3, [pc, #16]	@ (80001f0 <WatchdogTimerClear+0x18>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80001e4:	801a      	strh	r2, [r3, #0]
}
 80001e6:	bf00      	nop
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bc80      	pop	{r7}
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	20000000 	.word	0x20000000

080001f4 <GPIOLEDSet>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
bool GPIOLEDSet(PORT_TYPE LEDPort, PIN_NUMBER LEDPin, bool blLEDStatus)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	4603      	mov	r3, r0
 80001fc:	71fb      	strb	r3, [r7, #7]
 80001fe:	460b      	mov	r3, r1
 8000200:	71bb      	strb	r3, [r7, #6]
 8000202:	4613      	mov	r3, r2
 8000204:	717b      	strb	r3, [r7, #5]
	bool blFlag = FALSE;
 8000206:	2300      	movs	r3, #0
 8000208:	75fb      	strb	r3, [r7, #23]
	GPIO_TypeDef* gpioPort = NULL;
 800020a:	2300      	movs	r3, #0
 800020c:	613b      	str	r3, [r7, #16]
	uint32_t gpioPin = 1;
 800020e:	2301      	movs	r3, #1
 8000210:	60fb      	str	r3, [r7, #12]
	uint8 ucIndex = 0;
 8000212:	2300      	movs	r3, #0
 8000214:	72fb      	strb	r3, [r7, #11]

	switch(LEDPort)
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	2b03      	cmp	r3, #3
 800021a:	d817      	bhi.n	800024c <GPIOLEDSet+0x58>
 800021c:	a201      	add	r2, pc, #4	@ (adr r2, 8000224 <GPIOLEDSet+0x30>)
 800021e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000222:	bf00      	nop
 8000224:	08000235 	.word	0x08000235
 8000228:	0800023b 	.word	0x0800023b
 800022c:	08000241 	.word	0x08000241
 8000230:	08000247 	.word	0x08000247
	{
		case PORT_A:
			gpioPort = GPIOA;
 8000234:	4b17      	ldr	r3, [pc, #92]	@ (8000294 <GPIOLEDSet+0xa0>)
 8000236:	613b      	str	r3, [r7, #16]
			break;
 8000238:	e008      	b.n	800024c <GPIOLEDSet+0x58>
		case PORT_B:
			gpioPort = GPIOB;
 800023a:	4b17      	ldr	r3, [pc, #92]	@ (8000298 <GPIOLEDSet+0xa4>)
 800023c:	613b      	str	r3, [r7, #16]
			break;
 800023e:	e005      	b.n	800024c <GPIOLEDSet+0x58>
		case PORT_C:
			gpioPort = GPIOC;
 8000240:	4b16      	ldr	r3, [pc, #88]	@ (800029c <GPIOLEDSet+0xa8>)
 8000242:	613b      	str	r3, [r7, #16]
			break;
 8000244:	e002      	b.n	800024c <GPIOLEDSet+0x58>
		case PORT_D:
			gpioPort = GPIOD;
 8000246:	4b16      	ldr	r3, [pc, #88]	@ (80002a0 <GPIOLEDSet+0xac>)
 8000248:	613b      	str	r3, [r7, #16]
			break;
 800024a:	bf00      	nop
	}

	for(ucIndex = 0; ucIndex<16; ucIndex++)
 800024c:	2300      	movs	r3, #0
 800024e:	72fb      	strb	r3, [r7, #11]
 8000250:	e00b      	b.n	800026a <GPIOLEDSet+0x76>
	{
		if(LEDPin == ucIndex)
 8000252:	79ba      	ldrb	r2, [r7, #6]
 8000254:	7afb      	ldrb	r3, [r7, #11]
 8000256:	429a      	cmp	r2, r3
 8000258:	d104      	bne.n	8000264 <GPIOLEDSet+0x70>
		{
			gpioPin = gpioPin << LEDPin;
 800025a:	79bb      	ldrb	r3, [r7, #6]
 800025c:	68fa      	ldr	r2, [r7, #12]
 800025e:	fa02 f303 	lsl.w	r3, r2, r3
 8000262:	60fb      	str	r3, [r7, #12]
	for(ucIndex = 0; ucIndex<16; ucIndex++)
 8000264:	7afb      	ldrb	r3, [r7, #11]
 8000266:	3301      	adds	r3, #1
 8000268:	72fb      	strb	r3, [r7, #11]
 800026a:	7afb      	ldrb	r3, [r7, #11]
 800026c:	2b0f      	cmp	r3, #15
 800026e:	d9f0      	bls.n	8000252 <GPIOLEDSet+0x5e>
		}
	}

	if(gpioPort != NULL)
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d008      	beq.n	8000288 <GPIOLEDSet+0x94>
	{
		HAL_GPIO_WritePin(gpioPort, gpioPin, blLEDStatus);
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	b29b      	uxth	r3, r3
 800027a:	797a      	ldrb	r2, [r7, #5]
 800027c:	4619      	mov	r1, r3
 800027e:	6938      	ldr	r0, [r7, #16]
 8000280:	f001 fbc9 	bl	8001a16 <HAL_GPIO_WritePin>
		blFlag = TRUE;
 8000284:	2301      	movs	r3, #1
 8000286:	75fb      	strb	r3, [r7, #23]
	}

	return blFlag;
 8000288:	7dfb      	ldrb	r3, [r7, #23]
}
 800028a:	4618      	mov	r0, r3
 800028c:	3718      	adds	r7, #24
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40010800 	.word	0x40010800
 8000298:	40010c00 	.word	0x40010c00
 800029c:	40011000 	.word	0x40011000
 80002a0:	40011400 	.word	0x40011400

080002a4 <GPIOReadButtonPress>:
//Outputs : None
//Return  : TRUE - Button Pressed , FALSE - Button Not pressed
//Notes   : None
//*****************************************************************************
bool GPIOReadButtonPress()
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
	bool blFlag = FALSE;
 80002aa:	2300      	movs	r3, #0
 80002ac:	71fb      	strb	r3, [r7, #7]

	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 80002ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002b2:	4806      	ldr	r0, [pc, #24]	@ (80002cc <GPIOReadButtonPress+0x28>)
 80002b4:	f001 fb98 	bl	80019e8 <HAL_GPIO_ReadPin>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d101      	bne.n	80002c2 <GPIOReadButtonPress+0x1e>
	{
		blFlag = TRUE;
 80002be:	2301      	movs	r3, #1
 80002c0:	71fb      	strb	r3, [r7, #7]
	}

	return blFlag;
 80002c2:	79fb      	ldrb	r3, [r7, #7]
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40011000 	.word	0x40011000

080002d0 <LEDToggle>:
//Outputs : None
//Return  : TRUE - LED Blinking success, FALSE - failed
//Notes   : None
//*****************************************************************************
bool LEDToggle(uint8 ucLEDState)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
	bool blFlag = FALSE;
 80002da:	2300      	movs	r3, #0
 80002dc:	73fb      	strb	r3, [r7, #15]
	PORT_TYPE port = PORT_A;
 80002de:	2300      	movs	r3, #0
 80002e0:	73bb      	strb	r3, [r7, #14]
	PIN_NUMBER pin = PIN_5;
 80002e2:	2305      	movs	r3, #5
 80002e4:	737b      	strb	r3, [r7, #13]

	if(ucLEDState == TRUE)
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d10b      	bne.n	8000304 <LEDToggle+0x34>
	{
		blFlag = GPIOLEDSet(port, pin, TRUE);
 80002ec:	7b79      	ldrb	r1, [r7, #13]
 80002ee:	7bbb      	ldrb	r3, [r7, #14]
 80002f0:	2201      	movs	r2, #1
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff7e 	bl	80001f4 <GPIOLEDSet>
 80002f8:	4603      	mov	r3, r0
 80002fa:	73fb      	strb	r3, [r7, #15]
		printf("LED ON\r\n");
 80002fc:	4809      	ldr	r0, [pc, #36]	@ (8000324 <LEDToggle+0x54>)
 80002fe:	f005 fe2d 	bl	8005f5c <puts>
 8000302:	e00a      	b.n	800031a <LEDToggle+0x4a>
	}
	else
	{
		blFlag = GPIOLEDSet(port, pin, FALSE);
 8000304:	7b79      	ldrb	r1, [r7, #13]
 8000306:	7bbb      	ldrb	r3, [r7, #14]
 8000308:	2200      	movs	r2, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f7ff ff72 	bl	80001f4 <GPIOLEDSet>
 8000310:	4603      	mov	r3, r0
 8000312:	73fb      	strb	r3, [r7, #15]
		printf("LED OFF\r\n");
 8000314:	4804      	ldr	r0, [pc, #16]	@ (8000328 <LEDToggle+0x58>)
 8000316:	f005 fe21 	bl	8005f5c <puts>
	}

	return blFlag;
 800031a:	7bfb      	ldrb	r3, [r7, #15]
}
 800031c:	4618      	mov	r0, r3
 800031e:	3710      	adds	r7, #16
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	08006c9c 	.word	0x08006c9c
 8000328:	08006ca4 	.word	0x08006ca4

0800032c <LoggerTask>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void LoggerTask()
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b086      	sub	sp, #24
 8000330:	af00      	add	r7, sp, #0
	LOGGER_MSG stLogMsg = {0, 0};
 8000332:	2300      	movs	r3, #0
 8000334:	60fb      	str	r3, [r7, #12]
 8000336:	2300      	movs	r3, #0
 8000338:	743b      	strb	r3, [r7, #16]
	LOGACK_MSG stLogAckMsg ={0, 0};
 800033a:	2300      	movs	r3, #0
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	2300      	movs	r3, #0
 8000340:	723b      	strb	r3, [r7, #8]
	WATCHDOG_EVENT stLoggerEvent = {0};
 8000342:	2300      	movs	r3, #0
 8000344:	703b      	strb	r3, [r7, #0]
	bool blFlag = FALSE;
 8000346:	2300      	movs	r3, #0
 8000348:	75fb      	strb	r3, [r7, #23]
	uint8 ucStatus = 0;
 800034a:	2300      	movs	r3, #0
 800034c:	75bb      	strb	r3, [r7, #22]

	if(osMsgqLoggerToReceiverInit(sizeof(stLogAckMsg)))
 800034e:	2008      	movs	r0, #8
 8000350:	f000 f9f2 	bl	8000738 <osMsgqLoggerToReceiverInit>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d055      	beq.n	8000406 <LoggerTask+0xda>
	{
		while(1)
		{
			if(osMsgqMsgRcvFromReceiver(&stLogMsg))
 800035a:	f107 030c 	add.w	r3, r7, #12
 800035e:	4618      	mov	r0, r3
 8000360:	f000 fa22 	bl	80007a8 <osMsgqMsgRcvFromReceiver>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d034      	beq.n	80003d4 <LoggerTask+0xa8>
			{
				LOG("Logger: LOGUID=%lu LEDState=0x%02X\r\n",
 800036a:	f000 fb27 	bl	80009bc <UARTMutexAcquire>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d005      	beq.n	8000380 <LoggerTask+0x54>
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	7c3a      	ldrb	r2, [r7, #16]
 8000378:	4619      	mov	r1, r3
 800037a:	4825      	ldr	r0, [pc, #148]	@ (8000410 <LoggerTask+0xe4>)
 800037c:	f005 fd86 	bl	8005e8c <iprintf>
 8000380:	f000 fb06 	bl	8000990 <UARTMutexRelease>
						stLogMsg.ulUId, stLogMsg.ucLEDState);


				if(LoggerTaskProcessLoggerMsg(&stLogMsg))
 8000384:	f107 030c 	add.w	r3, r7, #12
 8000388:	4618      	mov	r0, r3
 800038a:	f000 f847 	bl	800041c <LoggerTaskProcessLoggerMsg>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d01f      	beq.n	80003d4 <LoggerTask+0xa8>
				{
					blFlag = LEDToggle(sgulLEDSate);
 8000394:	4b1f      	ldr	r3, [pc, #124]	@ (8000414 <LoggerTask+0xe8>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	4618      	mov	r0, r3
 800039a:	f7ff ff99 	bl	80002d0 <LEDToggle>
 800039e:	4603      	mov	r3, r0
 80003a0:	75fb      	strb	r3, [r7, #23]
					ucStatus = (blFlag != FALSE) ? ACK_STATUS_OK : ACK_STAUS_ERROR;
 80003a2:	7dfb      	ldrb	r3, [r7, #23]
 80003a4:	f083 0301 	eor.w	r3, r3, #1
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	75bb      	strb	r3, [r7, #22]

					if(LoggerTaskSetAckMsg(&stLogAckMsg, ucStatus))
 80003ac:	7dba      	ldrb	r2, [r7, #22]
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	4611      	mov	r1, r2
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 f88a 	bl	80004cc <LoggerTaskSetAckMsg>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d00a      	beq.n	80003d4 <LoggerTask+0xa8>
					{
						if(osMsgqMsgSendToReceiver(stLogAckMsg))
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80003c4:	f000 fa0c 	bl	80007e0 <osMsgqMsgSendToReceiver>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d002      	beq.n	80003d4 <LoggerTask+0xa8>
						{
							osTaskDelay(DELAY_200);
 80003ce:	20c8      	movs	r0, #200	@ 0xc8
 80003d0:	f000 fb0c 	bl	80009ec <osTaskDelay>
						}
					}
				}
			}
			stLoggerEvent.src = WATCHDOG_SRC_LOGGER;
 80003d4:	2303      	movs	r3, #3
 80003d6:	703b      	strb	r3, [r7, #0]
			if(!osMsgqSendToWatchdog(stLoggerEvent))
 80003d8:	7838      	ldrb	r0, [r7, #0]
 80003da:	f000 f959 	bl	8000690 <osMsgqSendToWatchdog>
 80003de:	4603      	mov	r3, r0
 80003e0:	f083 0301 	eor.w	r3, r3, #1
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d009      	beq.n	80003fe <LoggerTask+0xd2>
			{
				LOG("Logger : Send Event to watchDogHandler Failed");
 80003ea:	f000 fae7 	bl	80009bc <UARTMutexAcquire>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d002      	beq.n	80003fa <LoggerTask+0xce>
 80003f4:	4808      	ldr	r0, [pc, #32]	@ (8000418 <LoggerTask+0xec>)
 80003f6:	f005 fd49 	bl	8005e8c <iprintf>
 80003fa:	f000 fac9 	bl	8000990 <UARTMutexRelease>
			}
			osTaskDelay(DELAY_100);
 80003fe:	2064      	movs	r0, #100	@ 0x64
 8000400:	f000 faf4 	bl	80009ec <osTaskDelay>
			if(osMsgqMsgRcvFromReceiver(&stLogMsg))
 8000404:	e7a9      	b.n	800035a <LoggerTask+0x2e>
		}
	}
}
 8000406:	bf00      	nop
 8000408:	3718      	adds	r7, #24
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	08006cb0 	.word	0x08006cb0
 8000414:	200000e8 	.word	0x200000e8
 8000418:	08006cd8 	.word	0x08006cd8

0800041c <LoggerTaskProcessLoggerMsg>:
//Outputs : None
//Return  : TRUE - Request Message Processed, FALSE - error
//Notes   : None
//*****************************************************************************
static bool LoggerTaskProcessLoggerMsg(LOGGER_MSG* stLogMsg)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000424:	2300      	movs	r3, #0
 8000426:	73fb      	strb	r3, [r7, #15]

	do
	{
		if(stLogMsg == NULL)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d014      	beq.n	8000458 <LoggerTaskProcessLoggerMsg+0x3c>
		{
			break;
		}

		if(!LoggerTaskProcessUID(stLogMsg))
 800042e:	6878      	ldr	r0, [r7, #4]
 8000430:	f000 f81c 	bl	800046c <LoggerTaskProcessUID>
 8000434:	4603      	mov	r3, r0
 8000436:	f083 0301 	eor.w	r3, r3, #1
 800043a:	b2db      	uxtb	r3, r3
 800043c:	2b00      	cmp	r3, #0
 800043e:	d10d      	bne.n	800045c <LoggerTaskProcessLoggerMsg+0x40>
		{
			break;
		}

		if(!LoggerTaskProcessLEDState(stLogMsg))
 8000440:	6878      	ldr	r0, [r7, #4]
 8000442:	f000 f82b 	bl	800049c <LoggerTaskProcessLEDState>
 8000446:	4603      	mov	r3, r0
 8000448:	f083 0301 	eor.w	r3, r3, #1
 800044c:	b2db      	uxtb	r3, r3
 800044e:	2b00      	cmp	r3, #0
 8000450:	d106      	bne.n	8000460 <LoggerTaskProcessLoggerMsg+0x44>
		{
			break;
		}

		// If all succeeded
		blFlag = TRUE;
 8000452:	2301      	movs	r3, #1
 8000454:	73fb      	strb	r3, [r7, #15]
 8000456:	e004      	b.n	8000462 <LoggerTaskProcessLoggerMsg+0x46>
			break;
 8000458:	bf00      	nop
 800045a:	e002      	b.n	8000462 <LoggerTaskProcessLoggerMsg+0x46>
			break;
 800045c:	bf00      	nop
 800045e:	e000      	b.n	8000462 <LoggerTaskProcessLoggerMsg+0x46>
			break;
 8000460:	bf00      	nop

	}while(0);

	return blFlag;
 8000462:	7bfb      	ldrb	r3, [r7, #15]
}
 8000464:	4618      	mov	r0, r3
 8000466:	3710      	adds	r7, #16
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <LoggerTaskProcessUID>:
//Outputs : None
//Return  : TRUE - Request Message UID processed, FALSE - error
//Notes   : None
//*****************************************************************************
static bool LoggerTaskProcessUID(LOGGER_MSG* stLogMsg)
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000474:	2300      	movs	r3, #0
 8000476:	73fb      	strb	r3, [r7, #15]

	if(stLogMsg != NULL)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d005      	beq.n	800048a <LoggerTaskProcessUID+0x1e>
	{
		sgulUId =  stLogMsg->ulUId;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a05      	ldr	r2, [pc, #20]	@ (8000498 <LoggerTaskProcessUID+0x2c>)
 8000484:	6013      	str	r3, [r2, #0]
		blFlag = TRUE;
 8000486:	2301      	movs	r3, #1
 8000488:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 800048a:	7bfb      	ldrb	r3, [r7, #15]
}
 800048c:	4618      	mov	r0, r3
 800048e:	3714      	adds	r7, #20
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	200000e4 	.word	0x200000e4

0800049c <LoggerTaskProcessLEDState>:
//Outputs : None
//Return  : TRUE - Request Message DATA processed, FALSE - error
//Notes   : None
//*****************************************************************************
static bool LoggerTaskProcessLEDState(LOGGER_MSG* stLogMsg)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 80004a4:	2300      	movs	r3, #0
 80004a6:	73fb      	strb	r3, [r7, #15]

	if(stLogMsg != NULL)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d005      	beq.n	80004ba <LoggerTaskProcessLEDState+0x1e>
	{
		sgulLEDSate = stLogMsg->ucLEDState;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	791a      	ldrb	r2, [r3, #4]
 80004b2:	4b05      	ldr	r3, [pc, #20]	@ (80004c8 <LoggerTaskProcessLEDState+0x2c>)
 80004b4:	701a      	strb	r2, [r3, #0]
		blFlag = TRUE;
 80004b6:	2301      	movs	r3, #1
 80004b8:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 80004ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3714      	adds	r7, #20
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	200000e8 	.word	0x200000e8

080004cc <LoggerTaskSetAckMsg>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
static bool LoggerTaskSetAckMsg(LOGACK_MSG* stLogAckMsg, uint8 ucState)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	460b      	mov	r3, r1
 80004d6:	70fb      	strb	r3, [r7, #3]
	bool blFlag = FALSE;
 80004d8:	2300      	movs	r3, #0
 80004da:	73fb      	strb	r3, [r7, #15]

	if(stLogAckMsg != NULL)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d008      	beq.n	80004f4 <LoggerTaskSetAckMsg+0x28>
	{
		stLogAckMsg->ulUId = sgulUId;
 80004e2:	4b07      	ldr	r3, [pc, #28]	@ (8000500 <LoggerTaskSetAckMsg+0x34>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	601a      	str	r2, [r3, #0]
		stLogAckMsg->ucState = ucState;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	78fa      	ldrb	r2, [r7, #3]
 80004ee:	711a      	strb	r2, [r3, #4]
		blFlag = TRUE;
 80004f0:	2301      	movs	r3, #1
 80004f2:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 80004f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	200000e4 	.word	0x200000e4

08000504 <osMsgqPollerToRecieverInit>:
//Outputs : None
//Return  : TRUE - Message Queue Initialization completed, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqPollerToRecieverInit(uint32 MsgSize)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 800050c:	2300      	movs	r3, #0
 800050e:	73fb      	strb	r3, [r7, #15]

	PollerToReceiverId = osMessageQueueNew(MSG_COUNT, MsgSize, NULL);
 8000510:	2200      	movs	r2, #0
 8000512:	6879      	ldr	r1, [r7, #4]
 8000514:	200a      	movs	r0, #10
 8000516:	f002 fb02 	bl	8002b1e <osMessageQueueNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a06      	ldr	r2, [pc, #24]	@ (8000538 <osMsgqPollerToRecieverInit+0x34>)
 800051e:	6013      	str	r3, [r2, #0]

	if(PollerToReceiverId != NULL)
 8000520:	4b05      	ldr	r3, [pc, #20]	@ (8000538 <osMsgqPollerToRecieverInit+0x34>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <osMsgqPollerToRecieverInit+0x28>
	{
		blFlag = TRUE;
 8000528:	2301      	movs	r3, #1
 800052a:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 800052c:	7bfb      	ldrb	r3, [r7, #15]
}
 800052e:	4618      	mov	r0, r3
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000ec 	.word	0x200000ec

0800053c <osMsgqRecieverToPollerInit>:
//Outputs : None
//Return  : TRUE - Message Queue Initialization completed, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqRecieverToPollerInit(uint32 MsgSize)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000544:	2300      	movs	r3, #0
 8000546:	73fb      	strb	r3, [r7, #15]

	ReceiverToPollerId = osMessageQueueNew(MSG_COUNT, MsgSize, NULL);
 8000548:	2200      	movs	r2, #0
 800054a:	6879      	ldr	r1, [r7, #4]
 800054c:	200a      	movs	r0, #10
 800054e:	f002 fae6 	bl	8002b1e <osMessageQueueNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a06      	ldr	r2, [pc, #24]	@ (8000570 <osMsgqRecieverToPollerInit+0x34>)
 8000556:	6013      	str	r3, [r2, #0]

	if(ReceiverToPollerId != NULL)
 8000558:	4b05      	ldr	r3, [pc, #20]	@ (8000570 <osMsgqRecieverToPollerInit+0x34>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <osMsgqRecieverToPollerInit+0x28>
	{
		blFlag = TRUE;
 8000560:	2301      	movs	r3, #1
 8000562:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000564:	7bfb      	ldrb	r3, [r7, #15]
}
 8000566:	4618      	mov	r0, r3
 8000568:	3710      	adds	r7, #16
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	200000f0 	.word	0x200000f0

08000574 <osMsgqMessageSendToReceiver>:
//Outputs : None
//Return  : TRUE - Message sent, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMessageSendToReceiver(REQUEST_MSG stReqMsg)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	bool blFlag = FALSE;
 8000580:	2300      	movs	r3, #0
 8000582:	75fb      	strb	r3, [r7, #23]

	if(osMessageQueuePut(PollerToReceiverId, &stReqMsg, MSG_PRIORITY,
 8000584:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <osMsgqMessageSendToReceiver+0x34>)
 8000586:	6818      	ldr	r0, [r3, #0]
 8000588:	1d39      	adds	r1, r7, #4
 800058a:	2300      	movs	r3, #0
 800058c:	2200      	movs	r2, #0
 800058e:	f002 fb39 	bl	8002c04 <osMessageQueuePut>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d101      	bne.n	800059c <osMsgqMessageSendToReceiver+0x28>
			0) == osOK)
	{
		blFlag = TRUE;
 8000598:	2301      	movs	r3, #1
 800059a:	75fb      	strb	r3, [r7, #23]
	}

	return blFlag;
 800059c:	7dfb      	ldrb	r3, [r7, #23]
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3718      	adds	r7, #24
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000ec 	.word	0x200000ec

080005ac <osMsgqMessageRcvFromPoller>:
//Outputs : None
//Return  : TRUE - Message Received, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMessageRcvFromPoller(REQUEST_MSG* stReqMsg)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	73fb      	strb	r3, [r7, #15]

	if(stReqMsg != NULL)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d00b      	beq.n	80005d6 <osMsgqMessageRcvFromPoller+0x2a>
	{
		if (osMessageQueueGet(PollerToReceiverId, stReqMsg, NULL,
 80005be:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <osMsgqMessageRcvFromPoller+0x34>)
 80005c0:	6818      	ldr	r0, [r3, #0]
 80005c2:	2364      	movs	r3, #100	@ 0x64
 80005c4:	2200      	movs	r2, #0
 80005c6:	6879      	ldr	r1, [r7, #4]
 80005c8:	f002 fb7c 	bl	8002cc4 <osMessageQueueGet>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d101      	bne.n	80005d6 <osMsgqMessageRcvFromPoller+0x2a>
				100) == osOK)
		{
			blFlag = TRUE;
 80005d2:	2301      	movs	r3, #1
 80005d4:	73fb      	strb	r3, [r7, #15]
		}
	}

	return blFlag;
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	200000ec 	.word	0x200000ec

080005e4 <osMsgqMessageSendToPoller>:
//Outputs : None
//Return  : TRUE - Message Sent, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMessageSendToPoller(ACK_MSG stAckMsg)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	bool blFlag = FALSE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	75fb      	strb	r3, [r7, #23]

	if(osMessageQueuePut(ReceiverToPollerId, &stAckMsg, MSG_PRIORITY,
 80005f4:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <osMsgqMessageSendToPoller+0x34>)
 80005f6:	6818      	ldr	r0, [r3, #0]
 80005f8:	1d39      	adds	r1, r7, #4
 80005fa:	2300      	movs	r3, #0
 80005fc:	2200      	movs	r2, #0
 80005fe:	f002 fb01 	bl	8002c04 <osMessageQueuePut>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d101      	bne.n	800060c <osMsgqMessageSendToPoller+0x28>
			                                 0) == osOK)
	{
		blFlag = TRUE;
 8000608:	2301      	movs	r3, #1
 800060a:	75fb      	strb	r3, [r7, #23]
	}

	return blFlag;
 800060c:	7dfb      	ldrb	r3, [r7, #23]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3718      	adds	r7, #24
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200000f0 	.word	0x200000f0

0800061c <osMsgqMessageRcvFromReceiver>:
//Outputs : None
//Return  : TRUE - Message Received, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMessageRcvFromReceiver(ACK_MSG* stAckMsg)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000624:	2300      	movs	r3, #0
 8000626:	73fb      	strb	r3, [r7, #15]

	if(stAckMsg != NULL)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d00c      	beq.n	8000648 <osMsgqMessageRcvFromReceiver+0x2c>
	{
		if (osMessageQueueGet(ReceiverToPollerId, stAckMsg, NULL,
 800062e:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <osMsgqMessageRcvFromReceiver+0x38>)
 8000630:	6818      	ldr	r0, [r3, #0]
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	2200      	movs	r2, #0
 8000638:	6879      	ldr	r1, [r7, #4]
 800063a:	f002 fb43 	bl	8002cc4 <osMessageQueueGet>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d101      	bne.n	8000648 <osMsgqMessageRcvFromReceiver+0x2c>
				osWaitForever) == osOK)
		{
			blFlag = TRUE;
 8000644:	2301      	movs	r3, #1
 8000646:	73fb      	strb	r3, [r7, #15]
		}
	}

	return blFlag;
 8000648:	7bfb      	ldrb	r3, [r7, #15]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200000f0 	.word	0x200000f0

08000658 <osMsgqWatchdogInit>:
//Outputs : None
//Return  : TRUE - Message Queue Initialization completed, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqWatchdogInit(uint32 MsgSize)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000660:	2300      	movs	r3, #0
 8000662:	73fb      	strb	r3, [r7, #15]

	WatchdogQueueId = osMessageQueueNew(MSG_COUNT, MsgSize, NULL);
 8000664:	2200      	movs	r2, #0
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	200a      	movs	r0, #10
 800066a:	f002 fa58 	bl	8002b1e <osMessageQueueNew>
 800066e:	4603      	mov	r3, r0
 8000670:	4a06      	ldr	r2, [pc, #24]	@ (800068c <osMsgqWatchdogInit+0x34>)
 8000672:	6013      	str	r3, [r2, #0]

	if(WatchdogQueueId != NULL)
 8000674:	4b05      	ldr	r3, [pc, #20]	@ (800068c <osMsgqWatchdogInit+0x34>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <osMsgqWatchdogInit+0x28>
	{
		blFlag = TRUE;
 800067c:	2301      	movs	r3, #1
 800067e:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000680:	7bfb      	ldrb	r3, [r7, #15]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200000f4 	.word	0x200000f4

08000690 <osMsgqSendToWatchdog>:
//Outputs : None
//Return  : TRUE - Message Sent, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqSendToWatchdog(WATCHDOG_EVENT stEvent)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	7138      	strb	r0, [r7, #4]
	bool blFlag = FALSE;
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]

    if(osMessageQueuePut(WatchdogQueueId, &stEvent, 0, osWaitForever) == osOK)
 800069c:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <osMsgqSendToWatchdog+0x30>)
 800069e:	6818      	ldr	r0, [r3, #0]
 80006a0:	1d39      	adds	r1, r7, #4
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
 80006a6:	2200      	movs	r2, #0
 80006a8:	f002 faac 	bl	8002c04 <osMessageQueuePut>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d101      	bne.n	80006b6 <osMsgqSendToWatchdog+0x26>
    {
    	blFlag = TRUE;
 80006b2:	2301      	movs	r3, #1
 80006b4:	73fb      	strb	r3, [r7, #15]
    }

    return blFlag;
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	200000f4 	.word	0x200000f4

080006c4 <osMsgqRcvFromWatchdog>:
//Outputs : None
//Return  : TRUE - Message Received, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqRcvFromWatchdog(WATCHDOG_EVENT* stEvent)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	73fb      	strb	r3, [r7, #15]

	if(stEvent != NULL)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d00c      	beq.n	80006f0 <osMsgqRcvFromWatchdog+0x2c>
	{
		if(osMessageQueueGet(WatchdogQueueId, stEvent, NULL,
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <osMsgqRcvFromWatchdog+0x38>)
 80006d8:	6818      	ldr	r0, [r3, #0]
 80006da:	f04f 33ff 	mov.w	r3, #4294967295
 80006de:	2200      	movs	r2, #0
 80006e0:	6879      	ldr	r1, [r7, #4]
 80006e2:	f002 faef 	bl	8002cc4 <osMessageQueueGet>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d101      	bne.n	80006f0 <osMsgqRcvFromWatchdog+0x2c>
				osWaitForever) == osOK)
		{
			blFlag = TRUE;
 80006ec:	2301      	movs	r3, #1
 80006ee:	73fb      	strb	r3, [r7, #15]
		}
	}

    return blFlag;
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000f4 	.word	0x200000f4

08000700 <osMsgqReceiverToLoggerInit>:
//Outputs : None
//Return  : TRUE - Message Queue Initialization completed, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqReceiverToLoggerInit(uint32 MsgSize)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000708:	2300      	movs	r3, #0
 800070a:	73fb      	strb	r3, [r7, #15]

	ReceiverToLoggerId = osMessageQueueNew(MSG_COUNT, MsgSize, NULL);
 800070c:	2200      	movs	r2, #0
 800070e:	6879      	ldr	r1, [r7, #4]
 8000710:	200a      	movs	r0, #10
 8000712:	f002 fa04 	bl	8002b1e <osMessageQueueNew>
 8000716:	4603      	mov	r3, r0
 8000718:	4a06      	ldr	r2, [pc, #24]	@ (8000734 <osMsgqReceiverToLoggerInit+0x34>)
 800071a:	6013      	str	r3, [r2, #0]

	if(ReceiverToLoggerId != NULL)
 800071c:	4b05      	ldr	r3, [pc, #20]	@ (8000734 <osMsgqReceiverToLoggerInit+0x34>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <osMsgqReceiverToLoggerInit+0x28>
	{
		blFlag = TRUE;
 8000724:	2301      	movs	r3, #1
 8000726:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000728:	7bfb      	ldrb	r3, [r7, #15]
}
 800072a:	4618      	mov	r0, r3
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200000f8 	.word	0x200000f8

08000738 <osMsgqLoggerToReceiverInit>:
//Outputs : None
//Return  : TRUE - Message Queue Initialization completed, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqLoggerToReceiverInit(uint32 MsgSize)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000740:	2300      	movs	r3, #0
 8000742:	73fb      	strb	r3, [r7, #15]

	LoggerToReceiverId = osMessageQueueNew(MSG_COUNT, MsgSize, NULL);
 8000744:	2200      	movs	r2, #0
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	200a      	movs	r0, #10
 800074a:	f002 f9e8 	bl	8002b1e <osMessageQueueNew>
 800074e:	4603      	mov	r3, r0
 8000750:	4a06      	ldr	r2, [pc, #24]	@ (800076c <osMsgqLoggerToReceiverInit+0x34>)
 8000752:	6013      	str	r3, [r2, #0]

	if(LoggerToReceiverId != NULL)
 8000754:	4b05      	ldr	r3, [pc, #20]	@ (800076c <osMsgqLoggerToReceiverInit+0x34>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <osMsgqLoggerToReceiverInit+0x28>
	{
		blFlag = TRUE;
 800075c:	2301      	movs	r3, #1
 800075e:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000760:	7bfb      	ldrb	r3, [r7, #15]
}
 8000762:	4618      	mov	r0, r3
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200000fc 	.word	0x200000fc

08000770 <osMsgqMessageSendToLogger>:
//Outputs : None
//Return  : TRUE - Message sent, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMessageSendToLogger(LOGGER_MSG stLogMsg)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	463b      	mov	r3, r7
 8000778:	e883 0003 	stmia.w	r3, {r0, r1}
	bool blFlag = FALSE;
 800077c:	2300      	movs	r3, #0
 800077e:	73fb      	strb	r3, [r7, #15]

	if(osMessageQueuePut(ReceiverToLoggerId, &stLogMsg, MSG_PRIORITY,
 8000780:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <osMsgqMessageSendToLogger+0x34>)
 8000782:	6818      	ldr	r0, [r3, #0]
 8000784:	4639      	mov	r1, r7
 8000786:	2300      	movs	r3, #0
 8000788:	2200      	movs	r2, #0
 800078a:	f002 fa3b 	bl	8002c04 <osMessageQueuePut>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d101      	bne.n	8000798 <osMsgqMessageSendToLogger+0x28>
			0) == osOK)
	{
		blFlag = TRUE;
 8000794:	2301      	movs	r3, #1
 8000796:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000798:	7bfb      	ldrb	r3, [r7, #15]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000f8 	.word	0x200000f8

080007a8 <osMsgqMsgRcvFromReceiver>:
//Outputs : None
//Return  : TRUE - Message Received, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMsgRcvFromReceiver(LOGGER_MSG* stLogMsg)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	73fb      	strb	r3, [r7, #15]

	if(stLogMsg != NULL)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d00b      	beq.n	80007d2 <osMsgqMsgRcvFromReceiver+0x2a>
	{
		if (osMessageQueueGet(ReceiverToLoggerId, stLogMsg, NULL,
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <osMsgqMsgRcvFromReceiver+0x34>)
 80007bc:	6818      	ldr	r0, [r3, #0]
 80007be:	2364      	movs	r3, #100	@ 0x64
 80007c0:	2200      	movs	r2, #0
 80007c2:	6879      	ldr	r1, [r7, #4]
 80007c4:	f002 fa7e 	bl	8002cc4 <osMessageQueueGet>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d101      	bne.n	80007d2 <osMsgqMsgRcvFromReceiver+0x2a>
				100) == osOK)
		{
			blFlag = TRUE;
 80007ce:	2301      	movs	r3, #1
 80007d0:	73fb      	strb	r3, [r7, #15]
		}
	}

	return blFlag;
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000f8 	.word	0x200000f8

080007e0 <osMsgqMsgSendToReceiver>:
//Outputs : None
//Return  : TRUE - Message Sent, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMsgSendToReceiver(LOGACK_MSG stLogAckMsg)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	463b      	mov	r3, r7
 80007e8:	e883 0003 	stmia.w	r3, {r0, r1}
	bool blFlag = FALSE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	73fb      	strb	r3, [r7, #15]

	if(osMessageQueuePut(LoggerToReceiverId, &stLogAckMsg, MSG_PRIORITY,
 80007f0:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <osMsgqMsgSendToReceiver+0x34>)
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	4639      	mov	r1, r7
 80007f6:	2300      	movs	r3, #0
 80007f8:	2200      	movs	r2, #0
 80007fa:	f002 fa03 	bl	8002c04 <osMessageQueuePut>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d101      	bne.n	8000808 <osMsgqMsgSendToReceiver+0x28>
			                                 0) == osOK)
	{
		blFlag = TRUE;
 8000804:	2301      	movs	r3, #1
 8000806:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000808:	7bfb      	ldrb	r3, [r7, #15]
}
 800080a:	4618      	mov	r0, r3
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000fc 	.word	0x200000fc

08000818 <osMsgqMessageRcvFromLogger>:
//Outputs : None
//Return  : TRUE - Message Received, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMessageRcvFromLogger(LOGACK_MSG* stLogAckMsg)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000820:	2300      	movs	r3, #0
 8000822:	73fb      	strb	r3, [r7, #15]

	if(stLogAckMsg != NULL)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d00c      	beq.n	8000844 <osMsgqMessageRcvFromLogger+0x2c>
	{
		if (osMessageQueueGet(LoggerToReceiverId, stLogAckMsg, NULL,
 800082a:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <osMsgqMessageRcvFromLogger+0x38>)
 800082c:	6818      	ldr	r0, [r3, #0]
 800082e:	f04f 33ff 	mov.w	r3, #4294967295
 8000832:	2200      	movs	r2, #0
 8000834:	6879      	ldr	r1, [r7, #4]
 8000836:	f002 fa45 	bl	8002cc4 <osMessageQueueGet>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d101      	bne.n	8000844 <osMsgqMessageRcvFromLogger+0x2c>
				osWaitForever) == osOK)
		{
			blFlag = TRUE;
 8000840:	2301      	movs	r3, #1
 8000842:	73fb      	strb	r3, [r7, #15]
		}
	}

	return blFlag;
 8000844:	7bfb      	ldrb	r3, [r7, #15]
}
 8000846:	4618      	mov	r0, r3
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000fc 	.word	0x200000fc

08000854 <TaskInit>:
//Outputs : None
//Return  : TRUE - initialized , FALSE - Error
//Notes   : None
//*****************************************************************************
bool TaskInit()
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
	uint8 ucIndex = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	71fb      	strb	r3, [r7, #7]
	bool blFlag = FALSE;
 800085e:	2300      	movs	r3, #0
 8000860:	71bb      	strb	r3, [r7, #6]

	CreateUARTMutex();
 8000862:	f000 f87d 	bl	8000960 <CreateUARTMutex>

	for(ucIndex = 0; ucIndex < TASKS_MAX_SIZE; ucIndex++)
 8000866:	2300      	movs	r3, #0
 8000868:	71fb      	strb	r3, [r7, #7]
 800086a:	e00e      	b.n	800088a <TaskInit+0x36>
	{
		blFlag = osTaskCreate(&stTasks[ucIndex]);
 800086c:	79fa      	ldrb	r2, [r7, #7]
 800086e:	4613      	mov	r3, r2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	4a09      	ldr	r2, [pc, #36]	@ (800089c <TaskInit+0x48>)
 8000878:	4413      	add	r3, r2
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f810 	bl	80008a0 <osTaskCreate>
 8000880:	4603      	mov	r3, r0
 8000882:	71bb      	strb	r3, [r7, #6]
	for(ucIndex = 0; ucIndex < TASKS_MAX_SIZE; ucIndex++)
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	3301      	adds	r3, #1
 8000888:	71fb      	strb	r3, [r7, #7]
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b03      	cmp	r3, #3
 800088e:	d9ed      	bls.n	800086c <TaskInit+0x18>
	}

	return blFlag;
 8000890:	79bb      	ldrb	r3, [r7, #6]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000004 	.word	0x20000004

080008a0 <osTaskCreate>:
//Outputs : None
//Return  : TRUE - created thread successfully , FALSE - error
//Notes   : None
//*****************************************************************************
static bool osTaskCreate(TASKS *stTask)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b08d      	sub	sp, #52	@ 0x34
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	osThreadAttr_t attr = {0, 0, 0, 0, 0, 0, 0, 0, 0};
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	2224      	movs	r2, #36	@ 0x24
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f005 fc30 	bl	800611c <memset>

	if(stTask != NULL)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d03f      	beq.n	8000942 <osTaskCreate+0xa2>
	{
		attr.name = (const char *)stTask->pucTaskName;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	60bb      	str	r3, [r7, #8]
		attr.stack_size = stTask->ulStackSize;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	61fb      	str	r3, [r7, #28]
		attr.priority = (osPriority_t)osPriorityNormal;
 80008ce:	2318      	movs	r3, #24
 80008d0:	623b      	str	r3, [r7, #32]

		ThreadHandles[ucThreadIndex] = osThreadNew(stTask->pTaskFunc,
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	691b      	ldr	r3, [r3, #16]
 80008d6:	4a1e      	ldr	r2, [pc, #120]	@ (8000950 <osTaskCreate+0xb0>)
 80008d8:	7812      	ldrb	r2, [r2, #0]
 80008da:	4614      	mov	r4, r2
 80008dc:	f107 0208 	add.w	r2, r7, #8
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 ff60 	bl	80027a8 <osThreadNew>
 80008e8:	4603      	mov	r3, r0
 80008ea:	4a1a      	ldr	r2, [pc, #104]	@ (8000954 <osTaskCreate+0xb4>)
 80008ec:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
														NULL, &attr);
		stTask->Thread_Id = ThreadHandles[ucThreadIndex];
 80008f0:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <osTaskCreate+0xb0>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b17      	ldr	r3, [pc, #92]	@ (8000954 <osTaskCreate+0xb4>)
 80008f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	605a      	str	r2, [r3, #4]

		if(ThreadHandles[ucThreadIndex] == NULL)
 8000900:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <osTaskCreate+0xb0>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	4b13      	ldr	r3, [pc, #76]	@ (8000954 <osTaskCreate+0xb4>)
 8000908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d109      	bne.n	8000924 <osTaskCreate+0x84>
		{
			blFlag = FALSE;
 8000910:	2300      	movs	r3, #0
 8000912:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		    printf("Failed to create thread: %s\r\n", stTask->pucTaskName);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4619      	mov	r1, r3
 800091c:	480e      	ldr	r0, [pc, #56]	@ (8000958 <osTaskCreate+0xb8>)
 800091e:	f005 fab5 	bl	8005e8c <iprintf>
 8000922:	e00e      	b.n	8000942 <osTaskCreate+0xa2>
		}
		else
		{
			printf("Created thread: %s\r\n", stTask->pucTaskName);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	480c      	ldr	r0, [pc, #48]	@ (800095c <osTaskCreate+0xbc>)
 800092c:	f005 faae 	bl	8005e8c <iprintf>
			ucThreadIndex++;
 8000930:	4b07      	ldr	r3, [pc, #28]	@ (8000950 <osTaskCreate+0xb0>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	b2da      	uxtb	r2, r3
 8000938:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <osTaskCreate+0xb0>)
 800093a:	701a      	strb	r2, [r3, #0]
			blFlag = TRUE;
 800093c:	2301      	movs	r3, #1
 800093e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}

	}

	return blFlag;
 8000942:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000946:	4618      	mov	r0, r3
 8000948:	3734      	adds	r7, #52	@ 0x34
 800094a:	46bd      	mov	sp, r7
 800094c:	bd90      	pop	{r4, r7, pc}
 800094e:	bf00      	nop
 8000950:	20000110 	.word	0x20000110
 8000954:	20000100 	.word	0x20000100
 8000958:	08006d34 	.word	0x08006d34
 800095c:	08006d54 	.word	0x08006d54

08000960 <CreateUARTMutex>:
//Outputs : None
//Return  : TRUE - return success , FALSE - Failed
//Notes   : None
//*****************************************************************************
static bool CreateUARTMutex()
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
	bool blFlag = FALSE;
 8000966:	2300      	movs	r3, #0
 8000968:	71fb      	strb	r3, [r7, #7]

	uartMutex = osMutexNew(NULL);
 800096a:	2000      	movs	r0, #0
 800096c:	f001 ffc9 	bl	8002902 <osMutexNew>
 8000970:	4603      	mov	r3, r0
 8000972:	4a06      	ldr	r2, [pc, #24]	@ (800098c <CreateUARTMutex+0x2c>)
 8000974:	6013      	str	r3, [r2, #0]

	if(uartMutex != NULL)
 8000976:	4b05      	ldr	r3, [pc, #20]	@ (800098c <CreateUARTMutex+0x2c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <CreateUARTMutex+0x22>
	{
		blFlag = TRUE;
 800097e:	2301      	movs	r3, #1
 8000980:	71fb      	strb	r3, [r7, #7]
	}

	return blFlag;
 8000982:	79fb      	ldrb	r3, [r7, #7]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000114 	.word	0x20000114

08000990 <UARTMutexRelease>:
//Outputs : None
//Return  : TRUE - return success , FALSE - Failed
//Notes   : None
//*****************************************************************************
bool UARTMutexRelease()
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
	bool blFlag = FALSE;
 8000996:	2300      	movs	r3, #0
 8000998:	71fb      	strb	r3, [r7, #7]

	if(osMutexRelease(uartMutex) == osOK)
 800099a:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <UARTMutexRelease+0x28>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4618      	mov	r0, r3
 80009a0:	f002 f880 	bl	8002aa4 <osMutexRelease>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d101      	bne.n	80009ae <UARTMutexRelease+0x1e>
	{
		blFlag = TRUE;
 80009aa:	2301      	movs	r3, #1
 80009ac:	71fb      	strb	r3, [r7, #7]
	}

	return blFlag;
 80009ae:	79fb      	ldrb	r3, [r7, #7]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000114 	.word	0x20000114

080009bc <UARTMutexAcquire>:
//Outputs : None
//Return  : TRUE - return success , FALSE - Failed
//Notes   : None
//*****************************************************************************
bool UARTMutexAcquire()
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
	bool blFlag = FALSE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	71fb      	strb	r3, [r7, #7]

	if(osMutexAcquire(uartMutex, osWaitForever) == osOK)
 80009c6:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <UARTMutexAcquire+0x2c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f04f 31ff 	mov.w	r1, #4294967295
 80009ce:	4618      	mov	r0, r3
 80009d0:	f002 f81d 	bl	8002a0e <osMutexAcquire>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d101      	bne.n	80009de <UARTMutexAcquire+0x22>
	{
		blFlag = TRUE;
 80009da:	2301      	movs	r3, #1
 80009dc:	71fb      	strb	r3, [r7, #7]
	}

	return blFlag;
 80009de:	79fb      	ldrb	r3, [r7, #7]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000114 	.word	0x20000114

080009ec <osTaskDelay>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void osTaskDelay(uint32 delay)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	osDelay(delay);
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f001 ff69 	bl	80028cc <osDelay>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <PollerTask>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void PollerTask()
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	@ 0x28
 8000a08:	af02      	add	r7, sp, #8
	REQUEST_MSG stReqMsg = {0, 0, 0};
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	763b      	strb	r3, [r7, #24]
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
	ACK_MSG stAckMsg = {0, 0, 0, 0};
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
	WATCHDOG_EVENT stPollerEvent = {0};
 8000a22:	2300      	movs	r3, #0
 8000a24:	713b      	strb	r3, [r7, #4]

	if((osMsgqPollerToRecieverInit(sizeof(stReqMsg))) && \
 8000a26:	200c      	movs	r0, #12
 8000a28:	f7ff fd6c 	bl	8000504 <osMsgqPollerToRecieverInit>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d065      	beq.n	8000afe <PollerTask+0xfa>
			(osMsgqWatchdogInit(sizeof(stPollerEvent))))
 8000a32:	2001      	movs	r0, #1
 8000a34:	f7ff fe10 	bl	8000658 <osMsgqWatchdogInit>
 8000a38:	4603      	mov	r3, r0
	if((osMsgqPollerToRecieverInit(sizeof(stReqMsg))) && \
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d05f      	beq.n	8000afe <PollerTask+0xfa>
	{
		while(1)
		{
			if(GPIOReadButtonPress())
 8000a3e:	f7ff fc31 	bl	80002a4 <GPIOReadButtonPress>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d044      	beq.n	8000ad2 <PollerTask+0xce>
			{
				LOG("\nButton Pressed\r\n");
 8000a48:	f7ff ffb8 	bl	80009bc <UARTMutexAcquire>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d002      	beq.n	8000a58 <PollerTask+0x54>
 8000a52:	482d      	ldr	r0, [pc, #180]	@ (8000b08 <PollerTask+0x104>)
 8000a54:	f005 fa82 	bl	8005f5c <puts>
 8000a58:	f7ff ff9a 	bl	8000990 <UARTMutexRelease>

				if(PollerTaskBuildRequest(&stReqMsg))
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 f859 	bl	8000b18 <PollerTaskBuildRequest>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d02f      	beq.n	8000acc <PollerTask+0xc8>
				{
					LOG("Poller:Request Building\r\n");
 8000a6c:	f7ff ffa6 	bl	80009bc <UARTMutexAcquire>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d002      	beq.n	8000a7c <PollerTask+0x78>
 8000a76:	4825      	ldr	r0, [pc, #148]	@ (8000b0c <PollerTask+0x108>)
 8000a78:	f005 fa70 	bl	8005f5c <puts>
 8000a7c:	f7ff ff88 	bl	8000990 <UARTMutexRelease>

					if(osMsgqMessageSendToReceiver(stReqMsg))
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a88:	f7ff fd74 	bl	8000574 <osMsgqMessageSendToReceiver>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d002      	beq.n	8000a98 <PollerTask+0x94>
					{
						osTaskDelay(DELAY_200);
 8000a92:	20c8      	movs	r0, #200	@ 0xc8
 8000a94:	f7ff ffaa 	bl	80009ec <osTaskDelay>
					}

					if(osMsgqMessageRcvFromReceiver(&stAckMsg))
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fdbd 	bl	800061c <osMsgqMessageRcvFromReceiver>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d011      	beq.n	8000acc <PollerTask+0xc8>
					{
						LOG("Poller: ACKUID=%lu, CMD=0x%02X, "
 8000aa8:	f7ff ff88 	bl	80009bc <UARTMutexAcquire>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d00a      	beq.n	8000ac8 <PollerTask+0xc4>
 8000ab2:	68b9      	ldr	r1, [r7, #8]
 8000ab4:	7b3b      	ldrb	r3, [r7, #12]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	7b7b      	ldrb	r3, [r7, #13]
 8000aba:	4618      	mov	r0, r3
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	4813      	ldr	r0, [pc, #76]	@ (8000b10 <PollerTask+0x10c>)
 8000ac4:	f005 f9e2 	bl	8005e8c <iprintf>
 8000ac8:	f7ff ff62 	bl	8000990 <UARTMutexRelease>
									"STATE=0x%02X, DATA=0x%08lX\r\n\n", \
								stAckMsg.ulUId, stAckMsg.ucCmd,
								stAckMsg.ucState, stAckMsg.ulData);
					}
				}
				osTaskDelay(DELAY_100);
 8000acc:	2064      	movs	r0, #100	@ 0x64
 8000ace:	f7ff ff8d 	bl	80009ec <osTaskDelay>
			}
			stPollerEvent.src = WATCHDOG_SRC_POLLER;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	713b      	strb	r3, [r7, #4]
			if(!osMsgqSendToWatchdog(stPollerEvent))
 8000ad6:	7938      	ldrb	r0, [r7, #4]
 8000ad8:	f7ff fdda 	bl	8000690 <osMsgqSendToWatchdog>
 8000adc:	4603      	mov	r3, r0
 8000ade:	f083 0301 	eor.w	r3, r3, #1
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d0aa      	beq.n	8000a3e <PollerTask+0x3a>
			{
				LOG("Poller : Send Event to watchDogHandler Failed\r\n");
 8000ae8:	f7ff ff68 	bl	80009bc <UARTMutexAcquire>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d002      	beq.n	8000af8 <PollerTask+0xf4>
 8000af2:	4808      	ldr	r0, [pc, #32]	@ (8000b14 <PollerTask+0x110>)
 8000af4:	f005 fa32 	bl	8005f5c <puts>
 8000af8:	f7ff ff4a 	bl	8000990 <UARTMutexRelease>
			if(GPIOReadButtonPress())
 8000afc:	e79f      	b.n	8000a3e <PollerTask+0x3a>
			}
		}
	}
}
 8000afe:	bf00      	nop
 8000b00:	3720      	adds	r7, #32
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	08006ddc 	.word	0x08006ddc
 8000b0c:	08006df0 	.word	0x08006df0
 8000b10:	08006e0c 	.word	0x08006e0c
 8000b14:	08006e4c 	.word	0x08006e4c

08000b18 <PollerTaskBuildRequest>:
//Outputs : None
//Return  : TRUE - Request Message built, FALSE - error
//Notes   : None
//*****************************************************************************
static bool PollerTaskBuildRequest(REQUEST_MSG* stReqMsg)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	73fb      	strb	r3, [r7, #15]

	if(stReqMsg != NULL)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d018      	beq.n	8000b5c <PollerTaskBuildRequest+0x44>
	{
		stReqMsg->ulUId = ++ulUIdCounter;
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b68 <PollerTaskBuildRequest+0x50>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	4a0d      	ldr	r2, [pc, #52]	@ (8000b68 <PollerTaskBuildRequest+0x50>)
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <PollerTaskBuildRequest+0x50>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	601a      	str	r2, [r3, #0]
		stReqMsg->ucCmd = SET_CMD;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2202      	movs	r2, #2
 8000b40:	711a      	strb	r2, [r3, #4]
		ulDATA = ulDATA ^ ulMASK;
 8000b42:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <PollerTaskBuildRequest+0x54>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	4b0a      	ldr	r3, [pc, #40]	@ (8000b70 <PollerTaskBuildRequest+0x58>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4053      	eors	r3, r2
 8000b4c:	4a07      	ldr	r2, [pc, #28]	@ (8000b6c <PollerTaskBuildRequest+0x54>)
 8000b4e:	6013      	str	r3, [r2, #0]
		stReqMsg->ulData = ulDATA;
 8000b50:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <PollerTaskBuildRequest+0x54>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	609a      	str	r2, [r3, #8]
		blFlag = TRUE;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	20000118 	.word	0x20000118
 8000b6c:	2000011c 	.word	0x2000011c
 8000b70:	20000054 	.word	0x20000054

08000b74 <RecieverTask>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void RecieverTask()
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08c      	sub	sp, #48	@ 0x30
 8000b78:	af00      	add	r7, sp, #0
	REQUEST_MSG stReqMsg = {0, 0, 0};
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000b84:	2300      	movs	r3, #0
 8000b86:	62bb      	str	r3, [r7, #40]	@ 0x28
	ACK_MSG stAckMsg = {0, 0, 0, 0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
	LOGGER_MSG stLogMsg = {0, 0};
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	2300      	movs	r3, #0
 8000b9a:	743b      	strb	r3, [r7, #16]
	LOGACK_MSG stLogAckMsg = {0, 0};
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	723b      	strb	r3, [r7, #8]
	bool blFlag = FALSE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8 ucStatus = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	WATCHDOG_EVENT stReceiverEvent = {0};
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	703b      	strb	r3, [r7, #0]

	if((osMsgqRecieverToPollerInit(sizeof(stAckMsg))) && \
 8000bb4:	200c      	movs	r0, #12
 8000bb6:	f7ff fcc1 	bl	800053c <osMsgqRecieverToPollerInit>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f000 8084 	beq.w	8000cca <RecieverTask+0x156>
			(osMsgqReceiverToLoggerInit(sizeof(stLogMsg))))
 8000bc2:	2008      	movs	r0, #8
 8000bc4:	f7ff fd9c 	bl	8000700 <osMsgqReceiverToLoggerInit>
 8000bc8:	4603      	mov	r3, r0
	if((osMsgqRecieverToPollerInit(sizeof(stAckMsg))) && \
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d07d      	beq.n	8000cca <RecieverTask+0x156>
	{
		while(1)
		{
			if(osMsgqMessageRcvFromPoller(&stReqMsg))
 8000bce:	f107 0320 	add.w	r3, r7, #32
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fcea 	bl	80005ac <osMsgqMessageRcvFromPoller>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d05c      	beq.n	8000c98 <RecieverTask+0x124>
			{
				LOG("Receiver: REQUID=%lu CMD=0x%02X DATA=0x%08lX\r\n",
 8000bde:	f7ff feed 	bl	80009bc <UARTMutexAcquire>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d007      	beq.n	8000bf8 <RecieverTask+0x84>
 8000be8:	6a39      	ldr	r1, [r7, #32]
 8000bea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000bee:	461a      	mov	r2, r3
 8000bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bf2:	4838      	ldr	r0, [pc, #224]	@ (8000cd4 <RecieverTask+0x160>)
 8000bf4:	f005 f94a 	bl	8005e8c <iprintf>
 8000bf8:	f7ff feca 	bl	8000990 <UARTMutexRelease>
						stReqMsg.ulUId, stReqMsg.ucCmd, stReqMsg.ulData);
				blFlag = RecieverTaskProcessRequest(&stReqMsg);
 8000bfc:	f107 0320 	add.w	r3, r7, #32
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f895 	bl	8000d30 <RecieverTaskProcessRequest>
 8000c06:	4603      	mov	r3, r0
 8000c08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				ucStatus = (blFlag != FALSE) ? ACK_STATUS_OK : ACK_STAUS_ERROR;
 8000c0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c10:	f083 0301 	eor.w	r3, r3, #1
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

				if(ReceiverTaskSetAckMsg(&stAckMsg, ucStatus))
 8000c1a:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 f85b 	bl	8000ce0 <ReceiverTaskSetAckMsg>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d00b      	beq.n	8000c48 <RecieverTask+0xd4>
				{
					if(osMsgqMessageSendToPoller(stAckMsg))
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c38:	f7ff fcd4 	bl	80005e4 <osMsgqMessageSendToPoller>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d002      	beq.n	8000c48 <RecieverTask+0xd4>
					{
						osTaskDelay(DELAY_200);
 8000c42:	20c8      	movs	r0, #200	@ 0xc8
 8000c44:	f7ff fed2 	bl	80009ec <osTaskDelay>
					}
				}

				if(RecieverTaskBuildLoggerMsg(&stLogMsg))
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 f907 	bl	8000e60 <RecieverTaskBuildLoggerMsg>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d00b      	beq.n	8000c70 <RecieverTask+0xfc>
				{
					if(osMsgqMessageSendToLogger(stLogMsg))
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c60:	f7ff fd86 	bl	8000770 <osMsgqMessageSendToLogger>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <RecieverTask+0xfc>
					{
						osTaskDelay(DELAY_200);
 8000c6a:	20c8      	movs	r0, #200	@ 0xc8
 8000c6c:	f7ff febe 	bl	80009ec <osTaskDelay>
					}
				}

				if(osMsgqMessageRcvFromLogger(&stLogAckMsg))
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fdd0 	bl	8000818 <osMsgqMessageRcvFromLogger>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d00c      	beq.n	8000c98 <RecieverTask+0x124>
				{
					LOG("Receiver: LOGACKUID=%lu State=0x%02X\r\n",
 8000c7e:	f7ff fe9d 	bl	80009bc <UARTMutexAcquire>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d005      	beq.n	8000c94 <RecieverTask+0x120>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	7a3a      	ldrb	r2, [r7, #8]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4812      	ldr	r0, [pc, #72]	@ (8000cd8 <RecieverTask+0x164>)
 8000c90:	f005 f8fc 	bl	8005e8c <iprintf>
 8000c94:	f7ff fe7c 	bl	8000990 <UARTMutexRelease>
							stLogAckMsg.ulUId, stLogAckMsg.ucState);
				}
			}
			stReceiverEvent.src = WATCHDOG_SRC_RECEIVER;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	703b      	strb	r3, [r7, #0]
			if(!osMsgqSendToWatchdog(stReceiverEvent))
 8000c9c:	7838      	ldrb	r0, [r7, #0]
 8000c9e:	f7ff fcf7 	bl	8000690 <osMsgqSendToWatchdog>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	f083 0301 	eor.w	r3, r3, #1
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d009      	beq.n	8000cc2 <RecieverTask+0x14e>
			{
				LOG("Receiver : Send Event to watchDogHandler Failed");
 8000cae:	f7ff fe85 	bl	80009bc <UARTMutexAcquire>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d002      	beq.n	8000cbe <RecieverTask+0x14a>
 8000cb8:	4808      	ldr	r0, [pc, #32]	@ (8000cdc <RecieverTask+0x168>)
 8000cba:	f005 f8e7 	bl	8005e8c <iprintf>
 8000cbe:	f7ff fe67 	bl	8000990 <UARTMutexRelease>
			}
			osTaskDelay(DELAY_100);
 8000cc2:	2064      	movs	r0, #100	@ 0x64
 8000cc4:	f7ff fe92 	bl	80009ec <osTaskDelay>
			if(osMsgqMessageRcvFromPoller(&stReqMsg))
 8000cc8:	e781      	b.n	8000bce <RecieverTask+0x5a>
		}
	}
}
 8000cca:	bf00      	nop
 8000ccc:	3730      	adds	r7, #48	@ 0x30
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	08006e7c 	.word	0x08006e7c
 8000cd8:	08006eac 	.word	0x08006eac
 8000cdc:	08006ed4 	.word	0x08006ed4

08000ce0 <ReceiverTaskSetAckMsg>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
static bool ReceiverTaskSetAckMsg(ACK_MSG* stAckMsg, uint8 ucState)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	70fb      	strb	r3, [r7, #3]
	bool blFlag = FALSE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	73fb      	strb	r3, [r7, #15]
	CMD_TYPE cmd = CMD_ACK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	73bb      	strb	r3, [r7, #14]

	if(stAckMsg != NULL)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d00f      	beq.n	8000d1a <ReceiverTaskSetAckMsg+0x3a>
	{
		stAckMsg->ulUId = sgulUId;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <ReceiverTaskSetAckMsg+0x48>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	601a      	str	r2, [r3, #0]
		stAckMsg->ucCmd = cmd;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	7bba      	ldrb	r2, [r7, #14]
 8000d06:	711a      	strb	r2, [r3, #4]
		stAckMsg->ulData = sgulData;
 8000d08:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <ReceiverTaskSetAckMsg+0x4c>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
		stAckMsg->ucState = ucState;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	78fa      	ldrb	r2, [r7, #3]
 8000d14:	715a      	strb	r2, [r3, #5]
		blFlag = TRUE;
 8000d16:	2301      	movs	r3, #1
 8000d18:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000120 	.word	0x20000120
 8000d2c:	20000058 	.word	0x20000058

08000d30 <RecieverTaskProcessRequest>:
//Outputs : None
//Return  : TRUE - Request Message Processed, FALSE - error
//Notes   : None
//*****************************************************************************
static bool RecieverTaskProcessRequest(REQUEST_MSG* stReqMsg)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73fb      	strb	r3, [r7, #15]

	do
	{
		if(stReqMsg == NULL)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d01d      	beq.n	8000d7e <RecieverTaskProcessRequest+0x4e>
		{
			break;
		}

		if(!RecieverTaskProcessUID(stReqMsg))
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f000 f828 	bl	8000d98 <RecieverTaskProcessUID>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	f083 0301 	eor.w	r3, r3, #1
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d116      	bne.n	8000d82 <RecieverTaskProcessRequest+0x52>
		{
			break;
		}

		if(!RecieverTaskProcessDATA(stReqMsg))
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f000 f86b 	bl	8000e30 <RecieverTaskProcessDATA>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	f083 0301 	eor.w	r3, r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d10f      	bne.n	8000d86 <RecieverTaskProcessRequest+0x56>
		{
			break;
		}

		if(!RecieverTaskProcessCMD(stReqMsg))
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f000 f82e 	bl	8000dc8 <RecieverTaskProcessCMD>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	f083 0301 	eor.w	r3, r3, #1
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d108      	bne.n	8000d8a <RecieverTaskProcessRequest+0x5a>
		{
			break;
		}

		// If all succeeded
		blFlag = TRUE;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	73fb      	strb	r3, [r7, #15]
 8000d7c:	e006      	b.n	8000d8c <RecieverTaskProcessRequest+0x5c>
			break;
 8000d7e:	bf00      	nop
 8000d80:	e004      	b.n	8000d8c <RecieverTaskProcessRequest+0x5c>
			break;
 8000d82:	bf00      	nop
 8000d84:	e002      	b.n	8000d8c <RecieverTaskProcessRequest+0x5c>
			break;
 8000d86:	bf00      	nop
 8000d88:	e000      	b.n	8000d8c <RecieverTaskProcessRequest+0x5c>
			break;
 8000d8a:	bf00      	nop

	}while(0);

	return blFlag;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <RecieverTaskProcessUID>:
//Outputs : None
//Return  : TRUE - Request Message UID processed, FALSE - error
//Notes   : None
//*****************************************************************************
static bool RecieverTaskProcessUID(REQUEST_MSG* stReqMsg)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	73fb      	strb	r3, [r7, #15]

	if(stReqMsg != NULL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d005      	beq.n	8000db6 <RecieverTaskProcessUID+0x1e>
	{
		sgulUId =  stReqMsg->ulUId;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a05      	ldr	r2, [pc, #20]	@ (8000dc4 <RecieverTaskProcessUID+0x2c>)
 8000db0:	6013      	str	r3, [r2, #0]
		blFlag = TRUE;
 8000db2:	2301      	movs	r3, #1
 8000db4:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000120 	.word	0x20000120

08000dc8 <RecieverTaskProcessCMD>:
//Outputs : None
//Return  : TRUE - Request Message CMD processed, FALSE - error
//Notes   : None
//*****************************************************************************
static bool RecieverTaskProcessCMD(REQUEST_MSG* stReqMsg)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]

	if(stReqMsg != NULL)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d01f      	beq.n	8000e1a <RecieverTaskProcessCMD+0x52>
	{
		switch(stReqMsg->ucCmd)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	791b      	ldrb	r3, [r3, #4]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d011      	beq.n	8000e06 <RecieverTaskProcessCMD+0x3e>
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d112      	bne.n	8000e0c <RecieverTaskProcessCMD+0x44>
		{
			case CMD_SET:
				if((sgulData & MASK) == MASK)
 8000de6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <RecieverTaskProcessCMD+0x5c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <RecieverTaskProcessCMD+0x32>
				{
					gucLEDState = TRUE;
 8000df2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e28 <RecieverTaskProcessCMD+0x60>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	701a      	strb	r2, [r3, #0]
 8000df8:	e002      	b.n	8000e00 <RecieverTaskProcessCMD+0x38>
				}
				else
				{
					gucLEDState = FALSE;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <RecieverTaskProcessCMD+0x60>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
				}

				blFlag = TRUE;
 8000e00:	2301      	movs	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
				break;
 8000e04:	e009      	b.n	8000e1a <RecieverTaskProcessCMD+0x52>

			case CMD_GET:
				//:TO DO: Retrieve the current LED state
				blFlag = TRUE;
 8000e06:	2301      	movs	r3, #1
 8000e08:	73fb      	strb	r3, [r7, #15]
				break;
 8000e0a:	e006      	b.n	8000e1a <RecieverTaskProcessCMD+0x52>

			default:
				printf("Invalid Command: 0x%02X\r\n", stReqMsg->ucCmd);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	791b      	ldrb	r3, [r3, #4]
 8000e10:	4619      	mov	r1, r3
 8000e12:	4806      	ldr	r0, [pc, #24]	@ (8000e2c <RecieverTaskProcessCMD+0x64>)
 8000e14:	f005 f83a 	bl	8005e8c <iprintf>
				break;
 8000e18:	bf00      	nop
		}
	}

	return blFlag;
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000058 	.word	0x20000058
 8000e28:	20000124 	.word	0x20000124
 8000e2c:	08006f04 	.word	0x08006f04

08000e30 <RecieverTaskProcessDATA>:
//Outputs : None
//Return  : TRUE - Request Message DATA processed, FALSE - error
//Notes   : None
//*****************************************************************************
static bool RecieverTaskProcessDATA(REQUEST_MSG* stReqMsg)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	73fb      	strb	r3, [r7, #15]

	if(stReqMsg != NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d005      	beq.n	8000e4e <RecieverTaskProcessDATA+0x1e>
	{
		sgulData = stReqMsg->ulData;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	4a05      	ldr	r2, [pc, #20]	@ (8000e5c <RecieverTaskProcessDATA+0x2c>)
 8000e48:	6013      	str	r3, [r2, #0]
		blFlag = TRUE;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000058 	.word	0x20000058

08000e60 <RecieverTaskBuildLoggerMsg>:
//Outputs : None
//Return  : TRUE - Request Message built, FALSE - error
//Notes   : None
//*****************************************************************************
static bool RecieverTaskBuildLoggerMsg(LOGGER_MSG* stLogMsg)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73fb      	strb	r3, [r7, #15]

	if(stLogMsg != NULL)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d009      	beq.n	8000e86 <RecieverTaskBuildLoggerMsg+0x26>
	{
		stLogMsg->ulUId = sgulUId;
 8000e72:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <RecieverTaskBuildLoggerMsg+0x34>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	601a      	str	r2, [r3, #0]
		stLogMsg->ucLEDState = gucLEDState;
 8000e7a:	4b07      	ldr	r3, [pc, #28]	@ (8000e98 <RecieverTaskBuildLoggerMsg+0x38>)
 8000e7c:	781a      	ldrb	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	711a      	strb	r2, [r3, #4]
		blFlag = TRUE;
 8000e82:	2301      	movs	r3, #1
 8000e84:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000120 	.word	0x20000120
 8000e98:	20000124 	.word	0x20000124

08000e9c <WatchDogHandler>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void WatchDogHandler()
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
	WATCHDOG_EVENT stEvent = {0};
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	713b      	strb	r3, [r7, #4]

	WatchDogTimerInit();
 8000ea6:	f7ff f971 	bl	800018c <WatchDogTimerInit>

	while(1)
	{
		if(osMsgqRcvFromWatchdog(&stEvent))
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fc09 	bl	80006c4 <osMsgqRcvFromWatchdog>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d019      	beq.n	8000eec <WatchDogHandler+0x50>
		{
			if(WatchDogHandlerProcessEvent(&stEvent))
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f81e 	bl	8000efc <WatchDogHandlerProcessEvent>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d012      	beq.n	8000eec <WatchDogHandler+0x50>
			{
				if(stFlags.ucAll == ALL_EVENTS_SET)
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <WatchDogHandler+0x58>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b07      	cmp	r3, #7
 8000ecc:	d10e      	bne.n	8000eec <WatchDogHandler+0x50>
				{
					WatchdogTimerClear();
 8000ece:	f7ff f983 	bl	80001d8 <WatchdogTimerClear>
					LOG("Watchdog Cleared\r\n");
 8000ed2:	f7ff fd73 	bl	80009bc <UARTMutexAcquire>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <WatchDogHandler+0x46>
 8000edc:	4806      	ldr	r0, [pc, #24]	@ (8000ef8 <WatchDogHandler+0x5c>)
 8000ede:	f005 f83d 	bl	8005f5c <puts>
 8000ee2:	f7ff fd55 	bl	8000990 <UARTMutexRelease>
					stFlags.ucAll = 0;  // Reset for next cycle
 8000ee6:	4b03      	ldr	r3, [pc, #12]	@ (8000ef4 <WatchDogHandler+0x58>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		osTaskDelay(DELAY_100);
 8000eec:	2064      	movs	r0, #100	@ 0x64
 8000eee:	f7ff fd7d 	bl	80009ec <osTaskDelay>
		if(osMsgqRcvFromWatchdog(&stEvent))
 8000ef2:	e7da      	b.n	8000eaa <WatchDogHandler+0xe>
 8000ef4:	20000128 	.word	0x20000128
 8000ef8:	08006f20 	.word	0x08006f20

08000efc <WatchDogHandlerProcessEvent>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
static bool WatchDogHandlerProcessEvent(WATCHDOG_EVENT* stEvent)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	73fb      	strb	r3, [r7, #15]

	if(stEvent != NULL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d02c      	beq.n	8000f68 <WatchDogHandlerProcessEvent+0x6c>
	{
		switch(stEvent->src)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d016      	beq.n	8000f44 <WatchDogHandlerProcessEvent+0x48>
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	dc1c      	bgt.n	8000f54 <WatchDogHandlerProcessEvent+0x58>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d002      	beq.n	8000f24 <WatchDogHandlerProcessEvent+0x28>
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d008      	beq.n	8000f34 <WatchDogHandlerProcessEvent+0x38>
 8000f22:	e017      	b.n	8000f54 <WatchDogHandlerProcessEvent+0x58>
		{
			case WATCHDOG_SRC_POLLER :
				stFlags.BITS.ucPoller = TRUE;
 8000f24:	4a13      	ldr	r2, [pc, #76]	@ (8000f74 <WatchDogHandlerProcessEvent+0x78>)
 8000f26:	7813      	ldrb	r3, [r2, #0]
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	7013      	strb	r3, [r2, #0]
				blFlag = TRUE;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	73fb      	strb	r3, [r7, #15]
				break;
 8000f32:	e019      	b.n	8000f68 <WatchDogHandlerProcessEvent+0x6c>
			case WATCHDOG_SRC_RECEIVER :
				stFlags.BITS.ucReceiver = TRUE;
 8000f34:	4a0f      	ldr	r2, [pc, #60]	@ (8000f74 <WatchDogHandlerProcessEvent+0x78>)
 8000f36:	7813      	ldrb	r3, [r2, #0]
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	7013      	strb	r3, [r2, #0]
				blFlag = TRUE;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	73fb      	strb	r3, [r7, #15]
				break;
 8000f42:	e011      	b.n	8000f68 <WatchDogHandlerProcessEvent+0x6c>
			case WATCHDOG_SRC_LOGGER :
				stFlags.BITS.ucLogger = TRUE;
 8000f44:	4a0b      	ldr	r2, [pc, #44]	@ (8000f74 <WatchDogHandlerProcessEvent+0x78>)
 8000f46:	7813      	ldrb	r3, [r2, #0]
 8000f48:	f043 0304 	orr.w	r3, r3, #4
 8000f4c:	7013      	strb	r3, [r2, #0]
				blFlag = TRUE;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	73fb      	strb	r3, [r7, #15]
				break;
 8000f52:	e009      	b.n	8000f68 <WatchDogHandlerProcessEvent+0x6c>
			default :
				LOG("Invalid Event\r\n");
 8000f54:	f7ff fd32 	bl	80009bc <UARTMutexAcquire>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d002      	beq.n	8000f64 <WatchDogHandlerProcessEvent+0x68>
 8000f5e:	4806      	ldr	r0, [pc, #24]	@ (8000f78 <WatchDogHandlerProcessEvent+0x7c>)
 8000f60:	f004 fffc 	bl	8005f5c <puts>
 8000f64:	f7ff fd14 	bl	8000990 <UARTMutexRelease>
		}
	}

	return blFlag;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000128 	.word	0x20000128
 8000f78:	08006f34 	.word	0x08006f34

08000f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f80:	f000 fa68 	bl	8001454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f84:	f000 f81a 	bl	8000fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f88:	f000 f884 	bl	8001094 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f8c:	f000 f858 	bl	8001040 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f90:	f001 fbc2 	bl	8002718 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f94:	4a06      	ldr	r2, [pc, #24]	@ (8000fb0 <main+0x34>)
 8000f96:	2100      	movs	r1, #0
 8000f98:	4806      	ldr	r0, [pc, #24]	@ (8000fb4 <main+0x38>)
 8000f9a:	f001 fc05 	bl	80027a8 <osThreadNew>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <main+0x3c>)
 8000fa2:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
  AppMain();
 8000fa4:	f7ff f8d4 	bl	8000150 <AppMain>
  /* Start scheduler */
  osKernelStart();
 8000fa8:	f001 fbd8 	bl	800275c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <main+0x30>
 8000fb0:	08006f68 	.word	0x08006f68
 8000fb4:	0800115d 	.word	0x0800115d
 8000fb8:	20000174 	.word	0x20000174

08000fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b090      	sub	sp, #64	@ 0x40
 8000fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc2:	f107 0318 	add.w	r3, r7, #24
 8000fc6:	2228      	movs	r2, #40	@ 0x28
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f005 f8a6 	bl	800611c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe6:	2310      	movs	r3, #16
 8000fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fea:	2302      	movs	r3, #2
 8000fec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000ff2:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff8:	f107 0318 	add.w	r3, r7, #24
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 fd23 	bl	8001a48 <HAL_RCC_OscConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001008:	f000 f8b0 	bl	800116c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100c:	230f      	movs	r3, #15
 800100e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001010:	2302      	movs	r3, #2
 8001012:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001018:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800101c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2102      	movs	r1, #2
 8001026:	4618      	mov	r0, r3
 8001028:	f000 ff90 	bl	8001f4c <HAL_RCC_ClockConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001032:	f000 f89b 	bl	800116c <Error_Handler>
  }
}
 8001036:	bf00      	nop
 8001038:	3740      	adds	r7, #64	@ 0x40
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <MX_USART2_UART_Init+0x4c>)
 8001046:	4a12      	ldr	r2, [pc, #72]	@ (8001090 <MX_USART2_UART_Init+0x50>)
 8001048:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <MX_USART2_UART_Init+0x4c>)
 800104c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001050:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <MX_USART2_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <MX_USART2_UART_Init+0x4c>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800105e:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <MX_USART2_UART_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b09      	ldr	r3, [pc, #36]	@ (800108c <MX_USART2_UART_Init+0x4c>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b08      	ldr	r3, [pc, #32]	@ (800108c <MX_USART2_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <MX_USART2_UART_Init+0x4c>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001076:	4805      	ldr	r0, [pc, #20]	@ (800108c <MX_USART2_UART_Init+0x4c>)
 8001078:	f001 f8f6 	bl	8002268 <HAL_UART_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001082:	f000 f873 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000012c 	.word	0x2000012c
 8001090:	40004400 	.word	0x40004400

08001094 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a8:	4b29      	ldr	r3, [pc, #164]	@ (8001150 <MX_GPIO_Init+0xbc>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a28      	ldr	r2, [pc, #160]	@ (8001150 <MX_GPIO_Init+0xbc>)
 80010ae:	f043 0310 	orr.w	r3, r3, #16
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b26      	ldr	r3, [pc, #152]	@ (8001150 <MX_GPIO_Init+0xbc>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0310 	and.w	r3, r3, #16
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c0:	4b23      	ldr	r3, [pc, #140]	@ (8001150 <MX_GPIO_Init+0xbc>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a22      	ldr	r2, [pc, #136]	@ (8001150 <MX_GPIO_Init+0xbc>)
 80010c6:	f043 0320 	orr.w	r3, r3, #32
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b20      	ldr	r3, [pc, #128]	@ (8001150 <MX_GPIO_Init+0xbc>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0320 	and.w	r3, r3, #32
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001150 <MX_GPIO_Init+0xbc>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001150 <MX_GPIO_Init+0xbc>)
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <MX_GPIO_Init+0xbc>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f0:	4b17      	ldr	r3, [pc, #92]	@ (8001150 <MX_GPIO_Init+0xbc>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	4a16      	ldr	r2, [pc, #88]	@ (8001150 <MX_GPIO_Init+0xbc>)
 80010f6:	f043 0308 	orr.w	r3, r3, #8
 80010fa:	6193      	str	r3, [r2, #24]
 80010fc:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <MX_GPIO_Init+0xbc>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	2120      	movs	r1, #32
 800110c:	4811      	ldr	r0, [pc, #68]	@ (8001154 <MX_GPIO_Init+0xc0>)
 800110e:	f000 fc82 	bl	8001a16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001112:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001116:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	4619      	mov	r1, r3
 8001126:	480c      	ldr	r0, [pc, #48]	@ (8001158 <MX_GPIO_Init+0xc4>)
 8001128:	f000 fada 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800112c:	2320      	movs	r3, #32
 800112e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001130:	2301      	movs	r3, #1
 8001132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2302      	movs	r3, #2
 800113a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	4619      	mov	r1, r3
 8001142:	4804      	ldr	r0, [pc, #16]	@ (8001154 <MX_GPIO_Init+0xc0>)
 8001144:	f000 facc 	bl	80016e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001148:	bf00      	nop
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40021000 	.word	0x40021000
 8001154:	40010800 	.word	0x40010800
 8001158:	40011000 	.word	0x40011000

0800115c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001164:	2001      	movs	r0, #1
 8001166:	f001 fbb1 	bl	80028cc <osDelay>
 800116a:	e7fb      	b.n	8001164 <StartDefaultTask+0x8>

0800116c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001170:	b672      	cpsid	i
}
 8001172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <Error_Handler+0x8>

08001178 <_write>:
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
int _write(int file, char *ptr, int len)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	b29a      	uxth	r2, r3
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	4804      	ldr	r0, [pc, #16]	@ (80011a0 <_write+0x28>)
 8001190:	f001 f8ba 	bl	8002308 <HAL_UART_Transmit>
    return len;
 8001194:	687b      	ldr	r3, [r7, #4]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2000012c 	.word	0x2000012c

080011a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011aa:	4b18      	ldr	r3, [pc, #96]	@ (800120c <HAL_MspInit+0x68>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	4a17      	ldr	r2, [pc, #92]	@ (800120c <HAL_MspInit+0x68>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6193      	str	r3, [r2, #24]
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <HAL_MspInit+0x68>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	4b12      	ldr	r3, [pc, #72]	@ (800120c <HAL_MspInit+0x68>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	4a11      	ldr	r2, [pc, #68]	@ (800120c <HAL_MspInit+0x68>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011cc:	61d3      	str	r3, [r2, #28]
 80011ce:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <HAL_MspInit+0x68>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	210f      	movs	r1, #15
 80011de:	f06f 0001 	mvn.w	r0, #1
 80011e2:	f000 fa54 	bl	800168e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001210 <HAL_MspInit+0x6c>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <HAL_MspInit+0x6c>)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000
 8001210:	40010000 	.word	0x40010000

08001214 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a1b      	ldr	r2, [pc, #108]	@ (800129c <HAL_UART_MspInit+0x88>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d12f      	bne.n	8001294 <HAL_UART_MspInit+0x80>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001234:	4b1a      	ldr	r3, [pc, #104]	@ (80012a0 <HAL_UART_MspInit+0x8c>)
 8001236:	69db      	ldr	r3, [r3, #28]
 8001238:	4a19      	ldr	r2, [pc, #100]	@ (80012a0 <HAL_UART_MspInit+0x8c>)
 800123a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800123e:	61d3      	str	r3, [r2, #28]
 8001240:	4b17      	ldr	r3, [pc, #92]	@ (80012a0 <HAL_UART_MspInit+0x8c>)
 8001242:	69db      	ldr	r3, [r3, #28]
 8001244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124c:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <HAL_UART_MspInit+0x8c>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	4a13      	ldr	r2, [pc, #76]	@ (80012a0 <HAL_UART_MspInit+0x8c>)
 8001252:	f043 0304 	orr.w	r3, r3, #4
 8001256:	6193      	str	r3, [r2, #24]
 8001258:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <HAL_UART_MspInit+0x8c>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001264:	2304      	movs	r3, #4
 8001266:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	4619      	mov	r1, r3
 8001276:	480b      	ldr	r0, [pc, #44]	@ (80012a4 <HAL_UART_MspInit+0x90>)
 8001278:	f000 fa32 	bl	80016e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800127c:	2308      	movs	r3, #8
 800127e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	4619      	mov	r1, r3
 800128e:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <HAL_UART_MspInit+0x90>)
 8001290:	f000 fa26 	bl	80016e0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001294:	bf00      	nop
 8001296:	3720      	adds	r7, #32
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40004400 	.word	0x40004400
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010800 	.word	0x40010800

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <NMI_Handler+0x4>

080012b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <HardFault_Handler+0x4>

080012b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <MemManage_Handler+0x4>

080012c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <BusFault_Handler+0x4>

080012c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <UsageFault_Handler+0x4>

080012d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e0:	f000 f8fe 	bl	80014e0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80012e4:	f003 fbfa 	bl	8004adc <xTaskGetSchedulerState>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d001      	beq.n	80012f2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80012ee:	f004 fa9b 	bl	8005828 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	e00a      	b.n	800131e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001308:	f3af 8000 	nop.w
 800130c:	4601      	mov	r1, r0
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	1c5a      	adds	r2, r3, #1
 8001312:	60ba      	str	r2, [r7, #8]
 8001314:	b2ca      	uxtb	r2, r1
 8001316:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	3301      	adds	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	429a      	cmp	r2, r3
 8001324:	dbf0      	blt.n	8001308 <_read+0x12>
  }

  return len;
 8001326:	687b      	ldr	r3, [r7, #4]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001338:	f04f 33ff 	mov.w	r3, #4294967295
}
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr

08001346 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001356:	605a      	str	r2, [r3, #4]
  return 0;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <_isatty>:

int _isatty(int file)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800136c:	2301      	movs	r3, #1
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001398:	4a14      	ldr	r2, [pc, #80]	@ (80013ec <_sbrk+0x5c>)
 800139a:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <_sbrk+0x60>)
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a4:	4b13      	ldr	r3, [pc, #76]	@ (80013f4 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d102      	bne.n	80013b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <_sbrk+0x64>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	@ (80013f8 <_sbrk+0x68>)
 80013b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d207      	bcs.n	80013d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c0:	f004 fefa 	bl	80061b8 <__errno>
 80013c4:	4603      	mov	r3, r0
 80013c6:	220c      	movs	r2, #12
 80013c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
 80013ce:	e009      	b.n	80013e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d0:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d6:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	4a05      	ldr	r2, [pc, #20]	@ (80013f4 <_sbrk+0x64>)
 80013e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e2:	68fb      	ldr	r3, [r7, #12]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20005000 	.word	0x20005000
 80013f0:	00000400 	.word	0x00000400
 80013f4:	20000178 	.word	0x20000178
 80013f8:	20004020 	.word	0x20004020

080013fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001408:	f7ff fff8 	bl	80013fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800140c:	480b      	ldr	r0, [pc, #44]	@ (800143c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800140e:	490c      	ldr	r1, [pc, #48]	@ (8001440 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001410:	4a0c      	ldr	r2, [pc, #48]	@ (8001444 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001414:	e002      	b.n	800141c <LoopCopyDataInit>

08001416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141a:	3304      	adds	r3, #4

0800141c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800141c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001420:	d3f9      	bcc.n	8001416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001422:	4a09      	ldr	r2, [pc, #36]	@ (8001448 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001424:	4c09      	ldr	r4, [pc, #36]	@ (800144c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001428:	e001      	b.n	800142e <LoopFillZerobss>

0800142a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800142c:	3204      	adds	r2, #4

0800142e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001430:	d3fb      	bcc.n	800142a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001432:	f004 fec7 	bl	80061c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001436:	f7ff fda1 	bl	8000f7c <main>
  bx lr
 800143a:	4770      	bx	lr
  ldr r0, =_sdata
 800143c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001440:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8001444:	08006ff4 	.word	0x08006ff4
  ldr r2, =_sbss
 8001448:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 800144c:	2000401c 	.word	0x2000401c

08001450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001450:	e7fe      	b.n	8001450 <ADC1_2_IRQHandler>
	...

08001454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001458:	4b08      	ldr	r3, [pc, #32]	@ (800147c <HAL_Init+0x28>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a07      	ldr	r2, [pc, #28]	@ (800147c <HAL_Init+0x28>)
 800145e:	f043 0310 	orr.w	r3, r3, #16
 8001462:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001464:	2003      	movs	r0, #3
 8001466:	f000 f907 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800146a:	200f      	movs	r0, #15
 800146c:	f000 f808 	bl	8001480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001470:	f7ff fe98 	bl	80011a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40022000 	.word	0x40022000

08001480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001488:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <HAL_InitTick+0x54>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <HAL_InitTick+0x58>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001496:	fbb3 f3f1 	udiv	r3, r3, r1
 800149a:	fbb2 f3f3 	udiv	r3, r2, r3
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 f911 	bl	80016c6 <HAL_SYSTICK_Config>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e00e      	b.n	80014cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b0f      	cmp	r3, #15
 80014b2:	d80a      	bhi.n	80014ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b4:	2200      	movs	r2, #0
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295
 80014bc:	f000 f8e7 	bl	800168e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c0:	4a06      	ldr	r2, [pc, #24]	@ (80014dc <HAL_InitTick+0x5c>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	e000      	b.n	80014cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	2000005c 	.word	0x2000005c
 80014d8:	20000064 	.word	0x20000064
 80014dc:	20000060 	.word	0x20000060

080014e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e4:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <HAL_IncTick+0x1c>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b05      	ldr	r3, [pc, #20]	@ (8001500 <HAL_IncTick+0x20>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	4a03      	ldr	r2, [pc, #12]	@ (8001500 <HAL_IncTick+0x20>)
 80014f2:	6013      	str	r3, [r2, #0]
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	20000064 	.word	0x20000064
 8001500:	2000017c 	.word	0x2000017c

08001504 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return uwTick;
 8001508:	4b02      	ldr	r3, [pc, #8]	@ (8001514 <HAL_GetTick+0x10>)
 800150a:	681b      	ldr	r3, [r3, #0]
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	2000017c 	.word	0x2000017c

08001518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001528:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <__NVIC_SetPriorityGrouping+0x44>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001534:	4013      	ands	r3, r2
 8001536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001540:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154a:	4a04      	ldr	r2, [pc, #16]	@ (800155c <__NVIC_SetPriorityGrouping+0x44>)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	60d3      	str	r3, [r2, #12]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001564:	4b04      	ldr	r3, [pc, #16]	@ (8001578 <__NVIC_GetPriorityGrouping+0x18>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	0a1b      	lsrs	r3, r3, #8
 800156a:	f003 0307 	and.w	r3, r3, #7
}
 800156e:	4618      	mov	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	2b00      	cmp	r3, #0
 800158e:	db0a      	blt.n	80015a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	490c      	ldr	r1, [pc, #48]	@ (80015c8 <__NVIC_SetPriority+0x4c>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	440b      	add	r3, r1
 80015a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a4:	e00a      	b.n	80015bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4908      	ldr	r1, [pc, #32]	@ (80015cc <__NVIC_SetPriority+0x50>)
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	3b04      	subs	r3, #4
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	440b      	add	r3, r1
 80015ba:	761a      	strb	r2, [r3, #24]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000e100 	.word	0xe000e100
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	@ 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f1c3 0307 	rsb	r3, r3, #7
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	bf28      	it	cs
 80015ee:	2304      	movcs	r3, #4
 80015f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3304      	adds	r3, #4
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d902      	bls.n	8001600 <NVIC_EncodePriority+0x30>
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3b03      	subs	r3, #3
 80015fe:	e000      	b.n	8001602 <NVIC_EncodePriority+0x32>
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	f04f 32ff 	mov.w	r2, #4294967295
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	401a      	ands	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43d9      	mvns	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	4313      	orrs	r3, r2
         );
}
 800162a:	4618      	mov	r0, r3
 800162c:	3724      	adds	r7, #36	@ 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001644:	d301      	bcc.n	800164a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001646:	2301      	movs	r3, #1
 8001648:	e00f      	b.n	800166a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164a:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <SysTick_Config+0x40>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001652:	210f      	movs	r1, #15
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f7ff ff90 	bl	800157c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165c:	4b05      	ldr	r3, [pc, #20]	@ (8001674 <SysTick_Config+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <SysTick_Config+0x40>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff49 	bl	8001518 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a0:	f7ff ff5e 	bl	8001560 <__NVIC_GetPriorityGrouping>
 80016a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	6978      	ldr	r0, [r7, #20]
 80016ac:	f7ff ff90 	bl	80015d0 <NVIC_EncodePriority>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff5f 	bl	800157c <__NVIC_SetPriority>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ffb0 	bl	8001634 <SysTick_Config>
 80016d4:	4603      	mov	r3, r0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b08b      	sub	sp, #44	@ 0x2c
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f2:	e169      	b.n	80019c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016f4:	2201      	movs	r2, #1
 80016f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	429a      	cmp	r2, r3
 800170e:	f040 8158 	bne.w	80019c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	4a9a      	ldr	r2, [pc, #616]	@ (8001980 <HAL_GPIO_Init+0x2a0>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d05e      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 800171c:	4a98      	ldr	r2, [pc, #608]	@ (8001980 <HAL_GPIO_Init+0x2a0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d875      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 8001722:	4a98      	ldr	r2, [pc, #608]	@ (8001984 <HAL_GPIO_Init+0x2a4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d058      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 8001728:	4a96      	ldr	r2, [pc, #600]	@ (8001984 <HAL_GPIO_Init+0x2a4>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d86f      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 800172e:	4a96      	ldr	r2, [pc, #600]	@ (8001988 <HAL_GPIO_Init+0x2a8>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d052      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 8001734:	4a94      	ldr	r2, [pc, #592]	@ (8001988 <HAL_GPIO_Init+0x2a8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d869      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 800173a:	4a94      	ldr	r2, [pc, #592]	@ (800198c <HAL_GPIO_Init+0x2ac>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d04c      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 8001740:	4a92      	ldr	r2, [pc, #584]	@ (800198c <HAL_GPIO_Init+0x2ac>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d863      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 8001746:	4a92      	ldr	r2, [pc, #584]	@ (8001990 <HAL_GPIO_Init+0x2b0>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d046      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 800174c:	4a90      	ldr	r2, [pc, #576]	@ (8001990 <HAL_GPIO_Init+0x2b0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d85d      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 8001752:	2b12      	cmp	r3, #18
 8001754:	d82a      	bhi.n	80017ac <HAL_GPIO_Init+0xcc>
 8001756:	2b12      	cmp	r3, #18
 8001758:	d859      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 800175a:	a201      	add	r2, pc, #4	@ (adr r2, 8001760 <HAL_GPIO_Init+0x80>)
 800175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001760:	080017db 	.word	0x080017db
 8001764:	080017b5 	.word	0x080017b5
 8001768:	080017c7 	.word	0x080017c7
 800176c:	08001809 	.word	0x08001809
 8001770:	0800180f 	.word	0x0800180f
 8001774:	0800180f 	.word	0x0800180f
 8001778:	0800180f 	.word	0x0800180f
 800177c:	0800180f 	.word	0x0800180f
 8001780:	0800180f 	.word	0x0800180f
 8001784:	0800180f 	.word	0x0800180f
 8001788:	0800180f 	.word	0x0800180f
 800178c:	0800180f 	.word	0x0800180f
 8001790:	0800180f 	.word	0x0800180f
 8001794:	0800180f 	.word	0x0800180f
 8001798:	0800180f 	.word	0x0800180f
 800179c:	0800180f 	.word	0x0800180f
 80017a0:	0800180f 	.word	0x0800180f
 80017a4:	080017bd 	.word	0x080017bd
 80017a8:	080017d1 	.word	0x080017d1
 80017ac:	4a79      	ldr	r2, [pc, #484]	@ (8001994 <HAL_GPIO_Init+0x2b4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d013      	beq.n	80017da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017b2:	e02c      	b.n	800180e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	623b      	str	r3, [r7, #32]
          break;
 80017ba:	e029      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	3304      	adds	r3, #4
 80017c2:	623b      	str	r3, [r7, #32]
          break;
 80017c4:	e024      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	3308      	adds	r3, #8
 80017cc:	623b      	str	r3, [r7, #32]
          break;
 80017ce:	e01f      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	330c      	adds	r3, #12
 80017d6:	623b      	str	r3, [r7, #32]
          break;
 80017d8:	e01a      	b.n	8001810 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017e2:	2304      	movs	r3, #4
 80017e4:	623b      	str	r3, [r7, #32]
          break;
 80017e6:	e013      	b.n	8001810 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d105      	bne.n	80017fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f0:	2308      	movs	r3, #8
 80017f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	611a      	str	r2, [r3, #16]
          break;
 80017fa:	e009      	b.n	8001810 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017fc:	2308      	movs	r3, #8
 80017fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	615a      	str	r2, [r3, #20]
          break;
 8001806:	e003      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
          break;
 800180c:	e000      	b.n	8001810 <HAL_GPIO_Init+0x130>
          break;
 800180e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	2bff      	cmp	r3, #255	@ 0xff
 8001814:	d801      	bhi.n	800181a <HAL_GPIO_Init+0x13a>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	e001      	b.n	800181e <HAL_GPIO_Init+0x13e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3304      	adds	r3, #4
 800181e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2bff      	cmp	r3, #255	@ 0xff
 8001824:	d802      	bhi.n	800182c <HAL_GPIO_Init+0x14c>
 8001826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	e002      	b.n	8001832 <HAL_GPIO_Init+0x152>
 800182c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182e:	3b08      	subs	r3, #8
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	210f      	movs	r1, #15
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	fa01 f303 	lsl.w	r3, r1, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	401a      	ands	r2, r3
 8001844:	6a39      	ldr	r1, [r7, #32]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	431a      	orrs	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 80b1 	beq.w	80019c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001860:	4b4d      	ldr	r3, [pc, #308]	@ (8001998 <HAL_GPIO_Init+0x2b8>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a4c      	ldr	r2, [pc, #304]	@ (8001998 <HAL_GPIO_Init+0x2b8>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b4a      	ldr	r3, [pc, #296]	@ (8001998 <HAL_GPIO_Init+0x2b8>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001878:	4a48      	ldr	r2, [pc, #288]	@ (800199c <HAL_GPIO_Init+0x2bc>)
 800187a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	3302      	adds	r3, #2
 8001880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001884:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	220f      	movs	r2, #15
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4013      	ands	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a40      	ldr	r2, [pc, #256]	@ (80019a0 <HAL_GPIO_Init+0x2c0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d013      	beq.n	80018cc <HAL_GPIO_Init+0x1ec>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a3f      	ldr	r2, [pc, #252]	@ (80019a4 <HAL_GPIO_Init+0x2c4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d00d      	beq.n	80018c8 <HAL_GPIO_Init+0x1e8>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a3e      	ldr	r2, [pc, #248]	@ (80019a8 <HAL_GPIO_Init+0x2c8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d007      	beq.n	80018c4 <HAL_GPIO_Init+0x1e4>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a3d      	ldr	r2, [pc, #244]	@ (80019ac <HAL_GPIO_Init+0x2cc>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d101      	bne.n	80018c0 <HAL_GPIO_Init+0x1e0>
 80018bc:	2303      	movs	r3, #3
 80018be:	e006      	b.n	80018ce <HAL_GPIO_Init+0x1ee>
 80018c0:	2304      	movs	r3, #4
 80018c2:	e004      	b.n	80018ce <HAL_GPIO_Init+0x1ee>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e002      	b.n	80018ce <HAL_GPIO_Init+0x1ee>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <HAL_GPIO_Init+0x1ee>
 80018cc:	2300      	movs	r3, #0
 80018ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018d0:	f002 0203 	and.w	r2, r2, #3
 80018d4:	0092      	lsls	r2, r2, #2
 80018d6:	4093      	lsls	r3, r2
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018de:	492f      	ldr	r1, [pc, #188]	@ (800199c <HAL_GPIO_Init+0x2bc>)
 80018e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e2:	089b      	lsrs	r3, r3, #2
 80018e4:	3302      	adds	r3, #2
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018f8:	4b2d      	ldr	r3, [pc, #180]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	492c      	ldr	r1, [pc, #176]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	608b      	str	r3, [r1, #8]
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001906:	4b2a      	ldr	r3, [pc, #168]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	43db      	mvns	r3, r3
 800190e:	4928      	ldr	r1, [pc, #160]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001910:	4013      	ands	r3, r2
 8001912:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001920:	4b23      	ldr	r3, [pc, #140]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	4922      	ldr	r1, [pc, #136]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	60cb      	str	r3, [r1, #12]
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800192e:	4b20      	ldr	r3, [pc, #128]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	43db      	mvns	r3, r3
 8001936:	491e      	ldr	r1, [pc, #120]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001938:	4013      	ands	r3, r2
 800193a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d006      	beq.n	8001956 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001948:	4b19      	ldr	r3, [pc, #100]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	4918      	ldr	r1, [pc, #96]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001956:	4b16      	ldr	r3, [pc, #88]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	43db      	mvns	r3, r3
 800195e:	4914      	ldr	r1, [pc, #80]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001960:	4013      	ands	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d021      	beq.n	80019b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001970:	4b0f      	ldr	r3, [pc, #60]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	490e      	ldr	r1, [pc, #56]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	600b      	str	r3, [r1, #0]
 800197c:	e021      	b.n	80019c2 <HAL_GPIO_Init+0x2e2>
 800197e:	bf00      	nop
 8001980:	10320000 	.word	0x10320000
 8001984:	10310000 	.word	0x10310000
 8001988:	10220000 	.word	0x10220000
 800198c:	10210000 	.word	0x10210000
 8001990:	10120000 	.word	0x10120000
 8001994:	10110000 	.word	0x10110000
 8001998:	40021000 	.word	0x40021000
 800199c:	40010000 	.word	0x40010000
 80019a0:	40010800 	.word	0x40010800
 80019a4:	40010c00 	.word	0x40010c00
 80019a8:	40011000 	.word	0x40011000
 80019ac:	40011400 	.word	0x40011400
 80019b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019b4:	4b0b      	ldr	r3, [pc, #44]	@ (80019e4 <HAL_GPIO_Init+0x304>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	4909      	ldr	r1, [pc, #36]	@ (80019e4 <HAL_GPIO_Init+0x304>)
 80019be:	4013      	ands	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	3301      	adds	r3, #1
 80019c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ce:	fa22 f303 	lsr.w	r3, r2, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f47f ae8e 	bne.w	80016f4 <HAL_GPIO_Init+0x14>
  }
}
 80019d8:	bf00      	nop
 80019da:	bf00      	nop
 80019dc:	372c      	adds	r7, #44	@ 0x2c
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	40010400 	.word	0x40010400

080019e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
 8001a04:	e001      	b.n	8001a0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr

08001a16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	807b      	strh	r3, [r7, #2]
 8001a22:	4613      	mov	r3, r2
 8001a24:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a26:	787b      	ldrb	r3, [r7, #1]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a2c:	887a      	ldrh	r2, [r7, #2]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a32:	e003      	b.n	8001a3c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a34:	887b      	ldrh	r3, [r7, #2]
 8001a36:	041a      	lsls	r2, r3, #16
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	611a      	str	r2, [r3, #16]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr
	...

08001a48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e272      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8087 	beq.w	8001b76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a68:	4b92      	ldr	r3, [pc, #584]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d00c      	beq.n	8001a8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a74:	4b8f      	ldr	r3, [pc, #572]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d112      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x5e>
 8001a80:	4b8c      	ldr	r3, [pc, #560]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a8c:	d10b      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8e:	4b89      	ldr	r3, [pc, #548]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d06c      	beq.n	8001b74 <HAL_RCC_OscConfig+0x12c>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d168      	bne.n	8001b74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e24c      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aae:	d106      	bne.n	8001abe <HAL_RCC_OscConfig+0x76>
 8001ab0:	4b80      	ldr	r3, [pc, #512]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a7f      	ldr	r2, [pc, #508]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	e02e      	b.n	8001b1c <HAL_RCC_OscConfig+0xd4>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x98>
 8001ac6:	4b7b      	ldr	r3, [pc, #492]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a7a      	ldr	r2, [pc, #488]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	4b78      	ldr	r3, [pc, #480]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a77      	ldr	r2, [pc, #476]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e01d      	b.n	8001b1c <HAL_RCC_OscConfig+0xd4>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ae8:	d10c      	bne.n	8001b04 <HAL_RCC_OscConfig+0xbc>
 8001aea:	4b72      	ldr	r3, [pc, #456]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a71      	ldr	r2, [pc, #452]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	4b6f      	ldr	r3, [pc, #444]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a6e      	ldr	r2, [pc, #440]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	e00b      	b.n	8001b1c <HAL_RCC_OscConfig+0xd4>
 8001b04:	4b6b      	ldr	r3, [pc, #428]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a6a      	ldr	r2, [pc, #424]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b68      	ldr	r3, [pc, #416]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a67      	ldr	r2, [pc, #412]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d013      	beq.n	8001b4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7ff fcee 	bl	8001504 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7ff fcea 	bl	8001504 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	@ 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e200      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	4b5d      	ldr	r3, [pc, #372]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0xe4>
 8001b4a:	e014      	b.n	8001b76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fcda 	bl	8001504 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b54:	f7ff fcd6 	bl	8001504 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	@ 0x64
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e1ec      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b66:	4b53      	ldr	r3, [pc, #332]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x10c>
 8001b72:	e000      	b.n	8001b76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d063      	beq.n	8001c4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b82:	4b4c      	ldr	r3, [pc, #304]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00b      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b8e:	4b49      	ldr	r3, [pc, #292]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d11c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x18c>
 8001b9a:	4b46      	ldr	r3, [pc, #280]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d116      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba6:	4b43      	ldr	r3, [pc, #268]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <HAL_RCC_OscConfig+0x176>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d001      	beq.n	8001bbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e1c0      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bbe:	4b3d      	ldr	r3, [pc, #244]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4939      	ldr	r1, [pc, #228]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd2:	e03a      	b.n	8001c4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d020      	beq.n	8001c1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bdc:	4b36      	ldr	r3, [pc, #216]	@ (8001cb8 <HAL_RCC_OscConfig+0x270>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be2:	f7ff fc8f 	bl	8001504 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bea:	f7ff fc8b 	bl	8001504 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e1a1      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c08:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	4927      	ldr	r1, [pc, #156]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	600b      	str	r3, [r1, #0]
 8001c1c:	e015      	b.n	8001c4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1e:	4b26      	ldr	r3, [pc, #152]	@ (8001cb8 <HAL_RCC_OscConfig+0x270>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7ff fc6e 	bl	8001504 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2c:	f7ff fc6a 	bl	8001504 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e180      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d03a      	beq.n	8001ccc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d019      	beq.n	8001c92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5e:	4b17      	ldr	r3, [pc, #92]	@ (8001cbc <HAL_RCC_OscConfig+0x274>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c64:	f7ff fc4e 	bl	8001504 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c6c:	f7ff fc4a 	bl	8001504 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e160      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f000 face 	bl	800222c <RCC_Delay>
 8001c90:	e01c      	b.n	8001ccc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c92:	4b0a      	ldr	r3, [pc, #40]	@ (8001cbc <HAL_RCC_OscConfig+0x274>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c98:	f7ff fc34 	bl	8001504 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9e:	e00f      	b.n	8001cc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca0:	f7ff fc30 	bl	8001504 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d908      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e146      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	42420000 	.word	0x42420000
 8001cbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc0:	4b92      	ldr	r3, [pc, #584]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1e9      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 80a6 	beq.w	8001e26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cde:	4b8b      	ldr	r3, [pc, #556]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10d      	bne.n	8001d06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	4b88      	ldr	r3, [pc, #544]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	4a87      	ldr	r2, [pc, #540]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf4:	61d3      	str	r3, [r2, #28]
 8001cf6:	4b85      	ldr	r3, [pc, #532]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d02:	2301      	movs	r3, #1
 8001d04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d06:	4b82      	ldr	r3, [pc, #520]	@ (8001f10 <HAL_RCC_OscConfig+0x4c8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d118      	bne.n	8001d44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d12:	4b7f      	ldr	r3, [pc, #508]	@ (8001f10 <HAL_RCC_OscConfig+0x4c8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a7e      	ldr	r2, [pc, #504]	@ (8001f10 <HAL_RCC_OscConfig+0x4c8>)
 8001d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1e:	f7ff fbf1 	bl	8001504 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d26:	f7ff fbed 	bl	8001504 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b64      	cmp	r3, #100	@ 0x64
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e103      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d38:	4b75      	ldr	r3, [pc, #468]	@ (8001f10 <HAL_RCC_OscConfig+0x4c8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0f0      	beq.n	8001d26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_OscConfig+0x312>
 8001d4c:	4b6f      	ldr	r3, [pc, #444]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	4a6e      	ldr	r2, [pc, #440]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6213      	str	r3, [r2, #32]
 8001d58:	e02d      	b.n	8001db6 <HAL_RCC_OscConfig+0x36e>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10c      	bne.n	8001d7c <HAL_RCC_OscConfig+0x334>
 8001d62:	4b6a      	ldr	r3, [pc, #424]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	4a69      	ldr	r2, [pc, #420]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d68:	f023 0301 	bic.w	r3, r3, #1
 8001d6c:	6213      	str	r3, [r2, #32]
 8001d6e:	4b67      	ldr	r3, [pc, #412]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	4a66      	ldr	r2, [pc, #408]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d74:	f023 0304 	bic.w	r3, r3, #4
 8001d78:	6213      	str	r3, [r2, #32]
 8001d7a:	e01c      	b.n	8001db6 <HAL_RCC_OscConfig+0x36e>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	2b05      	cmp	r3, #5
 8001d82:	d10c      	bne.n	8001d9e <HAL_RCC_OscConfig+0x356>
 8001d84:	4b61      	ldr	r3, [pc, #388]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	4a60      	ldr	r2, [pc, #384]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d8a:	f043 0304 	orr.w	r3, r3, #4
 8001d8e:	6213      	str	r3, [r2, #32]
 8001d90:	4b5e      	ldr	r3, [pc, #376]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	4a5d      	ldr	r2, [pc, #372]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6213      	str	r3, [r2, #32]
 8001d9c:	e00b      	b.n	8001db6 <HAL_RCC_OscConfig+0x36e>
 8001d9e:	4b5b      	ldr	r3, [pc, #364]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	4a5a      	ldr	r2, [pc, #360]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	f023 0301 	bic.w	r3, r3, #1
 8001da8:	6213      	str	r3, [r2, #32]
 8001daa:	4b58      	ldr	r3, [pc, #352]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	4a57      	ldr	r2, [pc, #348]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	f023 0304 	bic.w	r3, r3, #4
 8001db4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d015      	beq.n	8001dea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbe:	f7ff fba1 	bl	8001504 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc4:	e00a      	b.n	8001ddc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc6:	f7ff fb9d 	bl	8001504 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e0b1      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ddc:	4b4b      	ldr	r3, [pc, #300]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0ee      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x37e>
 8001de8:	e014      	b.n	8001e14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dea:	f7ff fb8b 	bl	8001504 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df0:	e00a      	b.n	8001e08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df2:	f7ff fb87 	bl	8001504 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e09b      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e08:	4b40      	ldr	r3, [pc, #256]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1ee      	bne.n	8001df2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e14:	7dfb      	ldrb	r3, [r7, #23]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d105      	bne.n	8001e26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e1a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	4a3b      	ldr	r2, [pc, #236]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8087 	beq.w	8001f3e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e30:	4b36      	ldr	r3, [pc, #216]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d061      	beq.n	8001f00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d146      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e44:	4b33      	ldr	r3, [pc, #204]	@ (8001f14 <HAL_RCC_OscConfig+0x4cc>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7ff fb5b 	bl	8001504 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e52:	f7ff fb57 	bl	8001504 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e06d      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e64:	4b29      	ldr	r3, [pc, #164]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1f0      	bne.n	8001e52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e78:	d108      	bne.n	8001e8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e7a:	4b24      	ldr	r3, [pc, #144]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	4921      	ldr	r1, [pc, #132]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a19      	ldr	r1, [r3, #32]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	491b      	ldr	r1, [pc, #108]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f14 <HAL_RCC_OscConfig+0x4cc>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eaa:	f7ff fb2b 	bl	8001504 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb2:	f7ff fb27 	bl	8001504 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e03d      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec4:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x46a>
 8001ed0:	e035      	b.n	8001f3e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed2:	4b10      	ldr	r3, [pc, #64]	@ (8001f14 <HAL_RCC_OscConfig+0x4cc>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fb14 	bl	8001504 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7ff fb10 	bl	8001504 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e026      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef2:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x498>
 8001efe:	e01e      	b.n	8001f3e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d107      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e019      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40007000 	.word	0x40007000
 8001f14:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f18:	4b0b      	ldr	r3, [pc, #44]	@ (8001f48 <HAL_RCC_OscConfig+0x500>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d106      	bne.n	8001f3a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d001      	beq.n	8001f3e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40021000 	.word	0x40021000

08001f4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0d0      	b.n	8002102 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f60:	4b6a      	ldr	r3, [pc, #424]	@ (800210c <HAL_RCC_ClockConfig+0x1c0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d910      	bls.n	8001f90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6e:	4b67      	ldr	r3, [pc, #412]	@ (800210c <HAL_RCC_ClockConfig+0x1c0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 0207 	bic.w	r2, r3, #7
 8001f76:	4965      	ldr	r1, [pc, #404]	@ (800210c <HAL_RCC_ClockConfig+0x1c0>)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7e:	4b63      	ldr	r3, [pc, #396]	@ (800210c <HAL_RCC_ClockConfig+0x1c0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d001      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0b8      	b.n	8002102 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d020      	beq.n	8001fde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa8:	4b59      	ldr	r3, [pc, #356]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	4a58      	ldr	r2, [pc, #352]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fc0:	4b53      	ldr	r3, [pc, #332]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4a52      	ldr	r2, [pc, #328]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001fca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fcc:	4b50      	ldr	r3, [pc, #320]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	494d      	ldr	r1, [pc, #308]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d040      	beq.n	800206c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d107      	bne.n	8002002 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff2:	4b47      	ldr	r3, [pc, #284]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d115      	bne.n	800202a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e07f      	b.n	8002102 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200a:	4b41      	ldr	r3, [pc, #260]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d109      	bne.n	800202a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e073      	b.n	8002102 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201a:	4b3d      	ldr	r3, [pc, #244]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e06b      	b.n	8002102 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800202a:	4b39      	ldr	r3, [pc, #228]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f023 0203 	bic.w	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4936      	ldr	r1, [pc, #216]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800203c:	f7ff fa62 	bl	8001504 <HAL_GetTick>
 8002040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002042:	e00a      	b.n	800205a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002044:	f7ff fa5e 	bl	8001504 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e053      	b.n	8002102 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	4b2d      	ldr	r3, [pc, #180]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 020c 	and.w	r2, r3, #12
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	429a      	cmp	r2, r3
 800206a:	d1eb      	bne.n	8002044 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800206c:	4b27      	ldr	r3, [pc, #156]	@ (800210c <HAL_RCC_ClockConfig+0x1c0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d210      	bcs.n	800209c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b24      	ldr	r3, [pc, #144]	@ (800210c <HAL_RCC_ClockConfig+0x1c0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 0207 	bic.w	r2, r3, #7
 8002082:	4922      	ldr	r1, [pc, #136]	@ (800210c <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	4b20      	ldr	r3, [pc, #128]	@ (800210c <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d001      	beq.n	800209c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e032      	b.n	8002102 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d008      	beq.n	80020ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a8:	4b19      	ldr	r3, [pc, #100]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4916      	ldr	r1, [pc, #88]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d009      	beq.n	80020da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020c6:	4b12      	ldr	r3, [pc, #72]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	490e      	ldr	r1, [pc, #56]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020da:	f000 f821 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 80020de:	4602      	mov	r2, r0
 80020e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	091b      	lsrs	r3, r3, #4
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	490a      	ldr	r1, [pc, #40]	@ (8002114 <HAL_RCC_ClockConfig+0x1c8>)
 80020ec:	5ccb      	ldrb	r3, [r1, r3]
 80020ee:	fa22 f303 	lsr.w	r3, r2, r3
 80020f2:	4a09      	ldr	r2, [pc, #36]	@ (8002118 <HAL_RCC_ClockConfig+0x1cc>)
 80020f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020f6:	4b09      	ldr	r3, [pc, #36]	@ (800211c <HAL_RCC_ClockConfig+0x1d0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff f9c0 	bl	8001480 <HAL_InitTick>

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40022000 	.word	0x40022000
 8002110:	40021000 	.word	0x40021000
 8002114:	08006f8c 	.word	0x08006f8c
 8002118:	2000005c 	.word	0x2000005c
 800211c:	20000060 	.word	0x20000060

08002120 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002120:	b480      	push	{r7}
 8002122:	b087      	sub	sp, #28
 8002124:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800213a:	4b1e      	ldr	r3, [pc, #120]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b04      	cmp	r3, #4
 8002148:	d002      	beq.n	8002150 <HAL_RCC_GetSysClockFreq+0x30>
 800214a:	2b08      	cmp	r3, #8
 800214c:	d003      	beq.n	8002156 <HAL_RCC_GetSysClockFreq+0x36>
 800214e:	e027      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002150:	4b19      	ldr	r3, [pc, #100]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002152:	613b      	str	r3, [r7, #16]
      break;
 8002154:	e027      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	0c9b      	lsrs	r3, r3, #18
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	4a17      	ldr	r2, [pc, #92]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002160:	5cd3      	ldrb	r3, [r2, r3]
 8002162:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d010      	beq.n	8002190 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800216e:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	0c5b      	lsrs	r3, r3, #17
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	4a11      	ldr	r2, [pc, #68]	@ (80021c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800217a:	5cd3      	ldrb	r3, [r2, r3]
 800217c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a0d      	ldr	r2, [pc, #52]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002182:	fb03 f202 	mul.w	r2, r3, r2
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	fbb2 f3f3 	udiv	r3, r2, r3
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	e004      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a0c      	ldr	r2, [pc, #48]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002194:	fb02 f303 	mul.w	r3, r2, r3
 8002198:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	613b      	str	r3, [r7, #16]
      break;
 800219e:	e002      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021a0:	4b05      	ldr	r3, [pc, #20]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80021a2:	613b      	str	r3, [r7, #16]
      break;
 80021a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021a6:	693b      	ldr	r3, [r7, #16]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	371c      	adds	r7, #28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	007a1200 	.word	0x007a1200
 80021bc:	08006fa4 	.word	0x08006fa4
 80021c0:	08006fb4 	.word	0x08006fb4
 80021c4:	003d0900 	.word	0x003d0900

080021c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021cc:	4b02      	ldr	r3, [pc, #8]	@ (80021d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr
 80021d8:	2000005c 	.word	0x2000005c

080021dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021e0:	f7ff fff2 	bl	80021c8 <HAL_RCC_GetHCLKFreq>
 80021e4:	4602      	mov	r2, r0
 80021e6:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	4903      	ldr	r1, [pc, #12]	@ (8002200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021f2:	5ccb      	ldrb	r3, [r1, r3]
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021000 	.word	0x40021000
 8002200:	08006f9c 	.word	0x08006f9c

08002204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002208:	f7ff ffde 	bl	80021c8 <HAL_RCC_GetHCLKFreq>
 800220c:	4602      	mov	r2, r0
 800220e:	4b05      	ldr	r3, [pc, #20]	@ (8002224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	0adb      	lsrs	r3, r3, #11
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	4903      	ldr	r1, [pc, #12]	@ (8002228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800221a:	5ccb      	ldrb	r3, [r1, r3]
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	08006f9c 	.word	0x08006f9c

0800222c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002234:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <RCC_Delay+0x34>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0a      	ldr	r2, [pc, #40]	@ (8002264 <RCC_Delay+0x38>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	0a5b      	lsrs	r3, r3, #9
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	fb02 f303 	mul.w	r3, r2, r3
 8002246:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002248:	bf00      	nop
  }
  while (Delay --);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1e5a      	subs	r2, r3, #1
 800224e:	60fa      	str	r2, [r7, #12]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f9      	bne.n	8002248 <RCC_Delay+0x1c>
}
 8002254:	bf00      	nop
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr
 8002260:	2000005c 	.word	0x2000005c
 8002264:	10624dd3 	.word	0x10624dd3

08002268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e042      	b.n	8002300 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d106      	bne.n	8002294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7fe ffc0 	bl	8001214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2224      	movs	r2, #36	@ 0x24
 8002298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f971 	bl	8002594 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	@ 0x28
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	4613      	mov	r3, r2
 8002316:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b20      	cmp	r3, #32
 8002326:	d175      	bne.n	8002414 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <HAL_UART_Transmit+0x2c>
 800232e:	88fb      	ldrh	r3, [r7, #6]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e06e      	b.n	8002416 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2221      	movs	r2, #33	@ 0x21
 8002342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002346:	f7ff f8dd 	bl	8001504 <HAL_GetTick>
 800234a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	88fa      	ldrh	r2, [r7, #6]
 8002350:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	88fa      	ldrh	r2, [r7, #6]
 8002356:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002360:	d108      	bne.n	8002374 <HAL_UART_Transmit+0x6c>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d104      	bne.n	8002374 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	e003      	b.n	800237c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002378:	2300      	movs	r3, #0
 800237a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800237c:	e02e      	b.n	80023dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2200      	movs	r2, #0
 8002386:	2180      	movs	r1, #128	@ 0x80
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 f848 	bl	800241e <UART_WaitOnFlagUntilTimeout>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e03a      	b.n	8002416 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10b      	bne.n	80023be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	3302      	adds	r3, #2
 80023ba:	61bb      	str	r3, [r7, #24]
 80023bc:	e007      	b.n	80023ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	781a      	ldrb	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	3301      	adds	r3, #1
 80023cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1cb      	bne.n	800237e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2200      	movs	r2, #0
 80023ee:	2140      	movs	r1, #64	@ 0x40
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f814 	bl	800241e <UART_WaitOnFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e006      	b.n	8002416 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	e000      	b.n	8002416 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002414:	2302      	movs	r3, #2
  }
}
 8002416:	4618      	mov	r0, r3
 8002418:	3720      	adds	r7, #32
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b086      	sub	sp, #24
 8002422:	af00      	add	r7, sp, #0
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	603b      	str	r3, [r7, #0]
 800242a:	4613      	mov	r3, r2
 800242c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800242e:	e03b      	b.n	80024a8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002436:	d037      	beq.n	80024a8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002438:	f7ff f864 	bl	8001504 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	6a3a      	ldr	r2, [r7, #32]
 8002444:	429a      	cmp	r2, r3
 8002446:	d302      	bcc.n	800244e <UART_WaitOnFlagUntilTimeout+0x30>
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e03a      	b.n	80024c8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d023      	beq.n	80024a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b80      	cmp	r3, #128	@ 0x80
 8002464:	d020      	beq.n	80024a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b40      	cmp	r3, #64	@ 0x40
 800246a:	d01d      	beq.n	80024a8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b08      	cmp	r3, #8
 8002478:	d116      	bne.n	80024a8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 f81d 	bl	80024d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2208      	movs	r2, #8
 800249a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e00f      	b.n	80024c8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	4013      	ands	r3, r2
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	bf0c      	ite	eq
 80024b8:	2301      	moveq	r3, #1
 80024ba:	2300      	movne	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d0b4      	beq.n	8002430 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b095      	sub	sp, #84	@ 0x54
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	330c      	adds	r3, #12
 80024de:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024e2:	e853 3f00 	ldrex	r3, [r3]
 80024e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80024e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80024ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	330c      	adds	r3, #12
 80024f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80024fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80024fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002500:	e841 2300 	strex	r3, r2, [r1]
 8002504:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1e5      	bne.n	80024d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	3314      	adds	r3, #20
 8002512:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	e853 3f00 	ldrex	r3, [r3]
 800251a:	61fb      	str	r3, [r7, #28]
   return(result);
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f023 0301 	bic.w	r3, r3, #1
 8002522:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	3314      	adds	r3, #20
 800252a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800252c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800252e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002530:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002532:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002534:	e841 2300 	strex	r3, r2, [r1]
 8002538:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800253a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1e5      	bne.n	800250c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002544:	2b01      	cmp	r3, #1
 8002546:	d119      	bne.n	800257c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	330c      	adds	r3, #12
 800254e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	e853 3f00 	ldrex	r3, [r3]
 8002556:	60bb      	str	r3, [r7, #8]
   return(result);
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f023 0310 	bic.w	r3, r3, #16
 800255e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	330c      	adds	r3, #12
 8002566:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002568:	61ba      	str	r2, [r7, #24]
 800256a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800256c:	6979      	ldr	r1, [r7, #20]
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	e841 2300 	strex	r3, r2, [r1]
 8002574:	613b      	str	r3, [r7, #16]
   return(result);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1e5      	bne.n	8002548 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800258a:	bf00      	nop
 800258c:	3754      	adds	r7, #84	@ 0x54
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80025ce:	f023 030c 	bic.w	r3, r3, #12
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	430b      	orrs	r3, r1
 80025da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a2c      	ldr	r2, [pc, #176]	@ (80026a8 <UART_SetConfig+0x114>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d103      	bne.n	8002604 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025fc:	f7ff fe02 	bl	8002204 <HAL_RCC_GetPCLK2Freq>
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	e002      	b.n	800260a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002604:	f7ff fdea 	bl	80021dc <HAL_RCC_GetPCLK1Freq>
 8002608:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	009a      	lsls	r2, r3, #2
 8002614:	441a      	add	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002620:	4a22      	ldr	r2, [pc, #136]	@ (80026ac <UART_SetConfig+0x118>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	0119      	lsls	r1, r3, #4
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	009a      	lsls	r2, r3, #2
 8002634:	441a      	add	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002640:	4b1a      	ldr	r3, [pc, #104]	@ (80026ac <UART_SetConfig+0x118>)
 8002642:	fba3 0302 	umull	r0, r3, r3, r2
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	2064      	movs	r0, #100	@ 0x64
 800264a:	fb00 f303 	mul.w	r3, r0, r3
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	3332      	adds	r3, #50	@ 0x32
 8002654:	4a15      	ldr	r2, [pc, #84]	@ (80026ac <UART_SetConfig+0x118>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002660:	4419      	add	r1, r3
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	009a      	lsls	r2, r3, #2
 800266c:	441a      	add	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	fbb2 f2f3 	udiv	r2, r2, r3
 8002678:	4b0c      	ldr	r3, [pc, #48]	@ (80026ac <UART_SetConfig+0x118>)
 800267a:	fba3 0302 	umull	r0, r3, r3, r2
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	2064      	movs	r0, #100	@ 0x64
 8002682:	fb00 f303 	mul.w	r3, r0, r3
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	3332      	adds	r3, #50	@ 0x32
 800268c:	4a07      	ldr	r2, [pc, #28]	@ (80026ac <UART_SetConfig+0x118>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	f003 020f 	and.w	r2, r3, #15
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	440a      	add	r2, r1
 800269e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80026a0:	bf00      	nop
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40013800 	.word	0x40013800
 80026ac:	51eb851f 	.word	0x51eb851f

080026b0 <__NVIC_SetPriority>:
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	6039      	str	r1, [r7, #0]
 80026ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	db0a      	blt.n	80026da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	490c      	ldr	r1, [pc, #48]	@ (80026fc <__NVIC_SetPriority+0x4c>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	0112      	lsls	r2, r2, #4
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	440b      	add	r3, r1
 80026d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80026d8:	e00a      	b.n	80026f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4908      	ldr	r1, [pc, #32]	@ (8002700 <__NVIC_SetPriority+0x50>)
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	3b04      	subs	r3, #4
 80026e8:	0112      	lsls	r2, r2, #4
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	440b      	add	r3, r1
 80026ee:	761a      	strb	r2, [r3, #24]
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	e000e100 	.word	0xe000e100
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002708:	2100      	movs	r1, #0
 800270a:	f06f 0004 	mvn.w	r0, #4
 800270e:	f7ff ffcf 	bl	80026b0 <__NVIC_SetPriority>
#endif
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800271e:	f3ef 8305 	mrs	r3, IPSR
 8002722:	603b      	str	r3, [r7, #0]
  return(result);
 8002724:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800272a:	f06f 0305 	mvn.w	r3, #5
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	e00c      	b.n	800274c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002732:	4b09      	ldr	r3, [pc, #36]	@ (8002758 <osKernelInitialize+0x40>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d105      	bne.n	8002746 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800273a:	4b07      	ldr	r3, [pc, #28]	@ (8002758 <osKernelInitialize+0x40>)
 800273c:	2201      	movs	r2, #1
 800273e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002740:	2300      	movs	r3, #0
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	e002      	b.n	800274c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002746:	f04f 33ff 	mov.w	r3, #4294967295
 800274a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800274c:	687b      	ldr	r3, [r7, #4]
}
 800274e:	4618      	mov	r0, r3
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr
 8002758:	20000180 	.word	0x20000180

0800275c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002762:	f3ef 8305 	mrs	r3, IPSR
 8002766:	603b      	str	r3, [r7, #0]
  return(result);
 8002768:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <osKernelStart+0x1a>
    stat = osErrorISR;
 800276e:	f06f 0305 	mvn.w	r3, #5
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	e010      	b.n	8002798 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002776:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <osKernelStart+0x48>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d109      	bne.n	8002792 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800277e:	f7ff ffc1 	bl	8002704 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002782:	4b08      	ldr	r3, [pc, #32]	@ (80027a4 <osKernelStart+0x48>)
 8002784:	2202      	movs	r2, #2
 8002786:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002788:	f001 fd4e 	bl	8004228 <vTaskStartScheduler>
      stat = osOK;
 800278c:	2300      	movs	r3, #0
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	e002      	b.n	8002798 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002792:	f04f 33ff 	mov.w	r3, #4294967295
 8002796:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002798:	687b      	ldr	r3, [r7, #4]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000180 	.word	0x20000180

080027a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08e      	sub	sp, #56	@ 0x38
 80027ac:	af04      	add	r7, sp, #16
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027b8:	f3ef 8305 	mrs	r3, IPSR
 80027bc:	617b      	str	r3, [r7, #20]
  return(result);
 80027be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d17e      	bne.n	80028c2 <osThreadNew+0x11a>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d07b      	beq.n	80028c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80027ca:	2380      	movs	r3, #128	@ 0x80
 80027cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80027ce:	2318      	movs	r3, #24
 80027d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80027d6:	f04f 33ff 	mov.w	r3, #4294967295
 80027da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d045      	beq.n	800286e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <osThreadNew+0x48>
        name = attr->name;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <osThreadNew+0x6e>
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	2b38      	cmp	r3, #56	@ 0x38
 8002808:	d805      	bhi.n	8002816 <osThreadNew+0x6e>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <osThreadNew+0x72>
        return (NULL);
 8002816:	2300      	movs	r3, #0
 8002818:	e054      	b.n	80028c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	089b      	lsrs	r3, r3, #2
 8002828:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00e      	beq.n	8002850 <osThreadNew+0xa8>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	2b5b      	cmp	r3, #91	@ 0x5b
 8002838:	d90a      	bls.n	8002850 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800283e:	2b00      	cmp	r3, #0
 8002840:	d006      	beq.n	8002850 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <osThreadNew+0xa8>
        mem = 1;
 800284a:	2301      	movs	r3, #1
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	e010      	b.n	8002872 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10c      	bne.n	8002872 <osThreadNew+0xca>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d108      	bne.n	8002872 <osThreadNew+0xca>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d104      	bne.n	8002872 <osThreadNew+0xca>
          mem = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	61bb      	str	r3, [r7, #24]
 800286c:	e001      	b.n	8002872 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d110      	bne.n	800289a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002880:	9202      	str	r2, [sp, #8]
 8002882:	9301      	str	r3, [sp, #4]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	6a3a      	ldr	r2, [r7, #32]
 800288c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f001 faee 	bl	8003e70 <xTaskCreateStatic>
 8002894:	4603      	mov	r3, r0
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	e013      	b.n	80028c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d110      	bne.n	80028c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	f107 0310 	add.w	r3, r7, #16
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f001 fb3c 	bl	8003f30 <xTaskCreate>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d001      	beq.n	80028c2 <osThreadNew+0x11a>
            hTask = NULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80028c2:	693b      	ldr	r3, [r7, #16]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3728      	adds	r7, #40	@ 0x28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028d4:	f3ef 8305 	mrs	r3, IPSR
 80028d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80028da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <osDelay+0x1c>
    stat = osErrorISR;
 80028e0:	f06f 0305 	mvn.w	r3, #5
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	e007      	b.n	80028f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f001 fc62 	bl	80041bc <vTaskDelay>
    }
  }

  return (stat);
 80028f8:	68fb      	ldr	r3, [r7, #12]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8002902:	b580      	push	{r7, lr}
 8002904:	b088      	sub	sp, #32
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800290e:	f3ef 8305 	mrs	r3, IPSR
 8002912:	60bb      	str	r3, [r7, #8]
  return(result);
 8002914:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8002916:	2b00      	cmp	r3, #0
 8002918:	d174      	bne.n	8002a04 <osMutexNew+0x102>
    if (attr != NULL) {
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <osMutexNew+0x26>
      type = attr->attr_bits;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	e001      	b.n	800292c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <osMutexNew+0x3a>
      rmtx = 1U;
 8002936:	2301      	movs	r3, #1
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	e001      	b.n	8002940 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d15c      	bne.n	8002a04 <osMutexNew+0x102>
      mem = -1;
 800294a:	f04f 33ff 	mov.w	r3, #4294967295
 800294e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d015      	beq.n	8002982 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d006      	beq.n	800296c <osMutexNew+0x6a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	2b4f      	cmp	r3, #79	@ 0x4f
 8002964:	d902      	bls.n	800296c <osMutexNew+0x6a>
          mem = 1;
 8002966:	2301      	movs	r3, #1
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	e00c      	b.n	8002986 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d108      	bne.n	8002986 <osMutexNew+0x84>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d104      	bne.n	8002986 <osMutexNew+0x84>
            mem = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	e001      	b.n	8002986 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d112      	bne.n	80029b2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d007      	beq.n	80029a2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	4619      	mov	r1, r3
 8002998:	2004      	movs	r0, #4
 800299a:	f000 fc4a 	bl	8003232 <xQueueCreateMutexStatic>
 800299e:	61f8      	str	r0, [r7, #28]
 80029a0:	e016      	b.n	80029d0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	4619      	mov	r1, r3
 80029a8:	2001      	movs	r0, #1
 80029aa:	f000 fc42 	bl	8003232 <xQueueCreateMutexStatic>
 80029ae:	61f8      	str	r0, [r7, #28]
 80029b0:	e00e      	b.n	80029d0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10b      	bne.n	80029d0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d004      	beq.n	80029c8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80029be:	2004      	movs	r0, #4
 80029c0:	f000 fc1f 	bl	8003202 <xQueueCreateMutex>
 80029c4:	61f8      	str	r0, [r7, #28]
 80029c6:	e003      	b.n	80029d0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80029c8:	2001      	movs	r0, #1
 80029ca:	f000 fc1a 	bl	8003202 <xQueueCreateMutex>
 80029ce:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00c      	beq.n	80029f0 <osMutexNew+0xee>
        if (attr != NULL) {
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <osMutexNew+0xe2>
          name = attr->name;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	e001      	b.n	80029e8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80029e8:	68f9      	ldr	r1, [r7, #12]
 80029ea:	69f8      	ldr	r0, [r7, #28]
 80029ec:	f001 f9e4 	bl	8003db8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d006      	beq.n	8002a04 <osMutexNew+0x102>
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8002a04:	69fb      	ldr	r3, [r7, #28]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3720      	adds	r7, #32
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b086      	sub	sp, #24
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f023 0301 	bic.w	r3, r3, #1
 8002a1e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a2c:	f3ef 8305 	mrs	r3, IPSR
 8002a30:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a32:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8002a38:	f06f 0305 	mvn.w	r3, #5
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	e02c      	b.n	8002a9a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d103      	bne.n	8002a4e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8002a46:	f06f 0303 	mvn.w	r3, #3
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	e025      	b.n	8002a9a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d011      	beq.n	8002a78 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8002a54:	6839      	ldr	r1, [r7, #0]
 8002a56:	6938      	ldr	r0, [r7, #16]
 8002a58:	f000 fc3b 	bl	80032d2 <xQueueTakeMutexRecursive>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d01b      	beq.n	8002a9a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8002a68:	f06f 0301 	mvn.w	r3, #1
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	e014      	b.n	8002a9a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002a70:	f06f 0302 	mvn.w	r3, #2
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	e010      	b.n	8002a9a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8002a78:	6839      	ldr	r1, [r7, #0]
 8002a7a:	6938      	ldr	r0, [r7, #16]
 8002a7c:	f000 fee2 	bl	8003844 <xQueueSemaphoreTake>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d009      	beq.n	8002a9a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8002a8c:	f06f 0301 	mvn.w	r3, #1
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	e002      	b.n	8002a9a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002a94:	f06f 0302 	mvn.w	r3, #2
 8002a98:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8002a9a:	697b      	ldr	r3, [r7, #20]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f023 0301 	bic.w	r3, r3, #1
 8002ab2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ac0:	f3ef 8305 	mrs	r3, IPSR
 8002ac4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ac6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <osMutexRelease+0x30>
    stat = osErrorISR;
 8002acc:	f06f 0305 	mvn.w	r3, #5
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	e01f      	b.n	8002b14 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d103      	bne.n	8002ae2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8002ada:	f06f 0303 	mvn.w	r3, #3
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	e018      	b.n	8002b14 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d009      	beq.n	8002afc <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8002ae8:	6938      	ldr	r0, [r7, #16]
 8002aea:	f000 fbbd 	bl	8003268 <xQueueGiveMutexRecursive>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d00f      	beq.n	8002b14 <osMutexRelease+0x70>
        stat = osErrorResource;
 8002af4:	f06f 0302 	mvn.w	r3, #2
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	e00b      	b.n	8002b14 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8002afc:	2300      	movs	r3, #0
 8002afe:	2200      	movs	r2, #0
 8002b00:	2100      	movs	r1, #0
 8002b02:	6938      	ldr	r0, [r7, #16]
 8002b04:	f000 fc1c 	bl	8003340 <xQueueGenericSend>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d002      	beq.n	8002b14 <osMutexRelease+0x70>
        stat = osErrorResource;
 8002b0e:	f06f 0302 	mvn.w	r3, #2
 8002b12:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002b14:	697b      	ldr	r3, [r7, #20]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b08a      	sub	sp, #40	@ 0x28
 8002b22:	af02      	add	r7, sp, #8
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b2e:	f3ef 8305 	mrs	r3, IPSR
 8002b32:	613b      	str	r3, [r7, #16]
  return(result);
 8002b34:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d15f      	bne.n	8002bfa <osMessageQueueNew+0xdc>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d05c      	beq.n	8002bfa <osMessageQueueNew+0xdc>
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d059      	beq.n	8002bfa <osMessageQueueNew+0xdc>
    mem = -1;
 8002b46:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d029      	beq.n	8002ba6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d012      	beq.n	8002b80 <osMessageQueueNew+0x62>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	2b4f      	cmp	r3, #79	@ 0x4f
 8002b60:	d90e      	bls.n	8002b80 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	fb01 f303 	mul.w	r3, r1, r3
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d302      	bcc.n	8002b80 <osMessageQueueNew+0x62>
        mem = 1;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	e014      	b.n	8002baa <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d110      	bne.n	8002baa <osMessageQueueNew+0x8c>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10c      	bne.n	8002baa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d108      	bne.n	8002baa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d104      	bne.n	8002baa <osMessageQueueNew+0x8c>
          mem = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	61bb      	str	r3, [r7, #24]
 8002ba4:	e001      	b.n	8002baa <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d10b      	bne.n	8002bc8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2100      	movs	r1, #0
 8002bba:	9100      	str	r1, [sp, #0]
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 fa2a 	bl	8003018 <xQueueGenericCreateStatic>
 8002bc4:	61f8      	str	r0, [r7, #28]
 8002bc6:	e008      	b.n	8002bda <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d105      	bne.n	8002bda <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8002bce:	2200      	movs	r2, #0
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 fa9d 	bl	8003112 <xQueueGenericCreate>
 8002bd8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00c      	beq.n	8002bfa <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <osMessageQueueNew+0xd0>
        name = attr->name;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	e001      	b.n	8002bf2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8002bf2:	6979      	ldr	r1, [r7, #20]
 8002bf4:	69f8      	ldr	r0, [r7, #28]
 8002bf6:	f001 f8df 	bl	8003db8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002bfa:	69fb      	ldr	r3, [r7, #28]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3720      	adds	r7, #32
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	4613      	mov	r3, r2
 8002c12:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c1c:	f3ef 8305 	mrs	r3, IPSR
 8002c20:	617b      	str	r3, [r7, #20]
  return(result);
 8002c22:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d028      	beq.n	8002c7a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d005      	beq.n	8002c3a <osMessageQueuePut+0x36>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <osMessageQueuePut+0x36>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8002c3a:	f06f 0303 	mvn.w	r3, #3
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	e038      	b.n	8002cb4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8002c42:	2300      	movs	r3, #0
 8002c44:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002c46:	f107 0210 	add.w	r2, r7, #16
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	69b8      	ldr	r0, [r7, #24]
 8002c50:	f000 fc78 	bl	8003544 <xQueueGenericSendFromISR>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d003      	beq.n	8002c62 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8002c5a:	f06f 0302 	mvn.w	r3, #2
 8002c5e:	61fb      	str	r3, [r7, #28]
 8002c60:	e028      	b.n	8002cb4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d025      	beq.n	8002cb4 <osMessageQueuePut+0xb0>
 8002c68:	4b15      	ldr	r3, [pc, #84]	@ (8002cc0 <osMessageQueuePut+0xbc>)
 8002c6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	e01c      	b.n	8002cb4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <osMessageQueuePut+0x82>
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d103      	bne.n	8002c8e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8002c86:	f06f 0303 	mvn.w	r3, #3
 8002c8a:	61fb      	str	r3, [r7, #28]
 8002c8c:	e012      	b.n	8002cb4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002c8e:	2300      	movs	r3, #0
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	68b9      	ldr	r1, [r7, #8]
 8002c94:	69b8      	ldr	r0, [r7, #24]
 8002c96:	f000 fb53 	bl	8003340 <xQueueGenericSend>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d009      	beq.n	8002cb4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8002ca6:	f06f 0301 	mvn.w	r3, #1
 8002caa:	61fb      	str	r3, [r7, #28]
 8002cac:	e002      	b.n	8002cb4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8002cae:	f06f 0302 	mvn.w	r3, #2
 8002cb2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002cb4:	69fb      	ldr	r3, [r7, #28]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3720      	adds	r7, #32
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	e000ed04 	.word	0xe000ed04

08002cc4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
 8002cd0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cda:	f3ef 8305 	mrs	r3, IPSR
 8002cde:	617b      	str	r3, [r7, #20]
  return(result);
 8002ce0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d028      	beq.n	8002d38 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <osMessageQueueGet+0x34>
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <osMessageQueueGet+0x34>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8002cf8:	f06f 0303 	mvn.w	r3, #3
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	e037      	b.n	8002d70 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8002d00:	2300      	movs	r3, #0
 8002d02:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002d04:	f107 0310 	add.w	r3, r7, #16
 8002d08:	461a      	mov	r2, r3
 8002d0a:	68b9      	ldr	r1, [r7, #8]
 8002d0c:	69b8      	ldr	r0, [r7, #24]
 8002d0e:	f000 fea9 	bl	8003a64 <xQueueReceiveFromISR>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d003      	beq.n	8002d20 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8002d18:	f06f 0302 	mvn.w	r3, #2
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	e027      	b.n	8002d70 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d024      	beq.n	8002d70 <osMessageQueueGet+0xac>
 8002d26:	4b15      	ldr	r3, [pc, #84]	@ (8002d7c <osMessageQueueGet+0xb8>)
 8002d28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	f3bf 8f4f 	dsb	sy
 8002d32:	f3bf 8f6f 	isb	sy
 8002d36:	e01b      	b.n	8002d70 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <osMessageQueueGet+0x80>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d103      	bne.n	8002d4c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8002d44:	f06f 0303 	mvn.w	r3, #3
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	e011      	b.n	8002d70 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	68b9      	ldr	r1, [r7, #8]
 8002d50:	69b8      	ldr	r0, [r7, #24]
 8002d52:	f000 fc95 	bl	8003680 <xQueueReceive>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d009      	beq.n	8002d70 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8002d62:	f06f 0301 	mvn.w	r3, #1
 8002d66:	61fb      	str	r3, [r7, #28]
 8002d68:	e002      	b.n	8002d70 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8002d6a:	f06f 0302 	mvn.w	r3, #2
 8002d6e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002d70:	69fb      	ldr	r3, [r7, #28]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3720      	adds	r7, #32
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	e000ed04 	.word	0xe000ed04

08002d80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4a06      	ldr	r2, [pc, #24]	@ (8002da8 <vApplicationGetIdleTaskMemory+0x28>)
 8002d90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	4a05      	ldr	r2, [pc, #20]	@ (8002dac <vApplicationGetIdleTaskMemory+0x2c>)
 8002d96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2280      	movs	r2, #128	@ 0x80
 8002d9c:	601a      	str	r2, [r3, #0]
}
 8002d9e:	bf00      	nop
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr
 8002da8:	20000184 	.word	0x20000184
 8002dac:	200001e0 	.word	0x200001e0

08002db0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4a07      	ldr	r2, [pc, #28]	@ (8002ddc <vApplicationGetTimerTaskMemory+0x2c>)
 8002dc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4a06      	ldr	r2, [pc, #24]	@ (8002de0 <vApplicationGetTimerTaskMemory+0x30>)
 8002dc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002dce:	601a      	str	r2, [r3, #0]
}
 8002dd0:	bf00      	nop
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	200003e0 	.word	0x200003e0
 8002de0:	2000043c 	.word	0x2000043c

08002de4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f103 0208 	add.w	r2, r3, #8
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dfc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f103 0208 	add.w	r2, r3, #8
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f103 0208 	add.w	r2, r3, #8
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	601a      	str	r2, [r3, #0]
}
 8002e76:	bf00      	nop
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e96:	d103      	bne.n	8002ea0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	e00c      	b.n	8002eba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3308      	adds	r3, #8
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	e002      	b.n	8002eae <vListInsert+0x2e>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d2f6      	bcs.n	8002ea8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	601a      	str	r2, [r3, #0]
}
 8002ee6:	bf00      	nop
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6892      	ldr	r2, [r2, #8]
 8002f06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6852      	ldr	r2, [r2, #4]
 8002f10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d103      	bne.n	8002f24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	1e5a      	subs	r2, r3, #1
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr
	...

08002f44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10b      	bne.n	8002f70 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f5c:	f383 8811 	msr	BASEPRI, r3
 8002f60:	f3bf 8f6f 	isb	sy
 8002f64:	f3bf 8f4f 	dsb	sy
 8002f68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002f6a:	bf00      	nop
 8002f6c:	bf00      	nop
 8002f6e:	e7fd      	b.n	8002f6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002f70:	f002 fbdc 	bl	800572c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f7c:	68f9      	ldr	r1, [r7, #12]
 8002f7e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002f80:	fb01 f303 	mul.w	r3, r1, r3
 8002f84:	441a      	add	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	68f9      	ldr	r1, [r7, #12]
 8002fa4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002fa6:	fb01 f303 	mul.w	r3, r1, r3
 8002faa:	441a      	add	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	22ff      	movs	r2, #255	@ 0xff
 8002fb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	22ff      	movs	r2, #255	@ 0xff
 8002fbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d114      	bne.n	8002ff0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01a      	beq.n	8003004 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3310      	adds	r3, #16
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f001 fbb4 	bl	8004740 <xTaskRemoveFromEventList>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d012      	beq.n	8003004 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002fde:	4b0d      	ldr	r3, [pc, #52]	@ (8003014 <xQueueGenericReset+0xd0>)
 8002fe0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	f3bf 8f4f 	dsb	sy
 8002fea:	f3bf 8f6f 	isb	sy
 8002fee:	e009      	b.n	8003004 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	3310      	adds	r3, #16
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fef5 	bl	8002de4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	3324      	adds	r3, #36	@ 0x24
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff fef0 	bl	8002de4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003004:	f002 fbc2 	bl	800578c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003008:	2301      	movs	r3, #1
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	e000ed04 	.word	0xe000ed04

08003018 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08e      	sub	sp, #56	@ 0x38
 800301c:	af02      	add	r7, sp, #8
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
 8003024:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10b      	bne.n	8003044 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800302c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003030:	f383 8811 	msr	BASEPRI, r3
 8003034:	f3bf 8f6f 	isb	sy
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800303e:	bf00      	nop
 8003040:	bf00      	nop
 8003042:	e7fd      	b.n	8003040 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10b      	bne.n	8003062 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800304a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800304e:	f383 8811 	msr	BASEPRI, r3
 8003052:	f3bf 8f6f 	isb	sy
 8003056:	f3bf 8f4f 	dsb	sy
 800305a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	e7fd      	b.n	800305e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <xQueueGenericCreateStatic+0x56>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <xQueueGenericCreateStatic+0x5a>
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <xQueueGenericCreateStatic+0x5c>
 8003072:	2300      	movs	r3, #0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10b      	bne.n	8003090 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	623b      	str	r3, [r7, #32]
}
 800308a:	bf00      	nop
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d102      	bne.n	800309c <xQueueGenericCreateStatic+0x84>
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <xQueueGenericCreateStatic+0x88>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <xQueueGenericCreateStatic+0x8a>
 80030a0:	2300      	movs	r3, #0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10b      	bne.n	80030be <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80030a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	61fb      	str	r3, [r7, #28]
}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	e7fd      	b.n	80030ba <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80030be:	2350      	movs	r3, #80	@ 0x50
 80030c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2b50      	cmp	r3, #80	@ 0x50
 80030c6:	d00b      	beq.n	80030e0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80030c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	61bb      	str	r3, [r7, #24]
}
 80030da:	bf00      	nop
 80030dc:	bf00      	nop
 80030de:	e7fd      	b.n	80030dc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80030e0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80030e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00d      	beq.n	8003108 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80030ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030f4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80030f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	4613      	mov	r3, r2
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f840 	bl	8003188 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800310a:	4618      	mov	r0, r3
 800310c:	3730      	adds	r7, #48	@ 0x30
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003112:	b580      	push	{r7, lr}
 8003114:	b08a      	sub	sp, #40	@ 0x28
 8003116:	af02      	add	r7, sp, #8
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	4613      	mov	r3, r2
 800311e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10b      	bne.n	800313e <xQueueGenericCreate+0x2c>
	__asm volatile
 8003126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800312a:	f383 8811 	msr	BASEPRI, r3
 800312e:	f3bf 8f6f 	isb	sy
 8003132:	f3bf 8f4f 	dsb	sy
 8003136:	613b      	str	r3, [r7, #16]
}
 8003138:	bf00      	nop
 800313a:	bf00      	nop
 800313c:	e7fd      	b.n	800313a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	fb02 f303 	mul.w	r3, r2, r3
 8003146:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	3350      	adds	r3, #80	@ 0x50
 800314c:	4618      	mov	r0, r3
 800314e:	f002 fbef 	bl	8005930 <pvPortMalloc>
 8003152:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d011      	beq.n	800317e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	3350      	adds	r3, #80	@ 0x50
 8003162:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800316c:	79fa      	ldrb	r2, [r7, #7]
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	4613      	mov	r3, r2
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	68b9      	ldr	r1, [r7, #8]
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 f805 	bl	8003188 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800317e:	69bb      	ldr	r3, [r7, #24]
	}
 8003180:	4618      	mov	r0, r3
 8003182:	3720      	adds	r7, #32
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d103      	bne.n	80031a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	e002      	b.n	80031aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80031b6:	2101      	movs	r1, #1
 80031b8:	69b8      	ldr	r0, [r7, #24]
 80031ba:	f7ff fec3 	bl	8002f44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80031c6:	bf00      	nop
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00e      	beq.n	80031fa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80031ee:	2300      	movs	r3, #0
 80031f0:	2200      	movs	r2, #0
 80031f2:	2100      	movs	r1, #0
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f8a3 	bl	8003340 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003202:	b580      	push	{r7, lr}
 8003204:	b086      	sub	sp, #24
 8003206:	af00      	add	r7, sp, #0
 8003208:	4603      	mov	r3, r0
 800320a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800320c:	2301      	movs	r3, #1
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	2300      	movs	r3, #0
 8003212:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	461a      	mov	r2, r3
 8003218:	6939      	ldr	r1, [r7, #16]
 800321a:	6978      	ldr	r0, [r7, #20]
 800321c:	f7ff ff79 	bl	8003112 <xQueueGenericCreate>
 8003220:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f7ff ffd3 	bl	80031ce <prvInitialiseMutex>

		return xNewQueue;
 8003228:	68fb      	ldr	r3, [r7, #12]
	}
 800322a:	4618      	mov	r0, r3
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003232:	b580      	push	{r7, lr}
 8003234:	b088      	sub	sp, #32
 8003236:	af02      	add	r7, sp, #8
 8003238:	4603      	mov	r3, r0
 800323a:	6039      	str	r1, [r7, #0]
 800323c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800323e:	2301      	movs	r3, #1
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	2300      	movs	r3, #0
 8003244:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2200      	movs	r2, #0
 800324e:	6939      	ldr	r1, [r7, #16]
 8003250:	6978      	ldr	r0, [r7, #20]
 8003252:	f7ff fee1 	bl	8003018 <xQueueGenericCreateStatic>
 8003256:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f7ff ffb8 	bl	80031ce <prvInitialiseMutex>

		return xNewQueue;
 800325e:	68fb      	ldr	r3, [r7, #12]
	}
 8003260:	4618      	mov	r0, r3
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8003268:	b590      	push	{r4, r7, lr}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10b      	bne.n	8003292 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800327a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	60fb      	str	r3, [r7, #12]
}
 800328c:	bf00      	nop
 800328e:	bf00      	nop
 8003290:	e7fd      	b.n	800328e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	689c      	ldr	r4, [r3, #8]
 8003296:	f001 fc13 	bl	8004ac0 <xTaskGetCurrentTaskHandle>
 800329a:	4603      	mov	r3, r0
 800329c:	429c      	cmp	r4, r3
 800329e:	d111      	bne.n	80032c4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	1e5a      	subs	r2, r3, #1
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d105      	bne.n	80032be <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80032b2:	2300      	movs	r3, #0
 80032b4:	2200      	movs	r2, #0
 80032b6:	2100      	movs	r1, #0
 80032b8:	6938      	ldr	r0, [r7, #16]
 80032ba:	f000 f841 	bl	8003340 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80032be:	2301      	movs	r3, #1
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	e001      	b.n	80032c8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80032c8:	697b      	ldr	r3, [r7, #20]
	}
 80032ca:	4618      	mov	r0, r3
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd90      	pop	{r4, r7, pc}

080032d2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80032d2:	b590      	push	{r4, r7, lr}
 80032d4:	b087      	sub	sp, #28
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10b      	bne.n	80032fe <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80032e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	60fb      	str	r3, [r7, #12]
}
 80032f8:	bf00      	nop
 80032fa:	bf00      	nop
 80032fc:	e7fd      	b.n	80032fa <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	689c      	ldr	r4, [r3, #8]
 8003302:	f001 fbdd 	bl	8004ac0 <xTaskGetCurrentTaskHandle>
 8003306:	4603      	mov	r3, r0
 8003308:	429c      	cmp	r4, r3
 800330a:	d107      	bne.n	800331c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8003316:	2301      	movs	r3, #1
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	e00c      	b.n	8003336 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800331c:	6839      	ldr	r1, [r7, #0]
 800331e:	6938      	ldr	r0, [r7, #16]
 8003320:	f000 fa90 	bl	8003844 <xQueueSemaphoreTake>
 8003324:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d004      	beq.n	8003336 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8003336:	697b      	ldr	r3, [r7, #20]
	}
 8003338:	4618      	mov	r0, r3
 800333a:	371c      	adds	r7, #28
 800333c:	46bd      	mov	sp, r7
 800333e:	bd90      	pop	{r4, r7, pc}

08003340 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08e      	sub	sp, #56	@ 0x38
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
 800334c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800334e:	2300      	movs	r3, #0
 8003350:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10b      	bne.n	8003374 <xQueueGenericSend+0x34>
	__asm volatile
 800335c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003360:	f383 8811 	msr	BASEPRI, r3
 8003364:	f3bf 8f6f 	isb	sy
 8003368:	f3bf 8f4f 	dsb	sy
 800336c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800336e:	bf00      	nop
 8003370:	bf00      	nop
 8003372:	e7fd      	b.n	8003370 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d103      	bne.n	8003382 <xQueueGenericSend+0x42>
 800337a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <xQueueGenericSend+0x46>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <xQueueGenericSend+0x48>
 8003386:	2300      	movs	r3, #0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10b      	bne.n	80033a4 <xQueueGenericSend+0x64>
	__asm volatile
 800338c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003390:	f383 8811 	msr	BASEPRI, r3
 8003394:	f3bf 8f6f 	isb	sy
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800339e:	bf00      	nop
 80033a0:	bf00      	nop
 80033a2:	e7fd      	b.n	80033a0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d103      	bne.n	80033b2 <xQueueGenericSend+0x72>
 80033aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <xQueueGenericSend+0x76>
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <xQueueGenericSend+0x78>
 80033b6:	2300      	movs	r3, #0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10b      	bne.n	80033d4 <xQueueGenericSend+0x94>
	__asm volatile
 80033bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c0:	f383 8811 	msr	BASEPRI, r3
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	623b      	str	r3, [r7, #32]
}
 80033ce:	bf00      	nop
 80033d0:	bf00      	nop
 80033d2:	e7fd      	b.n	80033d0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033d4:	f001 fb82 	bl	8004adc <xTaskGetSchedulerState>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d102      	bne.n	80033e4 <xQueueGenericSend+0xa4>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <xQueueGenericSend+0xa8>
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <xQueueGenericSend+0xaa>
 80033e8:	2300      	movs	r3, #0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10b      	bne.n	8003406 <xQueueGenericSend+0xc6>
	__asm volatile
 80033ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f2:	f383 8811 	msr	BASEPRI, r3
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	f3bf 8f4f 	dsb	sy
 80033fe:	61fb      	str	r3, [r7, #28]
}
 8003400:	bf00      	nop
 8003402:	bf00      	nop
 8003404:	e7fd      	b.n	8003402 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003406:	f002 f991 	bl	800572c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800340a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800340c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800340e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003412:	429a      	cmp	r2, r3
 8003414:	d302      	bcc.n	800341c <xQueueGenericSend+0xdc>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d129      	bne.n	8003470 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003422:	f000 fbb8 	bl	8003b96 <prvCopyDataToQueue>
 8003426:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	2b00      	cmp	r3, #0
 800342e:	d010      	beq.n	8003452 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003432:	3324      	adds	r3, #36	@ 0x24
 8003434:	4618      	mov	r0, r3
 8003436:	f001 f983 	bl	8004740 <xTaskRemoveFromEventList>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d013      	beq.n	8003468 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003440:	4b3f      	ldr	r3, [pc, #252]	@ (8003540 <xQueueGenericSend+0x200>)
 8003442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	f3bf 8f6f 	isb	sy
 8003450:	e00a      	b.n	8003468 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003454:	2b00      	cmp	r3, #0
 8003456:	d007      	beq.n	8003468 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003458:	4b39      	ldr	r3, [pc, #228]	@ (8003540 <xQueueGenericSend+0x200>)
 800345a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	f3bf 8f4f 	dsb	sy
 8003464:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003468:	f002 f990 	bl	800578c <vPortExitCritical>
				return pdPASS;
 800346c:	2301      	movs	r3, #1
 800346e:	e063      	b.n	8003538 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d103      	bne.n	800347e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003476:	f002 f989 	bl	800578c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800347a:	2300      	movs	r3, #0
 800347c:	e05c      	b.n	8003538 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800347e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003480:	2b00      	cmp	r3, #0
 8003482:	d106      	bne.n	8003492 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003484:	f107 0314 	add.w	r3, r7, #20
 8003488:	4618      	mov	r0, r3
 800348a:	f001 f9bd 	bl	8004808 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800348e:	2301      	movs	r3, #1
 8003490:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003492:	f002 f97b 	bl	800578c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003496:	f000 ff2f 	bl	80042f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800349a:	f002 f947 	bl	800572c <vPortEnterCritical>
 800349e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034a4:	b25b      	sxtb	r3, r3
 80034a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034aa:	d103      	bne.n	80034b4 <xQueueGenericSend+0x174>
 80034ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034ba:	b25b      	sxtb	r3, r3
 80034bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c0:	d103      	bne.n	80034ca <xQueueGenericSend+0x18a>
 80034c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034ca:	f002 f95f 	bl	800578c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034ce:	1d3a      	adds	r2, r7, #4
 80034d0:	f107 0314 	add.w	r3, r7, #20
 80034d4:	4611      	mov	r1, r2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f001 f9ac 	bl	8004834 <xTaskCheckForTimeOut>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d124      	bne.n	800352c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034e4:	f000 fc4f 	bl	8003d86 <prvIsQueueFull>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d018      	beq.n	8003520 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f0:	3310      	adds	r3, #16
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4611      	mov	r1, r2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f001 f8d0 	bl	800469c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80034fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034fe:	f000 fbda 	bl	8003cb6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003502:	f000 ff07 	bl	8004314 <xTaskResumeAll>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	f47f af7c 	bne.w	8003406 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800350e:	4b0c      	ldr	r3, [pc, #48]	@ (8003540 <xQueueGenericSend+0x200>)
 8003510:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	e772      	b.n	8003406 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003520:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003522:	f000 fbc8 	bl	8003cb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003526:	f000 fef5 	bl	8004314 <xTaskResumeAll>
 800352a:	e76c      	b.n	8003406 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800352c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800352e:	f000 fbc2 	bl	8003cb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003532:	f000 feef 	bl	8004314 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003536:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003538:	4618      	mov	r0, r3
 800353a:	3738      	adds	r7, #56	@ 0x38
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	e000ed04 	.word	0xe000ed04

08003544 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b090      	sub	sp, #64	@ 0x40
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
 8003550:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10b      	bne.n	8003574 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800355c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800356e:	bf00      	nop
 8003570:	bf00      	nop
 8003572:	e7fd      	b.n	8003570 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d103      	bne.n	8003582 <xQueueGenericSendFromISR+0x3e>
 800357a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <xQueueGenericSendFromISR+0x42>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <xQueueGenericSendFromISR+0x44>
 8003586:	2300      	movs	r3, #0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10b      	bne.n	80035a4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800358c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800359e:	bf00      	nop
 80035a0:	bf00      	nop
 80035a2:	e7fd      	b.n	80035a0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d103      	bne.n	80035b2 <xQueueGenericSendFromISR+0x6e>
 80035aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <xQueueGenericSendFromISR+0x72>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <xQueueGenericSendFromISR+0x74>
 80035b6:	2300      	movs	r3, #0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10b      	bne.n	80035d4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80035bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035c0:	f383 8811 	msr	BASEPRI, r3
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	623b      	str	r3, [r7, #32]
}
 80035ce:	bf00      	nop
 80035d0:	bf00      	nop
 80035d2:	e7fd      	b.n	80035d0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035d4:	f002 f96c 	bl	80058b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80035d8:	f3ef 8211 	mrs	r2, BASEPRI
 80035dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	61fa      	str	r2, [r7, #28]
 80035ee:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80035f0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035f2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d302      	bcc.n	8003606 <xQueueGenericSendFromISR+0xc2>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d12f      	bne.n	8003666 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003608:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800360c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003614:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	68b9      	ldr	r1, [r7, #8]
 800361a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800361c:	f000 fabb 	bl	8003b96 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003620:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003628:	d112      	bne.n	8003650 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800362a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800362c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362e:	2b00      	cmp	r3, #0
 8003630:	d016      	beq.n	8003660 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003634:	3324      	adds	r3, #36	@ 0x24
 8003636:	4618      	mov	r0, r3
 8003638:	f001 f882 	bl	8004740 <xTaskRemoveFromEventList>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00e      	beq.n	8003660 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00b      	beq.n	8003660 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	e007      	b.n	8003660 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003650:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003654:	3301      	adds	r3, #1
 8003656:	b2db      	uxtb	r3, r3
 8003658:	b25a      	sxtb	r2, r3
 800365a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003660:	2301      	movs	r3, #1
 8003662:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003664:	e001      	b.n	800366a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003666:	2300      	movs	r3, #0
 8003668:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800366a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800366c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003674:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003678:	4618      	mov	r0, r3
 800367a:	3740      	adds	r7, #64	@ 0x40
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08c      	sub	sp, #48	@ 0x30
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800368c:	2300      	movs	r3, #0
 800368e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10b      	bne.n	80036b2 <xQueueReceive+0x32>
	__asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	623b      	str	r3, [r7, #32]
}
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	e7fd      	b.n	80036ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d103      	bne.n	80036c0 <xQueueReceive+0x40>
 80036b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <xQueueReceive+0x44>
 80036c0:	2301      	movs	r3, #1
 80036c2:	e000      	b.n	80036c6 <xQueueReceive+0x46>
 80036c4:	2300      	movs	r3, #0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10b      	bne.n	80036e2 <xQueueReceive+0x62>
	__asm volatile
 80036ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	61fb      	str	r3, [r7, #28]
}
 80036dc:	bf00      	nop
 80036de:	bf00      	nop
 80036e0:	e7fd      	b.n	80036de <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036e2:	f001 f9fb 	bl	8004adc <xTaskGetSchedulerState>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d102      	bne.n	80036f2 <xQueueReceive+0x72>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <xQueueReceive+0x76>
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <xQueueReceive+0x78>
 80036f6:	2300      	movs	r3, #0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10b      	bne.n	8003714 <xQueueReceive+0x94>
	__asm volatile
 80036fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003700:	f383 8811 	msr	BASEPRI, r3
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	61bb      	str	r3, [r7, #24]
}
 800370e:	bf00      	nop
 8003710:	bf00      	nop
 8003712:	e7fd      	b.n	8003710 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003714:	f002 f80a 	bl	800572c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800371a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800371c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01f      	beq.n	8003764 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003728:	f000 fa9f 	bl	8003c6a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800372c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372e:	1e5a      	subs	r2, r3, #1
 8003730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003732:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00f      	beq.n	800375c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800373c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800373e:	3310      	adds	r3, #16
 8003740:	4618      	mov	r0, r3
 8003742:	f000 fffd 	bl	8004740 <xTaskRemoveFromEventList>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d007      	beq.n	800375c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800374c:	4b3c      	ldr	r3, [pc, #240]	@ (8003840 <xQueueReceive+0x1c0>)
 800374e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800375c:	f002 f816 	bl	800578c <vPortExitCritical>
				return pdPASS;
 8003760:	2301      	movs	r3, #1
 8003762:	e069      	b.n	8003838 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d103      	bne.n	8003772 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800376a:	f002 f80f 	bl	800578c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800376e:	2300      	movs	r3, #0
 8003770:	e062      	b.n	8003838 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003774:	2b00      	cmp	r3, #0
 8003776:	d106      	bne.n	8003786 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003778:	f107 0310 	add.w	r3, r7, #16
 800377c:	4618      	mov	r0, r3
 800377e:	f001 f843 	bl	8004808 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003782:	2301      	movs	r3, #1
 8003784:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003786:	f002 f801 	bl	800578c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800378a:	f000 fdb5 	bl	80042f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800378e:	f001 ffcd 	bl	800572c <vPortEnterCritical>
 8003792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003794:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003798:	b25b      	sxtb	r3, r3
 800379a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379e:	d103      	bne.n	80037a8 <xQueueReceive+0x128>
 80037a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037ae:	b25b      	sxtb	r3, r3
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b4:	d103      	bne.n	80037be <xQueueReceive+0x13e>
 80037b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037be:	f001 ffe5 	bl	800578c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037c2:	1d3a      	adds	r2, r7, #4
 80037c4:	f107 0310 	add.w	r3, r7, #16
 80037c8:	4611      	mov	r1, r2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f001 f832 	bl	8004834 <xTaskCheckForTimeOut>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d123      	bne.n	800381e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037d8:	f000 fabf 	bl	8003d5a <prvIsQueueEmpty>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d017      	beq.n	8003812 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e4:	3324      	adds	r3, #36	@ 0x24
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	4611      	mov	r1, r2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 ff56 	bl	800469c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037f2:	f000 fa60 	bl	8003cb6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037f6:	f000 fd8d 	bl	8004314 <xTaskResumeAll>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d189      	bne.n	8003714 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003800:	4b0f      	ldr	r3, [pc, #60]	@ (8003840 <xQueueReceive+0x1c0>)
 8003802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	e780      	b.n	8003714 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003812:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003814:	f000 fa4f 	bl	8003cb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003818:	f000 fd7c 	bl	8004314 <xTaskResumeAll>
 800381c:	e77a      	b.n	8003714 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800381e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003820:	f000 fa49 	bl	8003cb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003824:	f000 fd76 	bl	8004314 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003828:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800382a:	f000 fa96 	bl	8003d5a <prvIsQueueEmpty>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	f43f af6f 	beq.w	8003714 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003836:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003838:	4618      	mov	r0, r3
 800383a:	3730      	adds	r7, #48	@ 0x30
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	e000ed04 	.word	0xe000ed04

08003844 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08e      	sub	sp, #56	@ 0x38
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800384e:	2300      	movs	r3, #0
 8003850:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003856:	2300      	movs	r3, #0
 8003858:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800385a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10b      	bne.n	8003878 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003864:	f383 8811 	msr	BASEPRI, r3
 8003868:	f3bf 8f6f 	isb	sy
 800386c:	f3bf 8f4f 	dsb	sy
 8003870:	623b      	str	r3, [r7, #32]
}
 8003872:	bf00      	nop
 8003874:	bf00      	nop
 8003876:	e7fd      	b.n	8003874 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800387a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00b      	beq.n	8003898 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003884:	f383 8811 	msr	BASEPRI, r3
 8003888:	f3bf 8f6f 	isb	sy
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	61fb      	str	r3, [r7, #28]
}
 8003892:	bf00      	nop
 8003894:	bf00      	nop
 8003896:	e7fd      	b.n	8003894 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003898:	f001 f920 	bl	8004adc <xTaskGetSchedulerState>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d102      	bne.n	80038a8 <xQueueSemaphoreTake+0x64>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <xQueueSemaphoreTake+0x68>
 80038a8:	2301      	movs	r3, #1
 80038aa:	e000      	b.n	80038ae <xQueueSemaphoreTake+0x6a>
 80038ac:	2300      	movs	r3, #0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10b      	bne.n	80038ca <xQueueSemaphoreTake+0x86>
	__asm volatile
 80038b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	61bb      	str	r3, [r7, #24]
}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop
 80038c8:	e7fd      	b.n	80038c6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038ca:	f001 ff2f 	bl	800572c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80038ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80038d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d024      	beq.n	8003924 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80038da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038dc:	1e5a      	subs	r2, r3, #1
 80038de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d104      	bne.n	80038f4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80038ea:	f001 fa71 	bl	8004dd0 <pvTaskIncrementMutexHeldCount>
 80038ee:	4602      	mov	r2, r0
 80038f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00f      	beq.n	800391c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038fe:	3310      	adds	r3, #16
 8003900:	4618      	mov	r0, r3
 8003902:	f000 ff1d 	bl	8004740 <xTaskRemoveFromEventList>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d007      	beq.n	800391c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800390c:	4b54      	ldr	r3, [pc, #336]	@ (8003a60 <xQueueSemaphoreTake+0x21c>)
 800390e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800391c:	f001 ff36 	bl	800578c <vPortExitCritical>
				return pdPASS;
 8003920:	2301      	movs	r3, #1
 8003922:	e098      	b.n	8003a56 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d112      	bne.n	8003950 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800392a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00b      	beq.n	8003948 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	617b      	str	r3, [r7, #20]
}
 8003942:	bf00      	nop
 8003944:	bf00      	nop
 8003946:	e7fd      	b.n	8003944 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003948:	f001 ff20 	bl	800578c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800394c:	2300      	movs	r3, #0
 800394e:	e082      	b.n	8003a56 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003956:	f107 030c 	add.w	r3, r7, #12
 800395a:	4618      	mov	r0, r3
 800395c:	f000 ff54 	bl	8004808 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003960:	2301      	movs	r3, #1
 8003962:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003964:	f001 ff12 	bl	800578c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003968:	f000 fcc6 	bl	80042f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800396c:	f001 fede 	bl	800572c <vPortEnterCritical>
 8003970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003972:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003976:	b25b      	sxtb	r3, r3
 8003978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397c:	d103      	bne.n	8003986 <xQueueSemaphoreTake+0x142>
 800397e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003988:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800398c:	b25b      	sxtb	r3, r3
 800398e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003992:	d103      	bne.n	800399c <xQueueSemaphoreTake+0x158>
 8003994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800399c:	f001 fef6 	bl	800578c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039a0:	463a      	mov	r2, r7
 80039a2:	f107 030c 	add.w	r3, r7, #12
 80039a6:	4611      	mov	r1, r2
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 ff43 	bl	8004834 <xTaskCheckForTimeOut>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d132      	bne.n	8003a1a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80039b6:	f000 f9d0 	bl	8003d5a <prvIsQueueEmpty>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d026      	beq.n	8003a0e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d109      	bne.n	80039dc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80039c8:	f001 feb0 	bl	800572c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80039cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 f8a1 	bl	8004b18 <xTaskPriorityInherit>
 80039d6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80039d8:	f001 fed8 	bl	800578c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80039dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039de:	3324      	adds	r3, #36	@ 0x24
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	4611      	mov	r1, r2
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fe59 	bl	800469c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80039ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80039ec:	f000 f963 	bl	8003cb6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80039f0:	f000 fc90 	bl	8004314 <xTaskResumeAll>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f47f af67 	bne.w	80038ca <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80039fc:	4b18      	ldr	r3, [pc, #96]	@ (8003a60 <xQueueSemaphoreTake+0x21c>)
 80039fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	e75d      	b.n	80038ca <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003a0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a10:	f000 f951 	bl	8003cb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a14:	f000 fc7e 	bl	8004314 <xTaskResumeAll>
 8003a18:	e757      	b.n	80038ca <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003a1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a1c:	f000 f94b 	bl	8003cb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a20:	f000 fc78 	bl	8004314 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a26:	f000 f998 	bl	8003d5a <prvIsQueueEmpty>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f43f af4c 	beq.w	80038ca <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00d      	beq.n	8003a54 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003a38:	f001 fe78 	bl	800572c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003a3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a3e:	f000 f893 	bl	8003b68 <prvGetDisinheritPriorityAfterTimeout>
 8003a42:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f001 f93c 	bl	8004cc8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003a50:	f001 fe9c 	bl	800578c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3738      	adds	r7, #56	@ 0x38
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	e000ed04 	.word	0xe000ed04

08003a64 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08e      	sub	sp, #56	@ 0x38
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10b      	bne.n	8003a92 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a7e:	f383 8811 	msr	BASEPRI, r3
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	623b      	str	r3, [r7, #32]
}
 8003a8c:	bf00      	nop
 8003a8e:	bf00      	nop
 8003a90:	e7fd      	b.n	8003a8e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d103      	bne.n	8003aa0 <xQueueReceiveFromISR+0x3c>
 8003a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <xQueueReceiveFromISR+0x40>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <xQueueReceiveFromISR+0x42>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10b      	bne.n	8003ac2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	61fb      	str	r3, [r7, #28]
}
 8003abc:	bf00      	nop
 8003abe:	bf00      	nop
 8003ac0:	e7fd      	b.n	8003abe <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ac2:	f001 fef5 	bl	80058b0 <vPortValidateInterruptPriority>
	__asm volatile
 8003ac6:	f3ef 8211 	mrs	r2, BASEPRI
 8003aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ace:	f383 8811 	msr	BASEPRI, r3
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	61ba      	str	r2, [r7, #24]
 8003adc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003ade:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d02f      	beq.n	8003b4e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003af4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003afc:	f000 f8b5 	bl	8003c6a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b02:	1e5a      	subs	r2, r3, #1
 8003b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b06:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003b08:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b10:	d112      	bne.n	8003b38 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d016      	beq.n	8003b48 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1c:	3310      	adds	r3, #16
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fe0e 	bl	8004740 <xTaskRemoveFromEventList>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00e      	beq.n	8003b48 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00b      	beq.n	8003b48 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	e007      	b.n	8003b48 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003b38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	b25a      	sxtb	r2, r3
 8003b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b4c:	e001      	b.n	8003b52 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b54:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f383 8811 	msr	BASEPRI, r3
}
 8003b5c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3738      	adds	r7, #56	@ 0x38
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d006      	beq.n	8003b86 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	e001      	b.n	8003b8a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
	}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr

08003b96 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b086      	sub	sp, #24
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003baa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10d      	bne.n	8003bd0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d14d      	bne.n	8003c58 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f001 f811 	bl	8004be8 <xTaskPriorityDisinherit>
 8003bc6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	609a      	str	r2, [r3, #8]
 8003bce:	e043      	b.n	8003c58 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d119      	bne.n	8003c0a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6858      	ldr	r0, [r3, #4]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bde:	461a      	mov	r2, r3
 8003be0:	68b9      	ldr	r1, [r7, #8]
 8003be2:	f002 fb16 	bl	8006212 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bee:	441a      	add	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d32b      	bcc.n	8003c58 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	605a      	str	r2, [r3, #4]
 8003c08:	e026      	b.n	8003c58 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	68d8      	ldr	r0, [r3, #12]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c12:	461a      	mov	r2, r3
 8003c14:	68b9      	ldr	r1, [r7, #8]
 8003c16:	f002 fafc 	bl	8006212 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c22:	425b      	negs	r3, r3
 8003c24:	441a      	add	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d207      	bcs.n	8003c46 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3e:	425b      	negs	r3, r3
 8003c40:	441a      	add	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d105      	bne.n	8003c58 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	3b01      	subs	r3, #1
 8003c56:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003c60:	697b      	ldr	r3, [r7, #20]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b082      	sub	sp, #8
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d018      	beq.n	8003cae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c84:	441a      	add	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d303      	bcc.n	8003c9e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68d9      	ldr	r1, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	6838      	ldr	r0, [r7, #0]
 8003caa:	f002 fab2 	bl	8006212 <memcpy>
	}
}
 8003cae:	bf00      	nop
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b084      	sub	sp, #16
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003cbe:	f001 fd35 	bl	800572c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cc8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cca:	e011      	b.n	8003cf0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d012      	beq.n	8003cfa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3324      	adds	r3, #36	@ 0x24
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 fd31 	bl	8004740 <xTaskRemoveFromEventList>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ce4:	f000 fe0a 	bl	80048fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	dce9      	bgt.n	8003ccc <prvUnlockQueue+0x16>
 8003cf8:	e000      	b.n	8003cfc <prvUnlockQueue+0x46>
					break;
 8003cfa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	22ff      	movs	r2, #255	@ 0xff
 8003d00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003d04:	f001 fd42 	bl	800578c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d08:	f001 fd10 	bl	800572c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d12:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d14:	e011      	b.n	8003d3a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d012      	beq.n	8003d44 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3310      	adds	r3, #16
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fd0c 	bl	8004740 <xTaskRemoveFromEventList>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d2e:	f000 fde5 	bl	80048fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d32:	7bbb      	ldrb	r3, [r7, #14]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	dce9      	bgt.n	8003d16 <prvUnlockQueue+0x60>
 8003d42:	e000      	b.n	8003d46 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d44:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	22ff      	movs	r2, #255	@ 0xff
 8003d4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003d4e:	f001 fd1d 	bl	800578c <vPortExitCritical>
}
 8003d52:	bf00      	nop
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d62:	f001 fce3 	bl	800572c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d102      	bne.n	8003d74 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	e001      	b.n	8003d78 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d74:	2300      	movs	r3, #0
 8003d76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d78:	f001 fd08 	bl	800578c <vPortExitCritical>

	return xReturn;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b084      	sub	sp, #16
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d8e:	f001 fccd 	bl	800572c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d102      	bne.n	8003da4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	e001      	b.n	8003da8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003da4:	2300      	movs	r3, #0
 8003da6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003da8:	f001 fcf0 	bl	800578c <vPortExitCritical>

	return xReturn;
 8003dac:	68fb      	ldr	r3, [r7, #12]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	e014      	b.n	8003df2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003dc8:	4a0e      	ldr	r2, [pc, #56]	@ (8003e04 <vQueueAddToRegistry+0x4c>)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10b      	bne.n	8003dec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003dd4:	490b      	ldr	r1, [pc, #44]	@ (8003e04 <vQueueAddToRegistry+0x4c>)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003dde:	4a09      	ldr	r2, [pc, #36]	@ (8003e04 <vQueueAddToRegistry+0x4c>)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4413      	add	r3, r2
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003dea:	e006      	b.n	8003dfa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	3301      	adds	r3, #1
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2b07      	cmp	r3, #7
 8003df6:	d9e7      	bls.n	8003dc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr
 8003e04:	2000083c 	.word	0x2000083c

08003e08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003e18:	f001 fc88 	bl	800572c <vPortEnterCritical>
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e22:	b25b      	sxtb	r3, r3
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e28:	d103      	bne.n	8003e32 <vQueueWaitForMessageRestricted+0x2a>
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e38:	b25b      	sxtb	r3, r3
 8003e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3e:	d103      	bne.n	8003e48 <vQueueWaitForMessageRestricted+0x40>
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e48:	f001 fca0 	bl	800578c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d106      	bne.n	8003e62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	3324      	adds	r3, #36	@ 0x24
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fc43 	bl	80046e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e62:	6978      	ldr	r0, [r7, #20]
 8003e64:	f7ff ff27 	bl	8003cb6 <prvUnlockQueue>
	}
 8003e68:	bf00      	nop
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08e      	sub	sp, #56	@ 0x38
 8003e74:	af04      	add	r7, sp, #16
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10b      	bne.n	8003e9c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	623b      	str	r3, [r7, #32]
}
 8003e96:	bf00      	nop
 8003e98:	bf00      	nop
 8003e9a:	e7fd      	b.n	8003e98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10b      	bne.n	8003eba <xTaskCreateStatic+0x4a>
	__asm volatile
 8003ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea6:	f383 8811 	msr	BASEPRI, r3
 8003eaa:	f3bf 8f6f 	isb	sy
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	61fb      	str	r3, [r7, #28]
}
 8003eb4:	bf00      	nop
 8003eb6:	bf00      	nop
 8003eb8:	e7fd      	b.n	8003eb6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003eba:	235c      	movs	r3, #92	@ 0x5c
 8003ebc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	2b5c      	cmp	r3, #92	@ 0x5c
 8003ec2:	d00b      	beq.n	8003edc <xTaskCreateStatic+0x6c>
	__asm volatile
 8003ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	61bb      	str	r3, [r7, #24]
}
 8003ed6:	bf00      	nop
 8003ed8:	bf00      	nop
 8003eda:	e7fd      	b.n	8003ed8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003edc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d01e      	beq.n	8003f22 <xTaskCreateStatic+0xb2>
 8003ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01b      	beq.n	8003f22 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ef2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003efc:	2300      	movs	r3, #0
 8003efe:	9303      	str	r3, [sp, #12]
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	9302      	str	r3, [sp, #8]
 8003f04:	f107 0314 	add.w	r3, r7, #20
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	68b9      	ldr	r1, [r7, #8]
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 f850 	bl	8003fba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f1c:	f000 f8de 	bl	80040dc <prvAddNewTaskToReadyList>
 8003f20:	e001      	b.n	8003f26 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f26:	697b      	ldr	r3, [r7, #20]
	}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3728      	adds	r7, #40	@ 0x28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b08c      	sub	sp, #48	@ 0x30
 8003f34:	af04      	add	r7, sp, #16
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	603b      	str	r3, [r7, #0]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f40:	88fb      	ldrh	r3, [r7, #6]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4618      	mov	r0, r3
 8003f46:	f001 fcf3 	bl	8005930 <pvPortMalloc>
 8003f4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00e      	beq.n	8003f70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f52:	205c      	movs	r0, #92	@ 0x5c
 8003f54:	f001 fcec 	bl	8005930 <pvPortMalloc>
 8003f58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f66:	e005      	b.n	8003f74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f68:	6978      	ldr	r0, [r7, #20]
 8003f6a:	f001 fdaf 	bl	8005acc <vPortFree>
 8003f6e:	e001      	b.n	8003f74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d017      	beq.n	8003faa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f82:	88fa      	ldrh	r2, [r7, #6]
 8003f84:	2300      	movs	r3, #0
 8003f86:	9303      	str	r3, [sp, #12]
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	9302      	str	r3, [sp, #8]
 8003f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f8e:	9301      	str	r3, [sp, #4]
 8003f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	68b9      	ldr	r1, [r7, #8]
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 f80e 	bl	8003fba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f9e:	69f8      	ldr	r0, [r7, #28]
 8003fa0:	f000 f89c 	bl	80040dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	61bb      	str	r3, [r7, #24]
 8003fa8:	e002      	b.n	8003fb0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003faa:	f04f 33ff 	mov.w	r3, #4294967295
 8003fae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003fb0:	69bb      	ldr	r3, [r7, #24]
	}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3720      	adds	r7, #32
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b088      	sub	sp, #32
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	607a      	str	r2, [r7, #4]
 8003fc6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fca:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	21a5      	movs	r1, #165	@ 0xa5
 8003fd4:	f002 f8a2 	bl	800611c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	f023 0307 	bic.w	r3, r3, #7
 8003ff0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00b      	beq.n	8004014 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004000:	f383 8811 	msr	BASEPRI, r3
 8004004:	f3bf 8f6f 	isb	sy
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	617b      	str	r3, [r7, #20]
}
 800400e:	bf00      	nop
 8004010:	bf00      	nop
 8004012:	e7fd      	b.n	8004010 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d01f      	beq.n	800405a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800401a:	2300      	movs	r3, #0
 800401c:	61fb      	str	r3, [r7, #28]
 800401e:	e012      	b.n	8004046 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	4413      	add	r3, r2
 8004026:	7819      	ldrb	r1, [r3, #0]
 8004028:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	4413      	add	r3, r2
 800402e:	3334      	adds	r3, #52	@ 0x34
 8004030:	460a      	mov	r2, r1
 8004032:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	4413      	add	r3, r2
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d006      	beq.n	800404e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	3301      	adds	r3, #1
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	2b0f      	cmp	r3, #15
 800404a:	d9e9      	bls.n	8004020 <prvInitialiseNewTask+0x66>
 800404c:	e000      	b.n	8004050 <prvInitialiseNewTask+0x96>
			{
				break;
 800404e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004058:	e003      	b.n	8004062 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800405a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004064:	2b37      	cmp	r3, #55	@ 0x37
 8004066:	d901      	bls.n	800406c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004068:	2337      	movs	r3, #55	@ 0x37
 800406a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800406c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004070:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004074:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004076:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407a:	2200      	movs	r2, #0
 800407c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800407e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004080:	3304      	adds	r3, #4
 8004082:	4618      	mov	r0, r3
 8004084:	f7fe fecd 	bl	8002e22 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408a:	3318      	adds	r3, #24
 800408c:	4618      	mov	r0, r3
 800408e:	f7fe fec8 	bl	8002e22 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004096:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800409e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040a6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040aa:	2200      	movs	r2, #0
 80040ac:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	68f9      	ldr	r1, [r7, #12]
 80040ba:	69b8      	ldr	r0, [r7, #24]
 80040bc:	f001 fa48 	bl	8005550 <pxPortInitialiseStack>
 80040c0:	4602      	mov	r2, r0
 80040c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80040c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040d2:	bf00      	nop
 80040d4:	3720      	adds	r7, #32
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80040e4:	f001 fb22 	bl	800572c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80040e8:	4b2d      	ldr	r3, [pc, #180]	@ (80041a0 <prvAddNewTaskToReadyList+0xc4>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3301      	adds	r3, #1
 80040ee:	4a2c      	ldr	r2, [pc, #176]	@ (80041a0 <prvAddNewTaskToReadyList+0xc4>)
 80040f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040f2:	4b2c      	ldr	r3, [pc, #176]	@ (80041a4 <prvAddNewTaskToReadyList+0xc8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040fa:	4a2a      	ldr	r2, [pc, #168]	@ (80041a4 <prvAddNewTaskToReadyList+0xc8>)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004100:	4b27      	ldr	r3, [pc, #156]	@ (80041a0 <prvAddNewTaskToReadyList+0xc4>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d110      	bne.n	800412a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004108:	f000 fc1c 	bl	8004944 <prvInitialiseTaskLists>
 800410c:	e00d      	b.n	800412a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800410e:	4b26      	ldr	r3, [pc, #152]	@ (80041a8 <prvAddNewTaskToReadyList+0xcc>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004116:	4b23      	ldr	r3, [pc, #140]	@ (80041a4 <prvAddNewTaskToReadyList+0xc8>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004120:	429a      	cmp	r2, r3
 8004122:	d802      	bhi.n	800412a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004124:	4a1f      	ldr	r2, [pc, #124]	@ (80041a4 <prvAddNewTaskToReadyList+0xc8>)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800412a:	4b20      	ldr	r3, [pc, #128]	@ (80041ac <prvAddNewTaskToReadyList+0xd0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3301      	adds	r3, #1
 8004130:	4a1e      	ldr	r2, [pc, #120]	@ (80041ac <prvAddNewTaskToReadyList+0xd0>)
 8004132:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004134:	4b1d      	ldr	r3, [pc, #116]	@ (80041ac <prvAddNewTaskToReadyList+0xd0>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004140:	4b1b      	ldr	r3, [pc, #108]	@ (80041b0 <prvAddNewTaskToReadyList+0xd4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d903      	bls.n	8004150 <prvAddNewTaskToReadyList+0x74>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414c:	4a18      	ldr	r2, [pc, #96]	@ (80041b0 <prvAddNewTaskToReadyList+0xd4>)
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4a15      	ldr	r2, [pc, #84]	@ (80041b4 <prvAddNewTaskToReadyList+0xd8>)
 800415e:	441a      	add	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3304      	adds	r3, #4
 8004164:	4619      	mov	r1, r3
 8004166:	4610      	mov	r0, r2
 8004168:	f7fe fe67 	bl	8002e3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800416c:	f001 fb0e 	bl	800578c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004170:	4b0d      	ldr	r3, [pc, #52]	@ (80041a8 <prvAddNewTaskToReadyList+0xcc>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00e      	beq.n	8004196 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004178:	4b0a      	ldr	r3, [pc, #40]	@ (80041a4 <prvAddNewTaskToReadyList+0xc8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004182:	429a      	cmp	r2, r3
 8004184:	d207      	bcs.n	8004196 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004186:	4b0c      	ldr	r3, [pc, #48]	@ (80041b8 <prvAddNewTaskToReadyList+0xdc>)
 8004188:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004196:	bf00      	nop
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000d50 	.word	0x20000d50
 80041a4:	2000087c 	.word	0x2000087c
 80041a8:	20000d5c 	.word	0x20000d5c
 80041ac:	20000d6c 	.word	0x20000d6c
 80041b0:	20000d58 	.word	0x20000d58
 80041b4:	20000880 	.word	0x20000880
 80041b8:	e000ed04 	.word	0xe000ed04

080041bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80041c4:	2300      	movs	r3, #0
 80041c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d018      	beq.n	8004200 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80041ce:	4b14      	ldr	r3, [pc, #80]	@ (8004220 <vTaskDelay+0x64>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00b      	beq.n	80041ee <vTaskDelay+0x32>
	__asm volatile
 80041d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041da:	f383 8811 	msr	BASEPRI, r3
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	60bb      	str	r3, [r7, #8]
}
 80041e8:	bf00      	nop
 80041ea:	bf00      	nop
 80041ec:	e7fd      	b.n	80041ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80041ee:	f000 f883 	bl	80042f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80041f2:	2100      	movs	r1, #0
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 fdff 	bl	8004df8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80041fa:	f000 f88b 	bl	8004314 <xTaskResumeAll>
 80041fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d107      	bne.n	8004216 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004206:	4b07      	ldr	r3, [pc, #28]	@ (8004224 <vTaskDelay+0x68>)
 8004208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004216:	bf00      	nop
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20000d78 	.word	0x20000d78
 8004224:	e000ed04 	.word	0xe000ed04

08004228 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08a      	sub	sp, #40	@ 0x28
 800422c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800422e:	2300      	movs	r3, #0
 8004230:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004232:	2300      	movs	r3, #0
 8004234:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004236:	463a      	mov	r2, r7
 8004238:	1d39      	adds	r1, r7, #4
 800423a:	f107 0308 	add.w	r3, r7, #8
 800423e:	4618      	mov	r0, r3
 8004240:	f7fe fd9e 	bl	8002d80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004244:	6839      	ldr	r1, [r7, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	9202      	str	r2, [sp, #8]
 800424c:	9301      	str	r3, [sp, #4]
 800424e:	2300      	movs	r3, #0
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	2300      	movs	r3, #0
 8004254:	460a      	mov	r2, r1
 8004256:	4922      	ldr	r1, [pc, #136]	@ (80042e0 <vTaskStartScheduler+0xb8>)
 8004258:	4822      	ldr	r0, [pc, #136]	@ (80042e4 <vTaskStartScheduler+0xbc>)
 800425a:	f7ff fe09 	bl	8003e70 <xTaskCreateStatic>
 800425e:	4603      	mov	r3, r0
 8004260:	4a21      	ldr	r2, [pc, #132]	@ (80042e8 <vTaskStartScheduler+0xc0>)
 8004262:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004264:	4b20      	ldr	r3, [pc, #128]	@ (80042e8 <vTaskStartScheduler+0xc0>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800426c:	2301      	movs	r3, #1
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	e001      	b.n	8004276 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d102      	bne.n	8004282 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800427c:	f000 fe10 	bl	8004ea0 <xTimerCreateTimerTask>
 8004280:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d116      	bne.n	80042b6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	613b      	str	r3, [r7, #16]
}
 800429a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800429c:	4b13      	ldr	r3, [pc, #76]	@ (80042ec <vTaskStartScheduler+0xc4>)
 800429e:	f04f 32ff 	mov.w	r2, #4294967295
 80042a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042a4:	4b12      	ldr	r3, [pc, #72]	@ (80042f0 <vTaskStartScheduler+0xc8>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80042aa:	4b12      	ldr	r3, [pc, #72]	@ (80042f4 <vTaskStartScheduler+0xcc>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042b0:	f001 f9ca 	bl	8005648 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042b4:	e00f      	b.n	80042d6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042bc:	d10b      	bne.n	80042d6 <vTaskStartScheduler+0xae>
	__asm volatile
 80042be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	60fb      	str	r3, [r7, #12]
}
 80042d0:	bf00      	nop
 80042d2:	bf00      	nop
 80042d4:	e7fd      	b.n	80042d2 <vTaskStartScheduler+0xaa>
}
 80042d6:	bf00      	nop
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	08006f50 	.word	0x08006f50
 80042e4:	08004915 	.word	0x08004915
 80042e8:	20000d74 	.word	0x20000d74
 80042ec:	20000d70 	.word	0x20000d70
 80042f0:	20000d5c 	.word	0x20000d5c
 80042f4:	20000d54 	.word	0x20000d54

080042f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80042fc:	4b04      	ldr	r3, [pc, #16]	@ (8004310 <vTaskSuspendAll+0x18>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3301      	adds	r3, #1
 8004302:	4a03      	ldr	r2, [pc, #12]	@ (8004310 <vTaskSuspendAll+0x18>)
 8004304:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004306:	bf00      	nop
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	20000d78 	.word	0x20000d78

08004314 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800431e:	2300      	movs	r3, #0
 8004320:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004322:	4b42      	ldr	r3, [pc, #264]	@ (800442c <xTaskResumeAll+0x118>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10b      	bne.n	8004342 <xTaskResumeAll+0x2e>
	__asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	603b      	str	r3, [r7, #0]
}
 800433c:	bf00      	nop
 800433e:	bf00      	nop
 8004340:	e7fd      	b.n	800433e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004342:	f001 f9f3 	bl	800572c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004346:	4b39      	ldr	r3, [pc, #228]	@ (800442c <xTaskResumeAll+0x118>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3b01      	subs	r3, #1
 800434c:	4a37      	ldr	r2, [pc, #220]	@ (800442c <xTaskResumeAll+0x118>)
 800434e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004350:	4b36      	ldr	r3, [pc, #216]	@ (800442c <xTaskResumeAll+0x118>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d162      	bne.n	800441e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004358:	4b35      	ldr	r3, [pc, #212]	@ (8004430 <xTaskResumeAll+0x11c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d05e      	beq.n	800441e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004360:	e02f      	b.n	80043c2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004362:	4b34      	ldr	r3, [pc, #208]	@ (8004434 <xTaskResumeAll+0x120>)
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	3318      	adds	r3, #24
 800436e:	4618      	mov	r0, r3
 8004370:	f7fe fdbe 	bl	8002ef0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3304      	adds	r3, #4
 8004378:	4618      	mov	r0, r3
 800437a:	f7fe fdb9 	bl	8002ef0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004382:	4b2d      	ldr	r3, [pc, #180]	@ (8004438 <xTaskResumeAll+0x124>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d903      	bls.n	8004392 <xTaskResumeAll+0x7e>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438e:	4a2a      	ldr	r2, [pc, #168]	@ (8004438 <xTaskResumeAll+0x124>)
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4a27      	ldr	r2, [pc, #156]	@ (800443c <xTaskResumeAll+0x128>)
 80043a0:	441a      	add	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3304      	adds	r3, #4
 80043a6:	4619      	mov	r1, r3
 80043a8:	4610      	mov	r0, r2
 80043aa:	f7fe fd46 	bl	8002e3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043b2:	4b23      	ldr	r3, [pc, #140]	@ (8004440 <xTaskResumeAll+0x12c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d302      	bcc.n	80043c2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80043bc:	4b21      	ldr	r3, [pc, #132]	@ (8004444 <xTaskResumeAll+0x130>)
 80043be:	2201      	movs	r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043c2:	4b1c      	ldr	r3, [pc, #112]	@ (8004434 <xTaskResumeAll+0x120>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1cb      	bne.n	8004362 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043d0:	f000 fb56 	bl	8004a80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80043d4:	4b1c      	ldr	r3, [pc, #112]	@ (8004448 <xTaskResumeAll+0x134>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d010      	beq.n	8004402 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043e0:	f000 f844 	bl	800446c <xTaskIncrementTick>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80043ea:	4b16      	ldr	r3, [pc, #88]	@ (8004444 <xTaskResumeAll+0x130>)
 80043ec:	2201      	movs	r2, #1
 80043ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3b01      	subs	r3, #1
 80043f4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f1      	bne.n	80043e0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80043fc:	4b12      	ldr	r3, [pc, #72]	@ (8004448 <xTaskResumeAll+0x134>)
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004402:	4b10      	ldr	r3, [pc, #64]	@ (8004444 <xTaskResumeAll+0x130>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d009      	beq.n	800441e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800440a:	2301      	movs	r3, #1
 800440c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800440e:	4b0f      	ldr	r3, [pc, #60]	@ (800444c <xTaskResumeAll+0x138>)
 8004410:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800441e:	f001 f9b5 	bl	800578c <vPortExitCritical>

	return xAlreadyYielded;
 8004422:	68bb      	ldr	r3, [r7, #8]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	20000d78 	.word	0x20000d78
 8004430:	20000d50 	.word	0x20000d50
 8004434:	20000d10 	.word	0x20000d10
 8004438:	20000d58 	.word	0x20000d58
 800443c:	20000880 	.word	0x20000880
 8004440:	2000087c 	.word	0x2000087c
 8004444:	20000d64 	.word	0x20000d64
 8004448:	20000d60 	.word	0x20000d60
 800444c:	e000ed04 	.word	0xe000ed04

08004450 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004456:	4b04      	ldr	r3, [pc, #16]	@ (8004468 <xTaskGetTickCount+0x18>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800445c:	687b      	ldr	r3, [r7, #4]
}
 800445e:	4618      	mov	r0, r3
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr
 8004468:	20000d54 	.word	0x20000d54

0800446c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004476:	4b4f      	ldr	r3, [pc, #316]	@ (80045b4 <xTaskIncrementTick+0x148>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	f040 8090 	bne.w	80045a0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004480:	4b4d      	ldr	r3, [pc, #308]	@ (80045b8 <xTaskIncrementTick+0x14c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3301      	adds	r3, #1
 8004486:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004488:	4a4b      	ldr	r2, [pc, #300]	@ (80045b8 <xTaskIncrementTick+0x14c>)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d121      	bne.n	80044d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004494:	4b49      	ldr	r3, [pc, #292]	@ (80045bc <xTaskIncrementTick+0x150>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00b      	beq.n	80044b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	603b      	str	r3, [r7, #0]
}
 80044b0:	bf00      	nop
 80044b2:	bf00      	nop
 80044b4:	e7fd      	b.n	80044b2 <xTaskIncrementTick+0x46>
 80044b6:	4b41      	ldr	r3, [pc, #260]	@ (80045bc <xTaskIncrementTick+0x150>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	4b40      	ldr	r3, [pc, #256]	@ (80045c0 <xTaskIncrementTick+0x154>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a3e      	ldr	r2, [pc, #248]	@ (80045bc <xTaskIncrementTick+0x150>)
 80044c2:	6013      	str	r3, [r2, #0]
 80044c4:	4a3e      	ldr	r2, [pc, #248]	@ (80045c0 <xTaskIncrementTick+0x154>)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	4b3e      	ldr	r3, [pc, #248]	@ (80045c4 <xTaskIncrementTick+0x158>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3301      	adds	r3, #1
 80044d0:	4a3c      	ldr	r2, [pc, #240]	@ (80045c4 <xTaskIncrementTick+0x158>)
 80044d2:	6013      	str	r3, [r2, #0]
 80044d4:	f000 fad4 	bl	8004a80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044d8:	4b3b      	ldr	r3, [pc, #236]	@ (80045c8 <xTaskIncrementTick+0x15c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d349      	bcc.n	8004576 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044e2:	4b36      	ldr	r3, [pc, #216]	@ (80045bc <xTaskIncrementTick+0x150>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d104      	bne.n	80044f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ec:	4b36      	ldr	r3, [pc, #216]	@ (80045c8 <xTaskIncrementTick+0x15c>)
 80044ee:	f04f 32ff 	mov.w	r2, #4294967295
 80044f2:	601a      	str	r2, [r3, #0]
					break;
 80044f4:	e03f      	b.n	8004576 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044f6:	4b31      	ldr	r3, [pc, #196]	@ (80045bc <xTaskIncrementTick+0x150>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	429a      	cmp	r2, r3
 800450c:	d203      	bcs.n	8004516 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800450e:	4a2e      	ldr	r2, [pc, #184]	@ (80045c8 <xTaskIncrementTick+0x15c>)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004514:	e02f      	b.n	8004576 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	3304      	adds	r3, #4
 800451a:	4618      	mov	r0, r3
 800451c:	f7fe fce8 	bl	8002ef0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004524:	2b00      	cmp	r3, #0
 8004526:	d004      	beq.n	8004532 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	3318      	adds	r3, #24
 800452c:	4618      	mov	r0, r3
 800452e:	f7fe fcdf 	bl	8002ef0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004536:	4b25      	ldr	r3, [pc, #148]	@ (80045cc <xTaskIncrementTick+0x160>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d903      	bls.n	8004546 <xTaskIncrementTick+0xda>
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004542:	4a22      	ldr	r2, [pc, #136]	@ (80045cc <xTaskIncrementTick+0x160>)
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4a1f      	ldr	r2, [pc, #124]	@ (80045d0 <xTaskIncrementTick+0x164>)
 8004554:	441a      	add	r2, r3
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	3304      	adds	r3, #4
 800455a:	4619      	mov	r1, r3
 800455c:	4610      	mov	r0, r2
 800455e:	f7fe fc6c 	bl	8002e3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004566:	4b1b      	ldr	r3, [pc, #108]	@ (80045d4 <xTaskIncrementTick+0x168>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456c:	429a      	cmp	r2, r3
 800456e:	d3b8      	bcc.n	80044e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004570:	2301      	movs	r3, #1
 8004572:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004574:	e7b5      	b.n	80044e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004576:	4b17      	ldr	r3, [pc, #92]	@ (80045d4 <xTaskIncrementTick+0x168>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800457c:	4914      	ldr	r1, [pc, #80]	@ (80045d0 <xTaskIncrementTick+0x164>)
 800457e:	4613      	mov	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	440b      	add	r3, r1
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d901      	bls.n	8004592 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800458e:	2301      	movs	r3, #1
 8004590:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004592:	4b11      	ldr	r3, [pc, #68]	@ (80045d8 <xTaskIncrementTick+0x16c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d007      	beq.n	80045aa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800459a:	2301      	movs	r3, #1
 800459c:	617b      	str	r3, [r7, #20]
 800459e:	e004      	b.n	80045aa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80045a0:	4b0e      	ldr	r3, [pc, #56]	@ (80045dc <xTaskIncrementTick+0x170>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3301      	adds	r3, #1
 80045a6:	4a0d      	ldr	r2, [pc, #52]	@ (80045dc <xTaskIncrementTick+0x170>)
 80045a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80045aa:	697b      	ldr	r3, [r7, #20]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3718      	adds	r7, #24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	20000d78 	.word	0x20000d78
 80045b8:	20000d54 	.word	0x20000d54
 80045bc:	20000d08 	.word	0x20000d08
 80045c0:	20000d0c 	.word	0x20000d0c
 80045c4:	20000d68 	.word	0x20000d68
 80045c8:	20000d70 	.word	0x20000d70
 80045cc:	20000d58 	.word	0x20000d58
 80045d0:	20000880 	.word	0x20000880
 80045d4:	2000087c 	.word	0x2000087c
 80045d8:	20000d64 	.word	0x20000d64
 80045dc:	20000d60 	.word	0x20000d60

080045e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045e6:	4b28      	ldr	r3, [pc, #160]	@ (8004688 <vTaskSwitchContext+0xa8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045ee:	4b27      	ldr	r3, [pc, #156]	@ (800468c <vTaskSwitchContext+0xac>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045f4:	e042      	b.n	800467c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80045f6:	4b25      	ldr	r3, [pc, #148]	@ (800468c <vTaskSwitchContext+0xac>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045fc:	4b24      	ldr	r3, [pc, #144]	@ (8004690 <vTaskSwitchContext+0xb0>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	e011      	b.n	8004628 <vTaskSwitchContext+0x48>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10b      	bne.n	8004622 <vTaskSwitchContext+0x42>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	607b      	str	r3, [r7, #4]
}
 800461c:	bf00      	nop
 800461e:	bf00      	nop
 8004620:	e7fd      	b.n	800461e <vTaskSwitchContext+0x3e>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3b01      	subs	r3, #1
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	491a      	ldr	r1, [pc, #104]	@ (8004694 <vTaskSwitchContext+0xb4>)
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0e3      	beq.n	8004604 <vTaskSwitchContext+0x24>
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4a13      	ldr	r2, [pc, #76]	@ (8004694 <vTaskSwitchContext+0xb4>)
 8004648:	4413      	add	r3, r2
 800464a:	60bb      	str	r3, [r7, #8]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	605a      	str	r2, [r3, #4]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	3308      	adds	r3, #8
 800465e:	429a      	cmp	r2, r3
 8004660:	d104      	bne.n	800466c <vTaskSwitchContext+0x8c>
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	605a      	str	r2, [r3, #4]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	4a09      	ldr	r2, [pc, #36]	@ (8004698 <vTaskSwitchContext+0xb8>)
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	4a06      	ldr	r2, [pc, #24]	@ (8004690 <vTaskSwitchContext+0xb0>)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6013      	str	r3, [r2, #0]
}
 800467c:	bf00      	nop
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	20000d78 	.word	0x20000d78
 800468c:	20000d64 	.word	0x20000d64
 8004690:	20000d58 	.word	0x20000d58
 8004694:	20000880 	.word	0x20000880
 8004698:	2000087c 	.word	0x2000087c

0800469c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10b      	bne.n	80046c4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	60fb      	str	r3, [r7, #12]
}
 80046be:	bf00      	nop
 80046c0:	bf00      	nop
 80046c2:	e7fd      	b.n	80046c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046c4:	4b07      	ldr	r3, [pc, #28]	@ (80046e4 <vTaskPlaceOnEventList+0x48>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3318      	adds	r3, #24
 80046ca:	4619      	mov	r1, r3
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7fe fbd7 	bl	8002e80 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046d2:	2101      	movs	r1, #1
 80046d4:	6838      	ldr	r0, [r7, #0]
 80046d6:	f000 fb8f 	bl	8004df8 <prvAddCurrentTaskToDelayedList>
}
 80046da:	bf00      	nop
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	2000087c 	.word	0x2000087c

080046e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10b      	bne.n	8004712 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	617b      	str	r3, [r7, #20]
}
 800470c:	bf00      	nop
 800470e:	bf00      	nop
 8004710:	e7fd      	b.n	800470e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004712:	4b0a      	ldr	r3, [pc, #40]	@ (800473c <vTaskPlaceOnEventListRestricted+0x54>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3318      	adds	r3, #24
 8004718:	4619      	mov	r1, r3
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f7fe fb8d 	bl	8002e3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004726:	f04f 33ff 	mov.w	r3, #4294967295
 800472a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	68b8      	ldr	r0, [r7, #8]
 8004730:	f000 fb62 	bl	8004df8 <prvAddCurrentTaskToDelayedList>
	}
 8004734:	bf00      	nop
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	2000087c 	.word	0x2000087c

08004740 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10b      	bne.n	800476e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	60fb      	str	r3, [r7, #12]
}
 8004768:	bf00      	nop
 800476a:	bf00      	nop
 800476c:	e7fd      	b.n	800476a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	3318      	adds	r3, #24
 8004772:	4618      	mov	r0, r3
 8004774:	f7fe fbbc 	bl	8002ef0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004778:	4b1d      	ldr	r3, [pc, #116]	@ (80047f0 <xTaskRemoveFromEventList+0xb0>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d11d      	bne.n	80047bc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	3304      	adds	r3, #4
 8004784:	4618      	mov	r0, r3
 8004786:	f7fe fbb3 	bl	8002ef0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800478e:	4b19      	ldr	r3, [pc, #100]	@ (80047f4 <xTaskRemoveFromEventList+0xb4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d903      	bls.n	800479e <xTaskRemoveFromEventList+0x5e>
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479a:	4a16      	ldr	r2, [pc, #88]	@ (80047f4 <xTaskRemoveFromEventList+0xb4>)
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a2:	4613      	mov	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4a13      	ldr	r2, [pc, #76]	@ (80047f8 <xTaskRemoveFromEventList+0xb8>)
 80047ac:	441a      	add	r2, r3
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	3304      	adds	r3, #4
 80047b2:	4619      	mov	r1, r3
 80047b4:	4610      	mov	r0, r2
 80047b6:	f7fe fb40 	bl	8002e3a <vListInsertEnd>
 80047ba:	e005      	b.n	80047c8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	3318      	adds	r3, #24
 80047c0:	4619      	mov	r1, r3
 80047c2:	480e      	ldr	r0, [pc, #56]	@ (80047fc <xTaskRemoveFromEventList+0xbc>)
 80047c4:	f7fe fb39 	bl	8002e3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004800 <xTaskRemoveFromEventList+0xc0>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d905      	bls.n	80047e2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047d6:	2301      	movs	r3, #1
 80047d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047da:	4b0a      	ldr	r3, [pc, #40]	@ (8004804 <xTaskRemoveFromEventList+0xc4>)
 80047dc:	2201      	movs	r2, #1
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	e001      	b.n	80047e6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80047e6:	697b      	ldr	r3, [r7, #20]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	20000d78 	.word	0x20000d78
 80047f4:	20000d58 	.word	0x20000d58
 80047f8:	20000880 	.word	0x20000880
 80047fc:	20000d10 	.word	0x20000d10
 8004800:	2000087c 	.word	0x2000087c
 8004804:	20000d64 	.word	0x20000d64

08004808 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004810:	4b06      	ldr	r3, [pc, #24]	@ (800482c <vTaskInternalSetTimeOutState+0x24>)
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004818:	4b05      	ldr	r3, [pc, #20]	@ (8004830 <vTaskInternalSetTimeOutState+0x28>)
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	605a      	str	r2, [r3, #4]
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	20000d68 	.word	0x20000d68
 8004830:	20000d54 	.word	0x20000d54

08004834 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10b      	bne.n	800485c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	613b      	str	r3, [r7, #16]
}
 8004856:	bf00      	nop
 8004858:	bf00      	nop
 800485a:	e7fd      	b.n	8004858 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10b      	bne.n	800487a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	60fb      	str	r3, [r7, #12]
}
 8004874:	bf00      	nop
 8004876:	bf00      	nop
 8004878:	e7fd      	b.n	8004876 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800487a:	f000 ff57 	bl	800572c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800487e:	4b1d      	ldr	r3, [pc, #116]	@ (80048f4 <xTaskCheckForTimeOut+0xc0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004896:	d102      	bne.n	800489e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004898:	2300      	movs	r3, #0
 800489a:	61fb      	str	r3, [r7, #28]
 800489c:	e023      	b.n	80048e6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	4b15      	ldr	r3, [pc, #84]	@ (80048f8 <xTaskCheckForTimeOut+0xc4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d007      	beq.n	80048ba <xTaskCheckForTimeOut+0x86>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d302      	bcc.n	80048ba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80048b4:	2301      	movs	r3, #1
 80048b6:	61fb      	str	r3, [r7, #28]
 80048b8:	e015      	b.n	80048e6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d20b      	bcs.n	80048dc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	1ad2      	subs	r2, r2, r3
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f7ff ff99 	bl	8004808 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048d6:	2300      	movs	r3, #0
 80048d8:	61fb      	str	r3, [r7, #28]
 80048da:	e004      	b.n	80048e6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048e2:	2301      	movs	r3, #1
 80048e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048e6:	f000 ff51 	bl	800578c <vPortExitCritical>

	return xReturn;
 80048ea:	69fb      	ldr	r3, [r7, #28]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3720      	adds	r7, #32
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	20000d54 	.word	0x20000d54
 80048f8:	20000d68 	.word	0x20000d68

080048fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004900:	4b03      	ldr	r3, [pc, #12]	@ (8004910 <vTaskMissedYield+0x14>)
 8004902:	2201      	movs	r2, #1
 8004904:	601a      	str	r2, [r3, #0]
}
 8004906:	bf00      	nop
 8004908:	46bd      	mov	sp, r7
 800490a:	bc80      	pop	{r7}
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	20000d64 	.word	0x20000d64

08004914 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800491c:	f000 f852 	bl	80049c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004920:	4b06      	ldr	r3, [pc, #24]	@ (800493c <prvIdleTask+0x28>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d9f9      	bls.n	800491c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004928:	4b05      	ldr	r3, [pc, #20]	@ (8004940 <prvIdleTask+0x2c>)
 800492a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004938:	e7f0      	b.n	800491c <prvIdleTask+0x8>
 800493a:	bf00      	nop
 800493c:	20000880 	.word	0x20000880
 8004940:	e000ed04 	.word	0xe000ed04

08004944 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800494a:	2300      	movs	r3, #0
 800494c:	607b      	str	r3, [r7, #4]
 800494e:	e00c      	b.n	800496a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	4613      	mov	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4a12      	ldr	r2, [pc, #72]	@ (80049a4 <prvInitialiseTaskLists+0x60>)
 800495c:	4413      	add	r3, r2
 800495e:	4618      	mov	r0, r3
 8004960:	f7fe fa40 	bl	8002de4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3301      	adds	r3, #1
 8004968:	607b      	str	r3, [r7, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b37      	cmp	r3, #55	@ 0x37
 800496e:	d9ef      	bls.n	8004950 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004970:	480d      	ldr	r0, [pc, #52]	@ (80049a8 <prvInitialiseTaskLists+0x64>)
 8004972:	f7fe fa37 	bl	8002de4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004976:	480d      	ldr	r0, [pc, #52]	@ (80049ac <prvInitialiseTaskLists+0x68>)
 8004978:	f7fe fa34 	bl	8002de4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800497c:	480c      	ldr	r0, [pc, #48]	@ (80049b0 <prvInitialiseTaskLists+0x6c>)
 800497e:	f7fe fa31 	bl	8002de4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004982:	480c      	ldr	r0, [pc, #48]	@ (80049b4 <prvInitialiseTaskLists+0x70>)
 8004984:	f7fe fa2e 	bl	8002de4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004988:	480b      	ldr	r0, [pc, #44]	@ (80049b8 <prvInitialiseTaskLists+0x74>)
 800498a:	f7fe fa2b 	bl	8002de4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800498e:	4b0b      	ldr	r3, [pc, #44]	@ (80049bc <prvInitialiseTaskLists+0x78>)
 8004990:	4a05      	ldr	r2, [pc, #20]	@ (80049a8 <prvInitialiseTaskLists+0x64>)
 8004992:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004994:	4b0a      	ldr	r3, [pc, #40]	@ (80049c0 <prvInitialiseTaskLists+0x7c>)
 8004996:	4a05      	ldr	r2, [pc, #20]	@ (80049ac <prvInitialiseTaskLists+0x68>)
 8004998:	601a      	str	r2, [r3, #0]
}
 800499a:	bf00      	nop
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20000880 	.word	0x20000880
 80049a8:	20000ce0 	.word	0x20000ce0
 80049ac:	20000cf4 	.word	0x20000cf4
 80049b0:	20000d10 	.word	0x20000d10
 80049b4:	20000d24 	.word	0x20000d24
 80049b8:	20000d3c 	.word	0x20000d3c
 80049bc:	20000d08 	.word	0x20000d08
 80049c0:	20000d0c 	.word	0x20000d0c

080049c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049ca:	e019      	b.n	8004a00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049cc:	f000 feae 	bl	800572c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049d0:	4b10      	ldr	r3, [pc, #64]	@ (8004a14 <prvCheckTasksWaitingTermination+0x50>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3304      	adds	r3, #4
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fe fa87 	bl	8002ef0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a18 <prvCheckTasksWaitingTermination+0x54>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	4a0b      	ldr	r2, [pc, #44]	@ (8004a18 <prvCheckTasksWaitingTermination+0x54>)
 80049ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049ec:	4b0b      	ldr	r3, [pc, #44]	@ (8004a1c <prvCheckTasksWaitingTermination+0x58>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	4a0a      	ldr	r2, [pc, #40]	@ (8004a1c <prvCheckTasksWaitingTermination+0x58>)
 80049f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049f6:	f000 fec9 	bl	800578c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f810 	bl	8004a20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a00:	4b06      	ldr	r3, [pc, #24]	@ (8004a1c <prvCheckTasksWaitingTermination+0x58>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1e1      	bne.n	80049cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a08:	bf00      	nop
 8004a0a:	bf00      	nop
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000d24 	.word	0x20000d24
 8004a18:	20000d50 	.word	0x20000d50
 8004a1c:	20000d38 	.word	0x20000d38

08004a20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d108      	bne.n	8004a44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a36:	4618      	mov	r0, r3
 8004a38:	f001 f848 	bl	8005acc <vPortFree>
				vPortFree( pxTCB );
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f001 f845 	bl	8005acc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a42:	e019      	b.n	8004a78 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d103      	bne.n	8004a56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f001 f83c 	bl	8005acc <vPortFree>
	}
 8004a54:	e010      	b.n	8004a78 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d00b      	beq.n	8004a78 <prvDeleteTCB+0x58>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	60fb      	str	r3, [r7, #12]
}
 8004a72:	bf00      	nop
 8004a74:	bf00      	nop
 8004a76:	e7fd      	b.n	8004a74 <prvDeleteTCB+0x54>
	}
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a86:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab8 <prvResetNextTaskUnblockTime+0x38>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d104      	bne.n	8004a9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a90:	4b0a      	ldr	r3, [pc, #40]	@ (8004abc <prvResetNextTaskUnblockTime+0x3c>)
 8004a92:	f04f 32ff 	mov.w	r2, #4294967295
 8004a96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a98:	e008      	b.n	8004aac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a9a:	4b07      	ldr	r3, [pc, #28]	@ (8004ab8 <prvResetNextTaskUnblockTime+0x38>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	4a04      	ldr	r2, [pc, #16]	@ (8004abc <prvResetNextTaskUnblockTime+0x3c>)
 8004aaa:	6013      	str	r3, [r2, #0]
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bc80      	pop	{r7}
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	20000d08 	.word	0x20000d08
 8004abc:	20000d70 	.word	0x20000d70

08004ac0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004ac6:	4b04      	ldr	r3, [pc, #16]	@ (8004ad8 <xTaskGetCurrentTaskHandle+0x18>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004acc:	687b      	ldr	r3, [r7, #4]
	}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bc80      	pop	{r7}
 8004ad6:	4770      	bx	lr
 8004ad8:	2000087c 	.word	0x2000087c

08004adc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8004b10 <xTaskGetSchedulerState+0x34>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d102      	bne.n	8004af0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004aea:	2301      	movs	r3, #1
 8004aec:	607b      	str	r3, [r7, #4]
 8004aee:	e008      	b.n	8004b02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004af0:	4b08      	ldr	r3, [pc, #32]	@ (8004b14 <xTaskGetSchedulerState+0x38>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d102      	bne.n	8004afe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004af8:	2302      	movs	r3, #2
 8004afa:	607b      	str	r3, [r7, #4]
 8004afc:	e001      	b.n	8004b02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004afe:	2300      	movs	r3, #0
 8004b00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b02:	687b      	ldr	r3, [r7, #4]
	}
 8004b04:	4618      	mov	r0, r3
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bc80      	pop	{r7}
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	20000d5c 	.word	0x20000d5c
 8004b14:	20000d78 	.word	0x20000d78

08004b18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004b24:	2300      	movs	r3, #0
 8004b26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d051      	beq.n	8004bd2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b32:	4b2a      	ldr	r3, [pc, #168]	@ (8004bdc <xTaskPriorityInherit+0xc4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d241      	bcs.n	8004bc0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	db06      	blt.n	8004b52 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b44:	4b25      	ldr	r3, [pc, #148]	@ (8004bdc <xTaskPriorityInherit+0xc4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	6959      	ldr	r1, [r3, #20]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4a1f      	ldr	r2, [pc, #124]	@ (8004be0 <xTaskPriorityInherit+0xc8>)
 8004b64:	4413      	add	r3, r2
 8004b66:	4299      	cmp	r1, r3
 8004b68:	d122      	bne.n	8004bb0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fe f9be 	bl	8002ef0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b74:	4b19      	ldr	r3, [pc, #100]	@ (8004bdc <xTaskPriorityInherit+0xc4>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b82:	4b18      	ldr	r3, [pc, #96]	@ (8004be4 <xTaskPriorityInherit+0xcc>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d903      	bls.n	8004b92 <xTaskPriorityInherit+0x7a>
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8e:	4a15      	ldr	r2, [pc, #84]	@ (8004be4 <xTaskPriorityInherit+0xcc>)
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b96:	4613      	mov	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4a10      	ldr	r2, [pc, #64]	@ (8004be0 <xTaskPriorityInherit+0xc8>)
 8004ba0:	441a      	add	r2, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4610      	mov	r0, r2
 8004baa:	f7fe f946 	bl	8002e3a <vListInsertEnd>
 8004bae:	e004      	b.n	8004bba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8004bdc <xTaskPriorityInherit+0xc4>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	e008      	b.n	8004bd2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004bc4:	4b05      	ldr	r3, [pc, #20]	@ (8004bdc <xTaskPriorityInherit+0xc4>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d201      	bcs.n	8004bd2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
	}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	2000087c 	.word	0x2000087c
 8004be0:	20000880 	.word	0x20000880
 8004be4:	20000d58 	.word	0x20000d58

08004be8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d058      	beq.n	8004cb0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8004cbc <xTaskPriorityDisinherit+0xd4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d00b      	beq.n	8004c20 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	60fb      	str	r3, [r7, #12]
}
 8004c1a:	bf00      	nop
 8004c1c:	bf00      	nop
 8004c1e:	e7fd      	b.n	8004c1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10b      	bne.n	8004c40 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c2c:	f383 8811 	msr	BASEPRI, r3
 8004c30:	f3bf 8f6f 	isb	sy
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	60bb      	str	r3, [r7, #8]
}
 8004c3a:	bf00      	nop
 8004c3c:	bf00      	nop
 8004c3e:	e7fd      	b.n	8004c3c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c44:	1e5a      	subs	r2, r3, #1
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d02c      	beq.n	8004cb0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d128      	bne.n	8004cb0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	3304      	adds	r3, #4
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fe f944 	bl	8002ef0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c80:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc0 <xTaskPriorityDisinherit+0xd8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d903      	bls.n	8004c90 <xTaskPriorityDisinherit+0xa8>
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8004cc0 <xTaskPriorityDisinherit+0xd8>)
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c94:	4613      	mov	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4a09      	ldr	r2, [pc, #36]	@ (8004cc4 <xTaskPriorityDisinherit+0xdc>)
 8004c9e:	441a      	add	r2, r3
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	f7fe f8c7 	bl	8002e3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004cac:	2301      	movs	r3, #1
 8004cae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004cb0:	697b      	ldr	r3, [r7, #20]
	}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	2000087c 	.word	0x2000087c
 8004cc0:	20000d58 	.word	0x20000d58
 8004cc4:	20000880 	.word	0x20000880

08004cc8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d06c      	beq.n	8004dba <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10b      	bne.n	8004d00 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	60fb      	str	r3, [r7, #12]
}
 8004cfa:	bf00      	nop
 8004cfc:	bf00      	nop
 8004cfe:	e7fd      	b.n	8004cfc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d902      	bls.n	8004d10 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	61fb      	str	r3, [r7, #28]
 8004d0e:	e002      	b.n	8004d16 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d14:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1a:	69fa      	ldr	r2, [r7, #28]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d04c      	beq.n	8004dba <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d147      	bne.n	8004dba <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004d2a:	4b26      	ldr	r3, [pc, #152]	@ (8004dc4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d10b      	bne.n	8004d4c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	60bb      	str	r3, [r7, #8]
}
 8004d46:	bf00      	nop
 8004d48:	bf00      	nop
 8004d4a:	e7fd      	b.n	8004d48 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d50:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	69fa      	ldr	r2, [r7, #28]
 8004d56:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	db04      	blt.n	8004d6a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	6959      	ldr	r1, [r3, #20]
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4a13      	ldr	r2, [pc, #76]	@ (8004dc8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004d7a:	4413      	add	r3, r2
 8004d7c:	4299      	cmp	r1, r3
 8004d7e:	d11c      	bne.n	8004dba <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	3304      	adds	r3, #4
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7fe f8b3 	bl	8002ef0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8004dcc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d903      	bls.n	8004d9e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9a:	4a0c      	ldr	r2, [pc, #48]	@ (8004dcc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004da2:	4613      	mov	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4a07      	ldr	r2, [pc, #28]	@ (8004dc8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004dac:	441a      	add	r2, r3
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	3304      	adds	r3, #4
 8004db2:	4619      	mov	r1, r3
 8004db4:	4610      	mov	r0, r2
 8004db6:	f7fe f840 	bl	8002e3a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004dba:	bf00      	nop
 8004dbc:	3720      	adds	r7, #32
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	2000087c 	.word	0x2000087c
 8004dc8:	20000880 	.word	0x20000880
 8004dcc:	20000d58 	.word	0x20000d58

08004dd0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004dd4:	4b07      	ldr	r3, [pc, #28]	@ (8004df4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d004      	beq.n	8004de6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004ddc:	4b05      	ldr	r3, [pc, #20]	@ (8004df4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004de2:	3201      	adds	r2, #1
 8004de4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8004de6:	4b03      	ldr	r3, [pc, #12]	@ (8004df4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004de8:	681b      	ldr	r3, [r3, #0]
	}
 8004dea:	4618      	mov	r0, r3
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bc80      	pop	{r7}
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	2000087c 	.word	0x2000087c

08004df8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e02:	4b21      	ldr	r3, [pc, #132]	@ (8004e88 <prvAddCurrentTaskToDelayedList+0x90>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e08:	4b20      	ldr	r3, [pc, #128]	@ (8004e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fe f86e 	bl	8002ef0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1a:	d10a      	bne.n	8004e32 <prvAddCurrentTaskToDelayedList+0x3a>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d007      	beq.n	8004e32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e22:	4b1a      	ldr	r3, [pc, #104]	@ (8004e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3304      	adds	r3, #4
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4819      	ldr	r0, [pc, #100]	@ (8004e90 <prvAddCurrentTaskToDelayedList+0x98>)
 8004e2c:	f7fe f805 	bl	8002e3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e30:	e026      	b.n	8004e80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4413      	add	r3, r2
 8004e38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e3a:	4b14      	ldr	r3, [pc, #80]	@ (8004e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d209      	bcs.n	8004e5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e4a:	4b12      	ldr	r3, [pc, #72]	@ (8004e94 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8004e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3304      	adds	r3, #4
 8004e54:	4619      	mov	r1, r3
 8004e56:	4610      	mov	r0, r2
 8004e58:	f7fe f812 	bl	8002e80 <vListInsert>
}
 8004e5c:	e010      	b.n	8004e80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8004e98 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	4b0a      	ldr	r3, [pc, #40]	@ (8004e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3304      	adds	r3, #4
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	f7fe f808 	bl	8002e80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e70:	4b0a      	ldr	r3, [pc, #40]	@ (8004e9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d202      	bcs.n	8004e80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004e7a:	4a08      	ldr	r2, [pc, #32]	@ (8004e9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	6013      	str	r3, [r2, #0]
}
 8004e80:	bf00      	nop
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	20000d54 	.word	0x20000d54
 8004e8c:	2000087c 	.word	0x2000087c
 8004e90:	20000d3c 	.word	0x20000d3c
 8004e94:	20000d0c 	.word	0x20000d0c
 8004e98:	20000d08 	.word	0x20000d08
 8004e9c:	20000d70 	.word	0x20000d70

08004ea0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08a      	sub	sp, #40	@ 0x28
 8004ea4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004eaa:	f000 fb11 	bl	80054d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004eae:	4b1d      	ldr	r3, [pc, #116]	@ (8004f24 <xTimerCreateTimerTask+0x84>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d021      	beq.n	8004efa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004ebe:	1d3a      	adds	r2, r7, #4
 8004ec0:	f107 0108 	add.w	r1, r7, #8
 8004ec4:	f107 030c 	add.w	r3, r7, #12
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7fd ff71 	bl	8002db0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	9202      	str	r2, [sp, #8]
 8004ed6:	9301      	str	r3, [sp, #4]
 8004ed8:	2302      	movs	r3, #2
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	2300      	movs	r3, #0
 8004ede:	460a      	mov	r2, r1
 8004ee0:	4911      	ldr	r1, [pc, #68]	@ (8004f28 <xTimerCreateTimerTask+0x88>)
 8004ee2:	4812      	ldr	r0, [pc, #72]	@ (8004f2c <xTimerCreateTimerTask+0x8c>)
 8004ee4:	f7fe ffc4 	bl	8003e70 <xTaskCreateStatic>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	4a11      	ldr	r2, [pc, #68]	@ (8004f30 <xTimerCreateTimerTask+0x90>)
 8004eec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004eee:	4b10      	ldr	r3, [pc, #64]	@ (8004f30 <xTimerCreateTimerTask+0x90>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10b      	bne.n	8004f18 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	613b      	str	r3, [r7, #16]
}
 8004f12:	bf00      	nop
 8004f14:	bf00      	nop
 8004f16:	e7fd      	b.n	8004f14 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004f18:	697b      	ldr	r3, [r7, #20]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20000dac 	.word	0x20000dac
 8004f28:	08006f58 	.word	0x08006f58
 8004f2c:	0800506d 	.word	0x0800506d
 8004f30:	20000db0 	.word	0x20000db0

08004f34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08a      	sub	sp, #40	@ 0x28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
 8004f40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f42:	2300      	movs	r3, #0
 8004f44:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10b      	bne.n	8004f64 <xTimerGenericCommand+0x30>
	__asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	623b      	str	r3, [r7, #32]
}
 8004f5e:	bf00      	nop
 8004f60:	bf00      	nop
 8004f62:	e7fd      	b.n	8004f60 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004f64:	4b19      	ldr	r3, [pc, #100]	@ (8004fcc <xTimerGenericCommand+0x98>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d02a      	beq.n	8004fc2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b05      	cmp	r3, #5
 8004f7c:	dc18      	bgt.n	8004fb0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004f7e:	f7ff fdad 	bl	8004adc <xTaskGetSchedulerState>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d109      	bne.n	8004f9c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f88:	4b10      	ldr	r3, [pc, #64]	@ (8004fcc <xTimerGenericCommand+0x98>)
 8004f8a:	6818      	ldr	r0, [r3, #0]
 8004f8c:	f107 0110 	add.w	r1, r7, #16
 8004f90:	2300      	movs	r3, #0
 8004f92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f94:	f7fe f9d4 	bl	8003340 <xQueueGenericSend>
 8004f98:	6278      	str	r0, [r7, #36]	@ 0x24
 8004f9a:	e012      	b.n	8004fc2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004fcc <xTimerGenericCommand+0x98>)
 8004f9e:	6818      	ldr	r0, [r3, #0]
 8004fa0:	f107 0110 	add.w	r1, r7, #16
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f7fe f9ca 	bl	8003340 <xQueueGenericSend>
 8004fac:	6278      	str	r0, [r7, #36]	@ 0x24
 8004fae:	e008      	b.n	8004fc2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004fb0:	4b06      	ldr	r3, [pc, #24]	@ (8004fcc <xTimerGenericCommand+0x98>)
 8004fb2:	6818      	ldr	r0, [r3, #0]
 8004fb4:	f107 0110 	add.w	r1, r7, #16
 8004fb8:	2300      	movs	r3, #0
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	f7fe fac2 	bl	8003544 <xQueueGenericSendFromISR>
 8004fc0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3728      	adds	r7, #40	@ 0x28
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20000dac 	.word	0x20000dac

08004fd0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fda:	4b23      	ldr	r3, [pc, #140]	@ (8005068 <prvProcessExpiredTimer+0x98>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fd ff81 	bl	8002ef0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d023      	beq.n	8005044 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	699a      	ldr	r2, [r3, #24]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	18d1      	adds	r1, r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	6978      	ldr	r0, [r7, #20]
 800500a:	f000 f8d3 	bl	80051b4 <prvInsertTimerInActiveList>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d020      	beq.n	8005056 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005014:	2300      	movs	r3, #0
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	2300      	movs	r3, #0
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	2100      	movs	r1, #0
 800501e:	6978      	ldr	r0, [r7, #20]
 8005020:	f7ff ff88 	bl	8004f34 <xTimerGenericCommand>
 8005024:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d114      	bne.n	8005056 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	60fb      	str	r3, [r7, #12]
}
 800503e:	bf00      	nop
 8005040:	bf00      	nop
 8005042:	e7fd      	b.n	8005040 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800504a:	f023 0301 	bic.w	r3, r3, #1
 800504e:	b2da      	uxtb	r2, r3
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	6978      	ldr	r0, [r7, #20]
 800505c:	4798      	blx	r3
}
 800505e:	bf00      	nop
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	20000da4 	.word	0x20000da4

0800506c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005074:	f107 0308 	add.w	r3, r7, #8
 8005078:	4618      	mov	r0, r3
 800507a:	f000 f859 	bl	8005130 <prvGetNextExpireTime>
 800507e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4619      	mov	r1, r3
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 f805 	bl	8005094 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800508a:	f000 f8d5 	bl	8005238 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800508e:	bf00      	nop
 8005090:	e7f0      	b.n	8005074 <prvTimerTask+0x8>
	...

08005094 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800509e:	f7ff f92b 	bl	80042f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050a2:	f107 0308 	add.w	r3, r7, #8
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 f864 	bl	8005174 <prvSampleTimeNow>
 80050ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d130      	bne.n	8005116 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10a      	bne.n	80050d0 <prvProcessTimerOrBlockTask+0x3c>
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d806      	bhi.n	80050d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80050c2:	f7ff f927 	bl	8004314 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80050c6:	68f9      	ldr	r1, [r7, #12]
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff ff81 	bl	8004fd0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80050ce:	e024      	b.n	800511a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d008      	beq.n	80050e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80050d6:	4b13      	ldr	r3, [pc, #76]	@ (8005124 <prvProcessTimerOrBlockTask+0x90>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <prvProcessTimerOrBlockTask+0x50>
 80050e0:	2301      	movs	r3, #1
 80050e2:	e000      	b.n	80050e6 <prvProcessTimerOrBlockTask+0x52>
 80050e4:	2300      	movs	r3, #0
 80050e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80050e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005128 <prvProcessTimerOrBlockTask+0x94>)
 80050ea:	6818      	ldr	r0, [r3, #0]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	4619      	mov	r1, r3
 80050f6:	f7fe fe87 	bl	8003e08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80050fa:	f7ff f90b 	bl	8004314 <xTaskResumeAll>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10a      	bne.n	800511a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005104:	4b09      	ldr	r3, [pc, #36]	@ (800512c <prvProcessTimerOrBlockTask+0x98>)
 8005106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	f3bf 8f6f 	isb	sy
}
 8005114:	e001      	b.n	800511a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005116:	f7ff f8fd 	bl	8004314 <xTaskResumeAll>
}
 800511a:	bf00      	nop
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20000da8 	.word	0x20000da8
 8005128:	20000dac 	.word	0x20000dac
 800512c:	e000ed04 	.word	0xe000ed04

08005130 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005138:	4b0d      	ldr	r3, [pc, #52]	@ (8005170 <prvGetNextExpireTime+0x40>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <prvGetNextExpireTime+0x16>
 8005142:	2201      	movs	r2, #1
 8005144:	e000      	b.n	8005148 <prvGetNextExpireTime+0x18>
 8005146:	2200      	movs	r2, #0
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d105      	bne.n	8005160 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005154:	4b06      	ldr	r3, [pc, #24]	@ (8005170 <prvGetNextExpireTime+0x40>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	e001      	b.n	8005164 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005164:	68fb      	ldr	r3, [r7, #12]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	bc80      	pop	{r7}
 800516e:	4770      	bx	lr
 8005170:	20000da4 	.word	0x20000da4

08005174 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800517c:	f7ff f968 	bl	8004450 <xTaskGetTickCount>
 8005180:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005182:	4b0b      	ldr	r3, [pc, #44]	@ (80051b0 <prvSampleTimeNow+0x3c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	429a      	cmp	r2, r3
 800518a:	d205      	bcs.n	8005198 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800518c:	f000 f93a 	bl	8005404 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	e002      	b.n	800519e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800519e:	4a04      	ldr	r2, [pc, #16]	@ (80051b0 <prvSampleTimeNow+0x3c>)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80051a4:	68fb      	ldr	r3, [r7, #12]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	20000db4 	.word	0x20000db4

080051b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d812      	bhi.n	8005200 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	1ad2      	subs	r2, r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d302      	bcc.n	80051ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80051e8:	2301      	movs	r3, #1
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	e01b      	b.n	8005226 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80051ee:	4b10      	ldr	r3, [pc, #64]	@ (8005230 <prvInsertTimerInActiveList+0x7c>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3304      	adds	r3, #4
 80051f6:	4619      	mov	r1, r3
 80051f8:	4610      	mov	r0, r2
 80051fa:	f7fd fe41 	bl	8002e80 <vListInsert>
 80051fe:	e012      	b.n	8005226 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d206      	bcs.n	8005216 <prvInsertTimerInActiveList+0x62>
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	429a      	cmp	r2, r3
 800520e:	d302      	bcc.n	8005216 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005210:	2301      	movs	r3, #1
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	e007      	b.n	8005226 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005216:	4b07      	ldr	r3, [pc, #28]	@ (8005234 <prvInsertTimerInActiveList+0x80>)
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3304      	adds	r3, #4
 800521e:	4619      	mov	r1, r3
 8005220:	4610      	mov	r0, r2
 8005222:	f7fd fe2d 	bl	8002e80 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005226:	697b      	ldr	r3, [r7, #20]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	20000da8 	.word	0x20000da8
 8005234:	20000da4 	.word	0x20000da4

08005238 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08e      	sub	sp, #56	@ 0x38
 800523c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800523e:	e0ce      	b.n	80053de <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	da19      	bge.n	800527a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005246:	1d3b      	adds	r3, r7, #4
 8005248:	3304      	adds	r3, #4
 800524a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800524c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10b      	bne.n	800526a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	61fb      	str	r3, [r7, #28]
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop
 8005268:	e7fd      	b.n	8005266 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800526a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005270:	6850      	ldr	r0, [r2, #4]
 8005272:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005274:	6892      	ldr	r2, [r2, #8]
 8005276:	4611      	mov	r1, r2
 8005278:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	f2c0 80ae 	blt.w	80053de <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d004      	beq.n	8005298 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800528e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005290:	3304      	adds	r3, #4
 8005292:	4618      	mov	r0, r3
 8005294:	f7fd fe2c 	bl	8002ef0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005298:	463b      	mov	r3, r7
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff ff6a 	bl	8005174 <prvSampleTimeNow>
 80052a0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b09      	cmp	r3, #9
 80052a6:	f200 8097 	bhi.w	80053d8 <prvProcessReceivedCommands+0x1a0>
 80052aa:	a201      	add	r2, pc, #4	@ (adr r2, 80052b0 <prvProcessReceivedCommands+0x78>)
 80052ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b0:	080052d9 	.word	0x080052d9
 80052b4:	080052d9 	.word	0x080052d9
 80052b8:	080052d9 	.word	0x080052d9
 80052bc:	0800534f 	.word	0x0800534f
 80052c0:	08005363 	.word	0x08005363
 80052c4:	080053af 	.word	0x080053af
 80052c8:	080052d9 	.word	0x080052d9
 80052cc:	080052d9 	.word	0x080052d9
 80052d0:	0800534f 	.word	0x0800534f
 80052d4:	08005363 	.word	0x08005363
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80052d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052de:	f043 0301 	orr.w	r3, r3, #1
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	18d1      	adds	r1, r2, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052f8:	f7ff ff5c 	bl	80051b4 <prvInsertTimerInActiveList>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d06c      	beq.n	80053dc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005308:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800530a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d061      	beq.n	80053dc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	441a      	add	r2, r3
 8005320:	2300      	movs	r3, #0
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	2300      	movs	r3, #0
 8005326:	2100      	movs	r1, #0
 8005328:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800532a:	f7ff fe03 	bl	8004f34 <xTimerGenericCommand>
 800532e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d152      	bne.n	80053dc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533a:	f383 8811 	msr	BASEPRI, r3
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	61bb      	str	r3, [r7, #24]
}
 8005348:	bf00      	nop
 800534a:	bf00      	nop
 800534c:	e7fd      	b.n	800534a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800534e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005350:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005354:	f023 0301 	bic.w	r3, r3, #1
 8005358:	b2da      	uxtb	r2, r3
 800535a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005360:	e03d      	b.n	80053de <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005364:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005368:	f043 0301 	orr.w	r3, r3, #1
 800536c:	b2da      	uxtb	r2, r3
 800536e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005370:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005378:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800537a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10b      	bne.n	800539a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	617b      	str	r3, [r7, #20]
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop
 8005398:	e7fd      	b.n	8005396 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800539a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539c:	699a      	ldr	r2, [r3, #24]
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a0:	18d1      	adds	r1, r2, r3
 80053a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053a8:	f7ff ff04 	bl	80051b4 <prvInsertTimerInActiveList>
					break;
 80053ac:	e017      	b.n	80053de <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80053ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d103      	bne.n	80053c4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80053bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053be:	f000 fb85 	bl	8005acc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80053c2:	e00c      	b.n	80053de <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053ca:	f023 0301 	bic.w	r3, r3, #1
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80053d6:	e002      	b.n	80053de <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80053d8:	bf00      	nop
 80053da:	e000      	b.n	80053de <prvProcessReceivedCommands+0x1a6>
					break;
 80053dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053de:	4b08      	ldr	r3, [pc, #32]	@ (8005400 <prvProcessReceivedCommands+0x1c8>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	1d39      	adds	r1, r7, #4
 80053e4:	2200      	movs	r2, #0
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fe f94a 	bl	8003680 <xQueueReceive>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f47f af26 	bne.w	8005240 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop
 80053f8:	3730      	adds	r7, #48	@ 0x30
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20000dac 	.word	0x20000dac

08005404 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800540a:	e049      	b.n	80054a0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800540c:	4b2e      	ldr	r3, [pc, #184]	@ (80054c8 <prvSwitchTimerLists+0xc4>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005416:	4b2c      	ldr	r3, [pc, #176]	@ (80054c8 <prvSwitchTimerLists+0xc4>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3304      	adds	r3, #4
 8005424:	4618      	mov	r0, r3
 8005426:	f7fd fd63 	bl	8002ef0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b00      	cmp	r3, #0
 800543e:	d02f      	beq.n	80054a0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4413      	add	r3, r2
 8005448:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	429a      	cmp	r2, r3
 8005450:	d90e      	bls.n	8005470 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800545e:	4b1a      	ldr	r3, [pc, #104]	@ (80054c8 <prvSwitchTimerLists+0xc4>)
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	3304      	adds	r3, #4
 8005466:	4619      	mov	r1, r3
 8005468:	4610      	mov	r0, r2
 800546a:	f7fd fd09 	bl	8002e80 <vListInsert>
 800546e:	e017      	b.n	80054a0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005470:	2300      	movs	r3, #0
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	2300      	movs	r3, #0
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	2100      	movs	r1, #0
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f7ff fd5a 	bl	8004f34 <xTimerGenericCommand>
 8005480:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10b      	bne.n	80054a0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	603b      	str	r3, [r7, #0]
}
 800549a:	bf00      	nop
 800549c:	bf00      	nop
 800549e:	e7fd      	b.n	800549c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054a0:	4b09      	ldr	r3, [pc, #36]	@ (80054c8 <prvSwitchTimerLists+0xc4>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1b0      	bne.n	800540c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80054aa:	4b07      	ldr	r3, [pc, #28]	@ (80054c8 <prvSwitchTimerLists+0xc4>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80054b0:	4b06      	ldr	r3, [pc, #24]	@ (80054cc <prvSwitchTimerLists+0xc8>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a04      	ldr	r2, [pc, #16]	@ (80054c8 <prvSwitchTimerLists+0xc4>)
 80054b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80054b8:	4a04      	ldr	r2, [pc, #16]	@ (80054cc <prvSwitchTimerLists+0xc8>)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	6013      	str	r3, [r2, #0]
}
 80054be:	bf00      	nop
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20000da4 	.word	0x20000da4
 80054cc:	20000da8 	.word	0x20000da8

080054d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80054d6:	f000 f929 	bl	800572c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80054da:	4b15      	ldr	r3, [pc, #84]	@ (8005530 <prvCheckForValidListAndQueue+0x60>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d120      	bne.n	8005524 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80054e2:	4814      	ldr	r0, [pc, #80]	@ (8005534 <prvCheckForValidListAndQueue+0x64>)
 80054e4:	f7fd fc7e 	bl	8002de4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80054e8:	4813      	ldr	r0, [pc, #76]	@ (8005538 <prvCheckForValidListAndQueue+0x68>)
 80054ea:	f7fd fc7b 	bl	8002de4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80054ee:	4b13      	ldr	r3, [pc, #76]	@ (800553c <prvCheckForValidListAndQueue+0x6c>)
 80054f0:	4a10      	ldr	r2, [pc, #64]	@ (8005534 <prvCheckForValidListAndQueue+0x64>)
 80054f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80054f4:	4b12      	ldr	r3, [pc, #72]	@ (8005540 <prvCheckForValidListAndQueue+0x70>)
 80054f6:	4a10      	ldr	r2, [pc, #64]	@ (8005538 <prvCheckForValidListAndQueue+0x68>)
 80054f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80054fa:	2300      	movs	r3, #0
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	4b11      	ldr	r3, [pc, #68]	@ (8005544 <prvCheckForValidListAndQueue+0x74>)
 8005500:	4a11      	ldr	r2, [pc, #68]	@ (8005548 <prvCheckForValidListAndQueue+0x78>)
 8005502:	2110      	movs	r1, #16
 8005504:	200a      	movs	r0, #10
 8005506:	f7fd fd87 	bl	8003018 <xQueueGenericCreateStatic>
 800550a:	4603      	mov	r3, r0
 800550c:	4a08      	ldr	r2, [pc, #32]	@ (8005530 <prvCheckForValidListAndQueue+0x60>)
 800550e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005510:	4b07      	ldr	r3, [pc, #28]	@ (8005530 <prvCheckForValidListAndQueue+0x60>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d005      	beq.n	8005524 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005518:	4b05      	ldr	r3, [pc, #20]	@ (8005530 <prvCheckForValidListAndQueue+0x60>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	490b      	ldr	r1, [pc, #44]	@ (800554c <prvCheckForValidListAndQueue+0x7c>)
 800551e:	4618      	mov	r0, r3
 8005520:	f7fe fc4a 	bl	8003db8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005524:	f000 f932 	bl	800578c <vPortExitCritical>
}
 8005528:	bf00      	nop
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000dac 	.word	0x20000dac
 8005534:	20000d7c 	.word	0x20000d7c
 8005538:	20000d90 	.word	0x20000d90
 800553c:	20000da4 	.word	0x20000da4
 8005540:	20000da8 	.word	0x20000da8
 8005544:	20000e58 	.word	0x20000e58
 8005548:	20000db8 	.word	0x20000db8
 800554c:	08006f60 	.word	0x08006f60

08005550 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3b04      	subs	r3, #4
 8005560:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005568:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3b04      	subs	r3, #4
 800556e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f023 0201 	bic.w	r2, r3, #1
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	3b04      	subs	r3, #4
 800557e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005580:	4a08      	ldr	r2, [pc, #32]	@ (80055a4 <pxPortInitialiseStack+0x54>)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3b14      	subs	r3, #20
 800558a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3b20      	subs	r3, #32
 8005596:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005598:	68fb      	ldr	r3, [r7, #12]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr
 80055a4:	080055a9 	.word	0x080055a9

080055a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80055ae:	2300      	movs	r3, #0
 80055b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055b2:	4b12      	ldr	r3, [pc, #72]	@ (80055fc <prvTaskExitError+0x54>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ba:	d00b      	beq.n	80055d4 <prvTaskExitError+0x2c>
	__asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	60fb      	str	r3, [r7, #12]
}
 80055ce:	bf00      	nop
 80055d0:	bf00      	nop
 80055d2:	e7fd      	b.n	80055d0 <prvTaskExitError+0x28>
	__asm volatile
 80055d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d8:	f383 8811 	msr	BASEPRI, r3
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	60bb      	str	r3, [r7, #8]
}
 80055e6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80055e8:	bf00      	nop
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0fc      	beq.n	80055ea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80055f0:	bf00      	nop
 80055f2:	bf00      	nop
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bc80      	pop	{r7}
 80055fa:	4770      	bx	lr
 80055fc:	20000068 	.word	0x20000068

08005600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005600:	4b07      	ldr	r3, [pc, #28]	@ (8005620 <pxCurrentTCBConst2>)
 8005602:	6819      	ldr	r1, [r3, #0]
 8005604:	6808      	ldr	r0, [r1, #0]
 8005606:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800560a:	f380 8809 	msr	PSP, r0
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f04f 0000 	mov.w	r0, #0
 8005616:	f380 8811 	msr	BASEPRI, r0
 800561a:	f04e 0e0d 	orr.w	lr, lr, #13
 800561e:	4770      	bx	lr

08005620 <pxCurrentTCBConst2>:
 8005620:	2000087c 	.word	0x2000087c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop

08005628 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005628:	4806      	ldr	r0, [pc, #24]	@ (8005644 <prvPortStartFirstTask+0x1c>)
 800562a:	6800      	ldr	r0, [r0, #0]
 800562c:	6800      	ldr	r0, [r0, #0]
 800562e:	f380 8808 	msr	MSP, r0
 8005632:	b662      	cpsie	i
 8005634:	b661      	cpsie	f
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	df00      	svc	0
 8005640:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005642:	bf00      	nop
 8005644:	e000ed08 	.word	0xe000ed08

08005648 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800564e:	4b32      	ldr	r3, [pc, #200]	@ (8005718 <xPortStartScheduler+0xd0>)
 8005650:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	b2db      	uxtb	r3, r3
 8005658:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	22ff      	movs	r2, #255	@ 0xff
 800565e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	b2db      	uxtb	r3, r3
 8005666:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005668:	78fb      	ldrb	r3, [r7, #3]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005670:	b2da      	uxtb	r2, r3
 8005672:	4b2a      	ldr	r3, [pc, #168]	@ (800571c <xPortStartScheduler+0xd4>)
 8005674:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005676:	4b2a      	ldr	r3, [pc, #168]	@ (8005720 <xPortStartScheduler+0xd8>)
 8005678:	2207      	movs	r2, #7
 800567a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800567c:	e009      	b.n	8005692 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800567e:	4b28      	ldr	r3, [pc, #160]	@ (8005720 <xPortStartScheduler+0xd8>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3b01      	subs	r3, #1
 8005684:	4a26      	ldr	r2, [pc, #152]	@ (8005720 <xPortStartScheduler+0xd8>)
 8005686:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005688:	78fb      	ldrb	r3, [r7, #3]
 800568a:	b2db      	uxtb	r3, r3
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	b2db      	uxtb	r3, r3
 8005690:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005692:	78fb      	ldrb	r3, [r7, #3]
 8005694:	b2db      	uxtb	r3, r3
 8005696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800569a:	2b80      	cmp	r3, #128	@ 0x80
 800569c:	d0ef      	beq.n	800567e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800569e:	4b20      	ldr	r3, [pc, #128]	@ (8005720 <xPortStartScheduler+0xd8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f1c3 0307 	rsb	r3, r3, #7
 80056a6:	2b04      	cmp	r3, #4
 80056a8:	d00b      	beq.n	80056c2 <xPortStartScheduler+0x7a>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	60bb      	str	r3, [r7, #8]
}
 80056bc:	bf00      	nop
 80056be:	bf00      	nop
 80056c0:	e7fd      	b.n	80056be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056c2:	4b17      	ldr	r3, [pc, #92]	@ (8005720 <xPortStartScheduler+0xd8>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	021b      	lsls	r3, r3, #8
 80056c8:	4a15      	ldr	r2, [pc, #84]	@ (8005720 <xPortStartScheduler+0xd8>)
 80056ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056cc:	4b14      	ldr	r3, [pc, #80]	@ (8005720 <xPortStartScheduler+0xd8>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056d4:	4a12      	ldr	r2, [pc, #72]	@ (8005720 <xPortStartScheduler+0xd8>)
 80056d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80056e0:	4b10      	ldr	r3, [pc, #64]	@ (8005724 <xPortStartScheduler+0xdc>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a0f      	ldr	r2, [pc, #60]	@ (8005724 <xPortStartScheduler+0xdc>)
 80056e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80056ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80056ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005724 <xPortStartScheduler+0xdc>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a0c      	ldr	r2, [pc, #48]	@ (8005724 <xPortStartScheduler+0xdc>)
 80056f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80056f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80056f8:	f000 f8b8 	bl	800586c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80056fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005728 <xPortStartScheduler+0xe0>)
 80056fe:	2200      	movs	r2, #0
 8005700:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005702:	f7ff ff91 	bl	8005628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005706:	f7fe ff6b 	bl	80045e0 <vTaskSwitchContext>
	prvTaskExitError();
 800570a:	f7ff ff4d 	bl	80055a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	e000e400 	.word	0xe000e400
 800571c:	20000ea8 	.word	0x20000ea8
 8005720:	20000eac 	.word	0x20000eac
 8005724:	e000ed20 	.word	0xe000ed20
 8005728:	20000068 	.word	0x20000068

0800572c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
	__asm volatile
 8005732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	607b      	str	r3, [r7, #4]
}
 8005744:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005746:	4b0f      	ldr	r3, [pc, #60]	@ (8005784 <vPortEnterCritical+0x58>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3301      	adds	r3, #1
 800574c:	4a0d      	ldr	r2, [pc, #52]	@ (8005784 <vPortEnterCritical+0x58>)
 800574e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005750:	4b0c      	ldr	r3, [pc, #48]	@ (8005784 <vPortEnterCritical+0x58>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d110      	bne.n	800577a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005758:	4b0b      	ldr	r3, [pc, #44]	@ (8005788 <vPortEnterCritical+0x5c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00b      	beq.n	800577a <vPortEnterCritical+0x4e>
	__asm volatile
 8005762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	603b      	str	r3, [r7, #0]
}
 8005774:	bf00      	nop
 8005776:	bf00      	nop
 8005778:	e7fd      	b.n	8005776 <vPortEnterCritical+0x4a>
	}
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr
 8005784:	20000068 	.word	0x20000068
 8005788:	e000ed04 	.word	0xe000ed04

0800578c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005792:	4b12      	ldr	r3, [pc, #72]	@ (80057dc <vPortExitCritical+0x50>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10b      	bne.n	80057b2 <vPortExitCritical+0x26>
	__asm volatile
 800579a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	607b      	str	r3, [r7, #4]
}
 80057ac:	bf00      	nop
 80057ae:	bf00      	nop
 80057b0:	e7fd      	b.n	80057ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80057b2:	4b0a      	ldr	r3, [pc, #40]	@ (80057dc <vPortExitCritical+0x50>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	4a08      	ldr	r2, [pc, #32]	@ (80057dc <vPortExitCritical+0x50>)
 80057ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80057bc:	4b07      	ldr	r3, [pc, #28]	@ (80057dc <vPortExitCritical+0x50>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d105      	bne.n	80057d0 <vPortExitCritical+0x44>
 80057c4:	2300      	movs	r3, #0
 80057c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	f383 8811 	msr	BASEPRI, r3
}
 80057ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bc80      	pop	{r7}
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	20000068 	.word	0x20000068

080057e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80057e0:	f3ef 8009 	mrs	r0, PSP
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005820 <pxCurrentTCBConst>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80057f0:	6010      	str	r0, [r2, #0]
 80057f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80057f6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80057fa:	f380 8811 	msr	BASEPRI, r0
 80057fe:	f7fe feef 	bl	80045e0 <vTaskSwitchContext>
 8005802:	f04f 0000 	mov.w	r0, #0
 8005806:	f380 8811 	msr	BASEPRI, r0
 800580a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800580e:	6819      	ldr	r1, [r3, #0]
 8005810:	6808      	ldr	r0, [r1, #0]
 8005812:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005816:	f380 8809 	msr	PSP, r0
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	4770      	bx	lr

08005820 <pxCurrentTCBConst>:
 8005820:	2000087c 	.word	0x2000087c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005824:	bf00      	nop
 8005826:	bf00      	nop

08005828 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
	__asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	607b      	str	r3, [r7, #4]
}
 8005840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005842:	f7fe fe13 	bl	800446c <xTaskIncrementTick>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800584c:	4b06      	ldr	r3, [pc, #24]	@ (8005868 <xPortSysTickHandler+0x40>)
 800584e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	2300      	movs	r3, #0
 8005856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	f383 8811 	msr	BASEPRI, r3
}
 800585e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005860:	bf00      	nop
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	e000ed04 	.word	0xe000ed04

0800586c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005870:	4b0a      	ldr	r3, [pc, #40]	@ (800589c <vPortSetupTimerInterrupt+0x30>)
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005876:	4b0a      	ldr	r3, [pc, #40]	@ (80058a0 <vPortSetupTimerInterrupt+0x34>)
 8005878:	2200      	movs	r2, #0
 800587a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800587c:	4b09      	ldr	r3, [pc, #36]	@ (80058a4 <vPortSetupTimerInterrupt+0x38>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a09      	ldr	r2, [pc, #36]	@ (80058a8 <vPortSetupTimerInterrupt+0x3c>)
 8005882:	fba2 2303 	umull	r2, r3, r2, r3
 8005886:	099b      	lsrs	r3, r3, #6
 8005888:	4a08      	ldr	r2, [pc, #32]	@ (80058ac <vPortSetupTimerInterrupt+0x40>)
 800588a:	3b01      	subs	r3, #1
 800588c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800588e:	4b03      	ldr	r3, [pc, #12]	@ (800589c <vPortSetupTimerInterrupt+0x30>)
 8005890:	2207      	movs	r2, #7
 8005892:	601a      	str	r2, [r3, #0]
}
 8005894:	bf00      	nop
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr
 800589c:	e000e010 	.word	0xe000e010
 80058a0:	e000e018 	.word	0xe000e018
 80058a4:	2000005c 	.word	0x2000005c
 80058a8:	10624dd3 	.word	0x10624dd3
 80058ac:	e000e014 	.word	0xe000e014

080058b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80058b6:	f3ef 8305 	mrs	r3, IPSR
 80058ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b0f      	cmp	r3, #15
 80058c0:	d915      	bls.n	80058ee <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80058c2:	4a17      	ldr	r2, [pc, #92]	@ (8005920 <vPortValidateInterruptPriority+0x70>)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4413      	add	r3, r2
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80058cc:	4b15      	ldr	r3, [pc, #84]	@ (8005924 <vPortValidateInterruptPriority+0x74>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	7afa      	ldrb	r2, [r7, #11]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d20b      	bcs.n	80058ee <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	607b      	str	r3, [r7, #4]
}
 80058e8:	bf00      	nop
 80058ea:	bf00      	nop
 80058ec:	e7fd      	b.n	80058ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80058ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005928 <vPortValidateInterruptPriority+0x78>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80058f6:	4b0d      	ldr	r3, [pc, #52]	@ (800592c <vPortValidateInterruptPriority+0x7c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d90b      	bls.n	8005916 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80058fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	603b      	str	r3, [r7, #0]
}
 8005910:	bf00      	nop
 8005912:	bf00      	nop
 8005914:	e7fd      	b.n	8005912 <vPortValidateInterruptPriority+0x62>
	}
 8005916:	bf00      	nop
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	bc80      	pop	{r7}
 800591e:	4770      	bx	lr
 8005920:	e000e3f0 	.word	0xe000e3f0
 8005924:	20000ea8 	.word	0x20000ea8
 8005928:	e000ed0c 	.word	0xe000ed0c
 800592c:	20000eac 	.word	0x20000eac

08005930 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08a      	sub	sp, #40	@ 0x28
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005938:	2300      	movs	r3, #0
 800593a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800593c:	f7fe fcdc 	bl	80042f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005940:	4b5c      	ldr	r3, [pc, #368]	@ (8005ab4 <pvPortMalloc+0x184>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005948:	f000 f924 	bl	8005b94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800594c:	4b5a      	ldr	r3, [pc, #360]	@ (8005ab8 <pvPortMalloc+0x188>)
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4013      	ands	r3, r2
 8005954:	2b00      	cmp	r3, #0
 8005956:	f040 8095 	bne.w	8005a84 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d01e      	beq.n	800599e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005960:	2208      	movs	r2, #8
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4413      	add	r3, r2
 8005966:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	2b00      	cmp	r3, #0
 8005970:	d015      	beq.n	800599e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f023 0307 	bic.w	r3, r3, #7
 8005978:	3308      	adds	r3, #8
 800597a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00b      	beq.n	800599e <pvPortMalloc+0x6e>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	617b      	str	r3, [r7, #20]
}
 8005998:	bf00      	nop
 800599a:	bf00      	nop
 800599c:	e7fd      	b.n	800599a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d06f      	beq.n	8005a84 <pvPortMalloc+0x154>
 80059a4:	4b45      	ldr	r3, [pc, #276]	@ (8005abc <pvPortMalloc+0x18c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d86a      	bhi.n	8005a84 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80059ae:	4b44      	ldr	r3, [pc, #272]	@ (8005ac0 <pvPortMalloc+0x190>)
 80059b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80059b2:	4b43      	ldr	r3, [pc, #268]	@ (8005ac0 <pvPortMalloc+0x190>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059b8:	e004      	b.n	80059c4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80059ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80059be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d903      	bls.n	80059d6 <pvPortMalloc+0xa6>
 80059ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1f1      	bne.n	80059ba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80059d6:	4b37      	ldr	r3, [pc, #220]	@ (8005ab4 <pvPortMalloc+0x184>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059dc:	429a      	cmp	r2, r3
 80059de:	d051      	beq.n	8005a84 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2208      	movs	r2, #8
 80059e6:	4413      	add	r3, r2
 80059e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	1ad2      	subs	r2, r2, r3
 80059fa:	2308      	movs	r3, #8
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d920      	bls.n	8005a44 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4413      	add	r3, r2
 8005a08:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00b      	beq.n	8005a2c <pvPortMalloc+0xfc>
	__asm volatile
 8005a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a18:	f383 8811 	msr	BASEPRI, r3
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	613b      	str	r3, [r7, #16]
}
 8005a26:	bf00      	nop
 8005a28:	bf00      	nop
 8005a2a:	e7fd      	b.n	8005a28 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	1ad2      	subs	r2, r2, r3
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a3e:	69b8      	ldr	r0, [r7, #24]
 8005a40:	f000 f90a 	bl	8005c58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a44:	4b1d      	ldr	r3, [pc, #116]	@ (8005abc <pvPortMalloc+0x18c>)
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8005abc <pvPortMalloc+0x18c>)
 8005a50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a52:	4b1a      	ldr	r3, [pc, #104]	@ (8005abc <pvPortMalloc+0x18c>)
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	4b1b      	ldr	r3, [pc, #108]	@ (8005ac4 <pvPortMalloc+0x194>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d203      	bcs.n	8005a66 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a5e:	4b17      	ldr	r3, [pc, #92]	@ (8005abc <pvPortMalloc+0x18c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a18      	ldr	r2, [pc, #96]	@ (8005ac4 <pvPortMalloc+0x194>)
 8005a64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	4b13      	ldr	r3, [pc, #76]	@ (8005ab8 <pvPortMalloc+0x188>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a76:	2200      	movs	r2, #0
 8005a78:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005a7a:	4b13      	ldr	r3, [pc, #76]	@ (8005ac8 <pvPortMalloc+0x198>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	4a11      	ldr	r2, [pc, #68]	@ (8005ac8 <pvPortMalloc+0x198>)
 8005a82:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a84:	f7fe fc46 	bl	8004314 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00b      	beq.n	8005aaa <pvPortMalloc+0x17a>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	60fb      	str	r3, [r7, #12]
}
 8005aa4:	bf00      	nop
 8005aa6:	bf00      	nop
 8005aa8:	e7fd      	b.n	8005aa6 <pvPortMalloc+0x176>
	return pvReturn;
 8005aaa:	69fb      	ldr	r3, [r7, #28]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3728      	adds	r7, #40	@ 0x28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	20003eb8 	.word	0x20003eb8
 8005ab8:	20003ecc 	.word	0x20003ecc
 8005abc:	20003ebc 	.word	0x20003ebc
 8005ac0:	20003eb0 	.word	0x20003eb0
 8005ac4:	20003ec0 	.word	0x20003ec0
 8005ac8:	20003ec4 	.word	0x20003ec4

08005acc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d04f      	beq.n	8005b7e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ade:	2308      	movs	r3, #8
 8005ae0:	425b      	negs	r3, r3
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	4b25      	ldr	r3, [pc, #148]	@ (8005b88 <vPortFree+0xbc>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4013      	ands	r3, r2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10b      	bne.n	8005b12 <vPortFree+0x46>
	__asm volatile
 8005afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	60fb      	str	r3, [r7, #12]
}
 8005b0c:	bf00      	nop
 8005b0e:	bf00      	nop
 8005b10:	e7fd      	b.n	8005b0e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00b      	beq.n	8005b32 <vPortFree+0x66>
	__asm volatile
 8005b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	60bb      	str	r3, [r7, #8]
}
 8005b2c:	bf00      	nop
 8005b2e:	bf00      	nop
 8005b30:	e7fd      	b.n	8005b2e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	4b14      	ldr	r3, [pc, #80]	@ (8005b88 <vPortFree+0xbc>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d01e      	beq.n	8005b7e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d11a      	bne.n	8005b7e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8005b88 <vPortFree+0xbc>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	43db      	mvns	r3, r3
 8005b52:	401a      	ands	r2, r3
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b58:	f7fe fbce 	bl	80042f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	4b0a      	ldr	r3, [pc, #40]	@ (8005b8c <vPortFree+0xc0>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4413      	add	r3, r2
 8005b66:	4a09      	ldr	r2, [pc, #36]	@ (8005b8c <vPortFree+0xc0>)
 8005b68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b6a:	6938      	ldr	r0, [r7, #16]
 8005b6c:	f000 f874 	bl	8005c58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005b70:	4b07      	ldr	r3, [pc, #28]	@ (8005b90 <vPortFree+0xc4>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3301      	adds	r3, #1
 8005b76:	4a06      	ldr	r2, [pc, #24]	@ (8005b90 <vPortFree+0xc4>)
 8005b78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005b7a:	f7fe fbcb 	bl	8004314 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b7e:	bf00      	nop
 8005b80:	3718      	adds	r7, #24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	20003ecc 	.word	0x20003ecc
 8005b8c:	20003ebc 	.word	0x20003ebc
 8005b90:	20003ec8 	.word	0x20003ec8

08005b94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b9a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8005b9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ba0:	4b27      	ldr	r3, [pc, #156]	@ (8005c40 <prvHeapInit+0xac>)
 8005ba2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f003 0307 	and.w	r3, r3, #7
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00c      	beq.n	8005bc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3307      	adds	r3, #7
 8005bb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0307 	bic.w	r3, r3, #7
 8005bba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8005c40 <prvHeapInit+0xac>)
 8005bc4:	4413      	add	r3, r2
 8005bc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8005c44 <prvHeapInit+0xb0>)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8005c44 <prvHeapInit+0xb0>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	4413      	add	r3, r2
 8005bde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005be0:	2208      	movs	r2, #8
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	1a9b      	subs	r3, r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f023 0307 	bic.w	r3, r3, #7
 8005bee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4a15      	ldr	r2, [pc, #84]	@ (8005c48 <prvHeapInit+0xb4>)
 8005bf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005bf6:	4b14      	ldr	r3, [pc, #80]	@ (8005c48 <prvHeapInit+0xb4>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005bfe:	4b12      	ldr	r3, [pc, #72]	@ (8005c48 <prvHeapInit+0xb4>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	1ad2      	subs	r2, r2, r3
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c14:	4b0c      	ldr	r3, [pc, #48]	@ (8005c48 <prvHeapInit+0xb4>)
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	4a0a      	ldr	r2, [pc, #40]	@ (8005c4c <prvHeapInit+0xb8>)
 8005c22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	4a09      	ldr	r2, [pc, #36]	@ (8005c50 <prvHeapInit+0xbc>)
 8005c2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c2c:	4b09      	ldr	r3, [pc, #36]	@ (8005c54 <prvHeapInit+0xc0>)
 8005c2e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005c32:	601a      	str	r2, [r3, #0]
}
 8005c34:	bf00      	nop
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	20000eb0 	.word	0x20000eb0
 8005c44:	20003eb0 	.word	0x20003eb0
 8005c48:	20003eb8 	.word	0x20003eb8
 8005c4c:	20003ec0 	.word	0x20003ec0
 8005c50:	20003ebc 	.word	0x20003ebc
 8005c54:	20003ecc 	.word	0x20003ecc

08005c58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c60:	4b27      	ldr	r3, [pc, #156]	@ (8005d00 <prvInsertBlockIntoFreeList+0xa8>)
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	e002      	b.n	8005c6c <prvInsertBlockIntoFreeList+0x14>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d8f7      	bhi.n	8005c66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	4413      	add	r3, r2
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d108      	bne.n	8005c9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	441a      	add	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	441a      	add	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d118      	bne.n	8005ce0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	4b14      	ldr	r3, [pc, #80]	@ (8005d04 <prvInsertBlockIntoFreeList+0xac>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d00d      	beq.n	8005cd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	441a      	add	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	e008      	b.n	8005ce8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005d04 <prvInsertBlockIntoFreeList+0xac>)
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	e003      	b.n	8005ce8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d002      	beq.n	8005cf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cf6:	bf00      	nop
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bc80      	pop	{r7}
 8005cfe:	4770      	bx	lr
 8005d00:	20003eb0 	.word	0x20003eb0
 8005d04:	20003eb8 	.word	0x20003eb8

08005d08 <std>:
 8005d08:	2300      	movs	r3, #0
 8005d0a:	b510      	push	{r4, lr}
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8005d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d16:	6083      	str	r3, [r0, #8]
 8005d18:	8181      	strh	r1, [r0, #12]
 8005d1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d1c:	81c2      	strh	r2, [r0, #14]
 8005d1e:	6183      	str	r3, [r0, #24]
 8005d20:	4619      	mov	r1, r3
 8005d22:	2208      	movs	r2, #8
 8005d24:	305c      	adds	r0, #92	@ 0x5c
 8005d26:	f000 f9f9 	bl	800611c <memset>
 8005d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d60 <std+0x58>)
 8005d2c:	6224      	str	r4, [r4, #32]
 8005d2e:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d30:	4b0c      	ldr	r3, [pc, #48]	@ (8005d64 <std+0x5c>)
 8005d32:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d34:	4b0c      	ldr	r3, [pc, #48]	@ (8005d68 <std+0x60>)
 8005d36:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d38:	4b0c      	ldr	r3, [pc, #48]	@ (8005d6c <std+0x64>)
 8005d3a:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d70 <std+0x68>)
 8005d3e:	429c      	cmp	r4, r3
 8005d40:	d006      	beq.n	8005d50 <std+0x48>
 8005d42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d46:	4294      	cmp	r4, r2
 8005d48:	d002      	beq.n	8005d50 <std+0x48>
 8005d4a:	33d0      	adds	r3, #208	@ 0xd0
 8005d4c:	429c      	cmp	r4, r3
 8005d4e:	d105      	bne.n	8005d5c <std+0x54>
 8005d50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d58:	f000 ba58 	b.w	800620c <__retarget_lock_init_recursive>
 8005d5c:	bd10      	pop	{r4, pc}
 8005d5e:	bf00      	nop
 8005d60:	08005f6d 	.word	0x08005f6d
 8005d64:	08005f8f 	.word	0x08005f8f
 8005d68:	08005fc7 	.word	0x08005fc7
 8005d6c:	08005feb 	.word	0x08005feb
 8005d70:	20003ed0 	.word	0x20003ed0

08005d74 <stdio_exit_handler>:
 8005d74:	4a02      	ldr	r2, [pc, #8]	@ (8005d80 <stdio_exit_handler+0xc>)
 8005d76:	4903      	ldr	r1, [pc, #12]	@ (8005d84 <stdio_exit_handler+0x10>)
 8005d78:	4803      	ldr	r0, [pc, #12]	@ (8005d88 <stdio_exit_handler+0x14>)
 8005d7a:	f000 b869 	b.w	8005e50 <_fwalk_sglue>
 8005d7e:	bf00      	nop
 8005d80:	2000006c 	.word	0x2000006c
 8005d84:	08006abd 	.word	0x08006abd
 8005d88:	2000007c 	.word	0x2000007c

08005d8c <cleanup_stdio>:
 8005d8c:	6841      	ldr	r1, [r0, #4]
 8005d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc0 <cleanup_stdio+0x34>)
 8005d90:	b510      	push	{r4, lr}
 8005d92:	4299      	cmp	r1, r3
 8005d94:	4604      	mov	r4, r0
 8005d96:	d001      	beq.n	8005d9c <cleanup_stdio+0x10>
 8005d98:	f000 fe90 	bl	8006abc <_fflush_r>
 8005d9c:	68a1      	ldr	r1, [r4, #8]
 8005d9e:	4b09      	ldr	r3, [pc, #36]	@ (8005dc4 <cleanup_stdio+0x38>)
 8005da0:	4299      	cmp	r1, r3
 8005da2:	d002      	beq.n	8005daa <cleanup_stdio+0x1e>
 8005da4:	4620      	mov	r0, r4
 8005da6:	f000 fe89 	bl	8006abc <_fflush_r>
 8005daa:	68e1      	ldr	r1, [r4, #12]
 8005dac:	4b06      	ldr	r3, [pc, #24]	@ (8005dc8 <cleanup_stdio+0x3c>)
 8005dae:	4299      	cmp	r1, r3
 8005db0:	d004      	beq.n	8005dbc <cleanup_stdio+0x30>
 8005db2:	4620      	mov	r0, r4
 8005db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005db8:	f000 be80 	b.w	8006abc <_fflush_r>
 8005dbc:	bd10      	pop	{r4, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20003ed0 	.word	0x20003ed0
 8005dc4:	20003f38 	.word	0x20003f38
 8005dc8:	20003fa0 	.word	0x20003fa0

08005dcc <global_stdio_init.part.0>:
 8005dcc:	b510      	push	{r4, lr}
 8005dce:	4b0b      	ldr	r3, [pc, #44]	@ (8005dfc <global_stdio_init.part.0+0x30>)
 8005dd0:	4c0b      	ldr	r4, [pc, #44]	@ (8005e00 <global_stdio_init.part.0+0x34>)
 8005dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8005e04 <global_stdio_init.part.0+0x38>)
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	2104      	movs	r1, #4
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f7ff ff94 	bl	8005d08 <std>
 8005de0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005de4:	2201      	movs	r2, #1
 8005de6:	2109      	movs	r1, #9
 8005de8:	f7ff ff8e 	bl	8005d08 <std>
 8005dec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005df0:	2202      	movs	r2, #2
 8005df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005df6:	2112      	movs	r1, #18
 8005df8:	f7ff bf86 	b.w	8005d08 <std>
 8005dfc:	20004008 	.word	0x20004008
 8005e00:	20003ed0 	.word	0x20003ed0
 8005e04:	08005d75 	.word	0x08005d75

08005e08 <__sfp_lock_acquire>:
 8005e08:	4801      	ldr	r0, [pc, #4]	@ (8005e10 <__sfp_lock_acquire+0x8>)
 8005e0a:	f000 ba00 	b.w	800620e <__retarget_lock_acquire_recursive>
 8005e0e:	bf00      	nop
 8005e10:	20004011 	.word	0x20004011

08005e14 <__sfp_lock_release>:
 8005e14:	4801      	ldr	r0, [pc, #4]	@ (8005e1c <__sfp_lock_release+0x8>)
 8005e16:	f000 b9fb 	b.w	8006210 <__retarget_lock_release_recursive>
 8005e1a:	bf00      	nop
 8005e1c:	20004011 	.word	0x20004011

08005e20 <__sinit>:
 8005e20:	b510      	push	{r4, lr}
 8005e22:	4604      	mov	r4, r0
 8005e24:	f7ff fff0 	bl	8005e08 <__sfp_lock_acquire>
 8005e28:	6a23      	ldr	r3, [r4, #32]
 8005e2a:	b11b      	cbz	r3, 8005e34 <__sinit+0x14>
 8005e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e30:	f7ff bff0 	b.w	8005e14 <__sfp_lock_release>
 8005e34:	4b04      	ldr	r3, [pc, #16]	@ (8005e48 <__sinit+0x28>)
 8005e36:	6223      	str	r3, [r4, #32]
 8005e38:	4b04      	ldr	r3, [pc, #16]	@ (8005e4c <__sinit+0x2c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1f5      	bne.n	8005e2c <__sinit+0xc>
 8005e40:	f7ff ffc4 	bl	8005dcc <global_stdio_init.part.0>
 8005e44:	e7f2      	b.n	8005e2c <__sinit+0xc>
 8005e46:	bf00      	nop
 8005e48:	08005d8d 	.word	0x08005d8d
 8005e4c:	20004008 	.word	0x20004008

08005e50 <_fwalk_sglue>:
 8005e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e54:	4607      	mov	r7, r0
 8005e56:	4688      	mov	r8, r1
 8005e58:	4614      	mov	r4, r2
 8005e5a:	2600      	movs	r6, #0
 8005e5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e60:	f1b9 0901 	subs.w	r9, r9, #1
 8005e64:	d505      	bpl.n	8005e72 <_fwalk_sglue+0x22>
 8005e66:	6824      	ldr	r4, [r4, #0]
 8005e68:	2c00      	cmp	r4, #0
 8005e6a:	d1f7      	bne.n	8005e5c <_fwalk_sglue+0xc>
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e72:	89ab      	ldrh	r3, [r5, #12]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d907      	bls.n	8005e88 <_fwalk_sglue+0x38>
 8005e78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	d003      	beq.n	8005e88 <_fwalk_sglue+0x38>
 8005e80:	4629      	mov	r1, r5
 8005e82:	4638      	mov	r0, r7
 8005e84:	47c0      	blx	r8
 8005e86:	4306      	orrs	r6, r0
 8005e88:	3568      	adds	r5, #104	@ 0x68
 8005e8a:	e7e9      	b.n	8005e60 <_fwalk_sglue+0x10>

08005e8c <iprintf>:
 8005e8c:	b40f      	push	{r0, r1, r2, r3}
 8005e8e:	b507      	push	{r0, r1, r2, lr}
 8005e90:	4906      	ldr	r1, [pc, #24]	@ (8005eac <iprintf+0x20>)
 8005e92:	ab04      	add	r3, sp, #16
 8005e94:	6808      	ldr	r0, [r1, #0]
 8005e96:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e9a:	6881      	ldr	r1, [r0, #8]
 8005e9c:	9301      	str	r3, [sp, #4]
 8005e9e:	f000 fae5 	bl	800646c <_vfiprintf_r>
 8005ea2:	b003      	add	sp, #12
 8005ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ea8:	b004      	add	sp, #16
 8005eaa:	4770      	bx	lr
 8005eac:	20000078 	.word	0x20000078

08005eb0 <_puts_r>:
 8005eb0:	6a03      	ldr	r3, [r0, #32]
 8005eb2:	b570      	push	{r4, r5, r6, lr}
 8005eb4:	4605      	mov	r5, r0
 8005eb6:	460e      	mov	r6, r1
 8005eb8:	6884      	ldr	r4, [r0, #8]
 8005eba:	b90b      	cbnz	r3, 8005ec0 <_puts_r+0x10>
 8005ebc:	f7ff ffb0 	bl	8005e20 <__sinit>
 8005ec0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ec2:	07db      	lsls	r3, r3, #31
 8005ec4:	d405      	bmi.n	8005ed2 <_puts_r+0x22>
 8005ec6:	89a3      	ldrh	r3, [r4, #12]
 8005ec8:	0598      	lsls	r0, r3, #22
 8005eca:	d402      	bmi.n	8005ed2 <_puts_r+0x22>
 8005ecc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ece:	f000 f99e 	bl	800620e <__retarget_lock_acquire_recursive>
 8005ed2:	89a3      	ldrh	r3, [r4, #12]
 8005ed4:	0719      	lsls	r1, r3, #28
 8005ed6:	d502      	bpl.n	8005ede <_puts_r+0x2e>
 8005ed8:	6923      	ldr	r3, [r4, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d135      	bne.n	8005f4a <_puts_r+0x9a>
 8005ede:	4621      	mov	r1, r4
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	f000 f8c5 	bl	8006070 <__swsetup_r>
 8005ee6:	b380      	cbz	r0, 8005f4a <_puts_r+0x9a>
 8005ee8:	f04f 35ff 	mov.w	r5, #4294967295
 8005eec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005eee:	07da      	lsls	r2, r3, #31
 8005ef0:	d405      	bmi.n	8005efe <_puts_r+0x4e>
 8005ef2:	89a3      	ldrh	r3, [r4, #12]
 8005ef4:	059b      	lsls	r3, r3, #22
 8005ef6:	d402      	bmi.n	8005efe <_puts_r+0x4e>
 8005ef8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005efa:	f000 f989 	bl	8006210 <__retarget_lock_release_recursive>
 8005efe:	4628      	mov	r0, r5
 8005f00:	bd70      	pop	{r4, r5, r6, pc}
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	da04      	bge.n	8005f10 <_puts_r+0x60>
 8005f06:	69a2      	ldr	r2, [r4, #24]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	dc17      	bgt.n	8005f3c <_puts_r+0x8c>
 8005f0c:	290a      	cmp	r1, #10
 8005f0e:	d015      	beq.n	8005f3c <_puts_r+0x8c>
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	6022      	str	r2, [r4, #0]
 8005f16:	7019      	strb	r1, [r3, #0]
 8005f18:	68a3      	ldr	r3, [r4, #8]
 8005f1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	60a3      	str	r3, [r4, #8]
 8005f22:	2900      	cmp	r1, #0
 8005f24:	d1ed      	bne.n	8005f02 <_puts_r+0x52>
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	da11      	bge.n	8005f4e <_puts_r+0x9e>
 8005f2a:	4622      	mov	r2, r4
 8005f2c:	210a      	movs	r1, #10
 8005f2e:	4628      	mov	r0, r5
 8005f30:	f000 f85f 	bl	8005ff2 <__swbuf_r>
 8005f34:	3001      	adds	r0, #1
 8005f36:	d0d7      	beq.n	8005ee8 <_puts_r+0x38>
 8005f38:	250a      	movs	r5, #10
 8005f3a:	e7d7      	b.n	8005eec <_puts_r+0x3c>
 8005f3c:	4622      	mov	r2, r4
 8005f3e:	4628      	mov	r0, r5
 8005f40:	f000 f857 	bl	8005ff2 <__swbuf_r>
 8005f44:	3001      	adds	r0, #1
 8005f46:	d1e7      	bne.n	8005f18 <_puts_r+0x68>
 8005f48:	e7ce      	b.n	8005ee8 <_puts_r+0x38>
 8005f4a:	3e01      	subs	r6, #1
 8005f4c:	e7e4      	b.n	8005f18 <_puts_r+0x68>
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	6022      	str	r2, [r4, #0]
 8005f54:	220a      	movs	r2, #10
 8005f56:	701a      	strb	r2, [r3, #0]
 8005f58:	e7ee      	b.n	8005f38 <_puts_r+0x88>
	...

08005f5c <puts>:
 8005f5c:	4b02      	ldr	r3, [pc, #8]	@ (8005f68 <puts+0xc>)
 8005f5e:	4601      	mov	r1, r0
 8005f60:	6818      	ldr	r0, [r3, #0]
 8005f62:	f7ff bfa5 	b.w	8005eb0 <_puts_r>
 8005f66:	bf00      	nop
 8005f68:	20000078 	.word	0x20000078

08005f6c <__sread>:
 8005f6c:	b510      	push	{r4, lr}
 8005f6e:	460c      	mov	r4, r1
 8005f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f74:	f000 f8fc 	bl	8006170 <_read_r>
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	bfab      	itete	ge
 8005f7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f7e:	89a3      	ldrhlt	r3, [r4, #12]
 8005f80:	181b      	addge	r3, r3, r0
 8005f82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f86:	bfac      	ite	ge
 8005f88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f8a:	81a3      	strhlt	r3, [r4, #12]
 8005f8c:	bd10      	pop	{r4, pc}

08005f8e <__swrite>:
 8005f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f92:	461f      	mov	r7, r3
 8005f94:	898b      	ldrh	r3, [r1, #12]
 8005f96:	4605      	mov	r5, r0
 8005f98:	05db      	lsls	r3, r3, #23
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	4616      	mov	r6, r2
 8005f9e:	d505      	bpl.n	8005fac <__swrite+0x1e>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fa8:	f000 f8d0 	bl	800614c <_lseek_r>
 8005fac:	89a3      	ldrh	r3, [r4, #12]
 8005fae:	4632      	mov	r2, r6
 8005fb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fb4:	81a3      	strh	r3, [r4, #12]
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	463b      	mov	r3, r7
 8005fba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fc2:	f000 b8e7 	b.w	8006194 <_write_r>

08005fc6 <__sseek>:
 8005fc6:	b510      	push	{r4, lr}
 8005fc8:	460c      	mov	r4, r1
 8005fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fce:	f000 f8bd 	bl	800614c <_lseek_r>
 8005fd2:	1c43      	adds	r3, r0, #1
 8005fd4:	89a3      	ldrh	r3, [r4, #12]
 8005fd6:	bf15      	itete	ne
 8005fd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005fda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005fde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005fe2:	81a3      	strheq	r3, [r4, #12]
 8005fe4:	bf18      	it	ne
 8005fe6:	81a3      	strhne	r3, [r4, #12]
 8005fe8:	bd10      	pop	{r4, pc}

08005fea <__sclose>:
 8005fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fee:	f000 b89d 	b.w	800612c <_close_r>

08005ff2 <__swbuf_r>:
 8005ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff4:	460e      	mov	r6, r1
 8005ff6:	4614      	mov	r4, r2
 8005ff8:	4605      	mov	r5, r0
 8005ffa:	b118      	cbz	r0, 8006004 <__swbuf_r+0x12>
 8005ffc:	6a03      	ldr	r3, [r0, #32]
 8005ffe:	b90b      	cbnz	r3, 8006004 <__swbuf_r+0x12>
 8006000:	f7ff ff0e 	bl	8005e20 <__sinit>
 8006004:	69a3      	ldr	r3, [r4, #24]
 8006006:	60a3      	str	r3, [r4, #8]
 8006008:	89a3      	ldrh	r3, [r4, #12]
 800600a:	071a      	lsls	r2, r3, #28
 800600c:	d501      	bpl.n	8006012 <__swbuf_r+0x20>
 800600e:	6923      	ldr	r3, [r4, #16]
 8006010:	b943      	cbnz	r3, 8006024 <__swbuf_r+0x32>
 8006012:	4621      	mov	r1, r4
 8006014:	4628      	mov	r0, r5
 8006016:	f000 f82b 	bl	8006070 <__swsetup_r>
 800601a:	b118      	cbz	r0, 8006024 <__swbuf_r+0x32>
 800601c:	f04f 37ff 	mov.w	r7, #4294967295
 8006020:	4638      	mov	r0, r7
 8006022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	6922      	ldr	r2, [r4, #16]
 8006028:	b2f6      	uxtb	r6, r6
 800602a:	1a98      	subs	r0, r3, r2
 800602c:	6963      	ldr	r3, [r4, #20]
 800602e:	4637      	mov	r7, r6
 8006030:	4283      	cmp	r3, r0
 8006032:	dc05      	bgt.n	8006040 <__swbuf_r+0x4e>
 8006034:	4621      	mov	r1, r4
 8006036:	4628      	mov	r0, r5
 8006038:	f000 fd40 	bl	8006abc <_fflush_r>
 800603c:	2800      	cmp	r0, #0
 800603e:	d1ed      	bne.n	800601c <__swbuf_r+0x2a>
 8006040:	68a3      	ldr	r3, [r4, #8]
 8006042:	3b01      	subs	r3, #1
 8006044:	60a3      	str	r3, [r4, #8]
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	6022      	str	r2, [r4, #0]
 800604c:	701e      	strb	r6, [r3, #0]
 800604e:	6962      	ldr	r2, [r4, #20]
 8006050:	1c43      	adds	r3, r0, #1
 8006052:	429a      	cmp	r2, r3
 8006054:	d004      	beq.n	8006060 <__swbuf_r+0x6e>
 8006056:	89a3      	ldrh	r3, [r4, #12]
 8006058:	07db      	lsls	r3, r3, #31
 800605a:	d5e1      	bpl.n	8006020 <__swbuf_r+0x2e>
 800605c:	2e0a      	cmp	r6, #10
 800605e:	d1df      	bne.n	8006020 <__swbuf_r+0x2e>
 8006060:	4621      	mov	r1, r4
 8006062:	4628      	mov	r0, r5
 8006064:	f000 fd2a 	bl	8006abc <_fflush_r>
 8006068:	2800      	cmp	r0, #0
 800606a:	d0d9      	beq.n	8006020 <__swbuf_r+0x2e>
 800606c:	e7d6      	b.n	800601c <__swbuf_r+0x2a>
	...

08006070 <__swsetup_r>:
 8006070:	b538      	push	{r3, r4, r5, lr}
 8006072:	4b29      	ldr	r3, [pc, #164]	@ (8006118 <__swsetup_r+0xa8>)
 8006074:	4605      	mov	r5, r0
 8006076:	6818      	ldr	r0, [r3, #0]
 8006078:	460c      	mov	r4, r1
 800607a:	b118      	cbz	r0, 8006084 <__swsetup_r+0x14>
 800607c:	6a03      	ldr	r3, [r0, #32]
 800607e:	b90b      	cbnz	r3, 8006084 <__swsetup_r+0x14>
 8006080:	f7ff fece 	bl	8005e20 <__sinit>
 8006084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006088:	0719      	lsls	r1, r3, #28
 800608a:	d422      	bmi.n	80060d2 <__swsetup_r+0x62>
 800608c:	06da      	lsls	r2, r3, #27
 800608e:	d407      	bmi.n	80060a0 <__swsetup_r+0x30>
 8006090:	2209      	movs	r2, #9
 8006092:	602a      	str	r2, [r5, #0]
 8006094:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006098:	f04f 30ff 	mov.w	r0, #4294967295
 800609c:	81a3      	strh	r3, [r4, #12]
 800609e:	e033      	b.n	8006108 <__swsetup_r+0x98>
 80060a0:	0758      	lsls	r0, r3, #29
 80060a2:	d512      	bpl.n	80060ca <__swsetup_r+0x5a>
 80060a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060a6:	b141      	cbz	r1, 80060ba <__swsetup_r+0x4a>
 80060a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060ac:	4299      	cmp	r1, r3
 80060ae:	d002      	beq.n	80060b6 <__swsetup_r+0x46>
 80060b0:	4628      	mov	r0, r5
 80060b2:	f000 f8bd 	bl	8006230 <_free_r>
 80060b6:	2300      	movs	r3, #0
 80060b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80060ba:	89a3      	ldrh	r3, [r4, #12]
 80060bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80060c0:	81a3      	strh	r3, [r4, #12]
 80060c2:	2300      	movs	r3, #0
 80060c4:	6063      	str	r3, [r4, #4]
 80060c6:	6923      	ldr	r3, [r4, #16]
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	89a3      	ldrh	r3, [r4, #12]
 80060cc:	f043 0308 	orr.w	r3, r3, #8
 80060d0:	81a3      	strh	r3, [r4, #12]
 80060d2:	6923      	ldr	r3, [r4, #16]
 80060d4:	b94b      	cbnz	r3, 80060ea <__swsetup_r+0x7a>
 80060d6:	89a3      	ldrh	r3, [r4, #12]
 80060d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80060dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060e0:	d003      	beq.n	80060ea <__swsetup_r+0x7a>
 80060e2:	4621      	mov	r1, r4
 80060e4:	4628      	mov	r0, r5
 80060e6:	f000 fd36 	bl	8006b56 <__smakebuf_r>
 80060ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ee:	f013 0201 	ands.w	r2, r3, #1
 80060f2:	d00a      	beq.n	800610a <__swsetup_r+0x9a>
 80060f4:	2200      	movs	r2, #0
 80060f6:	60a2      	str	r2, [r4, #8]
 80060f8:	6962      	ldr	r2, [r4, #20]
 80060fa:	4252      	negs	r2, r2
 80060fc:	61a2      	str	r2, [r4, #24]
 80060fe:	6922      	ldr	r2, [r4, #16]
 8006100:	b942      	cbnz	r2, 8006114 <__swsetup_r+0xa4>
 8006102:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006106:	d1c5      	bne.n	8006094 <__swsetup_r+0x24>
 8006108:	bd38      	pop	{r3, r4, r5, pc}
 800610a:	0799      	lsls	r1, r3, #30
 800610c:	bf58      	it	pl
 800610e:	6962      	ldrpl	r2, [r4, #20]
 8006110:	60a2      	str	r2, [r4, #8]
 8006112:	e7f4      	b.n	80060fe <__swsetup_r+0x8e>
 8006114:	2000      	movs	r0, #0
 8006116:	e7f7      	b.n	8006108 <__swsetup_r+0x98>
 8006118:	20000078 	.word	0x20000078

0800611c <memset>:
 800611c:	4603      	mov	r3, r0
 800611e:	4402      	add	r2, r0
 8006120:	4293      	cmp	r3, r2
 8006122:	d100      	bne.n	8006126 <memset+0xa>
 8006124:	4770      	bx	lr
 8006126:	f803 1b01 	strb.w	r1, [r3], #1
 800612a:	e7f9      	b.n	8006120 <memset+0x4>

0800612c <_close_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	2300      	movs	r3, #0
 8006130:	4d05      	ldr	r5, [pc, #20]	@ (8006148 <_close_r+0x1c>)
 8006132:	4604      	mov	r4, r0
 8006134:	4608      	mov	r0, r1
 8006136:	602b      	str	r3, [r5, #0]
 8006138:	f7fb f8fa 	bl	8001330 <_close>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	d102      	bne.n	8006146 <_close_r+0x1a>
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	b103      	cbz	r3, 8006146 <_close_r+0x1a>
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	bd38      	pop	{r3, r4, r5, pc}
 8006148:	2000400c 	.word	0x2000400c

0800614c <_lseek_r>:
 800614c:	b538      	push	{r3, r4, r5, lr}
 800614e:	4604      	mov	r4, r0
 8006150:	4608      	mov	r0, r1
 8006152:	4611      	mov	r1, r2
 8006154:	2200      	movs	r2, #0
 8006156:	4d05      	ldr	r5, [pc, #20]	@ (800616c <_lseek_r+0x20>)
 8006158:	602a      	str	r2, [r5, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	f7fb f90c 	bl	8001378 <_lseek>
 8006160:	1c43      	adds	r3, r0, #1
 8006162:	d102      	bne.n	800616a <_lseek_r+0x1e>
 8006164:	682b      	ldr	r3, [r5, #0]
 8006166:	b103      	cbz	r3, 800616a <_lseek_r+0x1e>
 8006168:	6023      	str	r3, [r4, #0]
 800616a:	bd38      	pop	{r3, r4, r5, pc}
 800616c:	2000400c 	.word	0x2000400c

08006170 <_read_r>:
 8006170:	b538      	push	{r3, r4, r5, lr}
 8006172:	4604      	mov	r4, r0
 8006174:	4608      	mov	r0, r1
 8006176:	4611      	mov	r1, r2
 8006178:	2200      	movs	r2, #0
 800617a:	4d05      	ldr	r5, [pc, #20]	@ (8006190 <_read_r+0x20>)
 800617c:	602a      	str	r2, [r5, #0]
 800617e:	461a      	mov	r2, r3
 8006180:	f7fb f8b9 	bl	80012f6 <_read>
 8006184:	1c43      	adds	r3, r0, #1
 8006186:	d102      	bne.n	800618e <_read_r+0x1e>
 8006188:	682b      	ldr	r3, [r5, #0]
 800618a:	b103      	cbz	r3, 800618e <_read_r+0x1e>
 800618c:	6023      	str	r3, [r4, #0]
 800618e:	bd38      	pop	{r3, r4, r5, pc}
 8006190:	2000400c 	.word	0x2000400c

08006194 <_write_r>:
 8006194:	b538      	push	{r3, r4, r5, lr}
 8006196:	4604      	mov	r4, r0
 8006198:	4608      	mov	r0, r1
 800619a:	4611      	mov	r1, r2
 800619c:	2200      	movs	r2, #0
 800619e:	4d05      	ldr	r5, [pc, #20]	@ (80061b4 <_write_r+0x20>)
 80061a0:	602a      	str	r2, [r5, #0]
 80061a2:	461a      	mov	r2, r3
 80061a4:	f7fa ffe8 	bl	8001178 <_write>
 80061a8:	1c43      	adds	r3, r0, #1
 80061aa:	d102      	bne.n	80061b2 <_write_r+0x1e>
 80061ac:	682b      	ldr	r3, [r5, #0]
 80061ae:	b103      	cbz	r3, 80061b2 <_write_r+0x1e>
 80061b0:	6023      	str	r3, [r4, #0]
 80061b2:	bd38      	pop	{r3, r4, r5, pc}
 80061b4:	2000400c 	.word	0x2000400c

080061b8 <__errno>:
 80061b8:	4b01      	ldr	r3, [pc, #4]	@ (80061c0 <__errno+0x8>)
 80061ba:	6818      	ldr	r0, [r3, #0]
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	20000078 	.word	0x20000078

080061c4 <__libc_init_array>:
 80061c4:	b570      	push	{r4, r5, r6, lr}
 80061c6:	2600      	movs	r6, #0
 80061c8:	4d0c      	ldr	r5, [pc, #48]	@ (80061fc <__libc_init_array+0x38>)
 80061ca:	4c0d      	ldr	r4, [pc, #52]	@ (8006200 <__libc_init_array+0x3c>)
 80061cc:	1b64      	subs	r4, r4, r5
 80061ce:	10a4      	asrs	r4, r4, #2
 80061d0:	42a6      	cmp	r6, r4
 80061d2:	d109      	bne.n	80061e8 <__libc_init_array+0x24>
 80061d4:	f000 fd3c 	bl	8006c50 <_init>
 80061d8:	2600      	movs	r6, #0
 80061da:	4d0a      	ldr	r5, [pc, #40]	@ (8006204 <__libc_init_array+0x40>)
 80061dc:	4c0a      	ldr	r4, [pc, #40]	@ (8006208 <__libc_init_array+0x44>)
 80061de:	1b64      	subs	r4, r4, r5
 80061e0:	10a4      	asrs	r4, r4, #2
 80061e2:	42a6      	cmp	r6, r4
 80061e4:	d105      	bne.n	80061f2 <__libc_init_array+0x2e>
 80061e6:	bd70      	pop	{r4, r5, r6, pc}
 80061e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ec:	4798      	blx	r3
 80061ee:	3601      	adds	r6, #1
 80061f0:	e7ee      	b.n	80061d0 <__libc_init_array+0xc>
 80061f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80061f6:	4798      	blx	r3
 80061f8:	3601      	adds	r6, #1
 80061fa:	e7f2      	b.n	80061e2 <__libc_init_array+0x1e>
 80061fc:	08006fec 	.word	0x08006fec
 8006200:	08006fec 	.word	0x08006fec
 8006204:	08006fec 	.word	0x08006fec
 8006208:	08006ff0 	.word	0x08006ff0

0800620c <__retarget_lock_init_recursive>:
 800620c:	4770      	bx	lr

0800620e <__retarget_lock_acquire_recursive>:
 800620e:	4770      	bx	lr

08006210 <__retarget_lock_release_recursive>:
 8006210:	4770      	bx	lr

08006212 <memcpy>:
 8006212:	440a      	add	r2, r1
 8006214:	4291      	cmp	r1, r2
 8006216:	f100 33ff 	add.w	r3, r0, #4294967295
 800621a:	d100      	bne.n	800621e <memcpy+0xc>
 800621c:	4770      	bx	lr
 800621e:	b510      	push	{r4, lr}
 8006220:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006224:	4291      	cmp	r1, r2
 8006226:	f803 4f01 	strb.w	r4, [r3, #1]!
 800622a:	d1f9      	bne.n	8006220 <memcpy+0xe>
 800622c:	bd10      	pop	{r4, pc}
	...

08006230 <_free_r>:
 8006230:	b538      	push	{r3, r4, r5, lr}
 8006232:	4605      	mov	r5, r0
 8006234:	2900      	cmp	r1, #0
 8006236:	d040      	beq.n	80062ba <_free_r+0x8a>
 8006238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800623c:	1f0c      	subs	r4, r1, #4
 800623e:	2b00      	cmp	r3, #0
 8006240:	bfb8      	it	lt
 8006242:	18e4      	addlt	r4, r4, r3
 8006244:	f000 f8de 	bl	8006404 <__malloc_lock>
 8006248:	4a1c      	ldr	r2, [pc, #112]	@ (80062bc <_free_r+0x8c>)
 800624a:	6813      	ldr	r3, [r2, #0]
 800624c:	b933      	cbnz	r3, 800625c <_free_r+0x2c>
 800624e:	6063      	str	r3, [r4, #4]
 8006250:	6014      	str	r4, [r2, #0]
 8006252:	4628      	mov	r0, r5
 8006254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006258:	f000 b8da 	b.w	8006410 <__malloc_unlock>
 800625c:	42a3      	cmp	r3, r4
 800625e:	d908      	bls.n	8006272 <_free_r+0x42>
 8006260:	6820      	ldr	r0, [r4, #0]
 8006262:	1821      	adds	r1, r4, r0
 8006264:	428b      	cmp	r3, r1
 8006266:	bf01      	itttt	eq
 8006268:	6819      	ldreq	r1, [r3, #0]
 800626a:	685b      	ldreq	r3, [r3, #4]
 800626c:	1809      	addeq	r1, r1, r0
 800626e:	6021      	streq	r1, [r4, #0]
 8006270:	e7ed      	b.n	800624e <_free_r+0x1e>
 8006272:	461a      	mov	r2, r3
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	b10b      	cbz	r3, 800627c <_free_r+0x4c>
 8006278:	42a3      	cmp	r3, r4
 800627a:	d9fa      	bls.n	8006272 <_free_r+0x42>
 800627c:	6811      	ldr	r1, [r2, #0]
 800627e:	1850      	adds	r0, r2, r1
 8006280:	42a0      	cmp	r0, r4
 8006282:	d10b      	bne.n	800629c <_free_r+0x6c>
 8006284:	6820      	ldr	r0, [r4, #0]
 8006286:	4401      	add	r1, r0
 8006288:	1850      	adds	r0, r2, r1
 800628a:	4283      	cmp	r3, r0
 800628c:	6011      	str	r1, [r2, #0]
 800628e:	d1e0      	bne.n	8006252 <_free_r+0x22>
 8006290:	6818      	ldr	r0, [r3, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	4408      	add	r0, r1
 8006296:	6010      	str	r0, [r2, #0]
 8006298:	6053      	str	r3, [r2, #4]
 800629a:	e7da      	b.n	8006252 <_free_r+0x22>
 800629c:	d902      	bls.n	80062a4 <_free_r+0x74>
 800629e:	230c      	movs	r3, #12
 80062a0:	602b      	str	r3, [r5, #0]
 80062a2:	e7d6      	b.n	8006252 <_free_r+0x22>
 80062a4:	6820      	ldr	r0, [r4, #0]
 80062a6:	1821      	adds	r1, r4, r0
 80062a8:	428b      	cmp	r3, r1
 80062aa:	bf01      	itttt	eq
 80062ac:	6819      	ldreq	r1, [r3, #0]
 80062ae:	685b      	ldreq	r3, [r3, #4]
 80062b0:	1809      	addeq	r1, r1, r0
 80062b2:	6021      	streq	r1, [r4, #0]
 80062b4:	6063      	str	r3, [r4, #4]
 80062b6:	6054      	str	r4, [r2, #4]
 80062b8:	e7cb      	b.n	8006252 <_free_r+0x22>
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
 80062bc:	20004018 	.word	0x20004018

080062c0 <sbrk_aligned>:
 80062c0:	b570      	push	{r4, r5, r6, lr}
 80062c2:	4e0f      	ldr	r6, [pc, #60]	@ (8006300 <sbrk_aligned+0x40>)
 80062c4:	460c      	mov	r4, r1
 80062c6:	6831      	ldr	r1, [r6, #0]
 80062c8:	4605      	mov	r5, r0
 80062ca:	b911      	cbnz	r1, 80062d2 <sbrk_aligned+0x12>
 80062cc:	f000 fca2 	bl	8006c14 <_sbrk_r>
 80062d0:	6030      	str	r0, [r6, #0]
 80062d2:	4621      	mov	r1, r4
 80062d4:	4628      	mov	r0, r5
 80062d6:	f000 fc9d 	bl	8006c14 <_sbrk_r>
 80062da:	1c43      	adds	r3, r0, #1
 80062dc:	d103      	bne.n	80062e6 <sbrk_aligned+0x26>
 80062de:	f04f 34ff 	mov.w	r4, #4294967295
 80062e2:	4620      	mov	r0, r4
 80062e4:	bd70      	pop	{r4, r5, r6, pc}
 80062e6:	1cc4      	adds	r4, r0, #3
 80062e8:	f024 0403 	bic.w	r4, r4, #3
 80062ec:	42a0      	cmp	r0, r4
 80062ee:	d0f8      	beq.n	80062e2 <sbrk_aligned+0x22>
 80062f0:	1a21      	subs	r1, r4, r0
 80062f2:	4628      	mov	r0, r5
 80062f4:	f000 fc8e 	bl	8006c14 <_sbrk_r>
 80062f8:	3001      	adds	r0, #1
 80062fa:	d1f2      	bne.n	80062e2 <sbrk_aligned+0x22>
 80062fc:	e7ef      	b.n	80062de <sbrk_aligned+0x1e>
 80062fe:	bf00      	nop
 8006300:	20004014 	.word	0x20004014

08006304 <_malloc_r>:
 8006304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006308:	1ccd      	adds	r5, r1, #3
 800630a:	f025 0503 	bic.w	r5, r5, #3
 800630e:	3508      	adds	r5, #8
 8006310:	2d0c      	cmp	r5, #12
 8006312:	bf38      	it	cc
 8006314:	250c      	movcc	r5, #12
 8006316:	2d00      	cmp	r5, #0
 8006318:	4606      	mov	r6, r0
 800631a:	db01      	blt.n	8006320 <_malloc_r+0x1c>
 800631c:	42a9      	cmp	r1, r5
 800631e:	d904      	bls.n	800632a <_malloc_r+0x26>
 8006320:	230c      	movs	r3, #12
 8006322:	6033      	str	r3, [r6, #0]
 8006324:	2000      	movs	r0, #0
 8006326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800632a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006400 <_malloc_r+0xfc>
 800632e:	f000 f869 	bl	8006404 <__malloc_lock>
 8006332:	f8d8 3000 	ldr.w	r3, [r8]
 8006336:	461c      	mov	r4, r3
 8006338:	bb44      	cbnz	r4, 800638c <_malloc_r+0x88>
 800633a:	4629      	mov	r1, r5
 800633c:	4630      	mov	r0, r6
 800633e:	f7ff ffbf 	bl	80062c0 <sbrk_aligned>
 8006342:	1c43      	adds	r3, r0, #1
 8006344:	4604      	mov	r4, r0
 8006346:	d158      	bne.n	80063fa <_malloc_r+0xf6>
 8006348:	f8d8 4000 	ldr.w	r4, [r8]
 800634c:	4627      	mov	r7, r4
 800634e:	2f00      	cmp	r7, #0
 8006350:	d143      	bne.n	80063da <_malloc_r+0xd6>
 8006352:	2c00      	cmp	r4, #0
 8006354:	d04b      	beq.n	80063ee <_malloc_r+0xea>
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	4639      	mov	r1, r7
 800635a:	4630      	mov	r0, r6
 800635c:	eb04 0903 	add.w	r9, r4, r3
 8006360:	f000 fc58 	bl	8006c14 <_sbrk_r>
 8006364:	4581      	cmp	r9, r0
 8006366:	d142      	bne.n	80063ee <_malloc_r+0xea>
 8006368:	6821      	ldr	r1, [r4, #0]
 800636a:	4630      	mov	r0, r6
 800636c:	1a6d      	subs	r5, r5, r1
 800636e:	4629      	mov	r1, r5
 8006370:	f7ff ffa6 	bl	80062c0 <sbrk_aligned>
 8006374:	3001      	adds	r0, #1
 8006376:	d03a      	beq.n	80063ee <_malloc_r+0xea>
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	442b      	add	r3, r5
 800637c:	6023      	str	r3, [r4, #0]
 800637e:	f8d8 3000 	ldr.w	r3, [r8]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	bb62      	cbnz	r2, 80063e0 <_malloc_r+0xdc>
 8006386:	f8c8 7000 	str.w	r7, [r8]
 800638a:	e00f      	b.n	80063ac <_malloc_r+0xa8>
 800638c:	6822      	ldr	r2, [r4, #0]
 800638e:	1b52      	subs	r2, r2, r5
 8006390:	d420      	bmi.n	80063d4 <_malloc_r+0xd0>
 8006392:	2a0b      	cmp	r2, #11
 8006394:	d917      	bls.n	80063c6 <_malloc_r+0xc2>
 8006396:	1961      	adds	r1, r4, r5
 8006398:	42a3      	cmp	r3, r4
 800639a:	6025      	str	r5, [r4, #0]
 800639c:	bf18      	it	ne
 800639e:	6059      	strne	r1, [r3, #4]
 80063a0:	6863      	ldr	r3, [r4, #4]
 80063a2:	bf08      	it	eq
 80063a4:	f8c8 1000 	streq.w	r1, [r8]
 80063a8:	5162      	str	r2, [r4, r5]
 80063aa:	604b      	str	r3, [r1, #4]
 80063ac:	4630      	mov	r0, r6
 80063ae:	f000 f82f 	bl	8006410 <__malloc_unlock>
 80063b2:	f104 000b 	add.w	r0, r4, #11
 80063b6:	1d23      	adds	r3, r4, #4
 80063b8:	f020 0007 	bic.w	r0, r0, #7
 80063bc:	1ac2      	subs	r2, r0, r3
 80063be:	bf1c      	itt	ne
 80063c0:	1a1b      	subne	r3, r3, r0
 80063c2:	50a3      	strne	r3, [r4, r2]
 80063c4:	e7af      	b.n	8006326 <_malloc_r+0x22>
 80063c6:	6862      	ldr	r2, [r4, #4]
 80063c8:	42a3      	cmp	r3, r4
 80063ca:	bf0c      	ite	eq
 80063cc:	f8c8 2000 	streq.w	r2, [r8]
 80063d0:	605a      	strne	r2, [r3, #4]
 80063d2:	e7eb      	b.n	80063ac <_malloc_r+0xa8>
 80063d4:	4623      	mov	r3, r4
 80063d6:	6864      	ldr	r4, [r4, #4]
 80063d8:	e7ae      	b.n	8006338 <_malloc_r+0x34>
 80063da:	463c      	mov	r4, r7
 80063dc:	687f      	ldr	r7, [r7, #4]
 80063de:	e7b6      	b.n	800634e <_malloc_r+0x4a>
 80063e0:	461a      	mov	r2, r3
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	42a3      	cmp	r3, r4
 80063e6:	d1fb      	bne.n	80063e0 <_malloc_r+0xdc>
 80063e8:	2300      	movs	r3, #0
 80063ea:	6053      	str	r3, [r2, #4]
 80063ec:	e7de      	b.n	80063ac <_malloc_r+0xa8>
 80063ee:	230c      	movs	r3, #12
 80063f0:	4630      	mov	r0, r6
 80063f2:	6033      	str	r3, [r6, #0]
 80063f4:	f000 f80c 	bl	8006410 <__malloc_unlock>
 80063f8:	e794      	b.n	8006324 <_malloc_r+0x20>
 80063fa:	6005      	str	r5, [r0, #0]
 80063fc:	e7d6      	b.n	80063ac <_malloc_r+0xa8>
 80063fe:	bf00      	nop
 8006400:	20004018 	.word	0x20004018

08006404 <__malloc_lock>:
 8006404:	4801      	ldr	r0, [pc, #4]	@ (800640c <__malloc_lock+0x8>)
 8006406:	f7ff bf02 	b.w	800620e <__retarget_lock_acquire_recursive>
 800640a:	bf00      	nop
 800640c:	20004010 	.word	0x20004010

08006410 <__malloc_unlock>:
 8006410:	4801      	ldr	r0, [pc, #4]	@ (8006418 <__malloc_unlock+0x8>)
 8006412:	f7ff befd 	b.w	8006210 <__retarget_lock_release_recursive>
 8006416:	bf00      	nop
 8006418:	20004010 	.word	0x20004010

0800641c <__sfputc_r>:
 800641c:	6893      	ldr	r3, [r2, #8]
 800641e:	b410      	push	{r4}
 8006420:	3b01      	subs	r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	6093      	str	r3, [r2, #8]
 8006426:	da07      	bge.n	8006438 <__sfputc_r+0x1c>
 8006428:	6994      	ldr	r4, [r2, #24]
 800642a:	42a3      	cmp	r3, r4
 800642c:	db01      	blt.n	8006432 <__sfputc_r+0x16>
 800642e:	290a      	cmp	r1, #10
 8006430:	d102      	bne.n	8006438 <__sfputc_r+0x1c>
 8006432:	bc10      	pop	{r4}
 8006434:	f7ff bddd 	b.w	8005ff2 <__swbuf_r>
 8006438:	6813      	ldr	r3, [r2, #0]
 800643a:	1c58      	adds	r0, r3, #1
 800643c:	6010      	str	r0, [r2, #0]
 800643e:	7019      	strb	r1, [r3, #0]
 8006440:	4608      	mov	r0, r1
 8006442:	bc10      	pop	{r4}
 8006444:	4770      	bx	lr

08006446 <__sfputs_r>:
 8006446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006448:	4606      	mov	r6, r0
 800644a:	460f      	mov	r7, r1
 800644c:	4614      	mov	r4, r2
 800644e:	18d5      	adds	r5, r2, r3
 8006450:	42ac      	cmp	r4, r5
 8006452:	d101      	bne.n	8006458 <__sfputs_r+0x12>
 8006454:	2000      	movs	r0, #0
 8006456:	e007      	b.n	8006468 <__sfputs_r+0x22>
 8006458:	463a      	mov	r2, r7
 800645a:	4630      	mov	r0, r6
 800645c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006460:	f7ff ffdc 	bl	800641c <__sfputc_r>
 8006464:	1c43      	adds	r3, r0, #1
 8006466:	d1f3      	bne.n	8006450 <__sfputs_r+0xa>
 8006468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800646c <_vfiprintf_r>:
 800646c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006470:	460d      	mov	r5, r1
 8006472:	4614      	mov	r4, r2
 8006474:	4698      	mov	r8, r3
 8006476:	4606      	mov	r6, r0
 8006478:	b09d      	sub	sp, #116	@ 0x74
 800647a:	b118      	cbz	r0, 8006484 <_vfiprintf_r+0x18>
 800647c:	6a03      	ldr	r3, [r0, #32]
 800647e:	b90b      	cbnz	r3, 8006484 <_vfiprintf_r+0x18>
 8006480:	f7ff fcce 	bl	8005e20 <__sinit>
 8006484:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006486:	07d9      	lsls	r1, r3, #31
 8006488:	d405      	bmi.n	8006496 <_vfiprintf_r+0x2a>
 800648a:	89ab      	ldrh	r3, [r5, #12]
 800648c:	059a      	lsls	r2, r3, #22
 800648e:	d402      	bmi.n	8006496 <_vfiprintf_r+0x2a>
 8006490:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006492:	f7ff febc 	bl	800620e <__retarget_lock_acquire_recursive>
 8006496:	89ab      	ldrh	r3, [r5, #12]
 8006498:	071b      	lsls	r3, r3, #28
 800649a:	d501      	bpl.n	80064a0 <_vfiprintf_r+0x34>
 800649c:	692b      	ldr	r3, [r5, #16]
 800649e:	b99b      	cbnz	r3, 80064c8 <_vfiprintf_r+0x5c>
 80064a0:	4629      	mov	r1, r5
 80064a2:	4630      	mov	r0, r6
 80064a4:	f7ff fde4 	bl	8006070 <__swsetup_r>
 80064a8:	b170      	cbz	r0, 80064c8 <_vfiprintf_r+0x5c>
 80064aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064ac:	07dc      	lsls	r4, r3, #31
 80064ae:	d504      	bpl.n	80064ba <_vfiprintf_r+0x4e>
 80064b0:	f04f 30ff 	mov.w	r0, #4294967295
 80064b4:	b01d      	add	sp, #116	@ 0x74
 80064b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ba:	89ab      	ldrh	r3, [r5, #12]
 80064bc:	0598      	lsls	r0, r3, #22
 80064be:	d4f7      	bmi.n	80064b0 <_vfiprintf_r+0x44>
 80064c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064c2:	f7ff fea5 	bl	8006210 <__retarget_lock_release_recursive>
 80064c6:	e7f3      	b.n	80064b0 <_vfiprintf_r+0x44>
 80064c8:	2300      	movs	r3, #0
 80064ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80064cc:	2320      	movs	r3, #32
 80064ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80064d2:	2330      	movs	r3, #48	@ 0x30
 80064d4:	f04f 0901 	mov.w	r9, #1
 80064d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80064dc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006688 <_vfiprintf_r+0x21c>
 80064e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80064e4:	4623      	mov	r3, r4
 80064e6:	469a      	mov	sl, r3
 80064e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064ec:	b10a      	cbz	r2, 80064f2 <_vfiprintf_r+0x86>
 80064ee:	2a25      	cmp	r2, #37	@ 0x25
 80064f0:	d1f9      	bne.n	80064e6 <_vfiprintf_r+0x7a>
 80064f2:	ebba 0b04 	subs.w	fp, sl, r4
 80064f6:	d00b      	beq.n	8006510 <_vfiprintf_r+0xa4>
 80064f8:	465b      	mov	r3, fp
 80064fa:	4622      	mov	r2, r4
 80064fc:	4629      	mov	r1, r5
 80064fe:	4630      	mov	r0, r6
 8006500:	f7ff ffa1 	bl	8006446 <__sfputs_r>
 8006504:	3001      	adds	r0, #1
 8006506:	f000 80a7 	beq.w	8006658 <_vfiprintf_r+0x1ec>
 800650a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800650c:	445a      	add	r2, fp
 800650e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006510:	f89a 3000 	ldrb.w	r3, [sl]
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 809f 	beq.w	8006658 <_vfiprintf_r+0x1ec>
 800651a:	2300      	movs	r3, #0
 800651c:	f04f 32ff 	mov.w	r2, #4294967295
 8006520:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006524:	f10a 0a01 	add.w	sl, sl, #1
 8006528:	9304      	str	r3, [sp, #16]
 800652a:	9307      	str	r3, [sp, #28]
 800652c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006530:	931a      	str	r3, [sp, #104]	@ 0x68
 8006532:	4654      	mov	r4, sl
 8006534:	2205      	movs	r2, #5
 8006536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800653a:	4853      	ldr	r0, [pc, #332]	@ (8006688 <_vfiprintf_r+0x21c>)
 800653c:	f000 fb7a 	bl	8006c34 <memchr>
 8006540:	9a04      	ldr	r2, [sp, #16]
 8006542:	b9d8      	cbnz	r0, 800657c <_vfiprintf_r+0x110>
 8006544:	06d1      	lsls	r1, r2, #27
 8006546:	bf44      	itt	mi
 8006548:	2320      	movmi	r3, #32
 800654a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800654e:	0713      	lsls	r3, r2, #28
 8006550:	bf44      	itt	mi
 8006552:	232b      	movmi	r3, #43	@ 0x2b
 8006554:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006558:	f89a 3000 	ldrb.w	r3, [sl]
 800655c:	2b2a      	cmp	r3, #42	@ 0x2a
 800655e:	d015      	beq.n	800658c <_vfiprintf_r+0x120>
 8006560:	4654      	mov	r4, sl
 8006562:	2000      	movs	r0, #0
 8006564:	f04f 0c0a 	mov.w	ip, #10
 8006568:	9a07      	ldr	r2, [sp, #28]
 800656a:	4621      	mov	r1, r4
 800656c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006570:	3b30      	subs	r3, #48	@ 0x30
 8006572:	2b09      	cmp	r3, #9
 8006574:	d94b      	bls.n	800660e <_vfiprintf_r+0x1a2>
 8006576:	b1b0      	cbz	r0, 80065a6 <_vfiprintf_r+0x13a>
 8006578:	9207      	str	r2, [sp, #28]
 800657a:	e014      	b.n	80065a6 <_vfiprintf_r+0x13a>
 800657c:	eba0 0308 	sub.w	r3, r0, r8
 8006580:	fa09 f303 	lsl.w	r3, r9, r3
 8006584:	4313      	orrs	r3, r2
 8006586:	46a2      	mov	sl, r4
 8006588:	9304      	str	r3, [sp, #16]
 800658a:	e7d2      	b.n	8006532 <_vfiprintf_r+0xc6>
 800658c:	9b03      	ldr	r3, [sp, #12]
 800658e:	1d19      	adds	r1, r3, #4
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	9103      	str	r1, [sp, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	bfbb      	ittet	lt
 8006598:	425b      	neglt	r3, r3
 800659a:	f042 0202 	orrlt.w	r2, r2, #2
 800659e:	9307      	strge	r3, [sp, #28]
 80065a0:	9307      	strlt	r3, [sp, #28]
 80065a2:	bfb8      	it	lt
 80065a4:	9204      	strlt	r2, [sp, #16]
 80065a6:	7823      	ldrb	r3, [r4, #0]
 80065a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80065aa:	d10a      	bne.n	80065c2 <_vfiprintf_r+0x156>
 80065ac:	7863      	ldrb	r3, [r4, #1]
 80065ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80065b0:	d132      	bne.n	8006618 <_vfiprintf_r+0x1ac>
 80065b2:	9b03      	ldr	r3, [sp, #12]
 80065b4:	3402      	adds	r4, #2
 80065b6:	1d1a      	adds	r2, r3, #4
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	9203      	str	r2, [sp, #12]
 80065bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80065c0:	9305      	str	r3, [sp, #20]
 80065c2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800668c <_vfiprintf_r+0x220>
 80065c6:	2203      	movs	r2, #3
 80065c8:	4650      	mov	r0, sl
 80065ca:	7821      	ldrb	r1, [r4, #0]
 80065cc:	f000 fb32 	bl	8006c34 <memchr>
 80065d0:	b138      	cbz	r0, 80065e2 <_vfiprintf_r+0x176>
 80065d2:	2240      	movs	r2, #64	@ 0x40
 80065d4:	9b04      	ldr	r3, [sp, #16]
 80065d6:	eba0 000a 	sub.w	r0, r0, sl
 80065da:	4082      	lsls	r2, r0
 80065dc:	4313      	orrs	r3, r2
 80065de:	3401      	adds	r4, #1
 80065e0:	9304      	str	r3, [sp, #16]
 80065e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065e6:	2206      	movs	r2, #6
 80065e8:	4829      	ldr	r0, [pc, #164]	@ (8006690 <_vfiprintf_r+0x224>)
 80065ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80065ee:	f000 fb21 	bl	8006c34 <memchr>
 80065f2:	2800      	cmp	r0, #0
 80065f4:	d03f      	beq.n	8006676 <_vfiprintf_r+0x20a>
 80065f6:	4b27      	ldr	r3, [pc, #156]	@ (8006694 <_vfiprintf_r+0x228>)
 80065f8:	bb1b      	cbnz	r3, 8006642 <_vfiprintf_r+0x1d6>
 80065fa:	9b03      	ldr	r3, [sp, #12]
 80065fc:	3307      	adds	r3, #7
 80065fe:	f023 0307 	bic.w	r3, r3, #7
 8006602:	3308      	adds	r3, #8
 8006604:	9303      	str	r3, [sp, #12]
 8006606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006608:	443b      	add	r3, r7
 800660a:	9309      	str	r3, [sp, #36]	@ 0x24
 800660c:	e76a      	b.n	80064e4 <_vfiprintf_r+0x78>
 800660e:	460c      	mov	r4, r1
 8006610:	2001      	movs	r0, #1
 8006612:	fb0c 3202 	mla	r2, ip, r2, r3
 8006616:	e7a8      	b.n	800656a <_vfiprintf_r+0xfe>
 8006618:	2300      	movs	r3, #0
 800661a:	f04f 0c0a 	mov.w	ip, #10
 800661e:	4619      	mov	r1, r3
 8006620:	3401      	adds	r4, #1
 8006622:	9305      	str	r3, [sp, #20]
 8006624:	4620      	mov	r0, r4
 8006626:	f810 2b01 	ldrb.w	r2, [r0], #1
 800662a:	3a30      	subs	r2, #48	@ 0x30
 800662c:	2a09      	cmp	r2, #9
 800662e:	d903      	bls.n	8006638 <_vfiprintf_r+0x1cc>
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0c6      	beq.n	80065c2 <_vfiprintf_r+0x156>
 8006634:	9105      	str	r1, [sp, #20]
 8006636:	e7c4      	b.n	80065c2 <_vfiprintf_r+0x156>
 8006638:	4604      	mov	r4, r0
 800663a:	2301      	movs	r3, #1
 800663c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006640:	e7f0      	b.n	8006624 <_vfiprintf_r+0x1b8>
 8006642:	ab03      	add	r3, sp, #12
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	462a      	mov	r2, r5
 8006648:	4630      	mov	r0, r6
 800664a:	4b13      	ldr	r3, [pc, #76]	@ (8006698 <_vfiprintf_r+0x22c>)
 800664c:	a904      	add	r1, sp, #16
 800664e:	f3af 8000 	nop.w
 8006652:	4607      	mov	r7, r0
 8006654:	1c78      	adds	r0, r7, #1
 8006656:	d1d6      	bne.n	8006606 <_vfiprintf_r+0x19a>
 8006658:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800665a:	07d9      	lsls	r1, r3, #31
 800665c:	d405      	bmi.n	800666a <_vfiprintf_r+0x1fe>
 800665e:	89ab      	ldrh	r3, [r5, #12]
 8006660:	059a      	lsls	r2, r3, #22
 8006662:	d402      	bmi.n	800666a <_vfiprintf_r+0x1fe>
 8006664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006666:	f7ff fdd3 	bl	8006210 <__retarget_lock_release_recursive>
 800666a:	89ab      	ldrh	r3, [r5, #12]
 800666c:	065b      	lsls	r3, r3, #25
 800666e:	f53f af1f 	bmi.w	80064b0 <_vfiprintf_r+0x44>
 8006672:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006674:	e71e      	b.n	80064b4 <_vfiprintf_r+0x48>
 8006676:	ab03      	add	r3, sp, #12
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	462a      	mov	r2, r5
 800667c:	4630      	mov	r0, r6
 800667e:	4b06      	ldr	r3, [pc, #24]	@ (8006698 <_vfiprintf_r+0x22c>)
 8006680:	a904      	add	r1, sp, #16
 8006682:	f000 f87d 	bl	8006780 <_printf_i>
 8006686:	e7e4      	b.n	8006652 <_vfiprintf_r+0x1e6>
 8006688:	08006fb6 	.word	0x08006fb6
 800668c:	08006fbc 	.word	0x08006fbc
 8006690:	08006fc0 	.word	0x08006fc0
 8006694:	00000000 	.word	0x00000000
 8006698:	08006447 	.word	0x08006447

0800669c <_printf_common>:
 800669c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a0:	4616      	mov	r6, r2
 80066a2:	4698      	mov	r8, r3
 80066a4:	688a      	ldr	r2, [r1, #8]
 80066a6:	690b      	ldr	r3, [r1, #16]
 80066a8:	4607      	mov	r7, r0
 80066aa:	4293      	cmp	r3, r2
 80066ac:	bfb8      	it	lt
 80066ae:	4613      	movlt	r3, r2
 80066b0:	6033      	str	r3, [r6, #0]
 80066b2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066b6:	460c      	mov	r4, r1
 80066b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066bc:	b10a      	cbz	r2, 80066c2 <_printf_common+0x26>
 80066be:	3301      	adds	r3, #1
 80066c0:	6033      	str	r3, [r6, #0]
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	0699      	lsls	r1, r3, #26
 80066c6:	bf42      	ittt	mi
 80066c8:	6833      	ldrmi	r3, [r6, #0]
 80066ca:	3302      	addmi	r3, #2
 80066cc:	6033      	strmi	r3, [r6, #0]
 80066ce:	6825      	ldr	r5, [r4, #0]
 80066d0:	f015 0506 	ands.w	r5, r5, #6
 80066d4:	d106      	bne.n	80066e4 <_printf_common+0x48>
 80066d6:	f104 0a19 	add.w	sl, r4, #25
 80066da:	68e3      	ldr	r3, [r4, #12]
 80066dc:	6832      	ldr	r2, [r6, #0]
 80066de:	1a9b      	subs	r3, r3, r2
 80066e0:	42ab      	cmp	r3, r5
 80066e2:	dc2b      	bgt.n	800673c <_printf_common+0xa0>
 80066e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80066e8:	6822      	ldr	r2, [r4, #0]
 80066ea:	3b00      	subs	r3, #0
 80066ec:	bf18      	it	ne
 80066ee:	2301      	movne	r3, #1
 80066f0:	0692      	lsls	r2, r2, #26
 80066f2:	d430      	bmi.n	8006756 <_printf_common+0xba>
 80066f4:	4641      	mov	r1, r8
 80066f6:	4638      	mov	r0, r7
 80066f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80066fc:	47c8      	blx	r9
 80066fe:	3001      	adds	r0, #1
 8006700:	d023      	beq.n	800674a <_printf_common+0xae>
 8006702:	6823      	ldr	r3, [r4, #0]
 8006704:	6922      	ldr	r2, [r4, #16]
 8006706:	f003 0306 	and.w	r3, r3, #6
 800670a:	2b04      	cmp	r3, #4
 800670c:	bf14      	ite	ne
 800670e:	2500      	movne	r5, #0
 8006710:	6833      	ldreq	r3, [r6, #0]
 8006712:	f04f 0600 	mov.w	r6, #0
 8006716:	bf08      	it	eq
 8006718:	68e5      	ldreq	r5, [r4, #12]
 800671a:	f104 041a 	add.w	r4, r4, #26
 800671e:	bf08      	it	eq
 8006720:	1aed      	subeq	r5, r5, r3
 8006722:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006726:	bf08      	it	eq
 8006728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800672c:	4293      	cmp	r3, r2
 800672e:	bfc4      	itt	gt
 8006730:	1a9b      	subgt	r3, r3, r2
 8006732:	18ed      	addgt	r5, r5, r3
 8006734:	42b5      	cmp	r5, r6
 8006736:	d11a      	bne.n	800676e <_printf_common+0xd2>
 8006738:	2000      	movs	r0, #0
 800673a:	e008      	b.n	800674e <_printf_common+0xb2>
 800673c:	2301      	movs	r3, #1
 800673e:	4652      	mov	r2, sl
 8006740:	4641      	mov	r1, r8
 8006742:	4638      	mov	r0, r7
 8006744:	47c8      	blx	r9
 8006746:	3001      	adds	r0, #1
 8006748:	d103      	bne.n	8006752 <_printf_common+0xb6>
 800674a:	f04f 30ff 	mov.w	r0, #4294967295
 800674e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006752:	3501      	adds	r5, #1
 8006754:	e7c1      	b.n	80066da <_printf_common+0x3e>
 8006756:	2030      	movs	r0, #48	@ 0x30
 8006758:	18e1      	adds	r1, r4, r3
 800675a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800675e:	1c5a      	adds	r2, r3, #1
 8006760:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006764:	4422      	add	r2, r4
 8006766:	3302      	adds	r3, #2
 8006768:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800676c:	e7c2      	b.n	80066f4 <_printf_common+0x58>
 800676e:	2301      	movs	r3, #1
 8006770:	4622      	mov	r2, r4
 8006772:	4641      	mov	r1, r8
 8006774:	4638      	mov	r0, r7
 8006776:	47c8      	blx	r9
 8006778:	3001      	adds	r0, #1
 800677a:	d0e6      	beq.n	800674a <_printf_common+0xae>
 800677c:	3601      	adds	r6, #1
 800677e:	e7d9      	b.n	8006734 <_printf_common+0x98>

08006780 <_printf_i>:
 8006780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006784:	7e0f      	ldrb	r7, [r1, #24]
 8006786:	4691      	mov	r9, r2
 8006788:	2f78      	cmp	r7, #120	@ 0x78
 800678a:	4680      	mov	r8, r0
 800678c:	460c      	mov	r4, r1
 800678e:	469a      	mov	sl, r3
 8006790:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006792:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006796:	d807      	bhi.n	80067a8 <_printf_i+0x28>
 8006798:	2f62      	cmp	r7, #98	@ 0x62
 800679a:	d80a      	bhi.n	80067b2 <_printf_i+0x32>
 800679c:	2f00      	cmp	r7, #0
 800679e:	f000 80d1 	beq.w	8006944 <_printf_i+0x1c4>
 80067a2:	2f58      	cmp	r7, #88	@ 0x58
 80067a4:	f000 80b8 	beq.w	8006918 <_printf_i+0x198>
 80067a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067b0:	e03a      	b.n	8006828 <_printf_i+0xa8>
 80067b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067b6:	2b15      	cmp	r3, #21
 80067b8:	d8f6      	bhi.n	80067a8 <_printf_i+0x28>
 80067ba:	a101      	add	r1, pc, #4	@ (adr r1, 80067c0 <_printf_i+0x40>)
 80067bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067c0:	08006819 	.word	0x08006819
 80067c4:	0800682d 	.word	0x0800682d
 80067c8:	080067a9 	.word	0x080067a9
 80067cc:	080067a9 	.word	0x080067a9
 80067d0:	080067a9 	.word	0x080067a9
 80067d4:	080067a9 	.word	0x080067a9
 80067d8:	0800682d 	.word	0x0800682d
 80067dc:	080067a9 	.word	0x080067a9
 80067e0:	080067a9 	.word	0x080067a9
 80067e4:	080067a9 	.word	0x080067a9
 80067e8:	080067a9 	.word	0x080067a9
 80067ec:	0800692b 	.word	0x0800692b
 80067f0:	08006857 	.word	0x08006857
 80067f4:	080068e5 	.word	0x080068e5
 80067f8:	080067a9 	.word	0x080067a9
 80067fc:	080067a9 	.word	0x080067a9
 8006800:	0800694d 	.word	0x0800694d
 8006804:	080067a9 	.word	0x080067a9
 8006808:	08006857 	.word	0x08006857
 800680c:	080067a9 	.word	0x080067a9
 8006810:	080067a9 	.word	0x080067a9
 8006814:	080068ed 	.word	0x080068ed
 8006818:	6833      	ldr	r3, [r6, #0]
 800681a:	1d1a      	adds	r2, r3, #4
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6032      	str	r2, [r6, #0]
 8006820:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006824:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006828:	2301      	movs	r3, #1
 800682a:	e09c      	b.n	8006966 <_printf_i+0x1e6>
 800682c:	6833      	ldr	r3, [r6, #0]
 800682e:	6820      	ldr	r0, [r4, #0]
 8006830:	1d19      	adds	r1, r3, #4
 8006832:	6031      	str	r1, [r6, #0]
 8006834:	0606      	lsls	r6, r0, #24
 8006836:	d501      	bpl.n	800683c <_printf_i+0xbc>
 8006838:	681d      	ldr	r5, [r3, #0]
 800683a:	e003      	b.n	8006844 <_printf_i+0xc4>
 800683c:	0645      	lsls	r5, r0, #25
 800683e:	d5fb      	bpl.n	8006838 <_printf_i+0xb8>
 8006840:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006844:	2d00      	cmp	r5, #0
 8006846:	da03      	bge.n	8006850 <_printf_i+0xd0>
 8006848:	232d      	movs	r3, #45	@ 0x2d
 800684a:	426d      	negs	r5, r5
 800684c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006850:	230a      	movs	r3, #10
 8006852:	4858      	ldr	r0, [pc, #352]	@ (80069b4 <_printf_i+0x234>)
 8006854:	e011      	b.n	800687a <_printf_i+0xfa>
 8006856:	6821      	ldr	r1, [r4, #0]
 8006858:	6833      	ldr	r3, [r6, #0]
 800685a:	0608      	lsls	r0, r1, #24
 800685c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006860:	d402      	bmi.n	8006868 <_printf_i+0xe8>
 8006862:	0649      	lsls	r1, r1, #25
 8006864:	bf48      	it	mi
 8006866:	b2ad      	uxthmi	r5, r5
 8006868:	2f6f      	cmp	r7, #111	@ 0x6f
 800686a:	6033      	str	r3, [r6, #0]
 800686c:	bf14      	ite	ne
 800686e:	230a      	movne	r3, #10
 8006870:	2308      	moveq	r3, #8
 8006872:	4850      	ldr	r0, [pc, #320]	@ (80069b4 <_printf_i+0x234>)
 8006874:	2100      	movs	r1, #0
 8006876:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800687a:	6866      	ldr	r6, [r4, #4]
 800687c:	2e00      	cmp	r6, #0
 800687e:	60a6      	str	r6, [r4, #8]
 8006880:	db05      	blt.n	800688e <_printf_i+0x10e>
 8006882:	6821      	ldr	r1, [r4, #0]
 8006884:	432e      	orrs	r6, r5
 8006886:	f021 0104 	bic.w	r1, r1, #4
 800688a:	6021      	str	r1, [r4, #0]
 800688c:	d04b      	beq.n	8006926 <_printf_i+0x1a6>
 800688e:	4616      	mov	r6, r2
 8006890:	fbb5 f1f3 	udiv	r1, r5, r3
 8006894:	fb03 5711 	mls	r7, r3, r1, r5
 8006898:	5dc7      	ldrb	r7, [r0, r7]
 800689a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800689e:	462f      	mov	r7, r5
 80068a0:	42bb      	cmp	r3, r7
 80068a2:	460d      	mov	r5, r1
 80068a4:	d9f4      	bls.n	8006890 <_printf_i+0x110>
 80068a6:	2b08      	cmp	r3, #8
 80068a8:	d10b      	bne.n	80068c2 <_printf_i+0x142>
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	07df      	lsls	r7, r3, #31
 80068ae:	d508      	bpl.n	80068c2 <_printf_i+0x142>
 80068b0:	6923      	ldr	r3, [r4, #16]
 80068b2:	6861      	ldr	r1, [r4, #4]
 80068b4:	4299      	cmp	r1, r3
 80068b6:	bfde      	ittt	le
 80068b8:	2330      	movle	r3, #48	@ 0x30
 80068ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068c2:	1b92      	subs	r2, r2, r6
 80068c4:	6122      	str	r2, [r4, #16]
 80068c6:	464b      	mov	r3, r9
 80068c8:	4621      	mov	r1, r4
 80068ca:	4640      	mov	r0, r8
 80068cc:	f8cd a000 	str.w	sl, [sp]
 80068d0:	aa03      	add	r2, sp, #12
 80068d2:	f7ff fee3 	bl	800669c <_printf_common>
 80068d6:	3001      	adds	r0, #1
 80068d8:	d14a      	bne.n	8006970 <_printf_i+0x1f0>
 80068da:	f04f 30ff 	mov.w	r0, #4294967295
 80068de:	b004      	add	sp, #16
 80068e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	f043 0320 	orr.w	r3, r3, #32
 80068ea:	6023      	str	r3, [r4, #0]
 80068ec:	2778      	movs	r7, #120	@ 0x78
 80068ee:	4832      	ldr	r0, [pc, #200]	@ (80069b8 <_printf_i+0x238>)
 80068f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80068f4:	6823      	ldr	r3, [r4, #0]
 80068f6:	6831      	ldr	r1, [r6, #0]
 80068f8:	061f      	lsls	r7, r3, #24
 80068fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80068fe:	d402      	bmi.n	8006906 <_printf_i+0x186>
 8006900:	065f      	lsls	r7, r3, #25
 8006902:	bf48      	it	mi
 8006904:	b2ad      	uxthmi	r5, r5
 8006906:	6031      	str	r1, [r6, #0]
 8006908:	07d9      	lsls	r1, r3, #31
 800690a:	bf44      	itt	mi
 800690c:	f043 0320 	orrmi.w	r3, r3, #32
 8006910:	6023      	strmi	r3, [r4, #0]
 8006912:	b11d      	cbz	r5, 800691c <_printf_i+0x19c>
 8006914:	2310      	movs	r3, #16
 8006916:	e7ad      	b.n	8006874 <_printf_i+0xf4>
 8006918:	4826      	ldr	r0, [pc, #152]	@ (80069b4 <_printf_i+0x234>)
 800691a:	e7e9      	b.n	80068f0 <_printf_i+0x170>
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	f023 0320 	bic.w	r3, r3, #32
 8006922:	6023      	str	r3, [r4, #0]
 8006924:	e7f6      	b.n	8006914 <_printf_i+0x194>
 8006926:	4616      	mov	r6, r2
 8006928:	e7bd      	b.n	80068a6 <_printf_i+0x126>
 800692a:	6833      	ldr	r3, [r6, #0]
 800692c:	6825      	ldr	r5, [r4, #0]
 800692e:	1d18      	adds	r0, r3, #4
 8006930:	6961      	ldr	r1, [r4, #20]
 8006932:	6030      	str	r0, [r6, #0]
 8006934:	062e      	lsls	r6, r5, #24
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	d501      	bpl.n	800693e <_printf_i+0x1be>
 800693a:	6019      	str	r1, [r3, #0]
 800693c:	e002      	b.n	8006944 <_printf_i+0x1c4>
 800693e:	0668      	lsls	r0, r5, #25
 8006940:	d5fb      	bpl.n	800693a <_printf_i+0x1ba>
 8006942:	8019      	strh	r1, [r3, #0]
 8006944:	2300      	movs	r3, #0
 8006946:	4616      	mov	r6, r2
 8006948:	6123      	str	r3, [r4, #16]
 800694a:	e7bc      	b.n	80068c6 <_printf_i+0x146>
 800694c:	6833      	ldr	r3, [r6, #0]
 800694e:	2100      	movs	r1, #0
 8006950:	1d1a      	adds	r2, r3, #4
 8006952:	6032      	str	r2, [r6, #0]
 8006954:	681e      	ldr	r6, [r3, #0]
 8006956:	6862      	ldr	r2, [r4, #4]
 8006958:	4630      	mov	r0, r6
 800695a:	f000 f96b 	bl	8006c34 <memchr>
 800695e:	b108      	cbz	r0, 8006964 <_printf_i+0x1e4>
 8006960:	1b80      	subs	r0, r0, r6
 8006962:	6060      	str	r0, [r4, #4]
 8006964:	6863      	ldr	r3, [r4, #4]
 8006966:	6123      	str	r3, [r4, #16]
 8006968:	2300      	movs	r3, #0
 800696a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800696e:	e7aa      	b.n	80068c6 <_printf_i+0x146>
 8006970:	4632      	mov	r2, r6
 8006972:	4649      	mov	r1, r9
 8006974:	4640      	mov	r0, r8
 8006976:	6923      	ldr	r3, [r4, #16]
 8006978:	47d0      	blx	sl
 800697a:	3001      	adds	r0, #1
 800697c:	d0ad      	beq.n	80068da <_printf_i+0x15a>
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	079b      	lsls	r3, r3, #30
 8006982:	d413      	bmi.n	80069ac <_printf_i+0x22c>
 8006984:	68e0      	ldr	r0, [r4, #12]
 8006986:	9b03      	ldr	r3, [sp, #12]
 8006988:	4298      	cmp	r0, r3
 800698a:	bfb8      	it	lt
 800698c:	4618      	movlt	r0, r3
 800698e:	e7a6      	b.n	80068de <_printf_i+0x15e>
 8006990:	2301      	movs	r3, #1
 8006992:	4632      	mov	r2, r6
 8006994:	4649      	mov	r1, r9
 8006996:	4640      	mov	r0, r8
 8006998:	47d0      	blx	sl
 800699a:	3001      	adds	r0, #1
 800699c:	d09d      	beq.n	80068da <_printf_i+0x15a>
 800699e:	3501      	adds	r5, #1
 80069a0:	68e3      	ldr	r3, [r4, #12]
 80069a2:	9903      	ldr	r1, [sp, #12]
 80069a4:	1a5b      	subs	r3, r3, r1
 80069a6:	42ab      	cmp	r3, r5
 80069a8:	dcf2      	bgt.n	8006990 <_printf_i+0x210>
 80069aa:	e7eb      	b.n	8006984 <_printf_i+0x204>
 80069ac:	2500      	movs	r5, #0
 80069ae:	f104 0619 	add.w	r6, r4, #25
 80069b2:	e7f5      	b.n	80069a0 <_printf_i+0x220>
 80069b4:	08006fc7 	.word	0x08006fc7
 80069b8:	08006fd8 	.word	0x08006fd8

080069bc <__sflush_r>:
 80069bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c2:	0716      	lsls	r6, r2, #28
 80069c4:	4605      	mov	r5, r0
 80069c6:	460c      	mov	r4, r1
 80069c8:	d454      	bmi.n	8006a74 <__sflush_r+0xb8>
 80069ca:	684b      	ldr	r3, [r1, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	dc02      	bgt.n	80069d6 <__sflush_r+0x1a>
 80069d0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	dd48      	ble.n	8006a68 <__sflush_r+0xac>
 80069d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069d8:	2e00      	cmp	r6, #0
 80069da:	d045      	beq.n	8006a68 <__sflush_r+0xac>
 80069dc:	2300      	movs	r3, #0
 80069de:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80069e2:	682f      	ldr	r7, [r5, #0]
 80069e4:	6a21      	ldr	r1, [r4, #32]
 80069e6:	602b      	str	r3, [r5, #0]
 80069e8:	d030      	beq.n	8006a4c <__sflush_r+0x90>
 80069ea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80069ec:	89a3      	ldrh	r3, [r4, #12]
 80069ee:	0759      	lsls	r1, r3, #29
 80069f0:	d505      	bpl.n	80069fe <__sflush_r+0x42>
 80069f2:	6863      	ldr	r3, [r4, #4]
 80069f4:	1ad2      	subs	r2, r2, r3
 80069f6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80069f8:	b10b      	cbz	r3, 80069fe <__sflush_r+0x42>
 80069fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80069fc:	1ad2      	subs	r2, r2, r3
 80069fe:	2300      	movs	r3, #0
 8006a00:	4628      	mov	r0, r5
 8006a02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a04:	6a21      	ldr	r1, [r4, #32]
 8006a06:	47b0      	blx	r6
 8006a08:	1c43      	adds	r3, r0, #1
 8006a0a:	89a3      	ldrh	r3, [r4, #12]
 8006a0c:	d106      	bne.n	8006a1c <__sflush_r+0x60>
 8006a0e:	6829      	ldr	r1, [r5, #0]
 8006a10:	291d      	cmp	r1, #29
 8006a12:	d82b      	bhi.n	8006a6c <__sflush_r+0xb0>
 8006a14:	4a28      	ldr	r2, [pc, #160]	@ (8006ab8 <__sflush_r+0xfc>)
 8006a16:	40ca      	lsrs	r2, r1
 8006a18:	07d6      	lsls	r6, r2, #31
 8006a1a:	d527      	bpl.n	8006a6c <__sflush_r+0xb0>
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	6062      	str	r2, [r4, #4]
 8006a20:	6922      	ldr	r2, [r4, #16]
 8006a22:	04d9      	lsls	r1, r3, #19
 8006a24:	6022      	str	r2, [r4, #0]
 8006a26:	d504      	bpl.n	8006a32 <__sflush_r+0x76>
 8006a28:	1c42      	adds	r2, r0, #1
 8006a2a:	d101      	bne.n	8006a30 <__sflush_r+0x74>
 8006a2c:	682b      	ldr	r3, [r5, #0]
 8006a2e:	b903      	cbnz	r3, 8006a32 <__sflush_r+0x76>
 8006a30:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a34:	602f      	str	r7, [r5, #0]
 8006a36:	b1b9      	cbz	r1, 8006a68 <__sflush_r+0xac>
 8006a38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a3c:	4299      	cmp	r1, r3
 8006a3e:	d002      	beq.n	8006a46 <__sflush_r+0x8a>
 8006a40:	4628      	mov	r0, r5
 8006a42:	f7ff fbf5 	bl	8006230 <_free_r>
 8006a46:	2300      	movs	r3, #0
 8006a48:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a4a:	e00d      	b.n	8006a68 <__sflush_r+0xac>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	4628      	mov	r0, r5
 8006a50:	47b0      	blx	r6
 8006a52:	4602      	mov	r2, r0
 8006a54:	1c50      	adds	r0, r2, #1
 8006a56:	d1c9      	bne.n	80069ec <__sflush_r+0x30>
 8006a58:	682b      	ldr	r3, [r5, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0c6      	beq.n	80069ec <__sflush_r+0x30>
 8006a5e:	2b1d      	cmp	r3, #29
 8006a60:	d001      	beq.n	8006a66 <__sflush_r+0xaa>
 8006a62:	2b16      	cmp	r3, #22
 8006a64:	d11d      	bne.n	8006aa2 <__sflush_r+0xe6>
 8006a66:	602f      	str	r7, [r5, #0]
 8006a68:	2000      	movs	r0, #0
 8006a6a:	e021      	b.n	8006ab0 <__sflush_r+0xf4>
 8006a6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a70:	b21b      	sxth	r3, r3
 8006a72:	e01a      	b.n	8006aaa <__sflush_r+0xee>
 8006a74:	690f      	ldr	r7, [r1, #16]
 8006a76:	2f00      	cmp	r7, #0
 8006a78:	d0f6      	beq.n	8006a68 <__sflush_r+0xac>
 8006a7a:	0793      	lsls	r3, r2, #30
 8006a7c:	bf18      	it	ne
 8006a7e:	2300      	movne	r3, #0
 8006a80:	680e      	ldr	r6, [r1, #0]
 8006a82:	bf08      	it	eq
 8006a84:	694b      	ldreq	r3, [r1, #20]
 8006a86:	1bf6      	subs	r6, r6, r7
 8006a88:	600f      	str	r7, [r1, #0]
 8006a8a:	608b      	str	r3, [r1, #8]
 8006a8c:	2e00      	cmp	r6, #0
 8006a8e:	ddeb      	ble.n	8006a68 <__sflush_r+0xac>
 8006a90:	4633      	mov	r3, r6
 8006a92:	463a      	mov	r2, r7
 8006a94:	4628      	mov	r0, r5
 8006a96:	6a21      	ldr	r1, [r4, #32]
 8006a98:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006a9c:	47e0      	blx	ip
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	dc07      	bgt.n	8006ab2 <__sflush_r+0xf6>
 8006aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8006aae:	81a3      	strh	r3, [r4, #12]
 8006ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ab2:	4407      	add	r7, r0
 8006ab4:	1a36      	subs	r6, r6, r0
 8006ab6:	e7e9      	b.n	8006a8c <__sflush_r+0xd0>
 8006ab8:	20400001 	.word	0x20400001

08006abc <_fflush_r>:
 8006abc:	b538      	push	{r3, r4, r5, lr}
 8006abe:	690b      	ldr	r3, [r1, #16]
 8006ac0:	4605      	mov	r5, r0
 8006ac2:	460c      	mov	r4, r1
 8006ac4:	b913      	cbnz	r3, 8006acc <_fflush_r+0x10>
 8006ac6:	2500      	movs	r5, #0
 8006ac8:	4628      	mov	r0, r5
 8006aca:	bd38      	pop	{r3, r4, r5, pc}
 8006acc:	b118      	cbz	r0, 8006ad6 <_fflush_r+0x1a>
 8006ace:	6a03      	ldr	r3, [r0, #32]
 8006ad0:	b90b      	cbnz	r3, 8006ad6 <_fflush_r+0x1a>
 8006ad2:	f7ff f9a5 	bl	8005e20 <__sinit>
 8006ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0f3      	beq.n	8006ac6 <_fflush_r+0xa>
 8006ade:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ae0:	07d0      	lsls	r0, r2, #31
 8006ae2:	d404      	bmi.n	8006aee <_fflush_r+0x32>
 8006ae4:	0599      	lsls	r1, r3, #22
 8006ae6:	d402      	bmi.n	8006aee <_fflush_r+0x32>
 8006ae8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006aea:	f7ff fb90 	bl	800620e <__retarget_lock_acquire_recursive>
 8006aee:	4628      	mov	r0, r5
 8006af0:	4621      	mov	r1, r4
 8006af2:	f7ff ff63 	bl	80069bc <__sflush_r>
 8006af6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006af8:	4605      	mov	r5, r0
 8006afa:	07da      	lsls	r2, r3, #31
 8006afc:	d4e4      	bmi.n	8006ac8 <_fflush_r+0xc>
 8006afe:	89a3      	ldrh	r3, [r4, #12]
 8006b00:	059b      	lsls	r3, r3, #22
 8006b02:	d4e1      	bmi.n	8006ac8 <_fflush_r+0xc>
 8006b04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b06:	f7ff fb83 	bl	8006210 <__retarget_lock_release_recursive>
 8006b0a:	e7dd      	b.n	8006ac8 <_fflush_r+0xc>

08006b0c <__swhatbuf_r>:
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	460c      	mov	r4, r1
 8006b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b14:	4615      	mov	r5, r2
 8006b16:	2900      	cmp	r1, #0
 8006b18:	461e      	mov	r6, r3
 8006b1a:	b096      	sub	sp, #88	@ 0x58
 8006b1c:	da0c      	bge.n	8006b38 <__swhatbuf_r+0x2c>
 8006b1e:	89a3      	ldrh	r3, [r4, #12]
 8006b20:	2100      	movs	r1, #0
 8006b22:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b26:	bf14      	ite	ne
 8006b28:	2340      	movne	r3, #64	@ 0x40
 8006b2a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b2e:	2000      	movs	r0, #0
 8006b30:	6031      	str	r1, [r6, #0]
 8006b32:	602b      	str	r3, [r5, #0]
 8006b34:	b016      	add	sp, #88	@ 0x58
 8006b36:	bd70      	pop	{r4, r5, r6, pc}
 8006b38:	466a      	mov	r2, sp
 8006b3a:	f000 f849 	bl	8006bd0 <_fstat_r>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	dbed      	blt.n	8006b1e <__swhatbuf_r+0x12>
 8006b42:	9901      	ldr	r1, [sp, #4]
 8006b44:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b48:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b4c:	4259      	negs	r1, r3
 8006b4e:	4159      	adcs	r1, r3
 8006b50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b54:	e7eb      	b.n	8006b2e <__swhatbuf_r+0x22>

08006b56 <__smakebuf_r>:
 8006b56:	898b      	ldrh	r3, [r1, #12]
 8006b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b5a:	079d      	lsls	r5, r3, #30
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	460c      	mov	r4, r1
 8006b60:	d507      	bpl.n	8006b72 <__smakebuf_r+0x1c>
 8006b62:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006b66:	6023      	str	r3, [r4, #0]
 8006b68:	6123      	str	r3, [r4, #16]
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	6163      	str	r3, [r4, #20]
 8006b6e:	b003      	add	sp, #12
 8006b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b72:	466a      	mov	r2, sp
 8006b74:	ab01      	add	r3, sp, #4
 8006b76:	f7ff ffc9 	bl	8006b0c <__swhatbuf_r>
 8006b7a:	9f00      	ldr	r7, [sp, #0]
 8006b7c:	4605      	mov	r5, r0
 8006b7e:	4639      	mov	r1, r7
 8006b80:	4630      	mov	r0, r6
 8006b82:	f7ff fbbf 	bl	8006304 <_malloc_r>
 8006b86:	b948      	cbnz	r0, 8006b9c <__smakebuf_r+0x46>
 8006b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b8c:	059a      	lsls	r2, r3, #22
 8006b8e:	d4ee      	bmi.n	8006b6e <__smakebuf_r+0x18>
 8006b90:	f023 0303 	bic.w	r3, r3, #3
 8006b94:	f043 0302 	orr.w	r3, r3, #2
 8006b98:	81a3      	strh	r3, [r4, #12]
 8006b9a:	e7e2      	b.n	8006b62 <__smakebuf_r+0xc>
 8006b9c:	89a3      	ldrh	r3, [r4, #12]
 8006b9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ba6:	81a3      	strh	r3, [r4, #12]
 8006ba8:	9b01      	ldr	r3, [sp, #4]
 8006baa:	6020      	str	r0, [r4, #0]
 8006bac:	b15b      	cbz	r3, 8006bc6 <__smakebuf_r+0x70>
 8006bae:	4630      	mov	r0, r6
 8006bb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bb4:	f000 f81e 	bl	8006bf4 <_isatty_r>
 8006bb8:	b128      	cbz	r0, 8006bc6 <__smakebuf_r+0x70>
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	f023 0303 	bic.w	r3, r3, #3
 8006bc0:	f043 0301 	orr.w	r3, r3, #1
 8006bc4:	81a3      	strh	r3, [r4, #12]
 8006bc6:	89a3      	ldrh	r3, [r4, #12]
 8006bc8:	431d      	orrs	r5, r3
 8006bca:	81a5      	strh	r5, [r4, #12]
 8006bcc:	e7cf      	b.n	8006b6e <__smakebuf_r+0x18>
	...

08006bd0 <_fstat_r>:
 8006bd0:	b538      	push	{r3, r4, r5, lr}
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	4d06      	ldr	r5, [pc, #24]	@ (8006bf0 <_fstat_r+0x20>)
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	4608      	mov	r0, r1
 8006bda:	4611      	mov	r1, r2
 8006bdc:	602b      	str	r3, [r5, #0]
 8006bde:	f7fa fbb2 	bl	8001346 <_fstat>
 8006be2:	1c43      	adds	r3, r0, #1
 8006be4:	d102      	bne.n	8006bec <_fstat_r+0x1c>
 8006be6:	682b      	ldr	r3, [r5, #0]
 8006be8:	b103      	cbz	r3, 8006bec <_fstat_r+0x1c>
 8006bea:	6023      	str	r3, [r4, #0]
 8006bec:	bd38      	pop	{r3, r4, r5, pc}
 8006bee:	bf00      	nop
 8006bf0:	2000400c 	.word	0x2000400c

08006bf4 <_isatty_r>:
 8006bf4:	b538      	push	{r3, r4, r5, lr}
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	4d05      	ldr	r5, [pc, #20]	@ (8006c10 <_isatty_r+0x1c>)
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	4608      	mov	r0, r1
 8006bfe:	602b      	str	r3, [r5, #0]
 8006c00:	f7fa fbb0 	bl	8001364 <_isatty>
 8006c04:	1c43      	adds	r3, r0, #1
 8006c06:	d102      	bne.n	8006c0e <_isatty_r+0x1a>
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	b103      	cbz	r3, 8006c0e <_isatty_r+0x1a>
 8006c0c:	6023      	str	r3, [r4, #0]
 8006c0e:	bd38      	pop	{r3, r4, r5, pc}
 8006c10:	2000400c 	.word	0x2000400c

08006c14 <_sbrk_r>:
 8006c14:	b538      	push	{r3, r4, r5, lr}
 8006c16:	2300      	movs	r3, #0
 8006c18:	4d05      	ldr	r5, [pc, #20]	@ (8006c30 <_sbrk_r+0x1c>)
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	4608      	mov	r0, r1
 8006c1e:	602b      	str	r3, [r5, #0]
 8006c20:	f7fa fbb6 	bl	8001390 <_sbrk>
 8006c24:	1c43      	adds	r3, r0, #1
 8006c26:	d102      	bne.n	8006c2e <_sbrk_r+0x1a>
 8006c28:	682b      	ldr	r3, [r5, #0]
 8006c2a:	b103      	cbz	r3, 8006c2e <_sbrk_r+0x1a>
 8006c2c:	6023      	str	r3, [r4, #0]
 8006c2e:	bd38      	pop	{r3, r4, r5, pc}
 8006c30:	2000400c 	.word	0x2000400c

08006c34 <memchr>:
 8006c34:	4603      	mov	r3, r0
 8006c36:	b510      	push	{r4, lr}
 8006c38:	b2c9      	uxtb	r1, r1
 8006c3a:	4402      	add	r2, r0
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	4618      	mov	r0, r3
 8006c40:	d101      	bne.n	8006c46 <memchr+0x12>
 8006c42:	2000      	movs	r0, #0
 8006c44:	e003      	b.n	8006c4e <memchr+0x1a>
 8006c46:	7804      	ldrb	r4, [r0, #0]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	428c      	cmp	r4, r1
 8006c4c:	d1f6      	bne.n	8006c3c <memchr+0x8>
 8006c4e:	bd10      	pop	{r4, pc}

08006c50 <_init>:
 8006c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c52:	bf00      	nop
 8006c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c56:	bc08      	pop	{r3}
 8006c58:	469e      	mov	lr, r3
 8006c5a:	4770      	bx	lr

08006c5c <_fini>:
 8006c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5e:	bf00      	nop
 8006c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c62:	bc08      	pop	{r3}
 8006c64:	469e      	mov	lr, r3
 8006c66:	4770      	bx	lr
