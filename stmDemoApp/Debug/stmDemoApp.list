
stmDemoApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08006fe8  08006fe8  00007fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073a8  080073a8  000090e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080073a8  080073a8  000090e4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080073a8  080073a8  000090e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073a8  080073a8  000083a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073ac  080073ac  000083ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e4  20000000  080073b0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fe8  200000e4  08007494  000090e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040cc  08007494  0000a0cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000090e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001340e  00000000  00000000  0000910d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b6e  00000000  00000000  0001c51b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00020090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d49  00000000  00000000  00021250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a78a  00000000  00000000  00021f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016203  00000000  00000000  0003c723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f5f5  00000000  00000000  00052926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1f1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c94  00000000  00000000  000e1f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e6bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000e4 	.word	0x200000e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006fd0 	.word	0x08006fd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000e8 	.word	0x200000e8
 800014c:	08006fd0 	.word	0x08006fd0

08000150 <AppMain>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void AppMain()
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
	bool blFlag =  FALSE;
 8000156:	2300      	movs	r3, #0
 8000158:	71fb      	strb	r3, [r7, #7]

	printf("Hello from STM32 via UART!\r\n");
 800015a:	4817      	ldr	r0, [pc, #92]	@ (80001b8 <AppMain+0x68>)
 800015c:	f006 f8be 	bl	80062dc <puts>
	blFlag = PwmHandler();
 8000160:	f000 fe8a 	bl	8000e78 <PwmHandler>
 8000164:	4603      	mov	r3, r0
 8000166:	71fb      	strb	r3, [r7, #7]

	if(blFlag == FALSE)
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	f083 0301 	eor.w	r3, r3, #1
 800016e:	b2db      	uxtb	r3, r3
 8000170:	2b00      	cmp	r3, #0
 8000172:	d002      	beq.n	800017a <AppMain+0x2a>
	{
		printf("PWM Failed\r\n");
 8000174:	4811      	ldr	r0, [pc, #68]	@ (80001bc <AppMain+0x6c>)
 8000176:	f006 f8b1 	bl	80062dc <puts>
	}

	blFlag = RGBLedHandler();
 800017a:	f000 fe91 	bl	8000ea0 <RGBLedHandler>
 800017e:	4603      	mov	r3, r0
 8000180:	71fb      	strb	r3, [r7, #7]

	if(blFlag == FALSE)
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f083 0301 	eor.w	r3, r3, #1
 8000188:	b2db      	uxtb	r3, r3
 800018a:	2b00      	cmp	r3, #0
 800018c:	d002      	beq.n	8000194 <AppMain+0x44>
	{
		printf("LED in RGB combination Failed");
 800018e:	480c      	ldr	r0, [pc, #48]	@ (80001c0 <AppMain+0x70>)
 8000190:	f006 f83c 	bl	800620c <iprintf>
	}

	blFlag = TaskInit();
 8000194:	f000 fce0 	bl	8000b58 <TaskInit>
 8000198:	4603      	mov	r3, r0
 800019a:	71fb      	strb	r3, [r7, #7]

	if(blFlag == FALSE)
 800019c:	79fb      	ldrb	r3, [r7, #7]
 800019e:	f083 0301 	eor.w	r3, r3, #1
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d002      	beq.n	80001ae <AppMain+0x5e>
	{
		printf("Thread Creation Failed\r\n");
 80001a8:	4806      	ldr	r0, [pc, #24]	@ (80001c4 <AppMain+0x74>)
 80001aa:	f006 f897 	bl	80062dc <puts>
	}
}
 80001ae:	bf00      	nop
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	08006fe8 	.word	0x08006fe8
 80001bc:	08007004 	.word	0x08007004
 80001c0:	08007010 	.word	0x08007010
 80001c4:	08007030 	.word	0x08007030

080001c8 <PWMDriverInit>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void PWMDriverInit()
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	pstRCC->ulAPB2ENR |= GPIOA_CLOCK_ENABLE;
 80001cc:	4b11      	ldr	r3, [pc, #68]	@ (8000214 <PWMDriverInit+0x4c>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	699a      	ldr	r2, [r3, #24]
 80001d2:	4b10      	ldr	r3, [pc, #64]	@ (8000214 <PWMDriverInit+0x4c>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	f042 0204 	orr.w	r2, r2, #4
 80001da:	619a      	str	r2, [r3, #24]
	pstRCC->ulAPB1ENR |= TIM2_CLOCK_ENABLE;
 80001dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000214 <PWMDriverInit+0x4c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	69da      	ldr	r2, [r3, #28]
 80001e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000214 <PWMDriverInit+0x4c>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f042 0201 	orr.w	r2, r2, #1
 80001ea:	61da      	str	r2, [r3, #28]

	pstGPIOA->crl.ulCRL &= PA0_CRL_CLEAR;
 80001ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000218 <PWMDriverInit+0x50>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	4b09      	ldr	r3, [pc, #36]	@ (8000218 <PWMDriverInit+0x50>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f022 020f 	bic.w	r2, r2, #15
 80001fa:	601a      	str	r2, [r3, #0]
	pstGPIOA->crl.ulCRL |= PA0_CONFIG_SET;
 80001fc:	4b06      	ldr	r3, [pc, #24]	@ (8000218 <PWMDriverInit+0x50>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	4b05      	ldr	r3, [pc, #20]	@ (8000218 <PWMDriverInit+0x50>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f042 020b 	orr.w	r2, r2, #11
 800020a:	601a      	str	r2, [r3, #0]
}
 800020c:	bf00      	nop
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	20000004 	.word	0x20000004
 8000218:	20000000 	.word	0x20000000

0800021c <PWMDriverSet>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void PWMDriverSet()
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	pstTIM2->ulPSC = PRESCALAR;
 8000220:	4b1e      	ldr	r3, [pc, #120]	@ (800029c <PWMDriverSet+0x80>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000228:	629a      	str	r2, [r3, #40]	@ 0x28
	pstTIM2->ulARR = AUTO_RELOAD;
 800022a:	4b1c      	ldr	r3, [pc, #112]	@ (800029c <PWMDriverSet+0x80>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000232:	62da      	str	r2, [r3, #44]	@ 0x2c
	pstTIM2->ulCCMR1 &= CH1_OC1M_CLEAR;
 8000234:	4b19      	ldr	r3, [pc, #100]	@ (800029c <PWMDriverSet+0x80>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	699a      	ldr	r2, [r3, #24]
 800023a:	4b18      	ldr	r3, [pc, #96]	@ (800029c <PWMDriverSet+0x80>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8000242:	619a      	str	r2, [r3, #24]
	pstTIM2->ulCCMR1 |= CH1_PWM_MODE_SET;
 8000244:	4b15      	ldr	r3, [pc, #84]	@ (800029c <PWMDriverSet+0x80>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	699a      	ldr	r2, [r3, #24]
 800024a:	4b14      	ldr	r3, [pc, #80]	@ (800029c <PWMDriverSet+0x80>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8000252:	619a      	str	r2, [r3, #24]
	pstTIM2->ulCCMR1 |= CH1_OC1PE_SET;
 8000254:	4b11      	ldr	r3, [pc, #68]	@ (800029c <PWMDriverSet+0x80>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	699a      	ldr	r2, [r3, #24]
 800025a:	4b10      	ldr	r3, [pc, #64]	@ (800029c <PWMDriverSet+0x80>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f042 0208 	orr.w	r2, r2, #8
 8000262:	619a      	str	r2, [r3, #24]
	pstTIM2->ulCCER |= ENABLE_PWM;
 8000264:	4b0d      	ldr	r3, [pc, #52]	@ (800029c <PWMDriverSet+0x80>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	6a1a      	ldr	r2, [r3, #32]
 800026a:	4b0c      	ldr	r3, [pc, #48]	@ (800029c <PWMDriverSet+0x80>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f042 0201 	orr.w	r2, r2, #1
 8000272:	621a      	str	r2, [r3, #32]
	pstTIM2->ulCR1 |= ARPE_SET;
 8000274:	4b09      	ldr	r3, [pc, #36]	@ (800029c <PWMDriverSet+0x80>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	4b08      	ldr	r3, [pc, #32]	@ (800029c <PWMDriverSet+0x80>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000282:	601a      	str	r2, [r3, #0]
	pstTIM2->ulEGR |= UPDATE_EVENT;
 8000284:	4b05      	ldr	r3, [pc, #20]	@ (800029c <PWMDriverSet+0x80>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	695a      	ldr	r2, [r3, #20]
 800028a:	4b04      	ldr	r3, [pc, #16]	@ (800029c <PWMDriverSet+0x80>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f042 0201 	orr.w	r2, r2, #1
 8000292:	615a      	str	r2, [r3, #20]
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr
 800029c:	20000008 	.word	0x20000008

080002a0 <PWMDriverStart>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void PWMDriverStart(uint16 unDuty)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	80fb      	strh	r3, [r7, #6]
	pstTIM2->ulCCR1 = unDuty;
 80002aa:	4b08      	ldr	r3, [pc, #32]	@ (80002cc <PWMDriverStart+0x2c>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	88fa      	ldrh	r2, [r7, #6]
 80002b0:	635a      	str	r2, [r3, #52]	@ 0x34
	pstTIM2->ulCR1 |= ENABLE_PWM;
 80002b2:	4b06      	ldr	r3, [pc, #24]	@ (80002cc <PWMDriverStart+0x2c>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <PWMDriverStart+0x2c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f042 0201 	orr.w	r2, r2, #1
 80002c0:	601a      	str	r2, [r3, #0]
}
 80002c2:	bf00      	nop
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	20000008 	.word	0x20000008

080002d0 <WS2811DriverInit>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void WS2811DriverInit()
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
	pstRCC_Ws2811->ulAPB2ENR |= RCC_GPIOA_CLOCK_ENABLE;
 80002d4:	4b37      	ldr	r3, [pc, #220]	@ (80003b4 <WS2811DriverInit+0xe4>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	699a      	ldr	r2, [r3, #24]
 80002da:	4b36      	ldr	r3, [pc, #216]	@ (80003b4 <WS2811DriverInit+0xe4>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f042 0204 	orr.w	r2, r2, #4
 80002e2:	619a      	str	r2, [r3, #24]
	pstRCC_Ws2811->ulAPB1ENR |= RCC_TIM3_CLOCK_ENABLE;
 80002e4:	4b33      	ldr	r3, [pc, #204]	@ (80003b4 <WS2811DriverInit+0xe4>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	69da      	ldr	r2, [r3, #28]
 80002ea:	4b32      	ldr	r3, [pc, #200]	@ (80003b4 <WS2811DriverInit+0xe4>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f042 0202 	orr.w	r2, r2, #2
 80002f2:	61da      	str	r2, [r3, #28]
	pstRCC_Ws2811->ulAHBENR  |= RCC_DMA1_CLOCK_ENABLE;
 80002f4:	4b2f      	ldr	r3, [pc, #188]	@ (80003b4 <WS2811DriverInit+0xe4>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	695a      	ldr	r2, [r3, #20]
 80002fa:	4b2e      	ldr	r3, [pc, #184]	@ (80003b4 <WS2811DriverInit+0xe4>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f042 0201 	orr.w	r2, r2, #1
 8000302:	615a      	str	r2, [r3, #20]

	pstGPIOA_Ws2811->crl.ulCRL &= PA6_CRL_CLEAR;
 8000304:	4b2c      	ldr	r3, [pc, #176]	@ (80003b8 <WS2811DriverInit+0xe8>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	4b2b      	ldr	r3, [pc, #172]	@ (80003b8 <WS2811DriverInit+0xe8>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000312:	601a      	str	r2, [r3, #0]
	pstGPIOA_Ws2811->crl.ulCRL |= PA6_CONFIG_SET;
 8000314:	4b28      	ldr	r3, [pc, #160]	@ (80003b8 <WS2811DriverInit+0xe8>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	4b27      	ldr	r3, [pc, #156]	@ (80003b8 <WS2811DriverInit+0xe8>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f042 6230 	orr.w	r2, r2, #184549376	@ 0xb000000
 8000322:	601a      	str	r2, [r3, #0]

	pstTIM3_Ws2811->ulARR = AUTO_RELOAD_Ws2811;
 8000324:	4b25      	ldr	r3, [pc, #148]	@ (80003bc <WS2811DriverInit+0xec>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	224f      	movs	r2, #79	@ 0x4f
 800032a:	62da      	str	r2, [r3, #44]	@ 0x2c
	pstTIM3_Ws2811->ulCCMR1 |= PWM_MODE_SET;
 800032c:	4b23      	ldr	r3, [pc, #140]	@ (80003bc <WS2811DriverInit+0xec>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	699a      	ldr	r2, [r3, #24]
 8000332:	4b22      	ldr	r3, [pc, #136]	@ (80003bc <WS2811DriverInit+0xec>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800033a:	619a      	str	r2, [r3, #24]
	pstTIM3_Ws2811->ulCCMR1 |= CH1_OUTPUT_SET;
 800033c:	4b1f      	ldr	r3, [pc, #124]	@ (80003bc <WS2811DriverInit+0xec>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	699a      	ldr	r2, [r3, #24]
 8000342:	4b1e      	ldr	r3, [pc, #120]	@ (80003bc <WS2811DriverInit+0xec>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f042 0208 	orr.w	r2, r2, #8
 800034a:	619a      	str	r2, [r3, #24]
	pstTIM3_Ws2811->ulCCER |= CH1_ENABLE;
 800034c:	4b1b      	ldr	r3, [pc, #108]	@ (80003bc <WS2811DriverInit+0xec>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	6a1a      	ldr	r2, [r3, #32]
 8000352:	4b1a      	ldr	r3, [pc, #104]	@ (80003bc <WS2811DriverInit+0xec>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f042 0201 	orr.w	r2, r2, #1
 800035a:	621a      	str	r2, [r3, #32]
	pstTIM3_Ws2811->ulDIER |= TIM3_DMA_ENABLE;
 800035c:	4b17      	ldr	r3, [pc, #92]	@ (80003bc <WS2811DriverInit+0xec>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	68da      	ldr	r2, [r3, #12]
 8000362:	4b16      	ldr	r3, [pc, #88]	@ (80003bc <WS2811DriverInit+0xec>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800036a:	60da      	str	r2, [r3, #12]

	// DMA config (DMA1 Channel 6 is for TIM3_CH1)
	pstDMA1_Ws2811->ulCCR = 0;
 800036c:	4b14      	ldr	r3, [pc, #80]	@ (80003c0 <WS2811DriverInit+0xf0>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
	pstDMA1_Ws2811->ulCPAR = (uint32)&pstTIM3_Ws2811->ulCCR1;
 8000374:	4b11      	ldr	r3, [pc, #68]	@ (80003bc <WS2811DriverInit+0xec>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800037c:	4b10      	ldr	r3, [pc, #64]	@ (80003c0 <WS2811DriverInit+0xf0>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	609a      	str	r2, [r3, #8]
	pstDMA1_Ws2811->ulCMAR = (uint32)unWS2811DMABuffer;
 8000382:	4b0f      	ldr	r3, [pc, #60]	@ (80003c0 <WS2811DriverInit+0xf0>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a0f      	ldr	r2, [pc, #60]	@ (80003c4 <WS2811DriverInit+0xf4>)
 8000388:	60da      	str	r2, [r3, #12]

	// Memory to Peripheral, enable memory increment, 16-bit transfer
	pstDMA1_Ws2811->ulCCR |= (DMA_DIR_READ_FROM_MEMORY |
 800038a:	4b0d      	ldr	r3, [pc, #52]	@ (80003c0 <WS2811DriverInit+0xf0>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	4b0b      	ldr	r3, [pc, #44]	@ (80003c0 <WS2811DriverInit+0xf0>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f442 62b2 	orr.w	r2, r2, #1424	@ 0x590
 8000398:	601a      	str	r2, [r3, #0]
							DMA_MEMORY_INCREMENT_MODE |
							DMA_PSIZE_16BITS |
							DMA_MSIZE_MEDIUM);

	pstTIM3_Ws2811->ulCR1 |= TIM3_CR1_CEN;
 800039a:	4b08      	ldr	r3, [pc, #32]	@ (80003bc <WS2811DriverInit+0xec>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <WS2811DriverInit+0xec>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f042 0201 	orr.w	r2, r2, #1
 80003a8:	601a      	str	r2, [r3, #0]

}
 80003aa:	bf00      	nop
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	20000010 	.word	0x20000010
 80003b8:	2000000c 	.word	0x2000000c
 80003bc:	20000014 	.word	0x20000014
 80003c0:	20000018 	.word	0x20000018
 80003c4:	20000100 	.word	0x20000100

080003c8 <WS2811DriverSendData>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void WS2811DriverSendData()
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
	pstDMA1_Ws2811->ulCNDTR = WS2811_BITS_PER_LED + WS2811_RESET_LENGTH;
 80003cc:	4b07      	ldr	r3, [pc, #28]	@ (80003ec <WS2811DriverSendData+0x24>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	224a      	movs	r2, #74	@ 0x4a
 80003d2:	605a      	str	r2, [r3, #4]
	pstDMA1_Ws2811->ulCCR |= DMA_CHANNEL_ENABLE;
 80003d4:	4b05      	ldr	r3, [pc, #20]	@ (80003ec <WS2811DriverSendData+0x24>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	4b04      	ldr	r3, [pc, #16]	@ (80003ec <WS2811DriverSendData+0x24>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f042 0201 	orr.w	r2, r2, #1
 80003e2:	601a      	str	r2, [r3, #0]
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	20000018 	.word	0x20000018

080003f0 <WS2811PrepareBuffer>:
//Outputs : DMA Buffer updating
//Return  : None
//Notes   : None
//*****************************************************************************
void WS2811PrepareBuffer(uint8 ucGreen, uint8 ucRed, uint8 ucBlue)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]
 80003fa:	460b      	mov	r3, r1
 80003fc:	71bb      	strb	r3, [r7, #6]
 80003fe:	4613      	mov	r3, r2
 8000400:	717b      	strb	r3, [r7, #5]
    uint32 ulColor = ((uint32)ucGreen << 16) | ((uint32)ucRed << 8) | ucBlue;
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	041a      	lsls	r2, r3, #16
 8000406:	79bb      	ldrb	r3, [r7, #6]
 8000408:	021b      	lsls	r3, r3, #8
 800040a:	431a      	orrs	r2, r3
 800040c:	797b      	ldrb	r3, [r7, #5]
 800040e:	4313      	orrs	r3, r2
 8000410:	60bb      	str	r3, [r7, #8]
    uint8 ucIndex = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	73fb      	strb	r3, [r7, #15]

    for (ucIndex = 0; ucIndex < WS2811_BITS_PER_LED; ucIndex++)
 8000416:	2300      	movs	r3, #0
 8000418:	73fb      	strb	r3, [r7, #15]
 800041a:	e018      	b.n	800044e <WS2811PrepareBuffer+0x5e>
    {
        if (ulColor & (1 << (WS2811_BITS_PER_LED - 1 - ucIndex)))
 800041c:	7bfb      	ldrb	r3, [r7, #15]
 800041e:	f1c3 0317 	rsb	r3, r3, #23
 8000422:	2201      	movs	r2, #1
 8000424:	fa02 f303 	lsl.w	r3, r2, r3
 8000428:	461a      	mov	r2, r3
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	4013      	ands	r3, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	d005      	beq.n	800043e <WS2811PrepareBuffer+0x4e>
        {
        	unWS2811DMABuffer[ucIndex] = WS2811_1;
 8000432:	7bfb      	ldrb	r3, [r7, #15]
 8000434:	4a12      	ldr	r2, [pc, #72]	@ (8000480 <WS2811PrepareBuffer+0x90>)
 8000436:	212d      	movs	r1, #45	@ 0x2d
 8000438:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800043c:	e004      	b.n	8000448 <WS2811PrepareBuffer+0x58>
        }
        else
        {
        	unWS2811DMABuffer[ucIndex] = WS2811_0;
 800043e:	7bfb      	ldrb	r3, [r7, #15]
 8000440:	4a0f      	ldr	r2, [pc, #60]	@ (8000480 <WS2811PrepareBuffer+0x90>)
 8000442:	2116      	movs	r1, #22
 8000444:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (ucIndex = 0; ucIndex < WS2811_BITS_PER_LED; ucIndex++)
 8000448:	7bfb      	ldrb	r3, [r7, #15]
 800044a:	3301      	adds	r3, #1
 800044c:	73fb      	strb	r3, [r7, #15]
 800044e:	7bfb      	ldrb	r3, [r7, #15]
 8000450:	2b17      	cmp	r3, #23
 8000452:	d9e3      	bls.n	800041c <WS2811PrepareBuffer+0x2c>
        }
    }

    for (ucIndex = 0; ucIndex < WS2811_RESET_LENGTH; ucIndex++)
 8000454:	2300      	movs	r3, #0
 8000456:	73fb      	strb	r3, [r7, #15]
 8000458:	e008      	b.n	800046c <WS2811PrepareBuffer+0x7c>
    {
    	unWS2811DMABuffer[24 + ucIndex] = 0;
 800045a:	7bfb      	ldrb	r3, [r7, #15]
 800045c:	3318      	adds	r3, #24
 800045e:	4a08      	ldr	r2, [pc, #32]	@ (8000480 <WS2811PrepareBuffer+0x90>)
 8000460:	2100      	movs	r1, #0
 8000462:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (ucIndex = 0; ucIndex < WS2811_RESET_LENGTH; ucIndex++)
 8000466:	7bfb      	ldrb	r3, [r7, #15]
 8000468:	3301      	adds	r3, #1
 800046a:	73fb      	strb	r3, [r7, #15]
 800046c:	7bfb      	ldrb	r3, [r7, #15]
 800046e:	2b31      	cmp	r3, #49	@ 0x31
 8000470:	d9f3      	bls.n	800045a <WS2811PrepareBuffer+0x6a>
    }
}
 8000472:	bf00      	nop
 8000474:	bf00      	nop
 8000476:	3714      	adds	r7, #20
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	20000100 	.word	0x20000100

08000484 <WatchDogTimerInit>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void WatchDogTimerInit()
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
	pstIWDG->stKR.ulKEY = WRITE_ACCESS;
 8000488:	4b10      	ldr	r3, [pc, #64]	@ (80004cc <WatchDogTimerInit+0x48>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000490:	801a      	strh	r2, [r3, #0]
	pstIWDG->stPR.ulPR = PRESCALAR_VALUE;
 8000492:	4b0e      	ldr	r3, [pc, #56]	@ (80004cc <WatchDogTimerInit+0x48>)
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	7913      	ldrb	r3, [r2, #4]
 8000498:	2106      	movs	r1, #6
 800049a:	f361 0302 	bfi	r3, r1, #0, #3
 800049e:	7113      	strb	r3, [r2, #4]
	pstIWDG->stRLR.ulRLR = RELOAD_VALUE;
 80004a0:	4b0a      	ldr	r3, [pc, #40]	@ (80004cc <WatchDogTimerInit+0x48>)
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	8913      	ldrh	r3, [r2, #8]
 80004a6:	f44f 7189 	mov.w	r1, #274	@ 0x112
 80004aa:	f361 030b 	bfi	r3, r1, #0, #12
 80004ae:	8113      	strh	r3, [r2, #8]
	pstIWDG->stKR.ulKEY = RESET_COUNTER;
 80004b0:	4b06      	ldr	r3, [pc, #24]	@ (80004cc <WatchDogTimerInit+0x48>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80004b8:	801a      	strh	r2, [r3, #0]
	pstIWDG->stKR.ulKEY = START_WATCHDOG;
 80004ba:	4b04      	ldr	r3, [pc, #16]	@ (80004cc <WatchDogTimerInit+0x48>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80004c2:	801a      	strh	r2, [r3, #0]
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	2000001c 	.word	0x2000001c

080004d0 <WatchdogTimerClear>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void WatchdogTimerClear()
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
	pstIWDG->stKR.ulKEY = RESET_COUNTER;
 80004d4:	4b04      	ldr	r3, [pc, #16]	@ (80004e8 <WatchdogTimerClear+0x18>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80004dc:	801a      	strh	r2, [r3, #0]
}
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	2000001c 	.word	0x2000001c

080004ec <GPIOLEDSet>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
bool GPIOLEDSet(PORT_TYPE LEDPort, PIN_NUMBER LEDPin, bool blLEDStatus)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
 80004f6:	460b      	mov	r3, r1
 80004f8:	71bb      	strb	r3, [r7, #6]
 80004fa:	4613      	mov	r3, r2
 80004fc:	717b      	strb	r3, [r7, #5]
	bool blFlag = FALSE;
 80004fe:	2300      	movs	r3, #0
 8000500:	75fb      	strb	r3, [r7, #23]
	GPIO_TypeDef* gpioPort = NULL;
 8000502:	2300      	movs	r3, #0
 8000504:	613b      	str	r3, [r7, #16]
	uint32_t gpioPin = 1;
 8000506:	2301      	movs	r3, #1
 8000508:	60fb      	str	r3, [r7, #12]
	uint8 ucIndex = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	72fb      	strb	r3, [r7, #11]

	switch(LEDPort)
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	2b03      	cmp	r3, #3
 8000512:	d817      	bhi.n	8000544 <GPIOLEDSet+0x58>
 8000514:	a201      	add	r2, pc, #4	@ (adr r2, 800051c <GPIOLEDSet+0x30>)
 8000516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051a:	bf00      	nop
 800051c:	0800052d 	.word	0x0800052d
 8000520:	08000533 	.word	0x08000533
 8000524:	08000539 	.word	0x08000539
 8000528:	0800053f 	.word	0x0800053f
	{
		case PORT_A:
			gpioPort = GPIOA;
 800052c:	4b17      	ldr	r3, [pc, #92]	@ (800058c <GPIOLEDSet+0xa0>)
 800052e:	613b      	str	r3, [r7, #16]
			break;
 8000530:	e008      	b.n	8000544 <GPIOLEDSet+0x58>
		case PORT_B:
			gpioPort = GPIOB;
 8000532:	4b17      	ldr	r3, [pc, #92]	@ (8000590 <GPIOLEDSet+0xa4>)
 8000534:	613b      	str	r3, [r7, #16]
			break;
 8000536:	e005      	b.n	8000544 <GPIOLEDSet+0x58>
		case PORT_C:
			gpioPort = GPIOC;
 8000538:	4b16      	ldr	r3, [pc, #88]	@ (8000594 <GPIOLEDSet+0xa8>)
 800053a:	613b      	str	r3, [r7, #16]
			break;
 800053c:	e002      	b.n	8000544 <GPIOLEDSet+0x58>
		case PORT_D:
			gpioPort = GPIOD;
 800053e:	4b16      	ldr	r3, [pc, #88]	@ (8000598 <GPIOLEDSet+0xac>)
 8000540:	613b      	str	r3, [r7, #16]
			break;
 8000542:	bf00      	nop
	}

	for(ucIndex = 0; ucIndex<16; ucIndex++)
 8000544:	2300      	movs	r3, #0
 8000546:	72fb      	strb	r3, [r7, #11]
 8000548:	e00b      	b.n	8000562 <GPIOLEDSet+0x76>
	{
		if(LEDPin == ucIndex)
 800054a:	79ba      	ldrb	r2, [r7, #6]
 800054c:	7afb      	ldrb	r3, [r7, #11]
 800054e:	429a      	cmp	r2, r3
 8000550:	d104      	bne.n	800055c <GPIOLEDSet+0x70>
		{
			gpioPin = gpioPin << LEDPin;
 8000552:	79bb      	ldrb	r3, [r7, #6]
 8000554:	68fa      	ldr	r2, [r7, #12]
 8000556:	fa02 f303 	lsl.w	r3, r2, r3
 800055a:	60fb      	str	r3, [r7, #12]
	for(ucIndex = 0; ucIndex<16; ucIndex++)
 800055c:	7afb      	ldrb	r3, [r7, #11]
 800055e:	3301      	adds	r3, #1
 8000560:	72fb      	strb	r3, [r7, #11]
 8000562:	7afb      	ldrb	r3, [r7, #11]
 8000564:	2b0f      	cmp	r3, #15
 8000566:	d9f0      	bls.n	800054a <GPIOLEDSet+0x5e>
		}
	}

	if(gpioPort != NULL)
 8000568:	693b      	ldr	r3, [r7, #16]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d008      	beq.n	8000580 <GPIOLEDSet+0x94>
	{
		HAL_GPIO_WritePin(gpioPort, gpioPin, blLEDStatus);
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	b29b      	uxth	r3, r3
 8000572:	797a      	ldrb	r2, [r7, #5]
 8000574:	4619      	mov	r1, r3
 8000576:	6938      	ldr	r0, [r7, #16]
 8000578:	f001 fc09 	bl	8001d8e <HAL_GPIO_WritePin>
		blFlag = TRUE;
 800057c:	2301      	movs	r3, #1
 800057e:	75fb      	strb	r3, [r7, #23]
	}

	return blFlag;
 8000580:	7dfb      	ldrb	r3, [r7, #23]
}
 8000582:	4618      	mov	r0, r3
 8000584:	3718      	adds	r7, #24
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40010800 	.word	0x40010800
 8000590:	40010c00 	.word	0x40010c00
 8000594:	40011000 	.word	0x40011000
 8000598:	40011400 	.word	0x40011400

0800059c <GPIOReadButtonPress>:
//Outputs : None
//Return  : TRUE - Button Pressed , FALSE - Button Not pressed
//Notes   : None
//*****************************************************************************
bool GPIOReadButtonPress()
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
	bool blFlag = FALSE;
 80005a2:	2300      	movs	r3, #0
 80005a4:	71fb      	strb	r3, [r7, #7]

	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 80005a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005aa:	4806      	ldr	r0, [pc, #24]	@ (80005c4 <GPIOReadButtonPress+0x28>)
 80005ac:	f001 fbd8 	bl	8001d60 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d101      	bne.n	80005ba <GPIOReadButtonPress+0x1e>
	{
		blFlag = TRUE;
 80005b6:	2301      	movs	r3, #1
 80005b8:	71fb      	strb	r3, [r7, #7]
	}

	return blFlag;
 80005ba:	79fb      	ldrb	r3, [r7, #7]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40011000 	.word	0x40011000

080005c8 <LEDToggle>:
//Outputs : None
//Return  : TRUE - LED Blinking success, FALSE - failed
//Notes   : None
//*****************************************************************************
bool LEDToggle(uint8 ucLEDState)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
	bool blFlag = FALSE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	73fb      	strb	r3, [r7, #15]
	PORT_TYPE port = PORT_A;
 80005d6:	2300      	movs	r3, #0
 80005d8:	73bb      	strb	r3, [r7, #14]
	PIN_NUMBER pin = PIN_5;
 80005da:	2305      	movs	r3, #5
 80005dc:	737b      	strb	r3, [r7, #13]

	if(ucLEDState == TRUE)
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d10e      	bne.n	8000602 <LEDToggle+0x3a>
	{
		blFlag = GPIOLEDSet(port, pin, TRUE);
 80005e4:	7b79      	ldrb	r1, [r7, #13]
 80005e6:	7bbb      	ldrb	r3, [r7, #14]
 80005e8:	2201      	movs	r2, #1
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ff7e 	bl	80004ec <GPIOLEDSet>
 80005f0:	4603      	mov	r3, r0
 80005f2:	73fb      	strb	r3, [r7, #15]

		if(blFlag != FALSE)
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d011      	beq.n	800061e <LEDToggle+0x56>
		{
			printf("LED ON\r\n");
 80005fa:	480b      	ldr	r0, [pc, #44]	@ (8000628 <LEDToggle+0x60>)
 80005fc:	f005 fe6e 	bl	80062dc <puts>
 8000600:	e00d      	b.n	800061e <LEDToggle+0x56>
		}
	}
	else
	{
		blFlag = GPIOLEDSet(port, pin, FALSE);
 8000602:	7b79      	ldrb	r1, [r7, #13]
 8000604:	7bbb      	ldrb	r3, [r7, #14]
 8000606:	2200      	movs	r2, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ff6f 	bl	80004ec <GPIOLEDSet>
 800060e:	4603      	mov	r3, r0
 8000610:	73fb      	strb	r3, [r7, #15]

		if(blFlag != FALSE)
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d002      	beq.n	800061e <LEDToggle+0x56>
		{
			printf("LED OFF\r\n");
 8000618:	4804      	ldr	r0, [pc, #16]	@ (800062c <LEDToggle+0x64>)
 800061a:	f005 fe5f 	bl	80062dc <puts>
		}
	}

	return blFlag;
 800061e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	08007048 	.word	0x08007048
 800062c:	08007050 	.word	0x08007050

08000630 <LoggerTask>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void LoggerTask()
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
	LOGGER_MSG stLogMsg = {0, 0};
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	2300      	movs	r3, #0
 800063c:	743b      	strb	r3, [r7, #16]
	LOGACK_MSG stLogAckMsg ={0, 0};
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	2300      	movs	r3, #0
 8000644:	723b      	strb	r3, [r7, #8]
	WATCHDOG_EVENT stLoggerEvent = {0};
 8000646:	2300      	movs	r3, #0
 8000648:	703b      	strb	r3, [r7, #0]
	bool blFlag = FALSE;
 800064a:	2300      	movs	r3, #0
 800064c:	75fb      	strb	r3, [r7, #23]
	uint8 ucStatus = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	75bb      	strb	r3, [r7, #22]

	if(osMsgqLoggerToReceiverInit(sizeof(stLogAckMsg)))
 8000652:	2008      	movs	r0, #8
 8000654:	f000 f9f2 	bl	8000a3c <osMsgqLoggerToReceiverInit>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d055      	beq.n	800070a <LoggerTask+0xda>
	{
		while(1)
		{
			if(osMsgqMsgRcvFromReceiver(&stLogMsg))
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fa22 	bl	8000aac <osMsgqMsgRcvFromReceiver>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d034      	beq.n	80006d8 <LoggerTask+0xa8>
			{
				LOG("Logger: LOGUID=%lu LEDState=0x%02X\r\n",
 800066e:	f000 fb27 	bl	8000cc0 <UARTMutexAcquire>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d005      	beq.n	8000684 <LoggerTask+0x54>
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	7c3a      	ldrb	r2, [r7, #16]
 800067c:	4619      	mov	r1, r3
 800067e:	4825      	ldr	r0, [pc, #148]	@ (8000714 <LoggerTask+0xe4>)
 8000680:	f005 fdc4 	bl	800620c <iprintf>
 8000684:	f000 fb06 	bl	8000c94 <UARTMutexRelease>
						stLogMsg.ulUId, stLogMsg.ucLEDState);


				if(LoggerTaskProcessLoggerMsg(&stLogMsg))
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	4618      	mov	r0, r3
 800068e:	f000 f847 	bl	8000720 <LoggerTaskProcessLoggerMsg>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d01f      	beq.n	80006d8 <LoggerTask+0xa8>
				{
					blFlag = LEDToggle(sgulLEDSate);
 8000698:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <LoggerTask+0xe8>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ff93 	bl	80005c8 <LEDToggle>
 80006a2:	4603      	mov	r3, r0
 80006a4:	75fb      	strb	r3, [r7, #23]
					ucStatus = (blFlag != FALSE) ? ACK_STATUS_OK : ACK_STAUS_ERROR;
 80006a6:	7dfb      	ldrb	r3, [r7, #23]
 80006a8:	f083 0301 	eor.w	r3, r3, #1
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	75bb      	strb	r3, [r7, #22]

					if(LoggerTaskSetAckMsg(&stLogAckMsg, ucStatus))
 80006b0:	7dba      	ldrb	r2, [r7, #22]
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	4611      	mov	r1, r2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 f88a 	bl	80007d0 <LoggerTaskSetAckMsg>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d00a      	beq.n	80006d8 <LoggerTask+0xa8>
					{
						if(osMsgqMsgSendToReceiver(stLogAckMsg))
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006c8:	f000 fa0c 	bl	8000ae4 <osMsgqMsgSendToReceiver>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d002      	beq.n	80006d8 <LoggerTask+0xa8>
						{
							osTaskDelay(DELAY_200);
 80006d2:	20c8      	movs	r0, #200	@ 0xc8
 80006d4:	f000 fb0c 	bl	8000cf0 <osTaskDelay>
						}
					}
				}
			}
			stLoggerEvent.src = WATCHDOG_SRC_LOGGER;
 80006d8:	2303      	movs	r3, #3
 80006da:	703b      	strb	r3, [r7, #0]
			if(!osMsgqSendToWatchdog(stLoggerEvent))
 80006dc:	7838      	ldrb	r0, [r7, #0]
 80006de:	f000 f959 	bl	8000994 <osMsgqSendToWatchdog>
 80006e2:	4603      	mov	r3, r0
 80006e4:	f083 0301 	eor.w	r3, r3, #1
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d009      	beq.n	8000702 <LoggerTask+0xd2>
			{
				LOG("Logger : Send Event to watchDogHandler Failed");
 80006ee:	f000 fae7 	bl	8000cc0 <UARTMutexAcquire>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d002      	beq.n	80006fe <LoggerTask+0xce>
 80006f8:	4808      	ldr	r0, [pc, #32]	@ (800071c <LoggerTask+0xec>)
 80006fa:	f005 fd87 	bl	800620c <iprintf>
 80006fe:	f000 fac9 	bl	8000c94 <UARTMutexRelease>
			}
			osTaskDelay(DELAY_100);
 8000702:	2064      	movs	r0, #100	@ 0x64
 8000704:	f000 faf4 	bl	8000cf0 <osTaskDelay>
			if(osMsgqMsgRcvFromReceiver(&stLogMsg))
 8000708:	e7a9      	b.n	800065e <LoggerTask+0x2e>
		}
	}
}
 800070a:	bf00      	nop
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	0800705c 	.word	0x0800705c
 8000718:	20000198 	.word	0x20000198
 800071c:	08007084 	.word	0x08007084

08000720 <LoggerTaskProcessLoggerMsg>:
//Outputs : None
//Return  : TRUE - Request Message Processed, FALSE - error
//Notes   : None
//*****************************************************************************
static bool LoggerTaskProcessLoggerMsg(LOGGER_MSG* stLogMsg)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000728:	2300      	movs	r3, #0
 800072a:	73fb      	strb	r3, [r7, #15]

	do
	{
		if(stLogMsg == NULL)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d014      	beq.n	800075c <LoggerTaskProcessLoggerMsg+0x3c>
		{
			break;
		}

		if(!LoggerTaskProcessUID(stLogMsg))
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f000 f81c 	bl	8000770 <LoggerTaskProcessUID>
 8000738:	4603      	mov	r3, r0
 800073a:	f083 0301 	eor.w	r3, r3, #1
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2b00      	cmp	r3, #0
 8000742:	d10d      	bne.n	8000760 <LoggerTaskProcessLoggerMsg+0x40>
		{
			break;
		}

		if(!LoggerTaskProcessLEDState(stLogMsg))
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 f82b 	bl	80007a0 <LoggerTaskProcessLEDState>
 800074a:	4603      	mov	r3, r0
 800074c:	f083 0301 	eor.w	r3, r3, #1
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d106      	bne.n	8000764 <LoggerTaskProcessLoggerMsg+0x44>
		{
			break;
		}

		// If all succeeded
		blFlag = TRUE;
 8000756:	2301      	movs	r3, #1
 8000758:	73fb      	strb	r3, [r7, #15]
 800075a:	e004      	b.n	8000766 <LoggerTaskProcessLoggerMsg+0x46>
			break;
 800075c:	bf00      	nop
 800075e:	e002      	b.n	8000766 <LoggerTaskProcessLoggerMsg+0x46>
			break;
 8000760:	bf00      	nop
 8000762:	e000      	b.n	8000766 <LoggerTaskProcessLoggerMsg+0x46>
			break;
 8000764:	bf00      	nop

	}while(0);

	return blFlag;
 8000766:	7bfb      	ldrb	r3, [r7, #15]
}
 8000768:	4618      	mov	r0, r3
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <LoggerTaskProcessUID>:
//Outputs : None
//Return  : TRUE - Request Message UID processed, FALSE - error
//Notes   : None
//*****************************************************************************
static bool LoggerTaskProcessUID(LOGGER_MSG* stLogMsg)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000778:	2300      	movs	r3, #0
 800077a:	73fb      	strb	r3, [r7, #15]

	if(stLogMsg != NULL)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d005      	beq.n	800078e <LoggerTaskProcessUID+0x1e>
	{
		sgulUId =  stLogMsg->ulUId;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a05      	ldr	r2, [pc, #20]	@ (800079c <LoggerTaskProcessUID+0x2c>)
 8000788:	6013      	str	r3, [r2, #0]
		blFlag = TRUE;
 800078a:	2301      	movs	r3, #1
 800078c:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	20000194 	.word	0x20000194

080007a0 <LoggerTaskProcessLEDState>:
//Outputs : None
//Return  : TRUE - Request Message DATA processed, FALSE - error
//Notes   : None
//*****************************************************************************
static bool LoggerTaskProcessLEDState(LOGGER_MSG* stLogMsg)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	73fb      	strb	r3, [r7, #15]

	if(stLogMsg != NULL)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d005      	beq.n	80007be <LoggerTaskProcessLEDState+0x1e>
	{
		sgulLEDSate = stLogMsg->ucLEDState;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	791a      	ldrb	r2, [r3, #4]
 80007b6:	4b05      	ldr	r3, [pc, #20]	@ (80007cc <LoggerTaskProcessLEDState+0x2c>)
 80007b8:	701a      	strb	r2, [r3, #0]
		blFlag = TRUE;
 80007ba:	2301      	movs	r3, #1
 80007bc:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 80007be:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	20000198 	.word	0x20000198

080007d0 <LoggerTaskSetAckMsg>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
static bool LoggerTaskSetAckMsg(LOGACK_MSG* stLogAckMsg, uint8 ucState)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	70fb      	strb	r3, [r7, #3]
	bool blFlag = FALSE;
 80007dc:	2300      	movs	r3, #0
 80007de:	73fb      	strb	r3, [r7, #15]

	if(stLogAckMsg != NULL)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d008      	beq.n	80007f8 <LoggerTaskSetAckMsg+0x28>
	{
		stLogAckMsg->ulUId = sgulUId;
 80007e6:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <LoggerTaskSetAckMsg+0x34>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	601a      	str	r2, [r3, #0]
		stLogAckMsg->ucState = ucState;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	78fa      	ldrb	r2, [r7, #3]
 80007f2:	711a      	strb	r2, [r3, #4]
		blFlag = TRUE;
 80007f4:	2301      	movs	r3, #1
 80007f6:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	20000194 	.word	0x20000194

08000808 <osMsgqPollerToRecieverInit>:
//Outputs : None
//Return  : TRUE - Message Queue Initialization completed, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqPollerToRecieverInit(uint32 MsgSize)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000810:	2300      	movs	r3, #0
 8000812:	73fb      	strb	r3, [r7, #15]

	PollerToReceiverId = osMessageQueueNew(MSG_COUNT, MsgSize, NULL);
 8000814:	2200      	movs	r2, #0
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	200a      	movs	r0, #10
 800081a:	f002 fb3c 	bl	8002e96 <osMessageQueueNew>
 800081e:	4603      	mov	r3, r0
 8000820:	4a06      	ldr	r2, [pc, #24]	@ (800083c <osMsgqPollerToRecieverInit+0x34>)
 8000822:	6013      	str	r3, [r2, #0]

	if(PollerToReceiverId != NULL)
 8000824:	4b05      	ldr	r3, [pc, #20]	@ (800083c <osMsgqPollerToRecieverInit+0x34>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <osMsgqPollerToRecieverInit+0x28>
	{
		blFlag = TRUE;
 800082c:	2301      	movs	r3, #1
 800082e:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000830:	7bfb      	ldrb	r3, [r7, #15]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	2000019c 	.word	0x2000019c

08000840 <osMsgqRecieverToPollerInit>:
//Outputs : None
//Return  : TRUE - Message Queue Initialization completed, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqRecieverToPollerInit(uint32 MsgSize)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000848:	2300      	movs	r3, #0
 800084a:	73fb      	strb	r3, [r7, #15]

	ReceiverToPollerId = osMessageQueueNew(MSG_COUNT, MsgSize, NULL);
 800084c:	2200      	movs	r2, #0
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	200a      	movs	r0, #10
 8000852:	f002 fb20 	bl	8002e96 <osMessageQueueNew>
 8000856:	4603      	mov	r3, r0
 8000858:	4a06      	ldr	r2, [pc, #24]	@ (8000874 <osMsgqRecieverToPollerInit+0x34>)
 800085a:	6013      	str	r3, [r2, #0]

	if(ReceiverToPollerId != NULL)
 800085c:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <osMsgqRecieverToPollerInit+0x34>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <osMsgqRecieverToPollerInit+0x28>
	{
		blFlag = TRUE;
 8000864:	2301      	movs	r3, #1
 8000866:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000868:	7bfb      	ldrb	r3, [r7, #15]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200001a0 	.word	0x200001a0

08000878 <osMsgqMessageSendToReceiver>:
//Outputs : None
//Return  : TRUE - Message sent, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMessageSendToReceiver(REQUEST_MSG stReqMsg)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	bool blFlag = FALSE;
 8000884:	2300      	movs	r3, #0
 8000886:	75fb      	strb	r3, [r7, #23]

	if(osMessageQueuePut(PollerToReceiverId, &stReqMsg, MSG_PRIORITY,
 8000888:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <osMsgqMessageSendToReceiver+0x34>)
 800088a:	6818      	ldr	r0, [r3, #0]
 800088c:	1d39      	adds	r1, r7, #4
 800088e:	2300      	movs	r3, #0
 8000890:	2200      	movs	r2, #0
 8000892:	f002 fb73 	bl	8002f7c <osMessageQueuePut>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d101      	bne.n	80008a0 <osMsgqMessageSendToReceiver+0x28>
			0) == osOK)
	{
		blFlag = TRUE;
 800089c:	2301      	movs	r3, #1
 800089e:	75fb      	strb	r3, [r7, #23]
	}

	return blFlag;
 80008a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000019c 	.word	0x2000019c

080008b0 <osMsgqMessageRcvFromPoller>:
//Outputs : None
//Return  : TRUE - Message Received, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMessageRcvFromPoller(REQUEST_MSG* stReqMsg)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	73fb      	strb	r3, [r7, #15]

	if(stReqMsg != NULL)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d00b      	beq.n	80008da <osMsgqMessageRcvFromPoller+0x2a>
	{
		if (osMessageQueueGet(PollerToReceiverId, stReqMsg, NULL,
 80008c2:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <osMsgqMessageRcvFromPoller+0x34>)
 80008c4:	6818      	ldr	r0, [r3, #0]
 80008c6:	2364      	movs	r3, #100	@ 0x64
 80008c8:	2200      	movs	r2, #0
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	f002 fbb6 	bl	800303c <osMessageQueueGet>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d101      	bne.n	80008da <osMsgqMessageRcvFromPoller+0x2a>
				100) == osOK)
		{
			blFlag = TRUE;
 80008d6:	2301      	movs	r3, #1
 80008d8:	73fb      	strb	r3, [r7, #15]
		}
	}

	return blFlag;
 80008da:	7bfb      	ldrb	r3, [r7, #15]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000019c 	.word	0x2000019c

080008e8 <osMsgqMessageSendToPoller>:
//Outputs : None
//Return  : TRUE - Message Sent, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMessageSendToPoller(ACK_MSG stAckMsg)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	bool blFlag = FALSE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	75fb      	strb	r3, [r7, #23]

	if(osMessageQueuePut(ReceiverToPollerId, &stAckMsg, MSG_PRIORITY,
 80008f8:	4b08      	ldr	r3, [pc, #32]	@ (800091c <osMsgqMessageSendToPoller+0x34>)
 80008fa:	6818      	ldr	r0, [r3, #0]
 80008fc:	1d39      	adds	r1, r7, #4
 80008fe:	2300      	movs	r3, #0
 8000900:	2200      	movs	r2, #0
 8000902:	f002 fb3b 	bl	8002f7c <osMessageQueuePut>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d101      	bne.n	8000910 <osMsgqMessageSendToPoller+0x28>
			                                 0) == osOK)
	{
		blFlag = TRUE;
 800090c:	2301      	movs	r3, #1
 800090e:	75fb      	strb	r3, [r7, #23]
	}

	return blFlag;
 8000910:	7dfb      	ldrb	r3, [r7, #23]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200001a0 	.word	0x200001a0

08000920 <osMsgqMessageRcvFromReceiver>:
//Outputs : None
//Return  : TRUE - Message Received, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMessageRcvFromReceiver(ACK_MSG* stAckMsg)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000928:	2300      	movs	r3, #0
 800092a:	73fb      	strb	r3, [r7, #15]

	if(stAckMsg != NULL)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d00c      	beq.n	800094c <osMsgqMessageRcvFromReceiver+0x2c>
	{
		if (osMessageQueueGet(ReceiverToPollerId, stAckMsg, NULL,
 8000932:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <osMsgqMessageRcvFromReceiver+0x38>)
 8000934:	6818      	ldr	r0, [r3, #0]
 8000936:	f04f 33ff 	mov.w	r3, #4294967295
 800093a:	2200      	movs	r2, #0
 800093c:	6879      	ldr	r1, [r7, #4]
 800093e:	f002 fb7d 	bl	800303c <osMessageQueueGet>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d101      	bne.n	800094c <osMsgqMessageRcvFromReceiver+0x2c>
				osWaitForever) == osOK)
		{
			blFlag = TRUE;
 8000948:	2301      	movs	r3, #1
 800094a:	73fb      	strb	r3, [r7, #15]
		}
	}

	return blFlag;
 800094c:	7bfb      	ldrb	r3, [r7, #15]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200001a0 	.word	0x200001a0

0800095c <osMsgqWatchdogInit>:
//Outputs : None
//Return  : TRUE - Message Queue Initialization completed, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqWatchdogInit(uint32 MsgSize)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000964:	2300      	movs	r3, #0
 8000966:	73fb      	strb	r3, [r7, #15]

	WatchdogQueueId = osMessageQueueNew(MSG_COUNT, MsgSize, NULL);
 8000968:	2200      	movs	r2, #0
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	200a      	movs	r0, #10
 800096e:	f002 fa92 	bl	8002e96 <osMessageQueueNew>
 8000972:	4603      	mov	r3, r0
 8000974:	4a06      	ldr	r2, [pc, #24]	@ (8000990 <osMsgqWatchdogInit+0x34>)
 8000976:	6013      	str	r3, [r2, #0]

	if(WatchdogQueueId != NULL)
 8000978:	4b05      	ldr	r3, [pc, #20]	@ (8000990 <osMsgqWatchdogInit+0x34>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <osMsgqWatchdogInit+0x28>
	{
		blFlag = TRUE;
 8000980:	2301      	movs	r3, #1
 8000982:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000984:	7bfb      	ldrb	r3, [r7, #15]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200001a4 	.word	0x200001a4

08000994 <osMsgqSendToWatchdog>:
//Outputs : None
//Return  : TRUE - Message Sent, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqSendToWatchdog(WATCHDOG_EVENT stEvent)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	7138      	strb	r0, [r7, #4]
	bool blFlag = FALSE;
 800099c:	2300      	movs	r3, #0
 800099e:	73fb      	strb	r3, [r7, #15]

    if(osMessageQueuePut(WatchdogQueueId, &stEvent, 0, osWaitForever) == osOK)
 80009a0:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <osMsgqSendToWatchdog+0x30>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	1d39      	adds	r1, r7, #4
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	2200      	movs	r2, #0
 80009ac:	f002 fae6 	bl	8002f7c <osMessageQueuePut>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d101      	bne.n	80009ba <osMsgqSendToWatchdog+0x26>
    {
    	blFlag = TRUE;
 80009b6:	2301      	movs	r3, #1
 80009b8:	73fb      	strb	r3, [r7, #15]
    }

    return blFlag;
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200001a4 	.word	0x200001a4

080009c8 <osMsgqRcvFromWatchdog>:
//Outputs : None
//Return  : TRUE - Message Received, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqRcvFromWatchdog(WATCHDOG_EVENT* stEvent)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	73fb      	strb	r3, [r7, #15]

	if(stEvent != NULL)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d00c      	beq.n	80009f4 <osMsgqRcvFromWatchdog+0x2c>
	{
		if(osMessageQueueGet(WatchdogQueueId, stEvent, NULL,
 80009da:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <osMsgqRcvFromWatchdog+0x38>)
 80009dc:	6818      	ldr	r0, [r3, #0]
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
 80009e2:	2200      	movs	r2, #0
 80009e4:	6879      	ldr	r1, [r7, #4]
 80009e6:	f002 fb29 	bl	800303c <osMessageQueueGet>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d101      	bne.n	80009f4 <osMsgqRcvFromWatchdog+0x2c>
				osWaitForever) == osOK)
		{
			blFlag = TRUE;
 80009f0:	2301      	movs	r3, #1
 80009f2:	73fb      	strb	r3, [r7, #15]
		}
	}

    return blFlag;
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200001a4 	.word	0x200001a4

08000a04 <osMsgqReceiverToLoggerInit>:
//Outputs : None
//Return  : TRUE - Message Queue Initialization completed, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqReceiverToLoggerInit(uint32 MsgSize)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	73fb      	strb	r3, [r7, #15]

	ReceiverToLoggerId = osMessageQueueNew(MSG_COUNT, MsgSize, NULL);
 8000a10:	2200      	movs	r2, #0
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	200a      	movs	r0, #10
 8000a16:	f002 fa3e 	bl	8002e96 <osMessageQueueNew>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	4a06      	ldr	r2, [pc, #24]	@ (8000a38 <osMsgqReceiverToLoggerInit+0x34>)
 8000a1e:	6013      	str	r3, [r2, #0]

	if(ReceiverToLoggerId != NULL)
 8000a20:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <osMsgqReceiverToLoggerInit+0x34>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <osMsgqReceiverToLoggerInit+0x28>
	{
		blFlag = TRUE;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200001a8 	.word	0x200001a8

08000a3c <osMsgqLoggerToReceiverInit>:
//Outputs : None
//Return  : TRUE - Message Queue Initialization completed, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqLoggerToReceiverInit(uint32 MsgSize)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	73fb      	strb	r3, [r7, #15]

	LoggerToReceiverId = osMessageQueueNew(MSG_COUNT, MsgSize, NULL);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	200a      	movs	r0, #10
 8000a4e:	f002 fa22 	bl	8002e96 <osMessageQueueNew>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4a06      	ldr	r2, [pc, #24]	@ (8000a70 <osMsgqLoggerToReceiverInit+0x34>)
 8000a56:	6013      	str	r3, [r2, #0]

	if(LoggerToReceiverId != NULL)
 8000a58:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <osMsgqLoggerToReceiverInit+0x34>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <osMsgqLoggerToReceiverInit+0x28>
	{
		blFlag = TRUE;
 8000a60:	2301      	movs	r3, #1
 8000a62:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200001ac 	.word	0x200001ac

08000a74 <osMsgqMessageSendToLogger>:
//Outputs : None
//Return  : TRUE - Message sent, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMessageSendToLogger(LOGGER_MSG stLogMsg)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	e883 0003 	stmia.w	r3, {r0, r1}
	bool blFlag = FALSE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	73fb      	strb	r3, [r7, #15]

	if(osMessageQueuePut(ReceiverToLoggerId, &stLogMsg, MSG_PRIORITY,
 8000a84:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <osMsgqMessageSendToLogger+0x34>)
 8000a86:	6818      	ldr	r0, [r3, #0]
 8000a88:	4639      	mov	r1, r7
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f002 fa75 	bl	8002f7c <osMessageQueuePut>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d101      	bne.n	8000a9c <osMsgqMessageSendToLogger+0x28>
			0) == osOK)
	{
		blFlag = TRUE;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200001a8 	.word	0x200001a8

08000aac <osMsgqMsgRcvFromReceiver>:
//Outputs : None
//Return  : TRUE - Message Received, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMsgRcvFromReceiver(LOGGER_MSG* stLogMsg)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	73fb      	strb	r3, [r7, #15]

	if(stLogMsg != NULL)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d00b      	beq.n	8000ad6 <osMsgqMsgRcvFromReceiver+0x2a>
	{
		if (osMessageQueueGet(ReceiverToLoggerId, stLogMsg, NULL,
 8000abe:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <osMsgqMsgRcvFromReceiver+0x34>)
 8000ac0:	6818      	ldr	r0, [r3, #0]
 8000ac2:	2364      	movs	r3, #100	@ 0x64
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	f002 fab8 	bl	800303c <osMessageQueueGet>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d101      	bne.n	8000ad6 <osMsgqMsgRcvFromReceiver+0x2a>
				100) == osOK)
		{
			blFlag = TRUE;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	73fb      	strb	r3, [r7, #15]
		}
	}

	return blFlag;
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	200001a8 	.word	0x200001a8

08000ae4 <osMsgqMsgSendToReceiver>:
//Outputs : None
//Return  : TRUE - Message Sent, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMsgSendToReceiver(LOGACK_MSG stLogAckMsg)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	463b      	mov	r3, r7
 8000aec:	e883 0003 	stmia.w	r3, {r0, r1}
	bool blFlag = FALSE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	73fb      	strb	r3, [r7, #15]

	if(osMessageQueuePut(LoggerToReceiverId, &stLogAckMsg, MSG_PRIORITY,
 8000af4:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <osMsgqMsgSendToReceiver+0x34>)
 8000af6:	6818      	ldr	r0, [r3, #0]
 8000af8:	4639      	mov	r1, r7
 8000afa:	2300      	movs	r3, #0
 8000afc:	2200      	movs	r2, #0
 8000afe:	f002 fa3d 	bl	8002f7c <osMessageQueuePut>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <osMsgqMsgSendToReceiver+0x28>
			                                 0) == osOK)
	{
		blFlag = TRUE;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200001ac 	.word	0x200001ac

08000b1c <osMsgqMessageRcvFromLogger>:
//Outputs : None
//Return  : TRUE - Message Received, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMessageRcvFromLogger(LOGACK_MSG* stLogAckMsg)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]

	if(stLogAckMsg != NULL)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d00c      	beq.n	8000b48 <osMsgqMessageRcvFromLogger+0x2c>
	{
		if (osMessageQueueGet(LoggerToReceiverId, stLogAckMsg, NULL,
 8000b2e:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <osMsgqMessageRcvFromLogger+0x38>)
 8000b30:	6818      	ldr	r0, [r3, #0]
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	2200      	movs	r2, #0
 8000b38:	6879      	ldr	r1, [r7, #4]
 8000b3a:	f002 fa7f 	bl	800303c <osMessageQueueGet>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d101      	bne.n	8000b48 <osMsgqMessageRcvFromLogger+0x2c>
				osWaitForever) == osOK)
		{
			blFlag = TRUE;
 8000b44:	2301      	movs	r3, #1
 8000b46:	73fb      	strb	r3, [r7, #15]
		}
	}

	return blFlag;
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200001ac 	.word	0x200001ac

08000b58 <TaskInit>:
//Outputs : None
//Return  : TRUE - initialized , FALSE - Error
//Notes   : None
//*****************************************************************************
bool TaskInit()
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
	uint8 ucIndex = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	71fb      	strb	r3, [r7, #7]
	bool blFlag = FALSE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	71bb      	strb	r3, [r7, #6]

	CreateUARTMutex();
 8000b66:	f000 f87d 	bl	8000c64 <CreateUARTMutex>

	for(ucIndex = 0; ucIndex < TASKS_MAX_SIZE; ucIndex++)
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	71fb      	strb	r3, [r7, #7]
 8000b6e:	e00e      	b.n	8000b8e <TaskInit+0x36>
	{
		blFlag = osTaskCreate(&stTasks[ucIndex]);
 8000b70:	79fa      	ldrb	r2, [r7, #7]
 8000b72:	4613      	mov	r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	4413      	add	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4a09      	ldr	r2, [pc, #36]	@ (8000ba0 <TaskInit+0x48>)
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 f810 	bl	8000ba4 <osTaskCreate>
 8000b84:	4603      	mov	r3, r0
 8000b86:	71bb      	strb	r3, [r7, #6]
	for(ucIndex = 0; ucIndex < TASKS_MAX_SIZE; ucIndex++)
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	71fb      	strb	r3, [r7, #7]
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	d9ed      	bls.n	8000b70 <TaskInit+0x18>
	}

	return blFlag;
 8000b94:	79bb      	ldrb	r3, [r7, #6]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000020 	.word	0x20000020

08000ba4 <osTaskCreate>:
//Outputs : None
//Return  : TRUE - created thread successfully , FALSE - error
//Notes   : None
//*****************************************************************************
static bool osTaskCreate(TASKS *stTask)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b08d      	sub	sp, #52	@ 0x34
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	osThreadAttr_t attr = {0, 0, 0, 0, 0, 0, 0, 0, 0};
 8000bb2:	f107 0308 	add.w	r3, r7, #8
 8000bb6:	2224      	movs	r2, #36	@ 0x24
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f005 fc6e 	bl	800649c <memset>

	if(stTask != NULL)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d03f      	beq.n	8000c46 <osTaskCreate+0xa2>
	{
		attr.name = (const char *)stTask->pucTaskName;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	60bb      	str	r3, [r7, #8]
		attr.stack_size = stTask->ulStackSize;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	61fb      	str	r3, [r7, #28]
		attr.priority = (osPriority_t)osPriorityNormal;
 8000bd2:	2318      	movs	r3, #24
 8000bd4:	623b      	str	r3, [r7, #32]

		ThreadHandles[ucThreadIndex] = osThreadNew(stTask->pTaskFunc,
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	691b      	ldr	r3, [r3, #16]
 8000bda:	4a1e      	ldr	r2, [pc, #120]	@ (8000c54 <osTaskCreate+0xb0>)
 8000bdc:	7812      	ldrb	r2, [r2, #0]
 8000bde:	4614      	mov	r4, r2
 8000be0:	f107 0208 	add.w	r2, r7, #8
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 ff9a 	bl	8002b20 <osThreadNew>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4a1a      	ldr	r2, [pc, #104]	@ (8000c58 <osTaskCreate+0xb4>)
 8000bf0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
														NULL, &attr);
		stTask->Thread_Id = ThreadHandles[ucThreadIndex];
 8000bf4:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <osTaskCreate+0xb0>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b17      	ldr	r3, [pc, #92]	@ (8000c58 <osTaskCreate+0xb4>)
 8000bfc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	605a      	str	r2, [r3, #4]

		if(ThreadHandles[ucThreadIndex] == NULL)
 8000c04:	4b13      	ldr	r3, [pc, #76]	@ (8000c54 <osTaskCreate+0xb0>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b13      	ldr	r3, [pc, #76]	@ (8000c58 <osTaskCreate+0xb4>)
 8000c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d109      	bne.n	8000c28 <osTaskCreate+0x84>
		{
			blFlag = FALSE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		    printf("Failed to create thread: %s\r\n", stTask->pucTaskName);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480e      	ldr	r0, [pc, #56]	@ (8000c5c <osTaskCreate+0xb8>)
 8000c22:	f005 faf3 	bl	800620c <iprintf>
 8000c26:	e00e      	b.n	8000c46 <osTaskCreate+0xa2>
		}
		else
		{
			printf("Created thread: %s\r\n", stTask->pucTaskName);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480c      	ldr	r0, [pc, #48]	@ (8000c60 <osTaskCreate+0xbc>)
 8000c30:	f005 faec 	bl	800620c <iprintf>
			ucThreadIndex++;
 8000c34:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <osTaskCreate+0xb0>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <osTaskCreate+0xb0>)
 8000c3e:	701a      	strb	r2, [r3, #0]
			blFlag = TRUE;
 8000c40:	2301      	movs	r3, #1
 8000c42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}

	}

	return blFlag;
 8000c46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3734      	adds	r7, #52	@ 0x34
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd90      	pop	{r4, r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200001c0 	.word	0x200001c0
 8000c58:	200001b0 	.word	0x200001b0
 8000c5c:	080070e0 	.word	0x080070e0
 8000c60:	08007100 	.word	0x08007100

08000c64 <CreateUARTMutex>:
//Outputs : None
//Return  : TRUE - return success , FALSE - Failed
//Notes   : None
//*****************************************************************************
static bool CreateUARTMutex()
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
	bool blFlag = FALSE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	71fb      	strb	r3, [r7, #7]

	uartMutex = osMutexNew(NULL);
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f002 f803 	bl	8002c7a <osMutexNew>
 8000c74:	4603      	mov	r3, r0
 8000c76:	4a06      	ldr	r2, [pc, #24]	@ (8000c90 <CreateUARTMutex+0x2c>)
 8000c78:	6013      	str	r3, [r2, #0]

	if(uartMutex != NULL)
 8000c7a:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <CreateUARTMutex+0x2c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <CreateUARTMutex+0x22>
	{
		blFlag = TRUE;
 8000c82:	2301      	movs	r3, #1
 8000c84:	71fb      	strb	r3, [r7, #7]
	}

	return blFlag;
 8000c86:	79fb      	ldrb	r3, [r7, #7]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	200001c4 	.word	0x200001c4

08000c94 <UARTMutexRelease>:
//Outputs : None
//Return  : TRUE - return success , FALSE - Failed
//Notes   : None
//*****************************************************************************
bool UARTMutexRelease()
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
	bool blFlag = FALSE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	71fb      	strb	r3, [r7, #7]

	if(osMutexRelease(uartMutex) == osOK)
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <UARTMutexRelease+0x28>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f002 f8ba 	bl	8002e1c <osMutexRelease>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <UARTMutexRelease+0x1e>
	{
		blFlag = TRUE;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	71fb      	strb	r3, [r7, #7]
	}

	return blFlag;
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200001c4 	.word	0x200001c4

08000cc0 <UARTMutexAcquire>:
//Outputs : None
//Return  : TRUE - return success , FALSE - Failed
//Notes   : None
//*****************************************************************************
bool UARTMutexAcquire()
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
	bool blFlag = FALSE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	71fb      	strb	r3, [r7, #7]

	if(osMutexAcquire(uartMutex, osWaitForever) == osOK)
 8000cca:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <UARTMutexAcquire+0x2c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f002 f857 	bl	8002d86 <osMutexAcquire>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <UARTMutexAcquire+0x22>
	{
		blFlag = TRUE;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	71fb      	strb	r3, [r7, #7]
	}

	return blFlag;
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200001c4 	.word	0x200001c4

08000cf0 <osTaskDelay>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void osTaskDelay(uint32 delay)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	osDelay(delay);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f001 ffa3 	bl	8002c44 <osDelay>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <PollerTask>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void PollerTask()
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	@ 0x28
 8000d0c:	af02      	add	r7, sp, #8
	REQUEST_MSG stReqMsg = {0, 0, 0};
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	2300      	movs	r3, #0
 8000d14:	763b      	strb	r3, [r7, #24]
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
	ACK_MSG stAckMsg = {0, 0, 0, 0};
 8000d1a:	f107 0308 	add.w	r3, r7, #8
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
	WATCHDOG_EVENT stPollerEvent = {0};
 8000d26:	2300      	movs	r3, #0
 8000d28:	713b      	strb	r3, [r7, #4]

	if((osMsgqPollerToRecieverInit(sizeof(stReqMsg))) && \
 8000d2a:	200c      	movs	r0, #12
 8000d2c:	f7ff fd6c 	bl	8000808 <osMsgqPollerToRecieverInit>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d065      	beq.n	8000e02 <PollerTask+0xfa>
			(osMsgqWatchdogInit(sizeof(stPollerEvent))))
 8000d36:	2001      	movs	r0, #1
 8000d38:	f7ff fe10 	bl	800095c <osMsgqWatchdogInit>
 8000d3c:	4603      	mov	r3, r0
	if((osMsgqPollerToRecieverInit(sizeof(stReqMsg))) && \
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d05f      	beq.n	8000e02 <PollerTask+0xfa>
	{
		while(1)
		{
			if(GPIOReadButtonPress())
 8000d42:	f7ff fc2b 	bl	800059c <GPIOReadButtonPress>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d044      	beq.n	8000dd6 <PollerTask+0xce>
			{
				LOG("\nButton Pressed\r\n");
 8000d4c:	f7ff ffb8 	bl	8000cc0 <UARTMutexAcquire>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d002      	beq.n	8000d5c <PollerTask+0x54>
 8000d56:	482d      	ldr	r0, [pc, #180]	@ (8000e0c <PollerTask+0x104>)
 8000d58:	f005 fac0 	bl	80062dc <puts>
 8000d5c:	f7ff ff9a 	bl	8000c94 <UARTMutexRelease>

				if(PollerTaskBuildRequest(&stReqMsg))
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 f859 	bl	8000e1c <PollerTaskBuildRequest>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d02f      	beq.n	8000dd0 <PollerTask+0xc8>
				{
					LOG("Poller:Request Building\r\n");
 8000d70:	f7ff ffa6 	bl	8000cc0 <UARTMutexAcquire>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d002      	beq.n	8000d80 <PollerTask+0x78>
 8000d7a:	4825      	ldr	r0, [pc, #148]	@ (8000e10 <PollerTask+0x108>)
 8000d7c:	f005 faae 	bl	80062dc <puts>
 8000d80:	f7ff ff88 	bl	8000c94 <UARTMutexRelease>

					if(osMsgqMessageSendToReceiver(stReqMsg))
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d8c:	f7ff fd74 	bl	8000878 <osMsgqMessageSendToReceiver>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d002      	beq.n	8000d9c <PollerTask+0x94>
					{
						osTaskDelay(DELAY_200);
 8000d96:	20c8      	movs	r0, #200	@ 0xc8
 8000d98:	f7ff ffaa 	bl	8000cf0 <osTaskDelay>
					}

					if(osMsgqMessageRcvFromReceiver(&stAckMsg))
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fdbd 	bl	8000920 <osMsgqMessageRcvFromReceiver>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d011      	beq.n	8000dd0 <PollerTask+0xc8>
					{
						LOG("Poller: ACKUID=%lu, CMD=0x%02X, "
 8000dac:	f7ff ff88 	bl	8000cc0 <UARTMutexAcquire>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d00a      	beq.n	8000dcc <PollerTask+0xc4>
 8000db6:	68b9      	ldr	r1, [r7, #8]
 8000db8:	7b3b      	ldrb	r3, [r7, #12]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	7b7b      	ldrb	r3, [r7, #13]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4813      	ldr	r0, [pc, #76]	@ (8000e14 <PollerTask+0x10c>)
 8000dc8:	f005 fa20 	bl	800620c <iprintf>
 8000dcc:	f7ff ff62 	bl	8000c94 <UARTMutexRelease>
									"STATE=0x%02X, DATA=0x%08lX\r\n\n", \
								stAckMsg.ulUId, stAckMsg.ucCmd,
								stAckMsg.ucState, stAckMsg.ulData);
					}
				}
				osTaskDelay(DELAY_100);
 8000dd0:	2064      	movs	r0, #100	@ 0x64
 8000dd2:	f7ff ff8d 	bl	8000cf0 <osTaskDelay>
			}
			stPollerEvent.src = WATCHDOG_SRC_POLLER;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	713b      	strb	r3, [r7, #4]
			if(!osMsgqSendToWatchdog(stPollerEvent))
 8000dda:	7938      	ldrb	r0, [r7, #4]
 8000ddc:	f7ff fdda 	bl	8000994 <osMsgqSendToWatchdog>
 8000de0:	4603      	mov	r3, r0
 8000de2:	f083 0301 	eor.w	r3, r3, #1
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d0aa      	beq.n	8000d42 <PollerTask+0x3a>
			{
				LOG("Poller : Send Event to watchDogHandler Failed\r\n");
 8000dec:	f7ff ff68 	bl	8000cc0 <UARTMutexAcquire>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d002      	beq.n	8000dfc <PollerTask+0xf4>
 8000df6:	4808      	ldr	r0, [pc, #32]	@ (8000e18 <PollerTask+0x110>)
 8000df8:	f005 fa70 	bl	80062dc <puts>
 8000dfc:	f7ff ff4a 	bl	8000c94 <UARTMutexRelease>
			if(GPIOReadButtonPress())
 8000e00:	e79f      	b.n	8000d42 <PollerTask+0x3a>
			}
		}
	}
}
 8000e02:	bf00      	nop
 8000e04:	3720      	adds	r7, #32
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	08007188 	.word	0x08007188
 8000e10:	0800719c 	.word	0x0800719c
 8000e14:	080071b8 	.word	0x080071b8
 8000e18:	080071f8 	.word	0x080071f8

08000e1c <PollerTaskBuildRequest>:
//Outputs : None
//Return  : TRUE - Request Message built, FALSE - error
//Notes   : None
//*****************************************************************************
static bool PollerTaskBuildRequest(REQUEST_MSG* stReqMsg)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]

	if(stReqMsg != NULL)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d018      	beq.n	8000e60 <PollerTaskBuildRequest+0x44>
	{
		stReqMsg->ulUId = ++ulUIdCounter;
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <PollerTaskBuildRequest+0x50>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	3301      	adds	r3, #1
 8000e34:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <PollerTaskBuildRequest+0x50>)
 8000e36:	6013      	str	r3, [r2, #0]
 8000e38:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <PollerTaskBuildRequest+0x50>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	601a      	str	r2, [r3, #0]
		stReqMsg->ucCmd = SET_CMD;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2202      	movs	r2, #2
 8000e44:	711a      	strb	r2, [r3, #4]
		ulDATA = ulDATA ^ ulMASK;
 8000e46:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <PollerTaskBuildRequest+0x54>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e74 <PollerTaskBuildRequest+0x58>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4053      	eors	r3, r2
 8000e50:	4a07      	ldr	r2, [pc, #28]	@ (8000e70 <PollerTaskBuildRequest+0x54>)
 8000e52:	6013      	str	r3, [r2, #0]
		stReqMsg->ulData = ulDATA;
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <PollerTaskBuildRequest+0x54>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
		blFlag = TRUE;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	200001c8 	.word	0x200001c8
 8000e70:	200001cc 	.word	0x200001cc
 8000e74:	20000070 	.word	0x20000070

08000e78 <PwmHandler>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
bool PwmHandler()
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
	bool blFlag = FALSE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	71fb      	strb	r3, [r7, #7]

	PWMDriverInit();
 8000e82:	f7ff f9a1 	bl	80001c8 <PWMDriverInit>
	PWMDriverSet();
 8000e86:	f7ff f9c9 	bl	800021c <PWMDriverSet>
	PWMDriverStart(DUTY_CYCLE);
 8000e8a:	f640 60a6 	movw	r0, #3750	@ 0xea6
 8000e8e:	f7ff fa07 	bl	80002a0 <PWMDriverStart>

	blFlag = TRUE;
 8000e92:	2301      	movs	r3, #1
 8000e94:	71fb      	strb	r3, [r7, #7]

	return blFlag;
 8000e96:	79fb      	ldrb	r3, [r7, #7]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <RGBLedHandler>:
//Outputs : None
//Return  : TRUe - success , FALSE - failure
//Notes   : None
//*****************************************************************************
bool RGBLedHandler()
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
	bool blFlag = FALSE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	71fb      	strb	r3, [r7, #7]

	WS2811DriverInit();
 8000eaa:	f7ff fa11 	bl	80002d0 <WS2811DriverInit>
	WS2811PrepareBuffer(0xFF, 0xFF, 0x00);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	21ff      	movs	r1, #255	@ 0xff
 8000eb2:	20ff      	movs	r0, #255	@ 0xff
 8000eb4:	f7ff fa9c 	bl	80003f0 <WS2811PrepareBuffer>
	WS2811DriverSendData();
 8000eb8:	f7ff fa86 	bl	80003c8 <WS2811DriverSendData>
	printf("RGB Data Sent\r\n");
 8000ebc:	4804      	ldr	r0, [pc, #16]	@ (8000ed0 <RGBLedHandler+0x30>)
 8000ebe:	f005 fa0d 	bl	80062dc <puts>
	blFlag = TRUE;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	71fb      	strb	r3, [r7, #7]

	return blFlag;
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	08007228 	.word	0x08007228

08000ed4 <RecieverTask>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void RecieverTask()
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	@ 0x30
 8000ed8:	af00      	add	r7, sp, #0
	REQUEST_MSG stReqMsg = {0, 0, 0};
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
	ACK_MSG stAckMsg = {0, 0, 0, 0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
	LOGGER_MSG stLogMsg = {0, 0};
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	2300      	movs	r3, #0
 8000efa:	743b      	strb	r3, [r7, #16]
	LOGACK_MSG stLogAckMsg = {0, 0};
 8000efc:	2300      	movs	r3, #0
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	2300      	movs	r3, #0
 8000f02:	723b      	strb	r3, [r7, #8]
	bool blFlag = FALSE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8 ucStatus = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	WATCHDOG_EVENT stReceiverEvent = {0};
 8000f10:	2300      	movs	r3, #0
 8000f12:	703b      	strb	r3, [r7, #0]

	if((osMsgqRecieverToPollerInit(sizeof(stAckMsg))) && \
 8000f14:	200c      	movs	r0, #12
 8000f16:	f7ff fc93 	bl	8000840 <osMsgqRecieverToPollerInit>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f000 8084 	beq.w	800102a <RecieverTask+0x156>
			(osMsgqReceiverToLoggerInit(sizeof(stLogMsg))))
 8000f22:	2008      	movs	r0, #8
 8000f24:	f7ff fd6e 	bl	8000a04 <osMsgqReceiverToLoggerInit>
 8000f28:	4603      	mov	r3, r0
	if((osMsgqRecieverToPollerInit(sizeof(stAckMsg))) && \
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d07d      	beq.n	800102a <RecieverTask+0x156>
	{
		while(1)
		{
			if(osMsgqMessageRcvFromPoller(&stReqMsg))
 8000f2e:	f107 0320 	add.w	r3, r7, #32
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fcbc 	bl	80008b0 <osMsgqMessageRcvFromPoller>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d05c      	beq.n	8000ff8 <RecieverTask+0x124>
			{
				LOG("Receiver: REQUID=%lu CMD=0x%02X DATA=0x%08lX\r\n",
 8000f3e:	f7ff febf 	bl	8000cc0 <UARTMutexAcquire>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d007      	beq.n	8000f58 <RecieverTask+0x84>
 8000f48:	6a39      	ldr	r1, [r7, #32]
 8000f4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000f4e:	461a      	mov	r2, r3
 8000f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f52:	4838      	ldr	r0, [pc, #224]	@ (8001034 <RecieverTask+0x160>)
 8000f54:	f005 f95a 	bl	800620c <iprintf>
 8000f58:	f7ff fe9c 	bl	8000c94 <UARTMutexRelease>
						stReqMsg.ulUId, stReqMsg.ucCmd, stReqMsg.ulData);
				blFlag = RecieverTaskProcessRequest(&stReqMsg);
 8000f5c:	f107 0320 	add.w	r3, r7, #32
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 f895 	bl	8001090 <RecieverTaskProcessRequest>
 8000f66:	4603      	mov	r3, r0
 8000f68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				ucStatus = (blFlag != FALSE) ? ACK_STATUS_OK : ACK_STAUS_ERROR;
 8000f6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f70:	f083 0301 	eor.w	r3, r3, #1
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

				if(ReceiverTaskSetAckMsg(&stAckMsg, ucStatus))
 8000f7a:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 f85b 	bl	8001040 <ReceiverTaskSetAckMsg>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d00b      	beq.n	8000fa8 <RecieverTask+0xd4>
				{
					if(osMsgqMessageSendToPoller(stAckMsg))
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f98:	f7ff fca6 	bl	80008e8 <osMsgqMessageSendToPoller>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d002      	beq.n	8000fa8 <RecieverTask+0xd4>
					{
						osTaskDelay(DELAY_200);
 8000fa2:	20c8      	movs	r0, #200	@ 0xc8
 8000fa4:	f7ff fea4 	bl	8000cf0 <osTaskDelay>
					}
				}

				if(RecieverTaskBuildLoggerMsg(&stLogMsg))
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 f907 	bl	80011c0 <RecieverTaskBuildLoggerMsg>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00b      	beq.n	8000fd0 <RecieverTask+0xfc>
				{
					if(osMsgqMessageSendToLogger(stLogMsg))
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fc0:	f7ff fd58 	bl	8000a74 <osMsgqMessageSendToLogger>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d002      	beq.n	8000fd0 <RecieverTask+0xfc>
					{
						osTaskDelay(DELAY_200);
 8000fca:	20c8      	movs	r0, #200	@ 0xc8
 8000fcc:	f7ff fe90 	bl	8000cf0 <osTaskDelay>
					}
				}

				if(osMsgqMessageRcvFromLogger(&stLogAckMsg))
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fda2 	bl	8000b1c <osMsgqMessageRcvFromLogger>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00c      	beq.n	8000ff8 <RecieverTask+0x124>
				{
					LOG("Receiver: LOGACKUID=%lu State=0x%02X\r\n",
 8000fde:	f7ff fe6f 	bl	8000cc0 <UARTMutexAcquire>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d005      	beq.n	8000ff4 <RecieverTask+0x120>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7a3a      	ldrb	r2, [r7, #8]
 8000fec:	4619      	mov	r1, r3
 8000fee:	4812      	ldr	r0, [pc, #72]	@ (8001038 <RecieverTask+0x164>)
 8000ff0:	f005 f90c 	bl	800620c <iprintf>
 8000ff4:	f7ff fe4e 	bl	8000c94 <UARTMutexRelease>
							stLogAckMsg.ulUId, stLogAckMsg.ucState);
				}
			}
			stReceiverEvent.src = WATCHDOG_SRC_RECEIVER;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	703b      	strb	r3, [r7, #0]
			if(!osMsgqSendToWatchdog(stReceiverEvent))
 8000ffc:	7838      	ldrb	r0, [r7, #0]
 8000ffe:	f7ff fcc9 	bl	8000994 <osMsgqSendToWatchdog>
 8001002:	4603      	mov	r3, r0
 8001004:	f083 0301 	eor.w	r3, r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d009      	beq.n	8001022 <RecieverTask+0x14e>
			{
				LOG("Receiver : Send Event to watchDogHandler Failed");
 800100e:	f7ff fe57 	bl	8000cc0 <UARTMutexAcquire>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <RecieverTask+0x14a>
 8001018:	4808      	ldr	r0, [pc, #32]	@ (800103c <RecieverTask+0x168>)
 800101a:	f005 f8f7 	bl	800620c <iprintf>
 800101e:	f7ff fe39 	bl	8000c94 <UARTMutexRelease>
			}
			osTaskDelay(DELAY_100);
 8001022:	2064      	movs	r0, #100	@ 0x64
 8001024:	f7ff fe64 	bl	8000cf0 <osTaskDelay>
			if(osMsgqMessageRcvFromPoller(&stReqMsg))
 8001028:	e781      	b.n	8000f2e <RecieverTask+0x5a>
		}
	}
}
 800102a:	bf00      	nop
 800102c:	3730      	adds	r7, #48	@ 0x30
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	08007238 	.word	0x08007238
 8001038:	08007268 	.word	0x08007268
 800103c:	08007290 	.word	0x08007290

08001040 <ReceiverTaskSetAckMsg>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
static bool ReceiverTaskSetAckMsg(ACK_MSG* stAckMsg, uint8 ucState)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	70fb      	strb	r3, [r7, #3]
	bool blFlag = FALSE;
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]
	CMD_TYPE cmd = CMD_ACK;
 8001050:	2300      	movs	r3, #0
 8001052:	73bb      	strb	r3, [r7, #14]

	if(stAckMsg != NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00f      	beq.n	800107a <ReceiverTaskSetAckMsg+0x3a>
	{
		stAckMsg->ulUId = sgulUId;
 800105a:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <ReceiverTaskSetAckMsg+0x48>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	601a      	str	r2, [r3, #0]
		stAckMsg->ucCmd = cmd;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	7bba      	ldrb	r2, [r7, #14]
 8001066:	711a      	strb	r2, [r3, #4]
		stAckMsg->ulData = sgulData;
 8001068:	4b08      	ldr	r3, [pc, #32]	@ (800108c <ReceiverTaskSetAckMsg+0x4c>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	609a      	str	r2, [r3, #8]
		stAckMsg->ucState = ucState;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	78fa      	ldrb	r2, [r7, #3]
 8001074:	715a      	strb	r2, [r3, #5]
		blFlag = TRUE;
 8001076:	2301      	movs	r3, #1
 8001078:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	200001d0 	.word	0x200001d0
 800108c:	20000074 	.word	0x20000074

08001090 <RecieverTaskProcessRequest>:
//Outputs : None
//Return  : TRUE - Request Message Processed, FALSE - error
//Notes   : None
//*****************************************************************************
static bool RecieverTaskProcessRequest(REQUEST_MSG* stReqMsg)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]

	do
	{
		if(stReqMsg == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d01d      	beq.n	80010de <RecieverTaskProcessRequest+0x4e>
		{
			break;
		}

		if(!RecieverTaskProcessUID(stReqMsg))
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 f828 	bl	80010f8 <RecieverTaskProcessUID>
 80010a8:	4603      	mov	r3, r0
 80010aa:	f083 0301 	eor.w	r3, r3, #1
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d116      	bne.n	80010e2 <RecieverTaskProcessRequest+0x52>
		{
			break;
		}

		if(!RecieverTaskProcessDATA(stReqMsg))
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f86b 	bl	8001190 <RecieverTaskProcessDATA>
 80010ba:	4603      	mov	r3, r0
 80010bc:	f083 0301 	eor.w	r3, r3, #1
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10f      	bne.n	80010e6 <RecieverTaskProcessRequest+0x56>
		{
			break;
		}

		if(!RecieverTaskProcessCMD(stReqMsg))
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 f82e 	bl	8001128 <RecieverTaskProcessCMD>
 80010cc:	4603      	mov	r3, r0
 80010ce:	f083 0301 	eor.w	r3, r3, #1
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d108      	bne.n	80010ea <RecieverTaskProcessRequest+0x5a>
		{
			break;
		}

		// If all succeeded
		blFlag = TRUE;
 80010d8:	2301      	movs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e006      	b.n	80010ec <RecieverTaskProcessRequest+0x5c>
			break;
 80010de:	bf00      	nop
 80010e0:	e004      	b.n	80010ec <RecieverTaskProcessRequest+0x5c>
			break;
 80010e2:	bf00      	nop
 80010e4:	e002      	b.n	80010ec <RecieverTaskProcessRequest+0x5c>
			break;
 80010e6:	bf00      	nop
 80010e8:	e000      	b.n	80010ec <RecieverTaskProcessRequest+0x5c>
			break;
 80010ea:	bf00      	nop

	}while(0);

	return blFlag;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <RecieverTaskProcessUID>:
//Outputs : None
//Return  : TRUE - Request Message UID processed, FALSE - error
//Notes   : None
//*****************************************************************************
static bool RecieverTaskProcessUID(REQUEST_MSG* stReqMsg)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8001100:	2300      	movs	r3, #0
 8001102:	73fb      	strb	r3, [r7, #15]

	if(stReqMsg != NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d005      	beq.n	8001116 <RecieverTaskProcessUID+0x1e>
	{
		sgulUId =  stReqMsg->ulUId;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a05      	ldr	r2, [pc, #20]	@ (8001124 <RecieverTaskProcessUID+0x2c>)
 8001110:	6013      	str	r3, [r2, #0]
		blFlag = TRUE;
 8001112:	2301      	movs	r3, #1
 8001114:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8001116:	7bfb      	ldrb	r3, [r7, #15]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	200001d0 	.word	0x200001d0

08001128 <RecieverTaskProcessCMD>:
//Outputs : None
//Return  : TRUE - Request Message CMD processed, FALSE - error
//Notes   : None
//*****************************************************************************
static bool RecieverTaskProcessCMD(REQUEST_MSG* stReqMsg)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8001130:	2300      	movs	r3, #0
 8001132:	73fb      	strb	r3, [r7, #15]

	if(stReqMsg != NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d01f      	beq.n	800117a <RecieverTaskProcessCMD+0x52>
	{
		switch(stReqMsg->ucCmd)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	791b      	ldrb	r3, [r3, #4]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d011      	beq.n	8001166 <RecieverTaskProcessCMD+0x3e>
 8001142:	2b02      	cmp	r3, #2
 8001144:	d112      	bne.n	800116c <RecieverTaskProcessCMD+0x44>
		{
			case CMD_SET:
				if((sgulData & MASK) == MASK)
 8001146:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <RecieverTaskProcessCMD+0x5c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <RecieverTaskProcessCMD+0x32>
				{
					gucLEDState = TRUE;
 8001152:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <RecieverTaskProcessCMD+0x60>)
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
 8001158:	e002      	b.n	8001160 <RecieverTaskProcessCMD+0x38>
				}
				else
				{
					gucLEDState = FALSE;
 800115a:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <RecieverTaskProcessCMD+0x60>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
				}

				blFlag = TRUE;
 8001160:	2301      	movs	r3, #1
 8001162:	73fb      	strb	r3, [r7, #15]
				break;
 8001164:	e009      	b.n	800117a <RecieverTaskProcessCMD+0x52>

			case CMD_GET:
				//:TO DO: Retrieve the current LED state
				blFlag = TRUE;
 8001166:	2301      	movs	r3, #1
 8001168:	73fb      	strb	r3, [r7, #15]
				break;
 800116a:	e006      	b.n	800117a <RecieverTaskProcessCMD+0x52>

			default:
				printf("Invalid Command: 0x%02X\r\n", stReqMsg->ucCmd);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	791b      	ldrb	r3, [r3, #4]
 8001170:	4619      	mov	r1, r3
 8001172:	4806      	ldr	r0, [pc, #24]	@ (800118c <RecieverTaskProcessCMD+0x64>)
 8001174:	f005 f84a 	bl	800620c <iprintf>
				break;
 8001178:	bf00      	nop
		}
	}

	return blFlag;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000074 	.word	0x20000074
 8001188:	200001d4 	.word	0x200001d4
 800118c:	080072c0 	.word	0x080072c0

08001190 <RecieverTaskProcessDATA>:
//Outputs : None
//Return  : TRUE - Request Message DATA processed, FALSE - error
//Notes   : None
//*****************************************************************************
static bool RecieverTaskProcessDATA(REQUEST_MSG* stReqMsg)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8001198:	2300      	movs	r3, #0
 800119a:	73fb      	strb	r3, [r7, #15]

	if(stReqMsg != NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <RecieverTaskProcessDATA+0x1e>
	{
		sgulData = stReqMsg->ulData;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	4a05      	ldr	r2, [pc, #20]	@ (80011bc <RecieverTaskProcessDATA+0x2c>)
 80011a8:	6013      	str	r3, [r2, #0]
		blFlag = TRUE;
 80011aa:	2301      	movs	r3, #1
 80011ac:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000074 	.word	0x20000074

080011c0 <RecieverTaskBuildLoggerMsg>:
//Outputs : None
//Return  : TRUE - Request Message built, FALSE - error
//Notes   : None
//*****************************************************************************
static bool RecieverTaskBuildLoggerMsg(LOGGER_MSG* stLogMsg)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	73fb      	strb	r3, [r7, #15]

	if(stLogMsg != NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d009      	beq.n	80011e6 <RecieverTaskBuildLoggerMsg+0x26>
	{
		stLogMsg->ulUId = sgulUId;
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <RecieverTaskBuildLoggerMsg+0x34>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	601a      	str	r2, [r3, #0]
		stLogMsg->ucLEDState = gucLEDState;
 80011da:	4b07      	ldr	r3, [pc, #28]	@ (80011f8 <RecieverTaskBuildLoggerMsg+0x38>)
 80011dc:	781a      	ldrb	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	711a      	strb	r2, [r3, #4]
		blFlag = TRUE;
 80011e2:	2301      	movs	r3, #1
 80011e4:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	200001d0 	.word	0x200001d0
 80011f8:	200001d4 	.word	0x200001d4

080011fc <WatchDogHandler>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void WatchDogHandler()
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
	WATCHDOG_EVENT stEvent = {0};
 8001202:	2300      	movs	r3, #0
 8001204:	713b      	strb	r3, [r7, #4]

	WatchDogTimerInit();
 8001206:	f7ff f93d 	bl	8000484 <WatchDogTimerInit>

	while(1)
	{
		if(osMsgqRcvFromWatchdog(&stEvent))
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fbdb 	bl	80009c8 <osMsgqRcvFromWatchdog>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d019      	beq.n	800124c <WatchDogHandler+0x50>
		{
			if(WatchDogHandlerProcessEvent(&stEvent))
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f81e 	bl	800125c <WatchDogHandlerProcessEvent>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d012      	beq.n	800124c <WatchDogHandler+0x50>
			{
				if(stFlags.ucAll == ALL_EVENTS_SET)
 8001226:	4b0b      	ldr	r3, [pc, #44]	@ (8001254 <WatchDogHandler+0x58>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b07      	cmp	r3, #7
 800122c:	d10e      	bne.n	800124c <WatchDogHandler+0x50>
				{
					WatchdogTimerClear();
 800122e:	f7ff f94f 	bl	80004d0 <WatchdogTimerClear>
					LOG("Watchdog Cleared\r\n");
 8001232:	f7ff fd45 	bl	8000cc0 <UARTMutexAcquire>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <WatchDogHandler+0x46>
 800123c:	4806      	ldr	r0, [pc, #24]	@ (8001258 <WatchDogHandler+0x5c>)
 800123e:	f005 f84d 	bl	80062dc <puts>
 8001242:	f7ff fd27 	bl	8000c94 <UARTMutexRelease>
					stFlags.ucAll = 0;  // Reset for next cycle
 8001246:	4b03      	ldr	r3, [pc, #12]	@ (8001254 <WatchDogHandler+0x58>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		osTaskDelay(DELAY_100);
 800124c:	2064      	movs	r0, #100	@ 0x64
 800124e:	f7ff fd4f 	bl	8000cf0 <osTaskDelay>
		if(osMsgqRcvFromWatchdog(&stEvent))
 8001252:	e7da      	b.n	800120a <WatchDogHandler+0xe>
 8001254:	200001d8 	.word	0x200001d8
 8001258:	080072dc 	.word	0x080072dc

0800125c <WatchDogHandlerProcessEvent>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
static bool WatchDogHandlerProcessEvent(WATCHDOG_EVENT* stEvent)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]

	if(stEvent != NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d02c      	beq.n	80012c8 <WatchDogHandlerProcessEvent+0x6c>
	{
		switch(stEvent->src)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b03      	cmp	r3, #3
 8001274:	d016      	beq.n	80012a4 <WatchDogHandlerProcessEvent+0x48>
 8001276:	2b03      	cmp	r3, #3
 8001278:	dc1c      	bgt.n	80012b4 <WatchDogHandlerProcessEvent+0x58>
 800127a:	2b01      	cmp	r3, #1
 800127c:	d002      	beq.n	8001284 <WatchDogHandlerProcessEvent+0x28>
 800127e:	2b02      	cmp	r3, #2
 8001280:	d008      	beq.n	8001294 <WatchDogHandlerProcessEvent+0x38>
 8001282:	e017      	b.n	80012b4 <WatchDogHandlerProcessEvent+0x58>
		{
			case WATCHDOG_SRC_POLLER :
				stFlags.BITS.ucPoller = TRUE;
 8001284:	4a13      	ldr	r2, [pc, #76]	@ (80012d4 <WatchDogHandlerProcessEvent+0x78>)
 8001286:	7813      	ldrb	r3, [r2, #0]
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	7013      	strb	r3, [r2, #0]
				blFlag = TRUE;
 800128e:	2301      	movs	r3, #1
 8001290:	73fb      	strb	r3, [r7, #15]
				break;
 8001292:	e019      	b.n	80012c8 <WatchDogHandlerProcessEvent+0x6c>
			case WATCHDOG_SRC_RECEIVER :
				stFlags.BITS.ucReceiver = TRUE;
 8001294:	4a0f      	ldr	r2, [pc, #60]	@ (80012d4 <WatchDogHandlerProcessEvent+0x78>)
 8001296:	7813      	ldrb	r3, [r2, #0]
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	7013      	strb	r3, [r2, #0]
				blFlag = TRUE;
 800129e:	2301      	movs	r3, #1
 80012a0:	73fb      	strb	r3, [r7, #15]
				break;
 80012a2:	e011      	b.n	80012c8 <WatchDogHandlerProcessEvent+0x6c>
			case WATCHDOG_SRC_LOGGER :
				stFlags.BITS.ucLogger = TRUE;
 80012a4:	4a0b      	ldr	r2, [pc, #44]	@ (80012d4 <WatchDogHandlerProcessEvent+0x78>)
 80012a6:	7813      	ldrb	r3, [r2, #0]
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	7013      	strb	r3, [r2, #0]
				blFlag = TRUE;
 80012ae:	2301      	movs	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
				break;
 80012b2:	e009      	b.n	80012c8 <WatchDogHandlerProcessEvent+0x6c>
			default :
				LOG("Invalid Event\r\n");
 80012b4:	f7ff fd04 	bl	8000cc0 <UARTMutexAcquire>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d002      	beq.n	80012c4 <WatchDogHandlerProcessEvent+0x68>
 80012be:	4806      	ldr	r0, [pc, #24]	@ (80012d8 <WatchDogHandlerProcessEvent+0x7c>)
 80012c0:	f005 f80c 	bl	80062dc <puts>
 80012c4:	f7ff fce6 	bl	8000c94 <UARTMutexRelease>
		}
	}

	return blFlag;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200001d8 	.word	0x200001d8
 80012d8:	080072f0 	.word	0x080072f0

080012dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e0:	f000 fa74 	bl	80017cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e4:	f000 f81a 	bl	800131c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e8:	f000 f884 	bl	80013f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012ec:	f000 f858 	bl	80013a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012f0:	f001 fbce 	bl	8002a90 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012f4:	4a06      	ldr	r2, [pc, #24]	@ (8001310 <main+0x34>)
 80012f6:	2100      	movs	r1, #0
 80012f8:	4806      	ldr	r0, [pc, #24]	@ (8001314 <main+0x38>)
 80012fa:	f001 fc11 	bl	8002b20 <osThreadNew>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a05      	ldr	r2, [pc, #20]	@ (8001318 <main+0x3c>)
 8001302:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
  AppMain();
 8001304:	f7fe ff24 	bl	8000150 <AppMain>
  /* Start scheduler */
  osKernelStart();
 8001308:	f001 fbe4 	bl	8002ad4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <main+0x30>
 8001310:	08007324 	.word	0x08007324
 8001314:	080014d5 	.word	0x080014d5
 8001318:	20000224 	.word	0x20000224

0800131c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b090      	sub	sp, #64	@ 0x40
 8001320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001322:	f107 0318 	add.w	r3, r7, #24
 8001326:	2228      	movs	r2, #40	@ 0x28
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f005 f8b6 	bl	800649c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800133e:	2302      	movs	r3, #2
 8001340:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001342:	2301      	movs	r3, #1
 8001344:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001346:	2310      	movs	r3, #16
 8001348:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134a:	2302      	movs	r3, #2
 800134c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800134e:	2300      	movs	r3, #0
 8001350:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001352:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001356:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001358:	f107 0318 	add.w	r3, r7, #24
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fd2f 	bl	8001dc0 <HAL_RCC_OscConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001368:	f000 f8bc 	bl	80014e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136c:	230f      	movs	r3, #15
 800136e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001370:	2302      	movs	r3, #2
 8001372:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001378:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800137c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2102      	movs	r1, #2
 8001386:	4618      	mov	r0, r3
 8001388:	f000 ff9c 	bl	80022c4 <HAL_RCC_ClockConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001392:	f000 f8a7 	bl	80014e4 <Error_Handler>
  }
}
 8001396:	bf00      	nop
 8001398:	3740      	adds	r7, #64	@ 0x40
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a4:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013a6:	4a12      	ldr	r2, [pc, #72]	@ (80013f0 <MX_USART2_UART_Init+0x50>)
 80013a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013aa:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c4:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013c6:	220c      	movs	r2, #12
 80013c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013d8:	f001 f902 	bl	80025e0 <HAL_UART_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013e2:	f000 f87f 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200001dc 	.word	0x200001dc
 80013f0:	40004400 	.word	0x40004400

080013f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001408:	4b2f      	ldr	r3, [pc, #188]	@ (80014c8 <MX_GPIO_Init+0xd4>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a2e      	ldr	r2, [pc, #184]	@ (80014c8 <MX_GPIO_Init+0xd4>)
 800140e:	f043 0310 	orr.w	r3, r3, #16
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b2c      	ldr	r3, [pc, #176]	@ (80014c8 <MX_GPIO_Init+0xd4>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0310 	and.w	r3, r3, #16
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001420:	4b29      	ldr	r3, [pc, #164]	@ (80014c8 <MX_GPIO_Init+0xd4>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a28      	ldr	r2, [pc, #160]	@ (80014c8 <MX_GPIO_Init+0xd4>)
 8001426:	f043 0320 	orr.w	r3, r3, #32
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b26      	ldr	r3, [pc, #152]	@ (80014c8 <MX_GPIO_Init+0xd4>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0320 	and.w	r3, r3, #32
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	4b23      	ldr	r3, [pc, #140]	@ (80014c8 <MX_GPIO_Init+0xd4>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a22      	ldr	r2, [pc, #136]	@ (80014c8 <MX_GPIO_Init+0xd4>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b20      	ldr	r3, [pc, #128]	@ (80014c8 <MX_GPIO_Init+0xd4>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	4b1d      	ldr	r3, [pc, #116]	@ (80014c8 <MX_GPIO_Init+0xd4>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a1c      	ldr	r2, [pc, #112]	@ (80014c8 <MX_GPIO_Init+0xd4>)
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b1a      	ldr	r3, [pc, #104]	@ (80014c8 <MX_GPIO_Init+0xd4>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	21a0      	movs	r1, #160	@ 0xa0
 800146c:	4817      	ldr	r0, [pc, #92]	@ (80014cc <MX_GPIO_Init+0xd8>)
 800146e:	f000 fc8e 	bl	8001d8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001472:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001480:	f107 0310 	add.w	r3, r7, #16
 8001484:	4619      	mov	r1, r3
 8001486:	4812      	ldr	r0, [pc, #72]	@ (80014d0 <MX_GPIO_Init+0xdc>)
 8001488:	f000 fae6 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 800148c:	2341      	movs	r3, #65	@ 0x41
 800148e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2302      	movs	r3, #2
 8001496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	4619      	mov	r1, r3
 800149e:	480b      	ldr	r0, [pc, #44]	@ (80014cc <MX_GPIO_Init+0xd8>)
 80014a0:	f000 fada 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80014a4:	23a0      	movs	r3, #160	@ 0xa0
 80014a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2302      	movs	r3, #2
 80014b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	4619      	mov	r1, r3
 80014ba:	4804      	ldr	r0, [pc, #16]	@ (80014cc <MX_GPIO_Init+0xd8>)
 80014bc:	f000 facc 	bl	8001a58 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014c0:	bf00      	nop
 80014c2:	3720      	adds	r7, #32
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40010800 	.word	0x40010800
 80014d0:	40011000 	.word	0x40011000

080014d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014dc:	2001      	movs	r0, #1
 80014de:	f001 fbb1 	bl	8002c44 <osDelay>
 80014e2:	e7fb      	b.n	80014dc <StartDefaultTask+0x8>

080014e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e8:	b672      	cpsid	i
}
 80014ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <Error_Handler+0x8>

080014f0 <_write>:
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
int _write(int file, char *ptr, int len)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	b29a      	uxth	r2, r3
 8001500:	f04f 33ff 	mov.w	r3, #4294967295
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	4804      	ldr	r0, [pc, #16]	@ (8001518 <_write+0x28>)
 8001508:	f001 f8ba 	bl	8002680 <HAL_UART_Transmit>
    return len;
 800150c:	687b      	ldr	r3, [r7, #4]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200001dc 	.word	0x200001dc

0800151c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001522:	4b18      	ldr	r3, [pc, #96]	@ (8001584 <HAL_MspInit+0x68>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	4a17      	ldr	r2, [pc, #92]	@ (8001584 <HAL_MspInit+0x68>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6193      	str	r3, [r2, #24]
 800152e:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <HAL_MspInit+0x68>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <HAL_MspInit+0x68>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	4a11      	ldr	r2, [pc, #68]	@ (8001584 <HAL_MspInit+0x68>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001544:	61d3      	str	r3, [r2, #28]
 8001546:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <HAL_MspInit+0x68>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	210f      	movs	r1, #15
 8001556:	f06f 0001 	mvn.w	r0, #1
 800155a:	f000 fa54 	bl	8001a06 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800155e:	4b0a      	ldr	r3, [pc, #40]	@ (8001588 <HAL_MspInit+0x6c>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	4a04      	ldr	r2, [pc, #16]	@ (8001588 <HAL_MspInit+0x6c>)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000
 8001588:	40010000 	.word	0x40010000

0800158c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001614 <HAL_UART_MspInit+0x88>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d12f      	bne.n	800160c <HAL_UART_MspInit+0x80>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <HAL_UART_MspInit+0x8c>)
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	4a19      	ldr	r2, [pc, #100]	@ (8001618 <HAL_UART_MspInit+0x8c>)
 80015b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b6:	61d3      	str	r3, [r2, #28]
 80015b8:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <HAL_UART_MspInit+0x8c>)
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c4:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <HAL_UART_MspInit+0x8c>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a13      	ldr	r2, [pc, #76]	@ (8001618 <HAL_UART_MspInit+0x8c>)
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <HAL_UART_MspInit+0x8c>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015dc:	2304      	movs	r3, #4
 80015de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4619      	mov	r1, r3
 80015ee:	480b      	ldr	r0, [pc, #44]	@ (800161c <HAL_UART_MspInit+0x90>)
 80015f0:	f000 fa32 	bl	8001a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015f4:	2308      	movs	r3, #8
 80015f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	f107 0310 	add.w	r3, r7, #16
 8001604:	4619      	mov	r1, r3
 8001606:	4805      	ldr	r0, [pc, #20]	@ (800161c <HAL_UART_MspInit+0x90>)
 8001608:	f000 fa26 	bl	8001a58 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800160c:	bf00      	nop
 800160e:	3720      	adds	r7, #32
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40004400 	.word	0x40004400
 8001618:	40021000 	.word	0x40021000
 800161c:	40010800 	.word	0x40010800

08001620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <NMI_Handler+0x4>

08001628 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <HardFault_Handler+0x4>

08001630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <MemManage_Handler+0x4>

08001638 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <BusFault_Handler+0x4>

08001640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <UsageFault_Handler+0x4>

08001648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001658:	f000 f8fe 	bl	8001858 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800165c:	f003 fbfa 	bl	8004e54 <xTaskGetSchedulerState>
 8001660:	4603      	mov	r3, r0
 8001662:	2b01      	cmp	r3, #1
 8001664:	d001      	beq.n	800166a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001666:	f004 fa9f 	bl	8005ba8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}

0800166e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	e00a      	b.n	8001696 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001680:	f3af 8000 	nop.w
 8001684:	4601      	mov	r1, r0
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	1c5a      	adds	r2, r3, #1
 800168a:	60ba      	str	r2, [r7, #8]
 800168c:	b2ca      	uxtb	r2, r1
 800168e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	3301      	adds	r3, #1
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	429a      	cmp	r2, r3
 800169c:	dbf0      	blt.n	8001680 <_read+0x12>
  }

  return len;
 800169e:	687b      	ldr	r3, [r7, #4]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr

080016be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016ce:	605a      	str	r2, [r3, #4]
  return 0;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <_isatty>:

int _isatty(int file)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016e4:	2301      	movs	r3, #1
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001710:	4a14      	ldr	r2, [pc, #80]	@ (8001764 <_sbrk+0x5c>)
 8001712:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <_sbrk+0x60>)
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800171c:	4b13      	ldr	r3, [pc, #76]	@ (800176c <_sbrk+0x64>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d102      	bne.n	800172a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001724:	4b11      	ldr	r3, [pc, #68]	@ (800176c <_sbrk+0x64>)
 8001726:	4a12      	ldr	r2, [pc, #72]	@ (8001770 <_sbrk+0x68>)
 8001728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172a:	4b10      	ldr	r3, [pc, #64]	@ (800176c <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	429a      	cmp	r2, r3
 8001736:	d207      	bcs.n	8001748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001738:	f004 fefe 	bl	8006538 <__errno>
 800173c:	4603      	mov	r3, r0
 800173e:	220c      	movs	r2, #12
 8001740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	e009      	b.n	800175c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001748:	4b08      	ldr	r3, [pc, #32]	@ (800176c <_sbrk+0x64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800174e:	4b07      	ldr	r3, [pc, #28]	@ (800176c <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	4a05      	ldr	r2, [pc, #20]	@ (800176c <_sbrk+0x64>)
 8001758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800175a:	68fb      	ldr	r3, [r7, #12]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20005000 	.word	0x20005000
 8001768:	00000400 	.word	0x00000400
 800176c:	20000228 	.word	0x20000228
 8001770:	200040d0 	.word	0x200040d0

08001774 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001780:	f7ff fff8 	bl	8001774 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001784:	480b      	ldr	r0, [pc, #44]	@ (80017b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001786:	490c      	ldr	r1, [pc, #48]	@ (80017b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001788:	4a0c      	ldr	r2, [pc, #48]	@ (80017bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800178c:	e002      	b.n	8001794 <LoopCopyDataInit>

0800178e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001792:	3304      	adds	r3, #4

08001794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001798:	d3f9      	bcc.n	800178e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179a:	4a09      	ldr	r2, [pc, #36]	@ (80017c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800179c:	4c09      	ldr	r4, [pc, #36]	@ (80017c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a0:	e001      	b.n	80017a6 <LoopFillZerobss>

080017a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a4:	3204      	adds	r2, #4

080017a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a8:	d3fb      	bcc.n	80017a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017aa:	f004 fecb 	bl	8006544 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ae:	f7ff fd95 	bl	80012dc <main>
  bx lr
 80017b2:	4770      	bx	lr
  ldr r0, =_sdata
 80017b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b8:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 80017bc:	080073b0 	.word	0x080073b0
  ldr r2, =_sbss
 80017c0:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 80017c4:	200040cc 	.word	0x200040cc

080017c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017c8:	e7fe      	b.n	80017c8 <ADC1_2_IRQHandler>
	...

080017cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d0:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <HAL_Init+0x28>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a07      	ldr	r2, [pc, #28]	@ (80017f4 <HAL_Init+0x28>)
 80017d6:	f043 0310 	orr.w	r3, r3, #16
 80017da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017dc:	2003      	movs	r0, #3
 80017de:	f000 f907 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e2:	200f      	movs	r0, #15
 80017e4:	f000 f808 	bl	80017f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e8:	f7ff fe98 	bl	800151c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40022000 	.word	0x40022000

080017f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001800:	4b12      	ldr	r3, [pc, #72]	@ (800184c <HAL_InitTick+0x54>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <HAL_InitTick+0x58>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800180e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001812:	fbb2 f3f3 	udiv	r3, r2, r3
 8001816:	4618      	mov	r0, r3
 8001818:	f000 f911 	bl	8001a3e <HAL_SYSTICK_Config>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e00e      	b.n	8001844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b0f      	cmp	r3, #15
 800182a:	d80a      	bhi.n	8001842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800182c:	2200      	movs	r2, #0
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	f04f 30ff 	mov.w	r0, #4294967295
 8001834:	f000 f8e7 	bl	8001a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001838:	4a06      	ldr	r2, [pc, #24]	@ (8001854 <HAL_InitTick+0x5c>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	e000      	b.n	8001844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000078 	.word	0x20000078
 8001850:	20000080 	.word	0x20000080
 8001854:	2000007c 	.word	0x2000007c

08001858 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800185c:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <HAL_IncTick+0x1c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <HAL_IncTick+0x20>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4413      	add	r3, r2
 8001868:	4a03      	ldr	r2, [pc, #12]	@ (8001878 <HAL_IncTick+0x20>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	20000080 	.word	0x20000080
 8001878:	2000022c 	.word	0x2000022c

0800187c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return uwTick;
 8001880:	4b02      	ldr	r3, [pc, #8]	@ (800188c <HAL_GetTick+0x10>)
 8001882:	681b      	ldr	r3, [r3, #0]
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	2000022c 	.word	0x2000022c

08001890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a0:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018ac:	4013      	ands	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c2:	4a04      	ldr	r2, [pc, #16]	@ (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	60d3      	str	r3, [r2, #12]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018dc:	4b04      	ldr	r3, [pc, #16]	@ (80018f0 <__NVIC_GetPriorityGrouping+0x18>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	f003 0307 	and.w	r3, r3, #7
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db0a      	blt.n	800191e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	490c      	ldr	r1, [pc, #48]	@ (8001940 <__NVIC_SetPriority+0x4c>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	440b      	add	r3, r1
 8001918:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800191c:	e00a      	b.n	8001934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4908      	ldr	r1, [pc, #32]	@ (8001944 <__NVIC_SetPriority+0x50>)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	3b04      	subs	r3, #4
 800192c:	0112      	lsls	r2, r2, #4
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	440b      	add	r3, r1
 8001932:	761a      	strb	r2, [r3, #24]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000e100 	.word	0xe000e100
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	@ 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f1c3 0307 	rsb	r3, r3, #7
 8001962:	2b04      	cmp	r3, #4
 8001964:	bf28      	it	cs
 8001966:	2304      	movcs	r3, #4
 8001968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3304      	adds	r3, #4
 800196e:	2b06      	cmp	r3, #6
 8001970:	d902      	bls.n	8001978 <NVIC_EncodePriority+0x30>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3b03      	subs	r3, #3
 8001976:	e000      	b.n	800197a <NVIC_EncodePriority+0x32>
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43d9      	mvns	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	4313      	orrs	r3, r2
         );
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3724      	adds	r7, #36	@ 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019bc:	d301      	bcc.n	80019c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019be:	2301      	movs	r3, #1
 80019c0:	e00f      	b.n	80019e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <SysTick_Config+0x40>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ca:	210f      	movs	r1, #15
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f7ff ff90 	bl	80018f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d4:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <SysTick_Config+0x40>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019da:	4b04      	ldr	r3, [pc, #16]	@ (80019ec <SysTick_Config+0x40>)
 80019dc:	2207      	movs	r2, #7
 80019de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff49 	bl	8001890 <__NVIC_SetPriorityGrouping>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a18:	f7ff ff5e 	bl	80018d8 <__NVIC_GetPriorityGrouping>
 8001a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	68b9      	ldr	r1, [r7, #8]
 8001a22:	6978      	ldr	r0, [r7, #20]
 8001a24:	f7ff ff90 	bl	8001948 <NVIC_EncodePriority>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff5f 	bl	80018f4 <__NVIC_SetPriority>
}
 8001a36:	bf00      	nop
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ffb0 	bl	80019ac <SysTick_Config>
 8001a4c:	4603      	mov	r3, r0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b08b      	sub	sp, #44	@ 0x2c
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6a:	e169      	b.n	8001d40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	f040 8158 	bne.w	8001d3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4a9a      	ldr	r2, [pc, #616]	@ (8001cf8 <HAL_GPIO_Init+0x2a0>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d05e      	beq.n	8001b52 <HAL_GPIO_Init+0xfa>
 8001a94:	4a98      	ldr	r2, [pc, #608]	@ (8001cf8 <HAL_GPIO_Init+0x2a0>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d875      	bhi.n	8001b86 <HAL_GPIO_Init+0x12e>
 8001a9a:	4a98      	ldr	r2, [pc, #608]	@ (8001cfc <HAL_GPIO_Init+0x2a4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d058      	beq.n	8001b52 <HAL_GPIO_Init+0xfa>
 8001aa0:	4a96      	ldr	r2, [pc, #600]	@ (8001cfc <HAL_GPIO_Init+0x2a4>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d86f      	bhi.n	8001b86 <HAL_GPIO_Init+0x12e>
 8001aa6:	4a96      	ldr	r2, [pc, #600]	@ (8001d00 <HAL_GPIO_Init+0x2a8>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d052      	beq.n	8001b52 <HAL_GPIO_Init+0xfa>
 8001aac:	4a94      	ldr	r2, [pc, #592]	@ (8001d00 <HAL_GPIO_Init+0x2a8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d869      	bhi.n	8001b86 <HAL_GPIO_Init+0x12e>
 8001ab2:	4a94      	ldr	r2, [pc, #592]	@ (8001d04 <HAL_GPIO_Init+0x2ac>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d04c      	beq.n	8001b52 <HAL_GPIO_Init+0xfa>
 8001ab8:	4a92      	ldr	r2, [pc, #584]	@ (8001d04 <HAL_GPIO_Init+0x2ac>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d863      	bhi.n	8001b86 <HAL_GPIO_Init+0x12e>
 8001abe:	4a92      	ldr	r2, [pc, #584]	@ (8001d08 <HAL_GPIO_Init+0x2b0>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d046      	beq.n	8001b52 <HAL_GPIO_Init+0xfa>
 8001ac4:	4a90      	ldr	r2, [pc, #576]	@ (8001d08 <HAL_GPIO_Init+0x2b0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d85d      	bhi.n	8001b86 <HAL_GPIO_Init+0x12e>
 8001aca:	2b12      	cmp	r3, #18
 8001acc:	d82a      	bhi.n	8001b24 <HAL_GPIO_Init+0xcc>
 8001ace:	2b12      	cmp	r3, #18
 8001ad0:	d859      	bhi.n	8001b86 <HAL_GPIO_Init+0x12e>
 8001ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad8 <HAL_GPIO_Init+0x80>)
 8001ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad8:	08001b53 	.word	0x08001b53
 8001adc:	08001b2d 	.word	0x08001b2d
 8001ae0:	08001b3f 	.word	0x08001b3f
 8001ae4:	08001b81 	.word	0x08001b81
 8001ae8:	08001b87 	.word	0x08001b87
 8001aec:	08001b87 	.word	0x08001b87
 8001af0:	08001b87 	.word	0x08001b87
 8001af4:	08001b87 	.word	0x08001b87
 8001af8:	08001b87 	.word	0x08001b87
 8001afc:	08001b87 	.word	0x08001b87
 8001b00:	08001b87 	.word	0x08001b87
 8001b04:	08001b87 	.word	0x08001b87
 8001b08:	08001b87 	.word	0x08001b87
 8001b0c:	08001b87 	.word	0x08001b87
 8001b10:	08001b87 	.word	0x08001b87
 8001b14:	08001b87 	.word	0x08001b87
 8001b18:	08001b87 	.word	0x08001b87
 8001b1c:	08001b35 	.word	0x08001b35
 8001b20:	08001b49 	.word	0x08001b49
 8001b24:	4a79      	ldr	r2, [pc, #484]	@ (8001d0c <HAL_GPIO_Init+0x2b4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d013      	beq.n	8001b52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b2a:	e02c      	b.n	8001b86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	623b      	str	r3, [r7, #32]
          break;
 8001b32:	e029      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	623b      	str	r3, [r7, #32]
          break;
 8001b3c:	e024      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	3308      	adds	r3, #8
 8001b44:	623b      	str	r3, [r7, #32]
          break;
 8001b46:	e01f      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	330c      	adds	r3, #12
 8001b4e:	623b      	str	r3, [r7, #32]
          break;
 8001b50:	e01a      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d102      	bne.n	8001b60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	623b      	str	r3, [r7, #32]
          break;
 8001b5e:	e013      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d105      	bne.n	8001b74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b68:	2308      	movs	r3, #8
 8001b6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69fa      	ldr	r2, [r7, #28]
 8001b70:	611a      	str	r2, [r3, #16]
          break;
 8001b72:	e009      	b.n	8001b88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b74:	2308      	movs	r3, #8
 8001b76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	615a      	str	r2, [r3, #20]
          break;
 8001b7e:	e003      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b80:	2300      	movs	r3, #0
 8001b82:	623b      	str	r3, [r7, #32]
          break;
 8001b84:	e000      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          break;
 8001b86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	2bff      	cmp	r3, #255	@ 0xff
 8001b8c:	d801      	bhi.n	8001b92 <HAL_GPIO_Init+0x13a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	e001      	b.n	8001b96 <HAL_GPIO_Init+0x13e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3304      	adds	r3, #4
 8001b96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	2bff      	cmp	r3, #255	@ 0xff
 8001b9c:	d802      	bhi.n	8001ba4 <HAL_GPIO_Init+0x14c>
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	e002      	b.n	8001baa <HAL_GPIO_Init+0x152>
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba6:	3b08      	subs	r3, #8
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	210f      	movs	r1, #15
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	401a      	ands	r2, r3
 8001bbc:	6a39      	ldr	r1, [r7, #32]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 80b1 	beq.w	8001d3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bd8:	4b4d      	ldr	r3, [pc, #308]	@ (8001d10 <HAL_GPIO_Init+0x2b8>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	4a4c      	ldr	r2, [pc, #304]	@ (8001d10 <HAL_GPIO_Init+0x2b8>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6193      	str	r3, [r2, #24]
 8001be4:	4b4a      	ldr	r3, [pc, #296]	@ (8001d10 <HAL_GPIO_Init+0x2b8>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bf0:	4a48      	ldr	r2, [pc, #288]	@ (8001d14 <HAL_GPIO_Init+0x2bc>)
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf4:	089b      	lsrs	r3, r3, #2
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	220f      	movs	r2, #15
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	4013      	ands	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a40      	ldr	r2, [pc, #256]	@ (8001d18 <HAL_GPIO_Init+0x2c0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d013      	beq.n	8001c44 <HAL_GPIO_Init+0x1ec>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a3f      	ldr	r2, [pc, #252]	@ (8001d1c <HAL_GPIO_Init+0x2c4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d00d      	beq.n	8001c40 <HAL_GPIO_Init+0x1e8>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a3e      	ldr	r2, [pc, #248]	@ (8001d20 <HAL_GPIO_Init+0x2c8>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d007      	beq.n	8001c3c <HAL_GPIO_Init+0x1e4>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a3d      	ldr	r2, [pc, #244]	@ (8001d24 <HAL_GPIO_Init+0x2cc>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d101      	bne.n	8001c38 <HAL_GPIO_Init+0x1e0>
 8001c34:	2303      	movs	r3, #3
 8001c36:	e006      	b.n	8001c46 <HAL_GPIO_Init+0x1ee>
 8001c38:	2304      	movs	r3, #4
 8001c3a:	e004      	b.n	8001c46 <HAL_GPIO_Init+0x1ee>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e002      	b.n	8001c46 <HAL_GPIO_Init+0x1ee>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <HAL_GPIO_Init+0x1ee>
 8001c44:	2300      	movs	r3, #0
 8001c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c48:	f002 0203 	and.w	r2, r2, #3
 8001c4c:	0092      	lsls	r2, r2, #2
 8001c4e:	4093      	lsls	r3, r2
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c56:	492f      	ldr	r1, [pc, #188]	@ (8001d14 <HAL_GPIO_Init+0x2bc>)
 8001c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5a:	089b      	lsrs	r3, r3, #2
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d006      	beq.n	8001c7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c70:	4b2d      	ldr	r3, [pc, #180]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	492c      	ldr	r1, [pc, #176]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	608b      	str	r3, [r1, #8]
 8001c7c:	e006      	b.n	8001c8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	4928      	ldr	r1, [pc, #160]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d006      	beq.n	8001ca6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c98:	4b23      	ldr	r3, [pc, #140]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	4922      	ldr	r1, [pc, #136]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	60cb      	str	r3, [r1, #12]
 8001ca4:	e006      	b.n	8001cb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ca6:	4b20      	ldr	r3, [pc, #128]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	491e      	ldr	r1, [pc, #120]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d006      	beq.n	8001cce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cc0:	4b19      	ldr	r3, [pc, #100]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	4918      	ldr	r1, [pc, #96]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]
 8001ccc:	e006      	b.n	8001cdc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cce:	4b16      	ldr	r3, [pc, #88]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	4914      	ldr	r1, [pc, #80]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d021      	beq.n	8001d2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	490e      	ldr	r1, [pc, #56]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	600b      	str	r3, [r1, #0]
 8001cf4:	e021      	b.n	8001d3a <HAL_GPIO_Init+0x2e2>
 8001cf6:	bf00      	nop
 8001cf8:	10320000 	.word	0x10320000
 8001cfc:	10310000 	.word	0x10310000
 8001d00:	10220000 	.word	0x10220000
 8001d04:	10210000 	.word	0x10210000
 8001d08:	10120000 	.word	0x10120000
 8001d0c:	10110000 	.word	0x10110000
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40010000 	.word	0x40010000
 8001d18:	40010800 	.word	0x40010800
 8001d1c:	40010c00 	.word	0x40010c00
 8001d20:	40011000 	.word	0x40011000
 8001d24:	40011400 	.word	0x40011400
 8001d28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d5c <HAL_GPIO_Init+0x304>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	4909      	ldr	r1, [pc, #36]	@ (8001d5c <HAL_GPIO_Init+0x304>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d46:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f47f ae8e 	bne.w	8001a6c <HAL_GPIO_Init+0x14>
  }
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	372c      	adds	r7, #44	@ 0x2c
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	40010400 	.word	0x40010400

08001d60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	887b      	ldrh	r3, [r7, #2]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
 8001d7c:	e001      	b.n	8001d82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr

08001d8e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	807b      	strh	r3, [r7, #2]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d9e:	787b      	ldrb	r3, [r7, #1]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001da4:	887a      	ldrh	r2, [r7, #2]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001daa:	e003      	b.n	8001db4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dac:	887b      	ldrh	r3, [r7, #2]
 8001dae:	041a      	lsls	r2, r3, #16
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	611a      	str	r2, [r3, #16]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr
	...

08001dc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e272      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 8087 	beq.w	8001eee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001de0:	4b92      	ldr	r3, [pc, #584]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d00c      	beq.n	8001e06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dec:	4b8f      	ldr	r3, [pc, #572]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 030c 	and.w	r3, r3, #12
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d112      	bne.n	8001e1e <HAL_RCC_OscConfig+0x5e>
 8001df8:	4b8c      	ldr	r3, [pc, #560]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e04:	d10b      	bne.n	8001e1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e06:	4b89      	ldr	r3, [pc, #548]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d06c      	beq.n	8001eec <HAL_RCC_OscConfig+0x12c>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d168      	bne.n	8001eec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e24c      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e26:	d106      	bne.n	8001e36 <HAL_RCC_OscConfig+0x76>
 8001e28:	4b80      	ldr	r3, [pc, #512]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a7f      	ldr	r2, [pc, #508]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	e02e      	b.n	8001e94 <HAL_RCC_OscConfig+0xd4>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x98>
 8001e3e:	4b7b      	ldr	r3, [pc, #492]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a7a      	ldr	r2, [pc, #488]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	4b78      	ldr	r3, [pc, #480]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a77      	ldr	r2, [pc, #476]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e01d      	b.n	8001e94 <HAL_RCC_OscConfig+0xd4>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e60:	d10c      	bne.n	8001e7c <HAL_RCC_OscConfig+0xbc>
 8001e62:	4b72      	ldr	r3, [pc, #456]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a71      	ldr	r2, [pc, #452]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	4b6f      	ldr	r3, [pc, #444]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a6e      	ldr	r2, [pc, #440]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e00b      	b.n	8001e94 <HAL_RCC_OscConfig+0xd4>
 8001e7c:	4b6b      	ldr	r3, [pc, #428]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a6a      	ldr	r2, [pc, #424]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b68      	ldr	r3, [pc, #416]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a67      	ldr	r2, [pc, #412]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d013      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7ff fcee 	bl	800187c <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea4:	f7ff fcea 	bl	800187c <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	@ 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e200      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	4b5d      	ldr	r3, [pc, #372]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0xe4>
 8001ec2:	e014      	b.n	8001eee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7ff fcda 	bl	800187c <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7ff fcd6 	bl	800187c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	@ 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e1ec      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ede:	4b53      	ldr	r3, [pc, #332]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x10c>
 8001eea:	e000      	b.n	8001eee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d063      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001efa:	4b4c      	ldr	r3, [pc, #304]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00b      	beq.n	8001f1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f06:	4b49      	ldr	r3, [pc, #292]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d11c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x18c>
 8001f12:	4b46      	ldr	r3, [pc, #280]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d116      	bne.n	8001f4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1e:	4b43      	ldr	r3, [pc, #268]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d005      	beq.n	8001f36 <HAL_RCC_OscConfig+0x176>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d001      	beq.n	8001f36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e1c0      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f36:	4b3d      	ldr	r3, [pc, #244]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4939      	ldr	r1, [pc, #228]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4a:	e03a      	b.n	8001fc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d020      	beq.n	8001f96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f54:	4b36      	ldr	r3, [pc, #216]	@ (8002030 <HAL_RCC_OscConfig+0x270>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7ff fc8f 	bl	800187c <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f62:	f7ff fc8b 	bl	800187c <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e1a1      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f74:	4b2d      	ldr	r3, [pc, #180]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f80:	4b2a      	ldr	r3, [pc, #168]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4927      	ldr	r1, [pc, #156]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	600b      	str	r3, [r1, #0]
 8001f94:	e015      	b.n	8001fc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f96:	4b26      	ldr	r3, [pc, #152]	@ (8002030 <HAL_RCC_OscConfig+0x270>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fc6e 	bl	800187c <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa4:	f7ff fc6a 	bl	800187c <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e180      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d03a      	beq.n	8002044 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d019      	beq.n	800200a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd6:	4b17      	ldr	r3, [pc, #92]	@ (8002034 <HAL_RCC_OscConfig+0x274>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fdc:	f7ff fc4e 	bl	800187c <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe4:	f7ff fc4a 	bl	800187c <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e160      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800202c <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002002:	2001      	movs	r0, #1
 8002004:	f000 face 	bl	80025a4 <RCC_Delay>
 8002008:	e01c      	b.n	8002044 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800200a:	4b0a      	ldr	r3, [pc, #40]	@ (8002034 <HAL_RCC_OscConfig+0x274>)
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002010:	f7ff fc34 	bl	800187c <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002016:	e00f      	b.n	8002038 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002018:	f7ff fc30 	bl	800187c <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d908      	bls.n	8002038 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e146      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000
 8002030:	42420000 	.word	0x42420000
 8002034:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002038:	4b92      	ldr	r3, [pc, #584]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 800203a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1e9      	bne.n	8002018 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80a6 	beq.w	800219e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002052:	2300      	movs	r3, #0
 8002054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002056:	4b8b      	ldr	r3, [pc, #556]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10d      	bne.n	800207e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	4b88      	ldr	r3, [pc, #544]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	4a87      	ldr	r2, [pc, #540]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800206c:	61d3      	str	r3, [r2, #28]
 800206e:	4b85      	ldr	r3, [pc, #532]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800207a:	2301      	movs	r3, #1
 800207c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207e:	4b82      	ldr	r3, [pc, #520]	@ (8002288 <HAL_RCC_OscConfig+0x4c8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002086:	2b00      	cmp	r3, #0
 8002088:	d118      	bne.n	80020bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800208a:	4b7f      	ldr	r3, [pc, #508]	@ (8002288 <HAL_RCC_OscConfig+0x4c8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a7e      	ldr	r2, [pc, #504]	@ (8002288 <HAL_RCC_OscConfig+0x4c8>)
 8002090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002096:	f7ff fbf1 	bl	800187c <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209e:	f7ff fbed 	bl	800187c <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b64      	cmp	r3, #100	@ 0x64
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e103      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b0:	4b75      	ldr	r3, [pc, #468]	@ (8002288 <HAL_RCC_OscConfig+0x4c8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f0      	beq.n	800209e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d106      	bne.n	80020d2 <HAL_RCC_OscConfig+0x312>
 80020c4:	4b6f      	ldr	r3, [pc, #444]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	4a6e      	ldr	r2, [pc, #440]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6213      	str	r3, [r2, #32]
 80020d0:	e02d      	b.n	800212e <HAL_RCC_OscConfig+0x36e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x334>
 80020da:	4b6a      	ldr	r3, [pc, #424]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	4a69      	ldr	r2, [pc, #420]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	f023 0301 	bic.w	r3, r3, #1
 80020e4:	6213      	str	r3, [r2, #32]
 80020e6:	4b67      	ldr	r3, [pc, #412]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	4a66      	ldr	r2, [pc, #408]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	f023 0304 	bic.w	r3, r3, #4
 80020f0:	6213      	str	r3, [r2, #32]
 80020f2:	e01c      	b.n	800212e <HAL_RCC_OscConfig+0x36e>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	2b05      	cmp	r3, #5
 80020fa:	d10c      	bne.n	8002116 <HAL_RCC_OscConfig+0x356>
 80020fc:	4b61      	ldr	r3, [pc, #388]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4a60      	ldr	r2, [pc, #384]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002102:	f043 0304 	orr.w	r3, r3, #4
 8002106:	6213      	str	r3, [r2, #32]
 8002108:	4b5e      	ldr	r3, [pc, #376]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	4a5d      	ldr	r2, [pc, #372]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	6213      	str	r3, [r2, #32]
 8002114:	e00b      	b.n	800212e <HAL_RCC_OscConfig+0x36e>
 8002116:	4b5b      	ldr	r3, [pc, #364]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	4a5a      	ldr	r2, [pc, #360]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 800211c:	f023 0301 	bic.w	r3, r3, #1
 8002120:	6213      	str	r3, [r2, #32]
 8002122:	4b58      	ldr	r3, [pc, #352]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4a57      	ldr	r2, [pc, #348]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002128:	f023 0304 	bic.w	r3, r3, #4
 800212c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d015      	beq.n	8002162 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002136:	f7ff fba1 	bl	800187c <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213c:	e00a      	b.n	8002154 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213e:	f7ff fb9d 	bl	800187c <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800214c:	4293      	cmp	r3, r2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e0b1      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002154:	4b4b      	ldr	r3, [pc, #300]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0ee      	beq.n	800213e <HAL_RCC_OscConfig+0x37e>
 8002160:	e014      	b.n	800218c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002162:	f7ff fb8b 	bl	800187c <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002168:	e00a      	b.n	8002180 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216a:	f7ff fb87 	bl	800187c <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002178:	4293      	cmp	r3, r2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e09b      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002180:	4b40      	ldr	r3, [pc, #256]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1ee      	bne.n	800216a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800218c:	7dfb      	ldrb	r3, [r7, #23]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d105      	bne.n	800219e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002192:	4b3c      	ldr	r3, [pc, #240]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	4a3b      	ldr	r2, [pc, #236]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002198:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800219c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 8087 	beq.w	80022b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a8:	4b36      	ldr	r3, [pc, #216]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 030c 	and.w	r3, r3, #12
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d061      	beq.n	8002278 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d146      	bne.n	800224a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021bc:	4b33      	ldr	r3, [pc, #204]	@ (800228c <HAL_RCC_OscConfig+0x4cc>)
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c2:	f7ff fb5b 	bl	800187c <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ca:	f7ff fb57 	bl	800187c <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e06d      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021dc:	4b29      	ldr	r3, [pc, #164]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1f0      	bne.n	80021ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021f0:	d108      	bne.n	8002204 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021f2:	4b24      	ldr	r3, [pc, #144]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	4921      	ldr	r1, [pc, #132]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002204:	4b1f      	ldr	r3, [pc, #124]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a19      	ldr	r1, [r3, #32]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002214:	430b      	orrs	r3, r1
 8002216:	491b      	ldr	r1, [pc, #108]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002218:	4313      	orrs	r3, r2
 800221a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800221c:	4b1b      	ldr	r3, [pc, #108]	@ (800228c <HAL_RCC_OscConfig+0x4cc>)
 800221e:	2201      	movs	r2, #1
 8002220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7ff fb2b 	bl	800187c <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222a:	f7ff fb27 	bl	800187c <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e03d      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800223c:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x46a>
 8002248:	e035      	b.n	80022b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224a:	4b10      	ldr	r3, [pc, #64]	@ (800228c <HAL_RCC_OscConfig+0x4cc>)
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7ff fb14 	bl	800187c <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002258:	f7ff fb10 	bl	800187c <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e026      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226a:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x498>
 8002276:	e01e      	b.n	80022b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d107      	bne.n	8002290 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e019      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
 8002284:	40021000 	.word	0x40021000
 8002288:	40007000 	.word	0x40007000
 800228c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002290:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <HAL_RCC_OscConfig+0x500>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d106      	bne.n	80022b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d001      	beq.n	80022b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40021000 	.word	0x40021000

080022c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e0d0      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d910      	bls.n	8002308 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e6:	4b67      	ldr	r3, [pc, #412]	@ (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 0207 	bic.w	r2, r3, #7
 80022ee:	4965      	ldr	r1, [pc, #404]	@ (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f6:	4b63      	ldr	r3, [pc, #396]	@ (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d001      	beq.n	8002308 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0b8      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d020      	beq.n	8002356 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002320:	4b59      	ldr	r3, [pc, #356]	@ (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	4a58      	ldr	r2, [pc, #352]	@ (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800232a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002338:	4b53      	ldr	r3, [pc, #332]	@ (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	4a52      	ldr	r2, [pc, #328]	@ (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002342:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002344:	4b50      	ldr	r3, [pc, #320]	@ (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	494d      	ldr	r1, [pc, #308]	@ (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	4313      	orrs	r3, r2
 8002354:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d040      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d107      	bne.n	800237a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	4b47      	ldr	r3, [pc, #284]	@ (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d115      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e07f      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d107      	bne.n	8002392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002382:	4b41      	ldr	r3, [pc, #260]	@ (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d109      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e073      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002392:	4b3d      	ldr	r3, [pc, #244]	@ (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e06b      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023a2:	4b39      	ldr	r3, [pc, #228]	@ (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f023 0203 	bic.w	r2, r3, #3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	4936      	ldr	r1, [pc, #216]	@ (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023b4:	f7ff fa62 	bl	800187c <HAL_GetTick>
 80023b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ba:	e00a      	b.n	80023d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023bc:	f7ff fa5e 	bl	800187c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e053      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 020c 	and.w	r2, r3, #12
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d1eb      	bne.n	80023bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023e4:	4b27      	ldr	r3, [pc, #156]	@ (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d210      	bcs.n	8002414 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f2:	4b24      	ldr	r3, [pc, #144]	@ (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 0207 	bic.w	r2, r3, #7
 80023fa:	4922      	ldr	r1, [pc, #136]	@ (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b20      	ldr	r3, [pc, #128]	@ (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e032      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002420:	4b19      	ldr	r3, [pc, #100]	@ (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4916      	ldr	r1, [pc, #88]	@ (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	4313      	orrs	r3, r2
 8002430:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d009      	beq.n	8002452 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800243e:	4b12      	ldr	r3, [pc, #72]	@ (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	490e      	ldr	r1, [pc, #56]	@ (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 800244e:	4313      	orrs	r3, r2
 8002450:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002452:	f000 f821 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 8002456:	4602      	mov	r2, r0
 8002458:	4b0b      	ldr	r3, [pc, #44]	@ (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	490a      	ldr	r1, [pc, #40]	@ (800248c <HAL_RCC_ClockConfig+0x1c8>)
 8002464:	5ccb      	ldrb	r3, [r1, r3]
 8002466:	fa22 f303 	lsr.w	r3, r2, r3
 800246a:	4a09      	ldr	r2, [pc, #36]	@ (8002490 <HAL_RCC_ClockConfig+0x1cc>)
 800246c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800246e:	4b09      	ldr	r3, [pc, #36]	@ (8002494 <HAL_RCC_ClockConfig+0x1d0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff f9c0 	bl	80017f8 <HAL_InitTick>

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40022000 	.word	0x40022000
 8002488:	40021000 	.word	0x40021000
 800248c:	08007348 	.word	0x08007348
 8002490:	20000078 	.word	0x20000078
 8002494:	2000007c 	.word	0x2000007c

08002498 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	2300      	movs	r3, #0
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024b2:	4b1e      	ldr	r3, [pc, #120]	@ (800252c <HAL_RCC_GetSysClockFreq+0x94>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d002      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0x30>
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d003      	beq.n	80024ce <HAL_RCC_GetSysClockFreq+0x36>
 80024c6:	e027      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024c8:	4b19      	ldr	r3, [pc, #100]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x98>)
 80024ca:	613b      	str	r3, [r7, #16]
      break;
 80024cc:	e027      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	0c9b      	lsrs	r3, r3, #18
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	4a17      	ldr	r2, [pc, #92]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024d8:	5cd3      	ldrb	r3, [r2, r3]
 80024da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d010      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024e6:	4b11      	ldr	r3, [pc, #68]	@ (800252c <HAL_RCC_GetSysClockFreq+0x94>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	0c5b      	lsrs	r3, r3, #17
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	4a11      	ldr	r2, [pc, #68]	@ (8002538 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024f2:	5cd3      	ldrb	r3, [r2, r3]
 80024f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x98>)
 80024fa:	fb03 f202 	mul.w	r2, r3, r2
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	fbb2 f3f3 	udiv	r3, r2, r3
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	e004      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a0c      	ldr	r2, [pc, #48]	@ (800253c <HAL_RCC_GetSysClockFreq+0xa4>)
 800250c:	fb02 f303 	mul.w	r3, r2, r3
 8002510:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	613b      	str	r3, [r7, #16]
      break;
 8002516:	e002      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002518:	4b05      	ldr	r3, [pc, #20]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x98>)
 800251a:	613b      	str	r3, [r7, #16]
      break;
 800251c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800251e:	693b      	ldr	r3, [r7, #16]
}
 8002520:	4618      	mov	r0, r3
 8002522:	371c      	adds	r7, #28
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	007a1200 	.word	0x007a1200
 8002534:	08007360 	.word	0x08007360
 8002538:	08007370 	.word	0x08007370
 800253c:	003d0900 	.word	0x003d0900

08002540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002544:	4b02      	ldr	r3, [pc, #8]	@ (8002550 <HAL_RCC_GetHCLKFreq+0x10>)
 8002546:	681b      	ldr	r3, [r3, #0]
}
 8002548:	4618      	mov	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	20000078 	.word	0x20000078

08002554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002558:	f7ff fff2 	bl	8002540 <HAL_RCC_GetHCLKFreq>
 800255c:	4602      	mov	r2, r0
 800255e:	4b05      	ldr	r3, [pc, #20]	@ (8002574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	4903      	ldr	r1, [pc, #12]	@ (8002578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800256a:	5ccb      	ldrb	r3, [r1, r3]
 800256c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002570:	4618      	mov	r0, r3
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40021000 	.word	0x40021000
 8002578:	08007358 	.word	0x08007358

0800257c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002580:	f7ff ffde 	bl	8002540 <HAL_RCC_GetHCLKFreq>
 8002584:	4602      	mov	r2, r0
 8002586:	4b05      	ldr	r3, [pc, #20]	@ (800259c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	0adb      	lsrs	r3, r3, #11
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	4903      	ldr	r1, [pc, #12]	@ (80025a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002592:	5ccb      	ldrb	r3, [r1, r3]
 8002594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002598:	4618      	mov	r0, r3
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000
 80025a0:	08007358 	.word	0x08007358

080025a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025ac:	4b0a      	ldr	r3, [pc, #40]	@ (80025d8 <RCC_Delay+0x34>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0a      	ldr	r2, [pc, #40]	@ (80025dc <RCC_Delay+0x38>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	0a5b      	lsrs	r3, r3, #9
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	fb02 f303 	mul.w	r3, r2, r3
 80025be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025c0:	bf00      	nop
  }
  while (Delay --);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1e5a      	subs	r2, r3, #1
 80025c6:	60fa      	str	r2, [r7, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f9      	bne.n	80025c0 <RCC_Delay+0x1c>
}
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	20000078 	.word	0x20000078
 80025dc:	10624dd3 	.word	0x10624dd3

080025e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e042      	b.n	8002678 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fe ffc0 	bl	800158c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2224      	movs	r2, #36	@ 0x24
 8002610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002622:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f971 	bl	800290c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002638:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002648:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002658:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08a      	sub	sp, #40	@ 0x28
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b20      	cmp	r3, #32
 800269e:	d175      	bne.n	800278c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HAL_UART_Transmit+0x2c>
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e06e      	b.n	800278e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2221      	movs	r2, #33	@ 0x21
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026be:	f7ff f8dd 	bl	800187c <HAL_GetTick>
 80026c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	88fa      	ldrh	r2, [r7, #6]
 80026c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	88fa      	ldrh	r2, [r7, #6]
 80026ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026d8:	d108      	bne.n	80026ec <HAL_UART_Transmit+0x6c>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d104      	bne.n	80026ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	e003      	b.n	80026f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026f4:	e02e      	b.n	8002754 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2200      	movs	r2, #0
 80026fe:	2180      	movs	r1, #128	@ 0x80
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 f848 	bl	8002796 <UART_WaitOnFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e03a      	b.n	800278e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10b      	bne.n	8002736 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800272c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	3302      	adds	r3, #2
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	e007      	b.n	8002746 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	781a      	ldrb	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	3301      	adds	r3, #1
 8002744:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800274a:	b29b      	uxth	r3, r3
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002758:	b29b      	uxth	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1cb      	bne.n	80026f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2200      	movs	r2, #0
 8002766:	2140      	movs	r1, #64	@ 0x40
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 f814 	bl	8002796 <UART_WaitOnFlagUntilTimeout>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e006      	b.n	800278e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	e000      	b.n	800278e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800278c:	2302      	movs	r3, #2
  }
}
 800278e:	4618      	mov	r0, r3
 8002790:	3720      	adds	r7, #32
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	4613      	mov	r3, r2
 80027a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027a6:	e03b      	b.n	8002820 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ae:	d037      	beq.n	8002820 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b0:	f7ff f864 	bl	800187c <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	6a3a      	ldr	r2, [r7, #32]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d302      	bcc.n	80027c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e03a      	b.n	8002840 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d023      	beq.n	8002820 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b80      	cmp	r3, #128	@ 0x80
 80027dc:	d020      	beq.n	8002820 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2b40      	cmp	r3, #64	@ 0x40
 80027e2:	d01d      	beq.n	8002820 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d116      	bne.n	8002820 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 f81d 	bl	8002848 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2208      	movs	r2, #8
 8002812:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e00f      	b.n	8002840 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	4013      	ands	r3, r2
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	429a      	cmp	r2, r3
 800282e:	bf0c      	ite	eq
 8002830:	2301      	moveq	r3, #1
 8002832:	2300      	movne	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	429a      	cmp	r2, r3
 800283c:	d0b4      	beq.n	80027a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002848:	b480      	push	{r7}
 800284a:	b095      	sub	sp, #84	@ 0x54
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	330c      	adds	r3, #12
 8002856:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800285a:	e853 3f00 	ldrex	r3, [r3]
 800285e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002862:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	330c      	adds	r3, #12
 800286e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002870:	643a      	str	r2, [r7, #64]	@ 0x40
 8002872:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002874:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002876:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002878:	e841 2300 	strex	r3, r2, [r1]
 800287c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800287e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1e5      	bne.n	8002850 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	3314      	adds	r3, #20
 800288a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	e853 3f00 	ldrex	r3, [r3]
 8002892:	61fb      	str	r3, [r7, #28]
   return(result);
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f023 0301 	bic.w	r3, r3, #1
 800289a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	3314      	adds	r3, #20
 80028a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028ac:	e841 2300 	strex	r3, r2, [r1]
 80028b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1e5      	bne.n	8002884 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d119      	bne.n	80028f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	330c      	adds	r3, #12
 80028c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	e853 3f00 	ldrex	r3, [r3]
 80028ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f023 0310 	bic.w	r3, r3, #16
 80028d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	330c      	adds	r3, #12
 80028de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028e0:	61ba      	str	r2, [r7, #24]
 80028e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e4:	6979      	ldr	r1, [r7, #20]
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	e841 2300 	strex	r3, r2, [r1]
 80028ec:	613b      	str	r3, [r7, #16]
   return(result);
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1e5      	bne.n	80028c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002902:	bf00      	nop
 8002904:	3754      	adds	r7, #84	@ 0x54
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	4313      	orrs	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002946:	f023 030c 	bic.w	r3, r3, #12
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6812      	ldr	r2, [r2, #0]
 800294e:	68b9      	ldr	r1, [r7, #8]
 8002950:	430b      	orrs	r3, r1
 8002952:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699a      	ldr	r2, [r3, #24]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a2c      	ldr	r2, [pc, #176]	@ (8002a20 <UART_SetConfig+0x114>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d103      	bne.n	800297c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002974:	f7ff fe02 	bl	800257c <HAL_RCC_GetPCLK2Freq>
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	e002      	b.n	8002982 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800297c:	f7ff fdea 	bl	8002554 <HAL_RCC_GetPCLK1Freq>
 8002980:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	009a      	lsls	r2, r3, #2
 800298c:	441a      	add	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	fbb2 f3f3 	udiv	r3, r2, r3
 8002998:	4a22      	ldr	r2, [pc, #136]	@ (8002a24 <UART_SetConfig+0x118>)
 800299a:	fba2 2303 	umull	r2, r3, r2, r3
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	0119      	lsls	r1, r3, #4
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	009a      	lsls	r2, r3, #2
 80029ac:	441a      	add	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80029b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a24 <UART_SetConfig+0x118>)
 80029ba:	fba3 0302 	umull	r0, r3, r3, r2
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	2064      	movs	r0, #100	@ 0x64
 80029c2:	fb00 f303 	mul.w	r3, r0, r3
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	3332      	adds	r3, #50	@ 0x32
 80029cc:	4a15      	ldr	r2, [pc, #84]	@ (8002a24 <UART_SetConfig+0x118>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029d8:	4419      	add	r1, r3
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	009a      	lsls	r2, r3, #2
 80029e4:	441a      	add	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80029f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a24 <UART_SetConfig+0x118>)
 80029f2:	fba3 0302 	umull	r0, r3, r3, r2
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	2064      	movs	r0, #100	@ 0x64
 80029fa:	fb00 f303 	mul.w	r3, r0, r3
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	3332      	adds	r3, #50	@ 0x32
 8002a04:	4a07      	ldr	r2, [pc, #28]	@ (8002a24 <UART_SetConfig+0x118>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	f003 020f 	and.w	r2, r3, #15
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	440a      	add	r2, r1
 8002a16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a18:	bf00      	nop
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40013800 	.word	0x40013800
 8002a24:	51eb851f 	.word	0x51eb851f

08002a28 <__NVIC_SetPriority>:
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	6039      	str	r1, [r7, #0]
 8002a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	db0a      	blt.n	8002a52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	490c      	ldr	r1, [pc, #48]	@ (8002a74 <__NVIC_SetPriority+0x4c>)
 8002a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a46:	0112      	lsls	r2, r2, #4
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002a50:	e00a      	b.n	8002a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4908      	ldr	r1, [pc, #32]	@ (8002a78 <__NVIC_SetPriority+0x50>)
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	3b04      	subs	r3, #4
 8002a60:	0112      	lsls	r2, r2, #4
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	440b      	add	r3, r1
 8002a66:	761a      	strb	r2, [r3, #24]
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	e000e100 	.word	0xe000e100
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002a80:	2100      	movs	r1, #0
 8002a82:	f06f 0004 	mvn.w	r0, #4
 8002a86:	f7ff ffcf 	bl	8002a28 <__NVIC_SetPriority>
#endif
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a96:	f3ef 8305 	mrs	r3, IPSR
 8002a9a:	603b      	str	r3, [r7, #0]
  return(result);
 8002a9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002aa2:	f06f 0305 	mvn.w	r3, #5
 8002aa6:	607b      	str	r3, [r7, #4]
 8002aa8:	e00c      	b.n	8002ac4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002aaa:	4b09      	ldr	r3, [pc, #36]	@ (8002ad0 <osKernelInitialize+0x40>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d105      	bne.n	8002abe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002ab2:	4b07      	ldr	r3, [pc, #28]	@ (8002ad0 <osKernelInitialize+0x40>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	607b      	str	r3, [r7, #4]
 8002abc:	e002      	b.n	8002ac4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ac4:	687b      	ldr	r3, [r7, #4]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	20000230 	.word	0x20000230

08002ad4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ada:	f3ef 8305 	mrs	r3, IPSR
 8002ade:	603b      	str	r3, [r7, #0]
  return(result);
 8002ae0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <osKernelStart+0x1a>
    stat = osErrorISR;
 8002ae6:	f06f 0305 	mvn.w	r3, #5
 8002aea:	607b      	str	r3, [r7, #4]
 8002aec:	e010      	b.n	8002b10 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002aee:	4b0b      	ldr	r3, [pc, #44]	@ (8002b1c <osKernelStart+0x48>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d109      	bne.n	8002b0a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002af6:	f7ff ffc1 	bl	8002a7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002afa:	4b08      	ldr	r3, [pc, #32]	@ (8002b1c <osKernelStart+0x48>)
 8002afc:	2202      	movs	r2, #2
 8002afe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002b00:	f001 fd4e 	bl	80045a0 <vTaskStartScheduler>
      stat = osOK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	607b      	str	r3, [r7, #4]
 8002b08:	e002      	b.n	8002b10 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b10:	687b      	ldr	r3, [r7, #4]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000230 	.word	0x20000230

08002b20 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08e      	sub	sp, #56	@ 0x38
 8002b24:	af04      	add	r7, sp, #16
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b30:	f3ef 8305 	mrs	r3, IPSR
 8002b34:	617b      	str	r3, [r7, #20]
  return(result);
 8002b36:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d17e      	bne.n	8002c3a <osThreadNew+0x11a>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d07b      	beq.n	8002c3a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002b42:	2380      	movs	r3, #128	@ 0x80
 8002b44:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002b46:	2318      	movs	r3, #24
 8002b48:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b52:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d045      	beq.n	8002be6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <osThreadNew+0x48>
        name = attr->name;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d002      	beq.n	8002b76 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <osThreadNew+0x6e>
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	2b38      	cmp	r3, #56	@ 0x38
 8002b80:	d805      	bhi.n	8002b8e <osThreadNew+0x6e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <osThreadNew+0x72>
        return (NULL);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e054      	b.n	8002c3c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	089b      	lsrs	r3, r3, #2
 8002ba0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00e      	beq.n	8002bc8 <osThreadNew+0xa8>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2b5b      	cmp	r3, #91	@ 0x5b
 8002bb0:	d90a      	bls.n	8002bc8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d006      	beq.n	8002bc8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <osThreadNew+0xa8>
        mem = 1;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	61bb      	str	r3, [r7, #24]
 8002bc6:	e010      	b.n	8002bea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10c      	bne.n	8002bea <osThreadNew+0xca>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d108      	bne.n	8002bea <osThreadNew+0xca>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d104      	bne.n	8002bea <osThreadNew+0xca>
          mem = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	61bb      	str	r3, [r7, #24]
 8002be4:	e001      	b.n	8002bea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d110      	bne.n	8002c12 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002bf8:	9202      	str	r2, [sp, #8]
 8002bfa:	9301      	str	r3, [sp, #4]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	6a3a      	ldr	r2, [r7, #32]
 8002c04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f001 faee 	bl	80041e8 <xTaskCreateStatic>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	e013      	b.n	8002c3a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d110      	bne.n	8002c3a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	f107 0310 	add.w	r3, r7, #16
 8002c20:	9301      	str	r3, [sp, #4]
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f001 fb3c 	bl	80042a8 <xTaskCreate>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d001      	beq.n	8002c3a <osThreadNew+0x11a>
            hTask = NULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002c3a:	693b      	ldr	r3, [r7, #16]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3728      	adds	r7, #40	@ 0x28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c4c:	f3ef 8305 	mrs	r3, IPSR
 8002c50:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c52:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <osDelay+0x1c>
    stat = osErrorISR;
 8002c58:	f06f 0305 	mvn.w	r3, #5
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	e007      	b.n	8002c70 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f001 fc62 	bl	8004534 <vTaskDelay>
    }
  }

  return (stat);
 8002c70:	68fb      	ldr	r3, [r7, #12]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b088      	sub	sp, #32
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c86:	f3ef 8305 	mrs	r3, IPSR
 8002c8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c8c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d174      	bne.n	8002d7c <osMutexNew+0x102>
    if (attr != NULL) {
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <osMutexNew+0x26>
      type = attr->attr_bits;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	e001      	b.n	8002ca4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <osMutexNew+0x3a>
      rmtx = 1U;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	e001      	b.n	8002cb8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d15c      	bne.n	8002d7c <osMutexNew+0x102>
      mem = -1;
 8002cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d015      	beq.n	8002cfa <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d006      	beq.n	8002ce4 <osMutexNew+0x6a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	2b4f      	cmp	r3, #79	@ 0x4f
 8002cdc:	d902      	bls.n	8002ce4 <osMutexNew+0x6a>
          mem = 1;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	e00c      	b.n	8002cfe <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d108      	bne.n	8002cfe <osMutexNew+0x84>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d104      	bne.n	8002cfe <osMutexNew+0x84>
            mem = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	e001      	b.n	8002cfe <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d112      	bne.n	8002d2a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d007      	beq.n	8002d1a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	4619      	mov	r1, r3
 8002d10:	2004      	movs	r0, #4
 8002d12:	f000 fc4a 	bl	80035aa <xQueueCreateMutexStatic>
 8002d16:	61f8      	str	r0, [r7, #28]
 8002d18:	e016      	b.n	8002d48 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	4619      	mov	r1, r3
 8002d20:	2001      	movs	r0, #1
 8002d22:	f000 fc42 	bl	80035aa <xQueueCreateMutexStatic>
 8002d26:	61f8      	str	r0, [r7, #28]
 8002d28:	e00e      	b.n	8002d48 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10b      	bne.n	8002d48 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d004      	beq.n	8002d40 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8002d36:	2004      	movs	r0, #4
 8002d38:	f000 fc1f 	bl	800357a <xQueueCreateMutex>
 8002d3c:	61f8      	str	r0, [r7, #28]
 8002d3e:	e003      	b.n	8002d48 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8002d40:	2001      	movs	r0, #1
 8002d42:	f000 fc1a 	bl	800357a <xQueueCreateMutex>
 8002d46:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00c      	beq.n	8002d68 <osMutexNew+0xee>
        if (attr != NULL) {
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <osMutexNew+0xe2>
          name = attr->name;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	e001      	b.n	8002d60 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8002d60:	68f9      	ldr	r1, [r7, #12]
 8002d62:	69f8      	ldr	r0, [r7, #28]
 8002d64:	f001 f9e4 	bl	8004130 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d006      	beq.n	8002d7c <osMutexNew+0x102>
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8002d7c:	69fb      	ldr	r3, [r7, #28]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3720      	adds	r7, #32
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b086      	sub	sp, #24
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f023 0301 	bic.w	r3, r3, #1
 8002d96:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002da4:	f3ef 8305 	mrs	r3, IPSR
 8002da8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002daa:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8002db0:	f06f 0305 	mvn.w	r3, #5
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	e02c      	b.n	8002e12 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d103      	bne.n	8002dc6 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8002dbe:	f06f 0303 	mvn.w	r3, #3
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	e025      	b.n	8002e12 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d011      	beq.n	8002df0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8002dcc:	6839      	ldr	r1, [r7, #0]
 8002dce:	6938      	ldr	r0, [r7, #16]
 8002dd0:	f000 fc3b 	bl	800364a <xQueueTakeMutexRecursive>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d01b      	beq.n	8002e12 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8002de0:	f06f 0301 	mvn.w	r3, #1
 8002de4:	617b      	str	r3, [r7, #20]
 8002de6:	e014      	b.n	8002e12 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002de8:	f06f 0302 	mvn.w	r3, #2
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	e010      	b.n	8002e12 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8002df0:	6839      	ldr	r1, [r7, #0]
 8002df2:	6938      	ldr	r0, [r7, #16]
 8002df4:	f000 fee2 	bl	8003bbc <xQueueSemaphoreTake>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d009      	beq.n	8002e12 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8002e04:	f06f 0301 	mvn.w	r3, #1
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	e002      	b.n	8002e12 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002e0c:	f06f 0302 	mvn.w	r3, #2
 8002e10:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8002e12:	697b      	ldr	r3, [r7, #20]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f023 0301 	bic.w	r3, r3, #1
 8002e2a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e38:	f3ef 8305 	mrs	r3, IPSR
 8002e3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e3e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <osMutexRelease+0x30>
    stat = osErrorISR;
 8002e44:	f06f 0305 	mvn.w	r3, #5
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	e01f      	b.n	8002e8c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d103      	bne.n	8002e5a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8002e52:	f06f 0303 	mvn.w	r3, #3
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	e018      	b.n	8002e8c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d009      	beq.n	8002e74 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8002e60:	6938      	ldr	r0, [r7, #16]
 8002e62:	f000 fbbd 	bl	80035e0 <xQueueGiveMutexRecursive>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d00f      	beq.n	8002e8c <osMutexRelease+0x70>
        stat = osErrorResource;
 8002e6c:	f06f 0302 	mvn.w	r3, #2
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	e00b      	b.n	8002e8c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8002e74:	2300      	movs	r3, #0
 8002e76:	2200      	movs	r2, #0
 8002e78:	2100      	movs	r1, #0
 8002e7a:	6938      	ldr	r0, [r7, #16]
 8002e7c:	f000 fc1c 	bl	80036b8 <xQueueGenericSend>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d002      	beq.n	8002e8c <osMutexRelease+0x70>
        stat = osErrorResource;
 8002e86:	f06f 0302 	mvn.w	r3, #2
 8002e8a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002e8c:	697b      	ldr	r3, [r7, #20]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b08a      	sub	sp, #40	@ 0x28
 8002e9a:	af02      	add	r7, sp, #8
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ea6:	f3ef 8305 	mrs	r3, IPSR
 8002eaa:	613b      	str	r3, [r7, #16]
  return(result);
 8002eac:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d15f      	bne.n	8002f72 <osMessageQueueNew+0xdc>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d05c      	beq.n	8002f72 <osMessageQueueNew+0xdc>
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d059      	beq.n	8002f72 <osMessageQueueNew+0xdc>
    mem = -1;
 8002ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d029      	beq.n	8002f1e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d012      	beq.n	8002ef8 <osMessageQueueNew+0x62>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	2b4f      	cmp	r3, #79	@ 0x4f
 8002ed8:	d90e      	bls.n	8002ef8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	68b9      	ldr	r1, [r7, #8]
 8002eea:	fb01 f303 	mul.w	r3, r1, r3
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d302      	bcc.n	8002ef8 <osMessageQueueNew+0x62>
        mem = 1;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	e014      	b.n	8002f22 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d110      	bne.n	8002f22 <osMessageQueueNew+0x8c>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10c      	bne.n	8002f22 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d108      	bne.n	8002f22 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d104      	bne.n	8002f22 <osMessageQueueNew+0x8c>
          mem = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	61bb      	str	r3, [r7, #24]
 8002f1c:	e001      	b.n	8002f22 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d10b      	bne.n	8002f40 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2100      	movs	r1, #0
 8002f32:	9100      	str	r1, [sp, #0]
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 fa2a 	bl	8003390 <xQueueGenericCreateStatic>
 8002f3c:	61f8      	str	r0, [r7, #28]
 8002f3e:	e008      	b.n	8002f52 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d105      	bne.n	8002f52 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8002f46:	2200      	movs	r2, #0
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 fa9d 	bl	800348a <xQueueGenericCreate>
 8002f50:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00c      	beq.n	8002f72 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <osMessageQueueNew+0xd0>
        name = attr->name;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	e001      	b.n	8002f6a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8002f6a:	6979      	ldr	r1, [r7, #20]
 8002f6c:	69f8      	ldr	r0, [r7, #28]
 8002f6e:	f001 f8df 	bl	8004130 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002f72:	69fb      	ldr	r3, [r7, #28]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3720      	adds	r7, #32
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f94:	f3ef 8305 	mrs	r3, IPSR
 8002f98:	617b      	str	r3, [r7, #20]
  return(result);
 8002f9a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d028      	beq.n	8002ff2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d005      	beq.n	8002fb2 <osMessageQueuePut+0x36>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <osMessageQueuePut+0x36>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8002fb2:	f06f 0303 	mvn.w	r3, #3
 8002fb6:	61fb      	str	r3, [r7, #28]
 8002fb8:	e038      	b.n	800302c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002fbe:	f107 0210 	add.w	r2, r7, #16
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	69b8      	ldr	r0, [r7, #24]
 8002fc8:	f000 fc78 	bl	80038bc <xQueueGenericSendFromISR>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d003      	beq.n	8002fda <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8002fd2:	f06f 0302 	mvn.w	r3, #2
 8002fd6:	61fb      	str	r3, [r7, #28]
 8002fd8:	e028      	b.n	800302c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d025      	beq.n	800302c <osMessageQueuePut+0xb0>
 8002fe0:	4b15      	ldr	r3, [pc, #84]	@ (8003038 <osMessageQueuePut+0xbc>)
 8002fe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	f3bf 8f6f 	isb	sy
 8002ff0:	e01c      	b.n	800302c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <osMessageQueuePut+0x82>
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d103      	bne.n	8003006 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8002ffe:	f06f 0303 	mvn.w	r3, #3
 8003002:	61fb      	str	r3, [r7, #28]
 8003004:	e012      	b.n	800302c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003006:	2300      	movs	r3, #0
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	68b9      	ldr	r1, [r7, #8]
 800300c:	69b8      	ldr	r0, [r7, #24]
 800300e:	f000 fb53 	bl	80036b8 <xQueueGenericSend>
 8003012:	4603      	mov	r3, r0
 8003014:	2b01      	cmp	r3, #1
 8003016:	d009      	beq.n	800302c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800301e:	f06f 0301 	mvn.w	r3, #1
 8003022:	61fb      	str	r3, [r7, #28]
 8003024:	e002      	b.n	800302c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003026:	f06f 0302 	mvn.w	r3, #2
 800302a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800302c:	69fb      	ldr	r3, [r7, #28]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3720      	adds	r7, #32
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	e000ed04 	.word	0xe000ed04

0800303c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003052:	f3ef 8305 	mrs	r3, IPSR
 8003056:	617b      	str	r3, [r7, #20]
  return(result);
 8003058:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800305a:	2b00      	cmp	r3, #0
 800305c:	d028      	beq.n	80030b0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <osMessageQueueGet+0x34>
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <osMessageQueueGet+0x34>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003070:	f06f 0303 	mvn.w	r3, #3
 8003074:	61fb      	str	r3, [r7, #28]
 8003076:	e037      	b.n	80030e8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003078:	2300      	movs	r3, #0
 800307a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800307c:	f107 0310 	add.w	r3, r7, #16
 8003080:	461a      	mov	r2, r3
 8003082:	68b9      	ldr	r1, [r7, #8]
 8003084:	69b8      	ldr	r0, [r7, #24]
 8003086:	f000 fea9 	bl	8003ddc <xQueueReceiveFromISR>
 800308a:	4603      	mov	r3, r0
 800308c:	2b01      	cmp	r3, #1
 800308e:	d003      	beq.n	8003098 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003090:	f06f 0302 	mvn.w	r3, #2
 8003094:	61fb      	str	r3, [r7, #28]
 8003096:	e027      	b.n	80030e8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d024      	beq.n	80030e8 <osMessageQueueGet+0xac>
 800309e:	4b15      	ldr	r3, [pc, #84]	@ (80030f4 <osMessageQueueGet+0xb8>)
 80030a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	f3bf 8f6f 	isb	sy
 80030ae:	e01b      	b.n	80030e8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <osMessageQueueGet+0x80>
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d103      	bne.n	80030c4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80030bc:	f06f 0303 	mvn.w	r3, #3
 80030c0:	61fb      	str	r3, [r7, #28]
 80030c2:	e011      	b.n	80030e8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	69b8      	ldr	r0, [r7, #24]
 80030ca:	f000 fc95 	bl	80039f8 <xQueueReceive>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d009      	beq.n	80030e8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80030da:	f06f 0301 	mvn.w	r3, #1
 80030de:	61fb      	str	r3, [r7, #28]
 80030e0:	e002      	b.n	80030e8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80030e2:	f06f 0302 	mvn.w	r3, #2
 80030e6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80030e8:	69fb      	ldr	r3, [r7, #28]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3720      	adds	r7, #32
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	e000ed04 	.word	0xe000ed04

080030f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4a06      	ldr	r2, [pc, #24]	@ (8003120 <vApplicationGetIdleTaskMemory+0x28>)
 8003108:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	4a05      	ldr	r2, [pc, #20]	@ (8003124 <vApplicationGetIdleTaskMemory+0x2c>)
 800310e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2280      	movs	r2, #128	@ 0x80
 8003114:	601a      	str	r2, [r3, #0]
}
 8003116:	bf00      	nop
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr
 8003120:	20000234 	.word	0x20000234
 8003124:	20000290 	.word	0x20000290

08003128 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4a07      	ldr	r2, [pc, #28]	@ (8003154 <vApplicationGetTimerTaskMemory+0x2c>)
 8003138:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	4a06      	ldr	r2, [pc, #24]	@ (8003158 <vApplicationGetTimerTaskMemory+0x30>)
 800313e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003146:	601a      	str	r2, [r3, #0]
}
 8003148:	bf00      	nop
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20000490 	.word	0x20000490
 8003158:	200004ec 	.word	0x200004ec

0800315c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f103 0208 	add.w	r2, r3, #8
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f04f 32ff 	mov.w	r2, #4294967295
 8003174:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f103 0208 	add.w	r2, r3, #8
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f103 0208 	add.w	r2, r3, #8
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr

080031b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031b2:	b480      	push	{r7}
 80031b4:	b085      	sub	sp, #20
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	601a      	str	r2, [r3, #0]
}
 80031ee:	bf00      	nop
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320e:	d103      	bne.n	8003218 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	e00c      	b.n	8003232 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3308      	adds	r3, #8
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	e002      	b.n	8003226 <vListInsert+0x2e>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	429a      	cmp	r2, r3
 8003230:	d2f6      	bcs.n	8003220 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	601a      	str	r2, [r3, #0]
}
 800325e:	bf00      	nop
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr

08003268 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6892      	ldr	r2, [r2, #8]
 800327e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6852      	ldr	r2, [r2, #4]
 8003288:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	d103      	bne.n	800329c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	1e5a      	subs	r2, r3, #1
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr
	...

080032bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10b      	bne.n	80032e8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80032d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032d4:	f383 8811 	msr	BASEPRI, r3
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	f3bf 8f4f 	dsb	sy
 80032e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80032e2:	bf00      	nop
 80032e4:	bf00      	nop
 80032e6:	e7fd      	b.n	80032e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80032e8:	f002 fbe0 	bl	8005aac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f4:	68f9      	ldr	r1, [r7, #12]
 80032f6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	441a      	add	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003318:	3b01      	subs	r3, #1
 800331a:	68f9      	ldr	r1, [r7, #12]
 800331c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800331e:	fb01 f303 	mul.w	r3, r1, r3
 8003322:	441a      	add	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	22ff      	movs	r2, #255	@ 0xff
 800332c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	22ff      	movs	r2, #255	@ 0xff
 8003334:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d114      	bne.n	8003368 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d01a      	beq.n	800337c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	3310      	adds	r3, #16
 800334a:	4618      	mov	r0, r3
 800334c:	f001 fbb4 	bl	8004ab8 <xTaskRemoveFromEventList>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d012      	beq.n	800337c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003356:	4b0d      	ldr	r3, [pc, #52]	@ (800338c <xQueueGenericReset+0xd0>)
 8003358:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	e009      	b.n	800337c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	3310      	adds	r3, #16
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff fef5 	bl	800315c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	3324      	adds	r3, #36	@ 0x24
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff fef0 	bl	800315c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800337c:	f002 fbc6 	bl	8005b0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003380:	2301      	movs	r3, #1
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	e000ed04 	.word	0xe000ed04

08003390 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08e      	sub	sp, #56	@ 0x38
 8003394:	af02      	add	r7, sp, #8
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10b      	bne.n	80033bc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80033a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a8:	f383 8811 	msr	BASEPRI, r3
 80033ac:	f3bf 8f6f 	isb	sy
 80033b0:	f3bf 8f4f 	dsb	sy
 80033b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80033b6:	bf00      	nop
 80033b8:	bf00      	nop
 80033ba:	e7fd      	b.n	80033b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10b      	bne.n	80033da <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80033c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c6:	f383 8811 	msr	BASEPRI, r3
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	f3bf 8f4f 	dsb	sy
 80033d2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop
 80033d8:	e7fd      	b.n	80033d6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <xQueueGenericCreateStatic+0x56>
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <xQueueGenericCreateStatic+0x5a>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <xQueueGenericCreateStatic+0x5c>
 80033ea:	2300      	movs	r3, #0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10b      	bne.n	8003408 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80033f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f4:	f383 8811 	msr	BASEPRI, r3
 80033f8:	f3bf 8f6f 	isb	sy
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	623b      	str	r3, [r7, #32]
}
 8003402:	bf00      	nop
 8003404:	bf00      	nop
 8003406:	e7fd      	b.n	8003404 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d102      	bne.n	8003414 <xQueueGenericCreateStatic+0x84>
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <xQueueGenericCreateStatic+0x88>
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <xQueueGenericCreateStatic+0x8a>
 8003418:	2300      	movs	r3, #0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10b      	bne.n	8003436 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800341e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	f3bf 8f6f 	isb	sy
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	61fb      	str	r3, [r7, #28]
}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	e7fd      	b.n	8003432 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003436:	2350      	movs	r3, #80	@ 0x50
 8003438:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2b50      	cmp	r3, #80	@ 0x50
 800343e:	d00b      	beq.n	8003458 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003444:	f383 8811 	msr	BASEPRI, r3
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	61bb      	str	r3, [r7, #24]
}
 8003452:	bf00      	nop
 8003454:	bf00      	nop
 8003456:	e7fd      	b.n	8003454 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003458:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800345e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00d      	beq.n	8003480 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800346c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	4613      	mov	r3, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	68b9      	ldr	r1, [r7, #8]
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f840 	bl	8003500 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003482:	4618      	mov	r0, r3
 8003484:	3730      	adds	r7, #48	@ 0x30
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800348a:	b580      	push	{r7, lr}
 800348c:	b08a      	sub	sp, #40	@ 0x28
 800348e:	af02      	add	r7, sp, #8
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	4613      	mov	r3, r2
 8003496:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10b      	bne.n	80034b6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800349e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	613b      	str	r3, [r7, #16]
}
 80034b0:	bf00      	nop
 80034b2:	bf00      	nop
 80034b4:	e7fd      	b.n	80034b2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	fb02 f303 	mul.w	r3, r2, r3
 80034be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	3350      	adds	r3, #80	@ 0x50
 80034c4:	4618      	mov	r0, r3
 80034c6:	f002 fbf3 	bl	8005cb0 <pvPortMalloc>
 80034ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d011      	beq.n	80034f6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	3350      	adds	r3, #80	@ 0x50
 80034da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80034e4:	79fa      	ldrb	r2, [r7, #7]
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	4613      	mov	r3, r2
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	68b9      	ldr	r1, [r7, #8]
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 f805 	bl	8003500 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80034f6:	69bb      	ldr	r3, [r7, #24]
	}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3720      	adds	r7, #32
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d103      	bne.n	800351c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e002      	b.n	8003522 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800352e:	2101      	movs	r1, #1
 8003530:	69b8      	ldr	r0, [r7, #24]
 8003532:	f7ff fec3 	bl	80032bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800353e:	bf00      	nop
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00e      	beq.n	8003572 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003566:	2300      	movs	r3, #0
 8003568:	2200      	movs	r2, #0
 800356a:	2100      	movs	r1, #0
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f8a3 	bl	80036b8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800357a:	b580      	push	{r7, lr}
 800357c:	b086      	sub	sp, #24
 800357e:	af00      	add	r7, sp, #0
 8003580:	4603      	mov	r3, r0
 8003582:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003584:	2301      	movs	r3, #1
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	2300      	movs	r3, #0
 800358a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	461a      	mov	r2, r3
 8003590:	6939      	ldr	r1, [r7, #16]
 8003592:	6978      	ldr	r0, [r7, #20]
 8003594:	f7ff ff79 	bl	800348a <xQueueGenericCreate>
 8003598:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f7ff ffd3 	bl	8003546 <prvInitialiseMutex>

		return xNewQueue;
 80035a0:	68fb      	ldr	r3, [r7, #12]
	}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b088      	sub	sp, #32
 80035ae:	af02      	add	r7, sp, #8
 80035b0:	4603      	mov	r3, r0
 80035b2:	6039      	str	r1, [r7, #0]
 80035b4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80035b6:	2301      	movs	r3, #1
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2200      	movs	r2, #0
 80035c6:	6939      	ldr	r1, [r7, #16]
 80035c8:	6978      	ldr	r0, [r7, #20]
 80035ca:	f7ff fee1 	bl	8003390 <xQueueGenericCreateStatic>
 80035ce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f7ff ffb8 	bl	8003546 <prvInitialiseMutex>

		return xNewQueue;
 80035d6:	68fb      	ldr	r3, [r7, #12]
	}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10b      	bne.n	800360a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80035f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	60fb      	str	r3, [r7, #12]
}
 8003604:	bf00      	nop
 8003606:	bf00      	nop
 8003608:	e7fd      	b.n	8003606 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	689c      	ldr	r4, [r3, #8]
 800360e:	f001 fc13 	bl	8004e38 <xTaskGetCurrentTaskHandle>
 8003612:	4603      	mov	r3, r0
 8003614:	429c      	cmp	r4, r3
 8003616:	d111      	bne.n	800363c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	1e5a      	subs	r2, r3, #1
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d105      	bne.n	8003636 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800362a:	2300      	movs	r3, #0
 800362c:	2200      	movs	r2, #0
 800362e:	2100      	movs	r1, #0
 8003630:	6938      	ldr	r0, [r7, #16]
 8003632:	f000 f841 	bl	80036b8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8003636:	2301      	movs	r3, #1
 8003638:	617b      	str	r3, [r7, #20]
 800363a:	e001      	b.n	8003640 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8003640:	697b      	ldr	r3, [r7, #20]
	}
 8003642:	4618      	mov	r0, r3
 8003644:	371c      	adds	r7, #28
 8003646:	46bd      	mov	sp, r7
 8003648:	bd90      	pop	{r4, r7, pc}

0800364a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800364a:	b590      	push	{r4, r7, lr}
 800364c:	b087      	sub	sp, #28
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10b      	bne.n	8003676 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	60fb      	str	r3, [r7, #12]
}
 8003670:	bf00      	nop
 8003672:	bf00      	nop
 8003674:	e7fd      	b.n	8003672 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	689c      	ldr	r4, [r3, #8]
 800367a:	f001 fbdd 	bl	8004e38 <xTaskGetCurrentTaskHandle>
 800367e:	4603      	mov	r3, r0
 8003680:	429c      	cmp	r4, r3
 8003682:	d107      	bne.n	8003694 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800368e:	2301      	movs	r3, #1
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	e00c      	b.n	80036ae <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8003694:	6839      	ldr	r1, [r7, #0]
 8003696:	6938      	ldr	r0, [r7, #16]
 8003698:	f000 fa90 	bl	8003bbc <xQueueSemaphoreTake>
 800369c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d004      	beq.n	80036ae <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80036ae:	697b      	ldr	r3, [r7, #20]
	}
 80036b0:	4618      	mov	r0, r3
 80036b2:	371c      	adds	r7, #28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd90      	pop	{r4, r7, pc}

080036b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08e      	sub	sp, #56	@ 0x38
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80036c6:	2300      	movs	r3, #0
 80036c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80036ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10b      	bne.n	80036ec <xQueueGenericSend+0x34>
	__asm volatile
 80036d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d8:	f383 8811 	msr	BASEPRI, r3
 80036dc:	f3bf 8f6f 	isb	sy
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80036e6:	bf00      	nop
 80036e8:	bf00      	nop
 80036ea:	e7fd      	b.n	80036e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d103      	bne.n	80036fa <xQueueGenericSend+0x42>
 80036f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <xQueueGenericSend+0x46>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <xQueueGenericSend+0x48>
 80036fe:	2300      	movs	r3, #0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10b      	bne.n	800371c <xQueueGenericSend+0x64>
	__asm volatile
 8003704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003716:	bf00      	nop
 8003718:	bf00      	nop
 800371a:	e7fd      	b.n	8003718 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d103      	bne.n	800372a <xQueueGenericSend+0x72>
 8003722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <xQueueGenericSend+0x76>
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <xQueueGenericSend+0x78>
 800372e:	2300      	movs	r3, #0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10b      	bne.n	800374c <xQueueGenericSend+0x94>
	__asm volatile
 8003734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003738:	f383 8811 	msr	BASEPRI, r3
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	623b      	str	r3, [r7, #32]
}
 8003746:	bf00      	nop
 8003748:	bf00      	nop
 800374a:	e7fd      	b.n	8003748 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800374c:	f001 fb82 	bl	8004e54 <xTaskGetSchedulerState>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d102      	bne.n	800375c <xQueueGenericSend+0xa4>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <xQueueGenericSend+0xa8>
 800375c:	2301      	movs	r3, #1
 800375e:	e000      	b.n	8003762 <xQueueGenericSend+0xaa>
 8003760:	2300      	movs	r3, #0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10b      	bne.n	800377e <xQueueGenericSend+0xc6>
	__asm volatile
 8003766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800376a:	f383 8811 	msr	BASEPRI, r3
 800376e:	f3bf 8f6f 	isb	sy
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	61fb      	str	r3, [r7, #28]
}
 8003778:	bf00      	nop
 800377a:	bf00      	nop
 800377c:	e7fd      	b.n	800377a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800377e:	f002 f995 	bl	8005aac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003784:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800378a:	429a      	cmp	r2, r3
 800378c:	d302      	bcc.n	8003794 <xQueueGenericSend+0xdc>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b02      	cmp	r3, #2
 8003792:	d129      	bne.n	80037e8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800379a:	f000 fbb8 	bl	8003f0e <prvCopyDataToQueue>
 800379e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d010      	beq.n	80037ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037aa:	3324      	adds	r3, #36	@ 0x24
 80037ac:	4618      	mov	r0, r3
 80037ae:	f001 f983 	bl	8004ab8 <xTaskRemoveFromEventList>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d013      	beq.n	80037e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80037b8:	4b3f      	ldr	r3, [pc, #252]	@ (80038b8 <xQueueGenericSend+0x200>)
 80037ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	e00a      	b.n	80037e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80037ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d007      	beq.n	80037e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80037d0:	4b39      	ldr	r3, [pc, #228]	@ (80038b8 <xQueueGenericSend+0x200>)
 80037d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80037e0:	f002 f994 	bl	8005b0c <vPortExitCritical>
				return pdPASS;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e063      	b.n	80038b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d103      	bne.n	80037f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037ee:	f002 f98d 	bl	8005b0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	e05c      	b.n	80038b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d106      	bne.n	800380a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037fc:	f107 0314 	add.w	r3, r7, #20
 8003800:	4618      	mov	r0, r3
 8003802:	f001 f9bd 	bl	8004b80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003806:	2301      	movs	r3, #1
 8003808:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800380a:	f002 f97f 	bl	8005b0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800380e:	f000 ff2f 	bl	8004670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003812:	f002 f94b 	bl	8005aac <vPortEnterCritical>
 8003816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003818:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800381c:	b25b      	sxtb	r3, r3
 800381e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003822:	d103      	bne.n	800382c <xQueueGenericSend+0x174>
 8003824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800382c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003832:	b25b      	sxtb	r3, r3
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003838:	d103      	bne.n	8003842 <xQueueGenericSend+0x18a>
 800383a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003842:	f002 f963 	bl	8005b0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003846:	1d3a      	adds	r2, r7, #4
 8003848:	f107 0314 	add.w	r3, r7, #20
 800384c:	4611      	mov	r1, r2
 800384e:	4618      	mov	r0, r3
 8003850:	f001 f9ac 	bl	8004bac <xTaskCheckForTimeOut>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d124      	bne.n	80038a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800385a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800385c:	f000 fc4f 	bl	80040fe <prvIsQueueFull>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d018      	beq.n	8003898 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003868:	3310      	adds	r3, #16
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	4611      	mov	r1, r2
 800386e:	4618      	mov	r0, r3
 8003870:	f001 f8d0 	bl	8004a14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003874:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003876:	f000 fbda 	bl	800402e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800387a:	f000 ff07 	bl	800468c <xTaskResumeAll>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	f47f af7c 	bne.w	800377e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003886:	4b0c      	ldr	r3, [pc, #48]	@ (80038b8 <xQueueGenericSend+0x200>)
 8003888:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	f3bf 8f4f 	dsb	sy
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	e772      	b.n	800377e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003898:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800389a:	f000 fbc8 	bl	800402e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800389e:	f000 fef5 	bl	800468c <xTaskResumeAll>
 80038a2:	e76c      	b.n	800377e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80038a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80038a6:	f000 fbc2 	bl	800402e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038aa:	f000 feef 	bl	800468c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80038ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3738      	adds	r7, #56	@ 0x38
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	e000ed04 	.word	0xe000ed04

080038bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b090      	sub	sp, #64	@ 0x40
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80038ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10b      	bne.n	80038ec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80038d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d8:	f383 8811 	msr	BASEPRI, r3
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80038e6:	bf00      	nop
 80038e8:	bf00      	nop
 80038ea:	e7fd      	b.n	80038e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d103      	bne.n	80038fa <xQueueGenericSendFromISR+0x3e>
 80038f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <xQueueGenericSendFromISR+0x42>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <xQueueGenericSendFromISR+0x44>
 80038fe:	2300      	movs	r3, #0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10b      	bne.n	800391c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003908:	f383 8811 	msr	BASEPRI, r3
 800390c:	f3bf 8f6f 	isb	sy
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003916:	bf00      	nop
 8003918:	bf00      	nop
 800391a:	e7fd      	b.n	8003918 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d103      	bne.n	800392a <xQueueGenericSendFromISR+0x6e>
 8003922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <xQueueGenericSendFromISR+0x72>
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <xQueueGenericSendFromISR+0x74>
 800392e:	2300      	movs	r3, #0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10b      	bne.n	800394c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	623b      	str	r3, [r7, #32]
}
 8003946:	bf00      	nop
 8003948:	bf00      	nop
 800394a:	e7fd      	b.n	8003948 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800394c:	f002 f970 	bl	8005c30 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003950:	f3ef 8211 	mrs	r2, BASEPRI
 8003954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003958:	f383 8811 	msr	BASEPRI, r3
 800395c:	f3bf 8f6f 	isb	sy
 8003960:	f3bf 8f4f 	dsb	sy
 8003964:	61fa      	str	r2, [r7, #28]
 8003966:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003968:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800396a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800396c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800396e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003974:	429a      	cmp	r2, r3
 8003976:	d302      	bcc.n	800397e <xQueueGenericSendFromISR+0xc2>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d12f      	bne.n	80039de <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800397e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003980:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003984:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800398a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800398c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003994:	f000 fabb 	bl	8003f0e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003998:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a0:	d112      	bne.n	80039c8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d016      	beq.n	80039d8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ac:	3324      	adds	r3, #36	@ 0x24
 80039ae:	4618      	mov	r0, r3
 80039b0:	f001 f882 	bl	8004ab8 <xTaskRemoveFromEventList>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00e      	beq.n	80039d8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00b      	beq.n	80039d8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	e007      	b.n	80039d8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80039c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80039cc:	3301      	adds	r3, #1
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	b25a      	sxtb	r2, r3
 80039d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80039d8:	2301      	movs	r3, #1
 80039da:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80039dc:	e001      	b.n	80039e2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80039ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80039ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3740      	adds	r7, #64	@ 0x40
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08c      	sub	sp, #48	@ 0x30
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a04:	2300      	movs	r3, #0
 8003a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10b      	bne.n	8003a2a <xQueueReceive+0x32>
	__asm volatile
 8003a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	623b      	str	r3, [r7, #32]
}
 8003a24:	bf00      	nop
 8003a26:	bf00      	nop
 8003a28:	e7fd      	b.n	8003a26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d103      	bne.n	8003a38 <xQueueReceive+0x40>
 8003a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <xQueueReceive+0x44>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <xQueueReceive+0x46>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10b      	bne.n	8003a5a <xQueueReceive+0x62>
	__asm volatile
 8003a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a46:	f383 8811 	msr	BASEPRI, r3
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	61fb      	str	r3, [r7, #28]
}
 8003a54:	bf00      	nop
 8003a56:	bf00      	nop
 8003a58:	e7fd      	b.n	8003a56 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a5a:	f001 f9fb 	bl	8004e54 <xTaskGetSchedulerState>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d102      	bne.n	8003a6a <xQueueReceive+0x72>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <xQueueReceive+0x76>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <xQueueReceive+0x78>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10b      	bne.n	8003a8c <xQueueReceive+0x94>
	__asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	61bb      	str	r3, [r7, #24]
}
 8003a86:	bf00      	nop
 8003a88:	bf00      	nop
 8003a8a:	e7fd      	b.n	8003a88 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a8c:	f002 f80e 	bl	8005aac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a94:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d01f      	beq.n	8003adc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a9c:	68b9      	ldr	r1, [r7, #8]
 8003a9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003aa0:	f000 fa9f 	bl	8003fe2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa6:	1e5a      	subs	r2, r3, #1
 8003aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aaa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00f      	beq.n	8003ad4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab6:	3310      	adds	r3, #16
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fffd 	bl	8004ab8 <xTaskRemoveFromEventList>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d007      	beq.n	8003ad4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ac4:	4b3c      	ldr	r3, [pc, #240]	@ (8003bb8 <xQueueReceive+0x1c0>)
 8003ac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ad4:	f002 f81a 	bl	8005b0c <vPortExitCritical>
				return pdPASS;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e069      	b.n	8003bb0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d103      	bne.n	8003aea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ae2:	f002 f813 	bl	8005b0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	e062      	b.n	8003bb0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d106      	bne.n	8003afe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003af0:	f107 0310 	add.w	r3, r7, #16
 8003af4:	4618      	mov	r0, r3
 8003af6:	f001 f843 	bl	8004b80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003afa:	2301      	movs	r3, #1
 8003afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003afe:	f002 f805 	bl	8005b0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b02:	f000 fdb5 	bl	8004670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b06:	f001 ffd1 	bl	8005aac <vPortEnterCritical>
 8003b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b10:	b25b      	sxtb	r3, r3
 8003b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b16:	d103      	bne.n	8003b20 <xQueueReceive+0x128>
 8003b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b26:	b25b      	sxtb	r3, r3
 8003b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2c:	d103      	bne.n	8003b36 <xQueueReceive+0x13e>
 8003b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b36:	f001 ffe9 	bl	8005b0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b3a:	1d3a      	adds	r2, r7, #4
 8003b3c:	f107 0310 	add.w	r3, r7, #16
 8003b40:	4611      	mov	r1, r2
 8003b42:	4618      	mov	r0, r3
 8003b44:	f001 f832 	bl	8004bac <xTaskCheckForTimeOut>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d123      	bne.n	8003b96 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b50:	f000 fabf 	bl	80040d2 <prvIsQueueEmpty>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d017      	beq.n	8003b8a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5c:	3324      	adds	r3, #36	@ 0x24
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	4611      	mov	r1, r2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 ff56 	bl	8004a14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b6a:	f000 fa60 	bl	800402e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b6e:	f000 fd8d 	bl	800468c <xTaskResumeAll>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d189      	bne.n	8003a8c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003b78:	4b0f      	ldr	r3, [pc, #60]	@ (8003bb8 <xQueueReceive+0x1c0>)
 8003b7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	e780      	b.n	8003a8c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b8c:	f000 fa4f 	bl	800402e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b90:	f000 fd7c 	bl	800468c <xTaskResumeAll>
 8003b94:	e77a      	b.n	8003a8c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b98:	f000 fa49 	bl	800402e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b9c:	f000 fd76 	bl	800468c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ba0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ba2:	f000 fa96 	bl	80040d2 <prvIsQueueEmpty>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f43f af6f 	beq.w	8003a8c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003bae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3730      	adds	r7, #48	@ 0x30
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	e000ed04 	.word	0xe000ed04

08003bbc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08e      	sub	sp, #56	@ 0x38
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10b      	bne.n	8003bf0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bdc:	f383 8811 	msr	BASEPRI, r3
 8003be0:	f3bf 8f6f 	isb	sy
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	623b      	str	r3, [r7, #32]
}
 8003bea:	bf00      	nop
 8003bec:	bf00      	nop
 8003bee:	e7fd      	b.n	8003bec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00b      	beq.n	8003c10 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	61fb      	str	r3, [r7, #28]
}
 8003c0a:	bf00      	nop
 8003c0c:	bf00      	nop
 8003c0e:	e7fd      	b.n	8003c0c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c10:	f001 f920 	bl	8004e54 <xTaskGetSchedulerState>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d102      	bne.n	8003c20 <xQueueSemaphoreTake+0x64>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <xQueueSemaphoreTake+0x68>
 8003c20:	2301      	movs	r3, #1
 8003c22:	e000      	b.n	8003c26 <xQueueSemaphoreTake+0x6a>
 8003c24:	2300      	movs	r3, #0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10b      	bne.n	8003c42 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	61bb      	str	r3, [r7, #24]
}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	e7fd      	b.n	8003c3e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c42:	f001 ff33 	bl	8005aac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c4a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d024      	beq.n	8003c9c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c54:	1e5a      	subs	r2, r3, #1
 8003c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c58:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d104      	bne.n	8003c6c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003c62:	f001 fa71 	bl	8005148 <pvTaskIncrementMutexHeldCount>
 8003c66:	4602      	mov	r2, r0
 8003c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c6a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00f      	beq.n	8003c94 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c76:	3310      	adds	r3, #16
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 ff1d 	bl	8004ab8 <xTaskRemoveFromEventList>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c84:	4b54      	ldr	r3, [pc, #336]	@ (8003dd8 <xQueueSemaphoreTake+0x21c>)
 8003c86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c94:	f001 ff3a 	bl	8005b0c <vPortExitCritical>
				return pdPASS;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e098      	b.n	8003dce <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d112      	bne.n	8003cc8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00b      	beq.n	8003cc0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cac:	f383 8811 	msr	BASEPRI, r3
 8003cb0:	f3bf 8f6f 	isb	sy
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	617b      	str	r3, [r7, #20]
}
 8003cba:	bf00      	nop
 8003cbc:	bf00      	nop
 8003cbe:	e7fd      	b.n	8003cbc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003cc0:	f001 ff24 	bl	8005b0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e082      	b.n	8003dce <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cce:	f107 030c 	add.w	r3, r7, #12
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 ff54 	bl	8004b80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cdc:	f001 ff16 	bl	8005b0c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ce0:	f000 fcc6 	bl	8004670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ce4:	f001 fee2 	bl	8005aac <vPortEnterCritical>
 8003ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cee:	b25b      	sxtb	r3, r3
 8003cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf4:	d103      	bne.n	8003cfe <xQueueSemaphoreTake+0x142>
 8003cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d04:	b25b      	sxtb	r3, r3
 8003d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0a:	d103      	bne.n	8003d14 <xQueueSemaphoreTake+0x158>
 8003d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d14:	f001 fefa 	bl	8005b0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d18:	463a      	mov	r2, r7
 8003d1a:	f107 030c 	add.w	r3, r7, #12
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 ff43 	bl	8004bac <xTaskCheckForTimeOut>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d132      	bne.n	8003d92 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d2e:	f000 f9d0 	bl	80040d2 <prvIsQueueEmpty>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d026      	beq.n	8003d86 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d109      	bne.n	8003d54 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003d40:	f001 feb4 	bl	8005aac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f001 f8a1 	bl	8004e90 <xTaskPriorityInherit>
 8003d4e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003d50:	f001 fedc 	bl	8005b0c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d56:	3324      	adds	r3, #36	@ 0x24
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fe59 	bl	8004a14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d64:	f000 f963 	bl	800402e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d68:	f000 fc90 	bl	800468c <xTaskResumeAll>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f47f af67 	bne.w	8003c42 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003d74:	4b18      	ldr	r3, [pc, #96]	@ (8003dd8 <xQueueSemaphoreTake+0x21c>)
 8003d76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	e75d      	b.n	8003c42 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003d86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d88:	f000 f951 	bl	800402e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d8c:	f000 fc7e 	bl	800468c <xTaskResumeAll>
 8003d90:	e757      	b.n	8003c42 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003d92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d94:	f000 f94b 	bl	800402e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d98:	f000 fc78 	bl	800468c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d9e:	f000 f998 	bl	80040d2 <prvIsQueueEmpty>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f43f af4c 	beq.w	8003c42 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00d      	beq.n	8003dcc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003db0:	f001 fe7c 	bl	8005aac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003db4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003db6:	f000 f893 	bl	8003ee0 <prvGetDisinheritPriorityAfterTimeout>
 8003dba:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f001 f93c 	bl	8005040 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003dc8:	f001 fea0 	bl	8005b0c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003dcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3738      	adds	r7, #56	@ 0x38
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	e000ed04 	.word	0xe000ed04

08003ddc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08e      	sub	sp, #56	@ 0x38
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10b      	bne.n	8003e0a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	623b      	str	r3, [r7, #32]
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
 8003e08:	e7fd      	b.n	8003e06 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d103      	bne.n	8003e18 <xQueueReceiveFromISR+0x3c>
 8003e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <xQueueReceiveFromISR+0x40>
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e000      	b.n	8003e1e <xQueueReceiveFromISR+0x42>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10b      	bne.n	8003e3a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e26:	f383 8811 	msr	BASEPRI, r3
 8003e2a:	f3bf 8f6f 	isb	sy
 8003e2e:	f3bf 8f4f 	dsb	sy
 8003e32:	61fb      	str	r3, [r7, #28]
}
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop
 8003e38:	e7fd      	b.n	8003e36 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e3a:	f001 fef9 	bl	8005c30 <vPortValidateInterruptPriority>
	__asm volatile
 8003e3e:	f3ef 8211 	mrs	r2, BASEPRI
 8003e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e46:	f383 8811 	msr	BASEPRI, r3
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	61ba      	str	r2, [r7, #24]
 8003e54:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003e56:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d02f      	beq.n	8003ec6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e74:	f000 f8b5 	bl	8003fe2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7a:	1e5a      	subs	r2, r3, #1
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003e80:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e88:	d112      	bne.n	8003eb0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d016      	beq.n	8003ec0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e94:	3310      	adds	r3, #16
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fe0e 	bl	8004ab8 <xTaskRemoveFromEventList>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00e      	beq.n	8003ec0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00b      	beq.n	8003ec0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	e007      	b.n	8003ec0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	b25a      	sxtb	r2, r3
 8003eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ec4:	e001      	b.n	8003eca <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ecc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f383 8811 	msr	BASEPRI, r3
}
 8003ed4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3738      	adds	r7, #56	@ 0x38
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d006      	beq.n	8003efe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	e001      	b.n	8003f02 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003f02:	68fb      	ldr	r3, [r7, #12]
	}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr

08003f0e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b086      	sub	sp, #24
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f22:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10d      	bne.n	8003f48 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d14d      	bne.n	8003fd0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f001 f811 	bl	8004f60 <xTaskPriorityDisinherit>
 8003f3e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	609a      	str	r2, [r3, #8]
 8003f46:	e043      	b.n	8003fd0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d119      	bne.n	8003f82 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6858      	ldr	r0, [r3, #4]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f56:	461a      	mov	r2, r3
 8003f58:	68b9      	ldr	r1, [r7, #8]
 8003f5a:	f002 fb1a 	bl	8006592 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f66:	441a      	add	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d32b      	bcc.n	8003fd0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	605a      	str	r2, [r3, #4]
 8003f80:	e026      	b.n	8003fd0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	68d8      	ldr	r0, [r3, #12]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	68b9      	ldr	r1, [r7, #8]
 8003f8e:	f002 fb00 	bl	8006592 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9a:	425b      	negs	r3, r3
 8003f9c:	441a      	add	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d207      	bcs.n	8003fbe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb6:	425b      	negs	r3, r3
 8003fb8:	441a      	add	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d105      	bne.n	8003fd0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003fd8:	697b      	ldr	r3, [r7, #20]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d018      	beq.n	8004026 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffc:	441a      	add	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	429a      	cmp	r2, r3
 800400c:	d303      	bcc.n	8004016 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68d9      	ldr	r1, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401e:	461a      	mov	r2, r3
 8004020:	6838      	ldr	r0, [r7, #0]
 8004022:	f002 fab6 	bl	8006592 <memcpy>
	}
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004036:	f001 fd39 	bl	8005aac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004040:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004042:	e011      	b.n	8004068 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004048:	2b00      	cmp	r3, #0
 800404a:	d012      	beq.n	8004072 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3324      	adds	r3, #36	@ 0x24
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fd31 	bl	8004ab8 <xTaskRemoveFromEventList>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800405c:	f000 fe0a 	bl	8004c74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	3b01      	subs	r3, #1
 8004064:	b2db      	uxtb	r3, r3
 8004066:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800406c:	2b00      	cmp	r3, #0
 800406e:	dce9      	bgt.n	8004044 <prvUnlockQueue+0x16>
 8004070:	e000      	b.n	8004074 <prvUnlockQueue+0x46>
					break;
 8004072:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	22ff      	movs	r2, #255	@ 0xff
 8004078:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800407c:	f001 fd46 	bl	8005b0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004080:	f001 fd14 	bl	8005aac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800408a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800408c:	e011      	b.n	80040b2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d012      	beq.n	80040bc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3310      	adds	r3, #16
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fd0c 	bl	8004ab8 <xTaskRemoveFromEventList>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040a6:	f000 fde5 	bl	8004c74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040aa:	7bbb      	ldrb	r3, [r7, #14]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	dce9      	bgt.n	800408e <prvUnlockQueue+0x60>
 80040ba:	e000      	b.n	80040be <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040bc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	22ff      	movs	r2, #255	@ 0xff
 80040c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80040c6:	f001 fd21 	bl	8005b0c <vPortExitCritical>
}
 80040ca:	bf00      	nop
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b084      	sub	sp, #16
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040da:	f001 fce7 	bl	8005aac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d102      	bne.n	80040ec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80040e6:	2301      	movs	r3, #1
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	e001      	b.n	80040f0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80040ec:	2300      	movs	r3, #0
 80040ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040f0:	f001 fd0c 	bl	8005b0c <vPortExitCritical>

	return xReturn;
 80040f4:	68fb      	ldr	r3, [r7, #12]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004106:	f001 fcd1 	bl	8005aac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004112:	429a      	cmp	r2, r3
 8004114:	d102      	bne.n	800411c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004116:	2301      	movs	r3, #1
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	e001      	b.n	8004120 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800411c:	2300      	movs	r3, #0
 800411e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004120:	f001 fcf4 	bl	8005b0c <vPortExitCritical>

	return xReturn;
 8004124:	68fb      	ldr	r3, [r7, #12]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	e014      	b.n	800416a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004140:	4a0e      	ldr	r2, [pc, #56]	@ (800417c <vQueueAddToRegistry+0x4c>)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10b      	bne.n	8004164 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800414c:	490b      	ldr	r1, [pc, #44]	@ (800417c <vQueueAddToRegistry+0x4c>)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004156:	4a09      	ldr	r2, [pc, #36]	@ (800417c <vQueueAddToRegistry+0x4c>)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4413      	add	r3, r2
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004162:	e006      	b.n	8004172 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	3301      	adds	r3, #1
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b07      	cmp	r3, #7
 800416e:	d9e7      	bls.n	8004140 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004170:	bf00      	nop
 8004172:	bf00      	nop
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr
 800417c:	200008ec 	.word	0x200008ec

08004180 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004190:	f001 fc8c 	bl	8005aac <vPortEnterCritical>
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800419a:	b25b      	sxtb	r3, r3
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d103      	bne.n	80041aa <vQueueWaitForMessageRestricted+0x2a>
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041b0:	b25b      	sxtb	r3, r3
 80041b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b6:	d103      	bne.n	80041c0 <vQueueWaitForMessageRestricted+0x40>
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041c0:	f001 fca4 	bl	8005b0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d106      	bne.n	80041da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	3324      	adds	r3, #36	@ 0x24
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	68b9      	ldr	r1, [r7, #8]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 fc43 	bl	8004a60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80041da:	6978      	ldr	r0, [r7, #20]
 80041dc:	f7ff ff27 	bl	800402e <prvUnlockQueue>
	}
 80041e0:	bf00      	nop
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b08e      	sub	sp, #56	@ 0x38
 80041ec:	af04      	add	r7, sp, #16
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80041f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10b      	bne.n	8004214 <xTaskCreateStatic+0x2c>
	__asm volatile
 80041fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004200:	f383 8811 	msr	BASEPRI, r3
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	623b      	str	r3, [r7, #32]
}
 800420e:	bf00      	nop
 8004210:	bf00      	nop
 8004212:	e7fd      	b.n	8004210 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10b      	bne.n	8004232 <xTaskCreateStatic+0x4a>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	61fb      	str	r3, [r7, #28]
}
 800422c:	bf00      	nop
 800422e:	bf00      	nop
 8004230:	e7fd      	b.n	800422e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004232:	235c      	movs	r3, #92	@ 0x5c
 8004234:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	2b5c      	cmp	r3, #92	@ 0x5c
 800423a:	d00b      	beq.n	8004254 <xTaskCreateStatic+0x6c>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	61bb      	str	r3, [r7, #24]
}
 800424e:	bf00      	nop
 8004250:	bf00      	nop
 8004252:	e7fd      	b.n	8004250 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004254:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004258:	2b00      	cmp	r3, #0
 800425a:	d01e      	beq.n	800429a <xTaskCreateStatic+0xb2>
 800425c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800425e:	2b00      	cmp	r3, #0
 8004260:	d01b      	beq.n	800429a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004264:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004268:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800426a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800426c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426e:	2202      	movs	r2, #2
 8004270:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004274:	2300      	movs	r3, #0
 8004276:	9303      	str	r3, [sp, #12]
 8004278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427a:	9302      	str	r3, [sp, #8]
 800427c:	f107 0314 	add.w	r3, r7, #20
 8004280:	9301      	str	r3, [sp, #4]
 8004282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	68b9      	ldr	r1, [r7, #8]
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 f850 	bl	8004332 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004292:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004294:	f000 f8de 	bl	8004454 <prvAddNewTaskToReadyList>
 8004298:	e001      	b.n	800429e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800429e:	697b      	ldr	r3, [r7, #20]
	}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3728      	adds	r7, #40	@ 0x28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08c      	sub	sp, #48	@ 0x30
 80042ac:	af04      	add	r7, sp, #16
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042b8:	88fb      	ldrh	r3, [r7, #6]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4618      	mov	r0, r3
 80042be:	f001 fcf7 	bl	8005cb0 <pvPortMalloc>
 80042c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00e      	beq.n	80042e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80042ca:	205c      	movs	r0, #92	@ 0x5c
 80042cc:	f001 fcf0 	bl	8005cb0 <pvPortMalloc>
 80042d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80042de:	e005      	b.n	80042ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80042e0:	6978      	ldr	r0, [r7, #20]
 80042e2:	f001 fdb3 	bl	8005e4c <vPortFree>
 80042e6:	e001      	b.n	80042ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d017      	beq.n	8004322 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80042fa:	88fa      	ldrh	r2, [r7, #6]
 80042fc:	2300      	movs	r3, #0
 80042fe:	9303      	str	r3, [sp, #12]
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	9302      	str	r3, [sp, #8]
 8004304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004306:	9301      	str	r3, [sp, #4]
 8004308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	68b9      	ldr	r1, [r7, #8]
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f80e 	bl	8004332 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004316:	69f8      	ldr	r0, [r7, #28]
 8004318:	f000 f89c 	bl	8004454 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800431c:	2301      	movs	r3, #1
 800431e:	61bb      	str	r3, [r7, #24]
 8004320:	e002      	b.n	8004328 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004322:	f04f 33ff 	mov.w	r3, #4294967295
 8004326:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004328:	69bb      	ldr	r3, [r7, #24]
	}
 800432a:	4618      	mov	r0, r3
 800432c:	3720      	adds	r7, #32
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b088      	sub	sp, #32
 8004336:	af00      	add	r7, sp, #0
 8004338:	60f8      	str	r0, [r7, #12]
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	607a      	str	r2, [r7, #4]
 800433e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004342:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	461a      	mov	r2, r3
 800434a:	21a5      	movs	r1, #165	@ 0xa5
 800434c:	f002 f8a6 	bl	800649c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004352:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800435a:	3b01      	subs	r3, #1
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	f023 0307 	bic.w	r3, r3, #7
 8004368:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00b      	beq.n	800438c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	617b      	str	r3, [r7, #20]
}
 8004386:	bf00      	nop
 8004388:	bf00      	nop
 800438a:	e7fd      	b.n	8004388 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d01f      	beq.n	80043d2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004392:	2300      	movs	r3, #0
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	e012      	b.n	80043be <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	4413      	add	r3, r2
 800439e:	7819      	ldrb	r1, [r3, #0]
 80043a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	4413      	add	r3, r2
 80043a6:	3334      	adds	r3, #52	@ 0x34
 80043a8:	460a      	mov	r2, r1
 80043aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	4413      	add	r3, r2
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d006      	beq.n	80043c6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	3301      	adds	r3, #1
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	2b0f      	cmp	r3, #15
 80043c2:	d9e9      	bls.n	8004398 <prvInitialiseNewTask+0x66>
 80043c4:	e000      	b.n	80043c8 <prvInitialiseNewTask+0x96>
			{
				break;
 80043c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043d0:	e003      	b.n	80043da <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80043d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043dc:	2b37      	cmp	r3, #55	@ 0x37
 80043de:	d901      	bls.n	80043e4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043e0:	2337      	movs	r3, #55	@ 0x37
 80043e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80043e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043e8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80043ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043ee:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80043f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f2:	2200      	movs	r2, #0
 80043f4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80043f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f8:	3304      	adds	r3, #4
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fe fecd 	bl	800319a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004402:	3318      	adds	r3, #24
 8004404:	4618      	mov	r0, r3
 8004406:	f7fe fec8 	bl	800319a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800440a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800440e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004412:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004418:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800441a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800441e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004422:	2200      	movs	r2, #0
 8004424:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	68f9      	ldr	r1, [r7, #12]
 8004432:	69b8      	ldr	r0, [r7, #24]
 8004434:	f001 fa48 	bl	80058c8 <pxPortInitialiseStack>
 8004438:	4602      	mov	r2, r0
 800443a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800443e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004448:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800444a:	bf00      	nop
 800444c:	3720      	adds	r7, #32
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800445c:	f001 fb26 	bl	8005aac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004460:	4b2d      	ldr	r3, [pc, #180]	@ (8004518 <prvAddNewTaskToReadyList+0xc4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3301      	adds	r3, #1
 8004466:	4a2c      	ldr	r2, [pc, #176]	@ (8004518 <prvAddNewTaskToReadyList+0xc4>)
 8004468:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800446a:	4b2c      	ldr	r3, [pc, #176]	@ (800451c <prvAddNewTaskToReadyList+0xc8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d109      	bne.n	8004486 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004472:	4a2a      	ldr	r2, [pc, #168]	@ (800451c <prvAddNewTaskToReadyList+0xc8>)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004478:	4b27      	ldr	r3, [pc, #156]	@ (8004518 <prvAddNewTaskToReadyList+0xc4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d110      	bne.n	80044a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004480:	f000 fc1c 	bl	8004cbc <prvInitialiseTaskLists>
 8004484:	e00d      	b.n	80044a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004486:	4b26      	ldr	r3, [pc, #152]	@ (8004520 <prvAddNewTaskToReadyList+0xcc>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800448e:	4b23      	ldr	r3, [pc, #140]	@ (800451c <prvAddNewTaskToReadyList+0xc8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004498:	429a      	cmp	r2, r3
 800449a:	d802      	bhi.n	80044a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800449c:	4a1f      	ldr	r2, [pc, #124]	@ (800451c <prvAddNewTaskToReadyList+0xc8>)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044a2:	4b20      	ldr	r3, [pc, #128]	@ (8004524 <prvAddNewTaskToReadyList+0xd0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3301      	adds	r3, #1
 80044a8:	4a1e      	ldr	r2, [pc, #120]	@ (8004524 <prvAddNewTaskToReadyList+0xd0>)
 80044aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80044ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004524 <prvAddNewTaskToReadyList+0xd0>)
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004528 <prvAddNewTaskToReadyList+0xd4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d903      	bls.n	80044c8 <prvAddNewTaskToReadyList+0x74>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c4:	4a18      	ldr	r2, [pc, #96]	@ (8004528 <prvAddNewTaskToReadyList+0xd4>)
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4a15      	ldr	r2, [pc, #84]	@ (800452c <prvAddNewTaskToReadyList+0xd8>)
 80044d6:	441a      	add	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3304      	adds	r3, #4
 80044dc:	4619      	mov	r1, r3
 80044de:	4610      	mov	r0, r2
 80044e0:	f7fe fe67 	bl	80031b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80044e4:	f001 fb12 	bl	8005b0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80044e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004520 <prvAddNewTaskToReadyList+0xcc>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00e      	beq.n	800450e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80044f0:	4b0a      	ldr	r3, [pc, #40]	@ (800451c <prvAddNewTaskToReadyList+0xc8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d207      	bcs.n	800450e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80044fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004530 <prvAddNewTaskToReadyList+0xdc>)
 8004500:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800450e:	bf00      	nop
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	20000e00 	.word	0x20000e00
 800451c:	2000092c 	.word	0x2000092c
 8004520:	20000e0c 	.word	0x20000e0c
 8004524:	20000e1c 	.word	0x20000e1c
 8004528:	20000e08 	.word	0x20000e08
 800452c:	20000930 	.word	0x20000930
 8004530:	e000ed04 	.word	0xe000ed04

08004534 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800453c:	2300      	movs	r3, #0
 800453e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d018      	beq.n	8004578 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004546:	4b14      	ldr	r3, [pc, #80]	@ (8004598 <vTaskDelay+0x64>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <vTaskDelay+0x32>
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	60bb      	str	r3, [r7, #8]
}
 8004560:	bf00      	nop
 8004562:	bf00      	nop
 8004564:	e7fd      	b.n	8004562 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004566:	f000 f883 	bl	8004670 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800456a:	2100      	movs	r1, #0
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 fdff 	bl	8005170 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004572:	f000 f88b 	bl	800468c <xTaskResumeAll>
 8004576:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d107      	bne.n	800458e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800457e:	4b07      	ldr	r3, [pc, #28]	@ (800459c <vTaskDelay+0x68>)
 8004580:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800458e:	bf00      	nop
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20000e28 	.word	0x20000e28
 800459c:	e000ed04 	.word	0xe000ed04

080045a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08a      	sub	sp, #40	@ 0x28
 80045a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045aa:	2300      	movs	r3, #0
 80045ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045ae:	463a      	mov	r2, r7
 80045b0:	1d39      	adds	r1, r7, #4
 80045b2:	f107 0308 	add.w	r3, r7, #8
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fe fd9e 	bl	80030f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045bc:	6839      	ldr	r1, [r7, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	9202      	str	r2, [sp, #8]
 80045c4:	9301      	str	r3, [sp, #4]
 80045c6:	2300      	movs	r3, #0
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	2300      	movs	r3, #0
 80045cc:	460a      	mov	r2, r1
 80045ce:	4922      	ldr	r1, [pc, #136]	@ (8004658 <vTaskStartScheduler+0xb8>)
 80045d0:	4822      	ldr	r0, [pc, #136]	@ (800465c <vTaskStartScheduler+0xbc>)
 80045d2:	f7ff fe09 	bl	80041e8 <xTaskCreateStatic>
 80045d6:	4603      	mov	r3, r0
 80045d8:	4a21      	ldr	r2, [pc, #132]	@ (8004660 <vTaskStartScheduler+0xc0>)
 80045da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80045dc:	4b20      	ldr	r3, [pc, #128]	@ (8004660 <vTaskStartScheduler+0xc0>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d002      	beq.n	80045ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80045e4:	2301      	movs	r3, #1
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	e001      	b.n	80045ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d102      	bne.n	80045fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80045f4:	f000 fe10 	bl	8005218 <xTimerCreateTimerTask>
 80045f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d116      	bne.n	800462e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	613b      	str	r3, [r7, #16]
}
 8004612:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004614:	4b13      	ldr	r3, [pc, #76]	@ (8004664 <vTaskStartScheduler+0xc4>)
 8004616:	f04f 32ff 	mov.w	r2, #4294967295
 800461a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800461c:	4b12      	ldr	r3, [pc, #72]	@ (8004668 <vTaskStartScheduler+0xc8>)
 800461e:	2201      	movs	r2, #1
 8004620:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004622:	4b12      	ldr	r3, [pc, #72]	@ (800466c <vTaskStartScheduler+0xcc>)
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004628:	f001 f9ce 	bl	80059c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800462c:	e00f      	b.n	800464e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004634:	d10b      	bne.n	800464e <vTaskStartScheduler+0xae>
	__asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	60fb      	str	r3, [r7, #12]
}
 8004648:	bf00      	nop
 800464a:	bf00      	nop
 800464c:	e7fd      	b.n	800464a <vTaskStartScheduler+0xaa>
}
 800464e:	bf00      	nop
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	0800730c 	.word	0x0800730c
 800465c:	08004c8d 	.word	0x08004c8d
 8004660:	20000e24 	.word	0x20000e24
 8004664:	20000e20 	.word	0x20000e20
 8004668:	20000e0c 	.word	0x20000e0c
 800466c:	20000e04 	.word	0x20000e04

08004670 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004674:	4b04      	ldr	r3, [pc, #16]	@ (8004688 <vTaskSuspendAll+0x18>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3301      	adds	r3, #1
 800467a:	4a03      	ldr	r2, [pc, #12]	@ (8004688 <vTaskSuspendAll+0x18>)
 800467c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800467e:	bf00      	nop
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	20000e28 	.word	0x20000e28

0800468c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004692:	2300      	movs	r3, #0
 8004694:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004696:	2300      	movs	r3, #0
 8004698:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800469a:	4b42      	ldr	r3, [pc, #264]	@ (80047a4 <xTaskResumeAll+0x118>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10b      	bne.n	80046ba <xTaskResumeAll+0x2e>
	__asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	603b      	str	r3, [r7, #0]
}
 80046b4:	bf00      	nop
 80046b6:	bf00      	nop
 80046b8:	e7fd      	b.n	80046b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046ba:	f001 f9f7 	bl	8005aac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046be:	4b39      	ldr	r3, [pc, #228]	@ (80047a4 <xTaskResumeAll+0x118>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	4a37      	ldr	r2, [pc, #220]	@ (80047a4 <xTaskResumeAll+0x118>)
 80046c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046c8:	4b36      	ldr	r3, [pc, #216]	@ (80047a4 <xTaskResumeAll+0x118>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d162      	bne.n	8004796 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046d0:	4b35      	ldr	r3, [pc, #212]	@ (80047a8 <xTaskResumeAll+0x11c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d05e      	beq.n	8004796 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046d8:	e02f      	b.n	800473a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046da:	4b34      	ldr	r3, [pc, #208]	@ (80047ac <xTaskResumeAll+0x120>)
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3318      	adds	r3, #24
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fe fdbe 	bl	8003268 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	3304      	adds	r3, #4
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fe fdb9 	bl	8003268 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046fa:	4b2d      	ldr	r3, [pc, #180]	@ (80047b0 <xTaskResumeAll+0x124>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d903      	bls.n	800470a <xTaskResumeAll+0x7e>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004706:	4a2a      	ldr	r2, [pc, #168]	@ (80047b0 <xTaskResumeAll+0x124>)
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800470e:	4613      	mov	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4a27      	ldr	r2, [pc, #156]	@ (80047b4 <xTaskResumeAll+0x128>)
 8004718:	441a      	add	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3304      	adds	r3, #4
 800471e:	4619      	mov	r1, r3
 8004720:	4610      	mov	r0, r2
 8004722:	f7fe fd46 	bl	80031b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800472a:	4b23      	ldr	r3, [pc, #140]	@ (80047b8 <xTaskResumeAll+0x12c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004730:	429a      	cmp	r2, r3
 8004732:	d302      	bcc.n	800473a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004734:	4b21      	ldr	r3, [pc, #132]	@ (80047bc <xTaskResumeAll+0x130>)
 8004736:	2201      	movs	r2, #1
 8004738:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800473a:	4b1c      	ldr	r3, [pc, #112]	@ (80047ac <xTaskResumeAll+0x120>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1cb      	bne.n	80046da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004748:	f000 fb56 	bl	8004df8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800474c:	4b1c      	ldr	r3, [pc, #112]	@ (80047c0 <xTaskResumeAll+0x134>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d010      	beq.n	800477a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004758:	f000 f844 	bl	80047e4 <xTaskIncrementTick>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004762:	4b16      	ldr	r3, [pc, #88]	@ (80047bc <xTaskResumeAll+0x130>)
 8004764:	2201      	movs	r2, #1
 8004766:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3b01      	subs	r3, #1
 800476c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1f1      	bne.n	8004758 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004774:	4b12      	ldr	r3, [pc, #72]	@ (80047c0 <xTaskResumeAll+0x134>)
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800477a:	4b10      	ldr	r3, [pc, #64]	@ (80047bc <xTaskResumeAll+0x130>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d009      	beq.n	8004796 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004782:	2301      	movs	r3, #1
 8004784:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004786:	4b0f      	ldr	r3, [pc, #60]	@ (80047c4 <xTaskResumeAll+0x138>)
 8004788:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004796:	f001 f9b9 	bl	8005b0c <vPortExitCritical>

	return xAlreadyYielded;
 800479a:	68bb      	ldr	r3, [r7, #8]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	20000e28 	.word	0x20000e28
 80047a8:	20000e00 	.word	0x20000e00
 80047ac:	20000dc0 	.word	0x20000dc0
 80047b0:	20000e08 	.word	0x20000e08
 80047b4:	20000930 	.word	0x20000930
 80047b8:	2000092c 	.word	0x2000092c
 80047bc:	20000e14 	.word	0x20000e14
 80047c0:	20000e10 	.word	0x20000e10
 80047c4:	e000ed04 	.word	0xe000ed04

080047c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80047ce:	4b04      	ldr	r3, [pc, #16]	@ (80047e0 <xTaskGetTickCount+0x18>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80047d4:	687b      	ldr	r3, [r7, #4]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr
 80047e0:	20000e04 	.word	0x20000e04

080047e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047ea:	2300      	movs	r3, #0
 80047ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047ee:	4b4f      	ldr	r3, [pc, #316]	@ (800492c <xTaskIncrementTick+0x148>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f040 8090 	bne.w	8004918 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047f8:	4b4d      	ldr	r3, [pc, #308]	@ (8004930 <xTaskIncrementTick+0x14c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3301      	adds	r3, #1
 80047fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004800:	4a4b      	ldr	r2, [pc, #300]	@ (8004930 <xTaskIncrementTick+0x14c>)
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d121      	bne.n	8004850 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800480c:	4b49      	ldr	r3, [pc, #292]	@ (8004934 <xTaskIncrementTick+0x150>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00b      	beq.n	800482e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	603b      	str	r3, [r7, #0]
}
 8004828:	bf00      	nop
 800482a:	bf00      	nop
 800482c:	e7fd      	b.n	800482a <xTaskIncrementTick+0x46>
 800482e:	4b41      	ldr	r3, [pc, #260]	@ (8004934 <xTaskIncrementTick+0x150>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	4b40      	ldr	r3, [pc, #256]	@ (8004938 <xTaskIncrementTick+0x154>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a3e      	ldr	r2, [pc, #248]	@ (8004934 <xTaskIncrementTick+0x150>)
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	4a3e      	ldr	r2, [pc, #248]	@ (8004938 <xTaskIncrementTick+0x154>)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	4b3e      	ldr	r3, [pc, #248]	@ (800493c <xTaskIncrementTick+0x158>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3301      	adds	r3, #1
 8004848:	4a3c      	ldr	r2, [pc, #240]	@ (800493c <xTaskIncrementTick+0x158>)
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	f000 fad4 	bl	8004df8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004850:	4b3b      	ldr	r3, [pc, #236]	@ (8004940 <xTaskIncrementTick+0x15c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	429a      	cmp	r2, r3
 8004858:	d349      	bcc.n	80048ee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800485a:	4b36      	ldr	r3, [pc, #216]	@ (8004934 <xTaskIncrementTick+0x150>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d104      	bne.n	800486e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004864:	4b36      	ldr	r3, [pc, #216]	@ (8004940 <xTaskIncrementTick+0x15c>)
 8004866:	f04f 32ff 	mov.w	r2, #4294967295
 800486a:	601a      	str	r2, [r3, #0]
					break;
 800486c:	e03f      	b.n	80048ee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800486e:	4b31      	ldr	r3, [pc, #196]	@ (8004934 <xTaskIncrementTick+0x150>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	429a      	cmp	r2, r3
 8004884:	d203      	bcs.n	800488e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004886:	4a2e      	ldr	r2, [pc, #184]	@ (8004940 <xTaskIncrementTick+0x15c>)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800488c:	e02f      	b.n	80048ee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	3304      	adds	r3, #4
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe fce8 	bl	8003268 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489c:	2b00      	cmp	r3, #0
 800489e:	d004      	beq.n	80048aa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	3318      	adds	r3, #24
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fe fcdf 	bl	8003268 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ae:	4b25      	ldr	r3, [pc, #148]	@ (8004944 <xTaskIncrementTick+0x160>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d903      	bls.n	80048be <xTaskIncrementTick+0xda>
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ba:	4a22      	ldr	r2, [pc, #136]	@ (8004944 <xTaskIncrementTick+0x160>)
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048c2:	4613      	mov	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4a1f      	ldr	r2, [pc, #124]	@ (8004948 <xTaskIncrementTick+0x164>)
 80048cc:	441a      	add	r2, r3
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	3304      	adds	r3, #4
 80048d2:	4619      	mov	r1, r3
 80048d4:	4610      	mov	r0, r2
 80048d6:	f7fe fc6c 	bl	80031b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048de:	4b1b      	ldr	r3, [pc, #108]	@ (800494c <xTaskIncrementTick+0x168>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d3b8      	bcc.n	800485a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80048e8:	2301      	movs	r3, #1
 80048ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048ec:	e7b5      	b.n	800485a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048ee:	4b17      	ldr	r3, [pc, #92]	@ (800494c <xTaskIncrementTick+0x168>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048f4:	4914      	ldr	r1, [pc, #80]	@ (8004948 <xTaskIncrementTick+0x164>)
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d901      	bls.n	800490a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004906:	2301      	movs	r3, #1
 8004908:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800490a:	4b11      	ldr	r3, [pc, #68]	@ (8004950 <xTaskIncrementTick+0x16c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d007      	beq.n	8004922 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004912:	2301      	movs	r3, #1
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	e004      	b.n	8004922 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004918:	4b0e      	ldr	r3, [pc, #56]	@ (8004954 <xTaskIncrementTick+0x170>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3301      	adds	r3, #1
 800491e:	4a0d      	ldr	r2, [pc, #52]	@ (8004954 <xTaskIncrementTick+0x170>)
 8004920:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004922:	697b      	ldr	r3, [r7, #20]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	20000e28 	.word	0x20000e28
 8004930:	20000e04 	.word	0x20000e04
 8004934:	20000db8 	.word	0x20000db8
 8004938:	20000dbc 	.word	0x20000dbc
 800493c:	20000e18 	.word	0x20000e18
 8004940:	20000e20 	.word	0x20000e20
 8004944:	20000e08 	.word	0x20000e08
 8004948:	20000930 	.word	0x20000930
 800494c:	2000092c 	.word	0x2000092c
 8004950:	20000e14 	.word	0x20000e14
 8004954:	20000e10 	.word	0x20000e10

08004958 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800495e:	4b28      	ldr	r3, [pc, #160]	@ (8004a00 <vTaskSwitchContext+0xa8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004966:	4b27      	ldr	r3, [pc, #156]	@ (8004a04 <vTaskSwitchContext+0xac>)
 8004968:	2201      	movs	r2, #1
 800496a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800496c:	e042      	b.n	80049f4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800496e:	4b25      	ldr	r3, [pc, #148]	@ (8004a04 <vTaskSwitchContext+0xac>)
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004974:	4b24      	ldr	r3, [pc, #144]	@ (8004a08 <vTaskSwitchContext+0xb0>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	e011      	b.n	80049a0 <vTaskSwitchContext+0x48>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10b      	bne.n	800499a <vTaskSwitchContext+0x42>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	607b      	str	r3, [r7, #4]
}
 8004994:	bf00      	nop
 8004996:	bf00      	nop
 8004998:	e7fd      	b.n	8004996 <vTaskSwitchContext+0x3e>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	3b01      	subs	r3, #1
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	491a      	ldr	r1, [pc, #104]	@ (8004a0c <vTaskSwitchContext+0xb4>)
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	440b      	add	r3, r1
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0e3      	beq.n	800497c <vTaskSwitchContext+0x24>
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	4613      	mov	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4a13      	ldr	r2, [pc, #76]	@ (8004a0c <vTaskSwitchContext+0xb4>)
 80049c0:	4413      	add	r3, r2
 80049c2:	60bb      	str	r3, [r7, #8]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	605a      	str	r2, [r3, #4]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	3308      	adds	r3, #8
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d104      	bne.n	80049e4 <vTaskSwitchContext+0x8c>
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	605a      	str	r2, [r3, #4]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	4a09      	ldr	r2, [pc, #36]	@ (8004a10 <vTaskSwitchContext+0xb8>)
 80049ec:	6013      	str	r3, [r2, #0]
 80049ee:	4a06      	ldr	r2, [pc, #24]	@ (8004a08 <vTaskSwitchContext+0xb0>)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6013      	str	r3, [r2, #0]
}
 80049f4:	bf00      	nop
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	20000e28 	.word	0x20000e28
 8004a04:	20000e14 	.word	0x20000e14
 8004a08:	20000e08 	.word	0x20000e08
 8004a0c:	20000930 	.word	0x20000930
 8004a10:	2000092c 	.word	0x2000092c

08004a14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10b      	bne.n	8004a3c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	60fb      	str	r3, [r7, #12]
}
 8004a36:	bf00      	nop
 8004a38:	bf00      	nop
 8004a3a:	e7fd      	b.n	8004a38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a3c:	4b07      	ldr	r3, [pc, #28]	@ (8004a5c <vTaskPlaceOnEventList+0x48>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3318      	adds	r3, #24
 8004a42:	4619      	mov	r1, r3
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7fe fbd7 	bl	80031f8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	6838      	ldr	r0, [r7, #0]
 8004a4e:	f000 fb8f 	bl	8005170 <prvAddCurrentTaskToDelayedList>
}
 8004a52:	bf00      	nop
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	2000092c 	.word	0x2000092c

08004a60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10b      	bne.n	8004a8a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	617b      	str	r3, [r7, #20]
}
 8004a84:	bf00      	nop
 8004a86:	bf00      	nop
 8004a88:	e7fd      	b.n	8004a86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab4 <vTaskPlaceOnEventListRestricted+0x54>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3318      	adds	r3, #24
 8004a90:	4619      	mov	r1, r3
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f7fe fb8d 	bl	80031b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d002      	beq.n	8004aa4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004aa4:	6879      	ldr	r1, [r7, #4]
 8004aa6:	68b8      	ldr	r0, [r7, #8]
 8004aa8:	f000 fb62 	bl	8005170 <prvAddCurrentTaskToDelayedList>
	}
 8004aac:	bf00      	nop
 8004aae:	3718      	adds	r7, #24
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	2000092c 	.word	0x2000092c

08004ab8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10b      	bne.n	8004ae6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	60fb      	str	r3, [r7, #12]
}
 8004ae0:	bf00      	nop
 8004ae2:	bf00      	nop
 8004ae4:	e7fd      	b.n	8004ae2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	3318      	adds	r3, #24
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fe fbbc 	bl	8003268 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004af0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b68 <xTaskRemoveFromEventList+0xb0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d11d      	bne.n	8004b34 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	3304      	adds	r3, #4
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fe fbb3 	bl	8003268 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b06:	4b19      	ldr	r3, [pc, #100]	@ (8004b6c <xTaskRemoveFromEventList+0xb4>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d903      	bls.n	8004b16 <xTaskRemoveFromEventList+0x5e>
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b12:	4a16      	ldr	r2, [pc, #88]	@ (8004b6c <xTaskRemoveFromEventList+0xb4>)
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4a13      	ldr	r2, [pc, #76]	@ (8004b70 <xTaskRemoveFromEventList+0xb8>)
 8004b24:	441a      	add	r2, r3
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	f7fe fb40 	bl	80031b2 <vListInsertEnd>
 8004b32:	e005      	b.n	8004b40 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	3318      	adds	r3, #24
 8004b38:	4619      	mov	r1, r3
 8004b3a:	480e      	ldr	r0, [pc, #56]	@ (8004b74 <xTaskRemoveFromEventList+0xbc>)
 8004b3c:	f7fe fb39 	bl	80031b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b44:	4b0c      	ldr	r3, [pc, #48]	@ (8004b78 <xTaskRemoveFromEventList+0xc0>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d905      	bls.n	8004b5a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b52:	4b0a      	ldr	r3, [pc, #40]	@ (8004b7c <xTaskRemoveFromEventList+0xc4>)
 8004b54:	2201      	movs	r2, #1
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	e001      	b.n	8004b5e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004b5e:	697b      	ldr	r3, [r7, #20]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	20000e28 	.word	0x20000e28
 8004b6c:	20000e08 	.word	0x20000e08
 8004b70:	20000930 	.word	0x20000930
 8004b74:	20000dc0 	.word	0x20000dc0
 8004b78:	2000092c 	.word	0x2000092c
 8004b7c:	20000e14 	.word	0x20000e14

08004b80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b88:	4b06      	ldr	r3, [pc, #24]	@ (8004ba4 <vTaskInternalSetTimeOutState+0x24>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b90:	4b05      	ldr	r3, [pc, #20]	@ (8004ba8 <vTaskInternalSetTimeOutState+0x28>)
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	605a      	str	r2, [r3, #4]
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	20000e18 	.word	0x20000e18
 8004ba8:	20000e04 	.word	0x20000e04

08004bac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10b      	bne.n	8004bd4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	613b      	str	r3, [r7, #16]
}
 8004bce:	bf00      	nop
 8004bd0:	bf00      	nop
 8004bd2:	e7fd      	b.n	8004bd0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10b      	bne.n	8004bf2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	60fb      	str	r3, [r7, #12]
}
 8004bec:	bf00      	nop
 8004bee:	bf00      	nop
 8004bf0:	e7fd      	b.n	8004bee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004bf2:	f000 ff5b 	bl	8005aac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8004c6c <xTaskCheckForTimeOut+0xc0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0e:	d102      	bne.n	8004c16 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c10:	2300      	movs	r3, #0
 8004c12:	61fb      	str	r3, [r7, #28]
 8004c14:	e023      	b.n	8004c5e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4b15      	ldr	r3, [pc, #84]	@ (8004c70 <xTaskCheckForTimeOut+0xc4>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d007      	beq.n	8004c32 <xTaskCheckForTimeOut+0x86>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d302      	bcc.n	8004c32 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	61fb      	str	r3, [r7, #28]
 8004c30:	e015      	b.n	8004c5e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d20b      	bcs.n	8004c54 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	1ad2      	subs	r2, r2, r3
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff ff99 	bl	8004b80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	e004      	b.n	8004c5e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2200      	movs	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c5e:	f000 ff55 	bl	8005b0c <vPortExitCritical>

	return xReturn;
 8004c62:	69fb      	ldr	r3, [r7, #28]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3720      	adds	r7, #32
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20000e04 	.word	0x20000e04
 8004c70:	20000e18 	.word	0x20000e18

08004c74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004c78:	4b03      	ldr	r3, [pc, #12]	@ (8004c88 <vTaskMissedYield+0x14>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]
}
 8004c7e:	bf00      	nop
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bc80      	pop	{r7}
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	20000e14 	.word	0x20000e14

08004c8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c94:	f000 f852 	bl	8004d3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c98:	4b06      	ldr	r3, [pc, #24]	@ (8004cb4 <prvIdleTask+0x28>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d9f9      	bls.n	8004c94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ca0:	4b05      	ldr	r3, [pc, #20]	@ (8004cb8 <prvIdleTask+0x2c>)
 8004ca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004cb0:	e7f0      	b.n	8004c94 <prvIdleTask+0x8>
 8004cb2:	bf00      	nop
 8004cb4:	20000930 	.word	0x20000930
 8004cb8:	e000ed04 	.word	0xe000ed04

08004cbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	607b      	str	r3, [r7, #4]
 8004cc6:	e00c      	b.n	8004ce2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4a12      	ldr	r2, [pc, #72]	@ (8004d1c <prvInitialiseTaskLists+0x60>)
 8004cd4:	4413      	add	r3, r2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fe fa40 	bl	800315c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	607b      	str	r3, [r7, #4]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b37      	cmp	r3, #55	@ 0x37
 8004ce6:	d9ef      	bls.n	8004cc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ce8:	480d      	ldr	r0, [pc, #52]	@ (8004d20 <prvInitialiseTaskLists+0x64>)
 8004cea:	f7fe fa37 	bl	800315c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004cee:	480d      	ldr	r0, [pc, #52]	@ (8004d24 <prvInitialiseTaskLists+0x68>)
 8004cf0:	f7fe fa34 	bl	800315c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004cf4:	480c      	ldr	r0, [pc, #48]	@ (8004d28 <prvInitialiseTaskLists+0x6c>)
 8004cf6:	f7fe fa31 	bl	800315c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004cfa:	480c      	ldr	r0, [pc, #48]	@ (8004d2c <prvInitialiseTaskLists+0x70>)
 8004cfc:	f7fe fa2e 	bl	800315c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d00:	480b      	ldr	r0, [pc, #44]	@ (8004d30 <prvInitialiseTaskLists+0x74>)
 8004d02:	f7fe fa2b 	bl	800315c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d06:	4b0b      	ldr	r3, [pc, #44]	@ (8004d34 <prvInitialiseTaskLists+0x78>)
 8004d08:	4a05      	ldr	r2, [pc, #20]	@ (8004d20 <prvInitialiseTaskLists+0x64>)
 8004d0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d38 <prvInitialiseTaskLists+0x7c>)
 8004d0e:	4a05      	ldr	r2, [pc, #20]	@ (8004d24 <prvInitialiseTaskLists+0x68>)
 8004d10:	601a      	str	r2, [r3, #0]
}
 8004d12:	bf00      	nop
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	20000930 	.word	0x20000930
 8004d20:	20000d90 	.word	0x20000d90
 8004d24:	20000da4 	.word	0x20000da4
 8004d28:	20000dc0 	.word	0x20000dc0
 8004d2c:	20000dd4 	.word	0x20000dd4
 8004d30:	20000dec 	.word	0x20000dec
 8004d34:	20000db8 	.word	0x20000db8
 8004d38:	20000dbc 	.word	0x20000dbc

08004d3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d42:	e019      	b.n	8004d78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d44:	f000 feb2 	bl	8005aac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d48:	4b10      	ldr	r3, [pc, #64]	@ (8004d8c <prvCheckTasksWaitingTermination+0x50>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3304      	adds	r3, #4
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fe fa87 	bl	8003268 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d90 <prvCheckTasksWaitingTermination+0x54>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	4a0b      	ldr	r2, [pc, #44]	@ (8004d90 <prvCheckTasksWaitingTermination+0x54>)
 8004d62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d64:	4b0b      	ldr	r3, [pc, #44]	@ (8004d94 <prvCheckTasksWaitingTermination+0x58>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d94 <prvCheckTasksWaitingTermination+0x58>)
 8004d6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d6e:	f000 fecd 	bl	8005b0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f810 	bl	8004d98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d78:	4b06      	ldr	r3, [pc, #24]	@ (8004d94 <prvCheckTasksWaitingTermination+0x58>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1e1      	bne.n	8004d44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d80:	bf00      	nop
 8004d82:	bf00      	nop
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000dd4 	.word	0x20000dd4
 8004d90:	20000e00 	.word	0x20000e00
 8004d94:	20000de8 	.word	0x20000de8

08004d98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d108      	bne.n	8004dbc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dae:	4618      	mov	r0, r3
 8004db0:	f001 f84c 	bl	8005e4c <vPortFree>
				vPortFree( pxTCB );
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f001 f849 	bl	8005e4c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004dba:	e019      	b.n	8004df0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d103      	bne.n	8004dce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f001 f840 	bl	8005e4c <vPortFree>
	}
 8004dcc:	e010      	b.n	8004df0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d00b      	beq.n	8004df0 <prvDeleteTCB+0x58>
	__asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	60fb      	str	r3, [r7, #12]
}
 8004dea:	bf00      	nop
 8004dec:	bf00      	nop
 8004dee:	e7fd      	b.n	8004dec <prvDeleteTCB+0x54>
	}
 8004df0:	bf00      	nop
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8004e30 <prvResetNextTaskUnblockTime+0x38>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d104      	bne.n	8004e12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e08:	4b0a      	ldr	r3, [pc, #40]	@ (8004e34 <prvResetNextTaskUnblockTime+0x3c>)
 8004e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e10:	e008      	b.n	8004e24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e12:	4b07      	ldr	r3, [pc, #28]	@ (8004e30 <prvResetNextTaskUnblockTime+0x38>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	4a04      	ldr	r2, [pc, #16]	@ (8004e34 <prvResetNextTaskUnblockTime+0x3c>)
 8004e22:	6013      	str	r3, [r2, #0]
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bc80      	pop	{r7}
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	20000db8 	.word	0x20000db8
 8004e34:	20000e20 	.word	0x20000e20

08004e38 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004e3e:	4b04      	ldr	r3, [pc, #16]	@ (8004e50 <xTaskGetCurrentTaskHandle+0x18>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004e44:	687b      	ldr	r3, [r7, #4]
	}
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr
 8004e50:	2000092c 	.word	0x2000092c

08004e54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e88 <xTaskGetSchedulerState+0x34>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d102      	bne.n	8004e68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e62:	2301      	movs	r3, #1
 8004e64:	607b      	str	r3, [r7, #4]
 8004e66:	e008      	b.n	8004e7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e68:	4b08      	ldr	r3, [pc, #32]	@ (8004e8c <xTaskGetSchedulerState+0x38>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d102      	bne.n	8004e76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e70:	2302      	movs	r3, #2
 8004e72:	607b      	str	r3, [r7, #4]
 8004e74:	e001      	b.n	8004e7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e76:	2300      	movs	r3, #0
 8004e78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e7a:	687b      	ldr	r3, [r7, #4]
	}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bc80      	pop	{r7}
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20000e0c 	.word	0x20000e0c
 8004e8c:	20000e28 	.word	0x20000e28

08004e90 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d051      	beq.n	8004f4a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eaa:	4b2a      	ldr	r3, [pc, #168]	@ (8004f54 <xTaskPriorityInherit+0xc4>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d241      	bcs.n	8004f38 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	db06      	blt.n	8004eca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ebc:	4b25      	ldr	r3, [pc, #148]	@ (8004f54 <xTaskPriorityInherit+0xc4>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	6959      	ldr	r1, [r3, #20]
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4a1f      	ldr	r2, [pc, #124]	@ (8004f58 <xTaskPriorityInherit+0xc8>)
 8004edc:	4413      	add	r3, r2
 8004ede:	4299      	cmp	r1, r3
 8004ee0:	d122      	bne.n	8004f28 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fe f9be 	bl	8003268 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004eec:	4b19      	ldr	r3, [pc, #100]	@ (8004f54 <xTaskPriorityInherit+0xc4>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004efa:	4b18      	ldr	r3, [pc, #96]	@ (8004f5c <xTaskPriorityInherit+0xcc>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d903      	bls.n	8004f0a <xTaskPriorityInherit+0x7a>
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f06:	4a15      	ldr	r2, [pc, #84]	@ (8004f5c <xTaskPriorityInherit+0xcc>)
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f0e:	4613      	mov	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4a10      	ldr	r2, [pc, #64]	@ (8004f58 <xTaskPriorityInherit+0xc8>)
 8004f18:	441a      	add	r2, r3
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4610      	mov	r0, r2
 8004f22:	f7fe f946 	bl	80031b2 <vListInsertEnd>
 8004f26:	e004      	b.n	8004f32 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f28:	4b0a      	ldr	r3, [pc, #40]	@ (8004f54 <xTaskPriorityInherit+0xc4>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004f32:	2301      	movs	r3, #1
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	e008      	b.n	8004f4a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f3c:	4b05      	ldr	r3, [pc, #20]	@ (8004f54 <xTaskPriorityInherit+0xc4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d201      	bcs.n	8004f4a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004f46:	2301      	movs	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
	}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	2000092c 	.word	0x2000092c
 8004f58:	20000930 	.word	0x20000930
 8004f5c:	20000e08 	.word	0x20000e08

08004f60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d058      	beq.n	8005028 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f76:	4b2f      	ldr	r3, [pc, #188]	@ (8005034 <xTaskPriorityDisinherit+0xd4>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d00b      	beq.n	8004f98 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	60fb      	str	r3, [r7, #12]
}
 8004f92:	bf00      	nop
 8004f94:	bf00      	nop
 8004f96:	e7fd      	b.n	8004f94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10b      	bne.n	8004fb8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	60bb      	str	r3, [r7, #8]
}
 8004fb2:	bf00      	nop
 8004fb4:	bf00      	nop
 8004fb6:	e7fd      	b.n	8004fb4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fbc:	1e5a      	subs	r2, r3, #1
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d02c      	beq.n	8005028 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d128      	bne.n	8005028 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	3304      	adds	r3, #4
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fe f944 	bl	8003268 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8005038 <xTaskPriorityDisinherit+0xd8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d903      	bls.n	8005008 <xTaskPriorityDisinherit+0xa8>
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005004:	4a0c      	ldr	r2, [pc, #48]	@ (8005038 <xTaskPriorityDisinherit+0xd8>)
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4a09      	ldr	r2, [pc, #36]	@ (800503c <xTaskPriorityDisinherit+0xdc>)
 8005016:	441a      	add	r2, r3
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	3304      	adds	r3, #4
 800501c:	4619      	mov	r1, r3
 800501e:	4610      	mov	r0, r2
 8005020:	f7fe f8c7 	bl	80031b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005024:	2301      	movs	r3, #1
 8005026:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005028:	697b      	ldr	r3, [r7, #20]
	}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	2000092c 	.word	0x2000092c
 8005038:	20000e08 	.word	0x20000e08
 800503c:	20000930 	.word	0x20000930

08005040 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800504e:	2301      	movs	r3, #1
 8005050:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d06c      	beq.n	8005132 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10b      	bne.n	8005078 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	60fb      	str	r3, [r7, #12]
}
 8005072:	bf00      	nop
 8005074:	bf00      	nop
 8005076:	e7fd      	b.n	8005074 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	429a      	cmp	r2, r3
 8005080:	d902      	bls.n	8005088 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	61fb      	str	r3, [r7, #28]
 8005086:	e002      	b.n	800508e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800508c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005092:	69fa      	ldr	r2, [r7, #28]
 8005094:	429a      	cmp	r2, r3
 8005096:	d04c      	beq.n	8005132 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d147      	bne.n	8005132 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80050a2:	4b26      	ldr	r3, [pc, #152]	@ (800513c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d10b      	bne.n	80050c4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	60bb      	str	r3, [r7, #8]
}
 80050be:	bf00      	nop
 80050c0:	bf00      	nop
 80050c2:	e7fd      	b.n	80050c0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	69fa      	ldr	r2, [r7, #28]
 80050ce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	db04      	blt.n	80050e2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	6959      	ldr	r1, [r3, #20]
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4613      	mov	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4a13      	ldr	r2, [pc, #76]	@ (8005140 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80050f2:	4413      	add	r3, r2
 80050f4:	4299      	cmp	r1, r3
 80050f6:	d11c      	bne.n	8005132 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	3304      	adds	r3, #4
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7fe f8b3 	bl	8003268 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005106:	4b0f      	ldr	r3, [pc, #60]	@ (8005144 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	d903      	bls.n	8005116 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005112:	4a0c      	ldr	r2, [pc, #48]	@ (8005144 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800511a:	4613      	mov	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4a07      	ldr	r2, [pc, #28]	@ (8005140 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005124:	441a      	add	r2, r3
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	3304      	adds	r3, #4
 800512a:	4619      	mov	r1, r3
 800512c:	4610      	mov	r0, r2
 800512e:	f7fe f840 	bl	80031b2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005132:	bf00      	nop
 8005134:	3720      	adds	r7, #32
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	2000092c 	.word	0x2000092c
 8005140:	20000930 	.word	0x20000930
 8005144:	20000e08 	.word	0x20000e08

08005148 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800514c:	4b07      	ldr	r3, [pc, #28]	@ (800516c <pvTaskIncrementMutexHeldCount+0x24>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d004      	beq.n	800515e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005154:	4b05      	ldr	r3, [pc, #20]	@ (800516c <pvTaskIncrementMutexHeldCount+0x24>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800515a:	3201      	adds	r2, #1
 800515c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800515e:	4b03      	ldr	r3, [pc, #12]	@ (800516c <pvTaskIncrementMutexHeldCount+0x24>)
 8005160:	681b      	ldr	r3, [r3, #0]
	}
 8005162:	4618      	mov	r0, r3
 8005164:	46bd      	mov	sp, r7
 8005166:	bc80      	pop	{r7}
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	2000092c 	.word	0x2000092c

08005170 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800517a:	4b21      	ldr	r3, [pc, #132]	@ (8005200 <prvAddCurrentTaskToDelayedList+0x90>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005180:	4b20      	ldr	r3, [pc, #128]	@ (8005204 <prvAddCurrentTaskToDelayedList+0x94>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3304      	adds	r3, #4
 8005186:	4618      	mov	r0, r3
 8005188:	f7fe f86e 	bl	8003268 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005192:	d10a      	bne.n	80051aa <prvAddCurrentTaskToDelayedList+0x3a>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d007      	beq.n	80051aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800519a:	4b1a      	ldr	r3, [pc, #104]	@ (8005204 <prvAddCurrentTaskToDelayedList+0x94>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3304      	adds	r3, #4
 80051a0:	4619      	mov	r1, r3
 80051a2:	4819      	ldr	r0, [pc, #100]	@ (8005208 <prvAddCurrentTaskToDelayedList+0x98>)
 80051a4:	f7fe f805 	bl	80031b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051a8:	e026      	b.n	80051f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4413      	add	r3, r2
 80051b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051b2:	4b14      	ldr	r3, [pc, #80]	@ (8005204 <prvAddCurrentTaskToDelayedList+0x94>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d209      	bcs.n	80051d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051c2:	4b12      	ldr	r3, [pc, #72]	@ (800520c <prvAddCurrentTaskToDelayedList+0x9c>)
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005204 <prvAddCurrentTaskToDelayedList+0x94>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3304      	adds	r3, #4
 80051cc:	4619      	mov	r1, r3
 80051ce:	4610      	mov	r0, r2
 80051d0:	f7fe f812 	bl	80031f8 <vListInsert>
}
 80051d4:	e010      	b.n	80051f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005210 <prvAddCurrentTaskToDelayedList+0xa0>)
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	4b0a      	ldr	r3, [pc, #40]	@ (8005204 <prvAddCurrentTaskToDelayedList+0x94>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3304      	adds	r3, #4
 80051e0:	4619      	mov	r1, r3
 80051e2:	4610      	mov	r0, r2
 80051e4:	f7fe f808 	bl	80031f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005214 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d202      	bcs.n	80051f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80051f2:	4a08      	ldr	r2, [pc, #32]	@ (8005214 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	6013      	str	r3, [r2, #0]
}
 80051f8:	bf00      	nop
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	20000e04 	.word	0x20000e04
 8005204:	2000092c 	.word	0x2000092c
 8005208:	20000dec 	.word	0x20000dec
 800520c:	20000dbc 	.word	0x20000dbc
 8005210:	20000db8 	.word	0x20000db8
 8005214:	20000e20 	.word	0x20000e20

08005218 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08a      	sub	sp, #40	@ 0x28
 800521c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800521e:	2300      	movs	r3, #0
 8005220:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005222:	f000 fb11 	bl	8005848 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005226:	4b1d      	ldr	r3, [pc, #116]	@ (800529c <xTimerCreateTimerTask+0x84>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d021      	beq.n	8005272 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005232:	2300      	movs	r3, #0
 8005234:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005236:	1d3a      	adds	r2, r7, #4
 8005238:	f107 0108 	add.w	r1, r7, #8
 800523c:	f107 030c 	add.w	r3, r7, #12
 8005240:	4618      	mov	r0, r3
 8005242:	f7fd ff71 	bl	8003128 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	9202      	str	r2, [sp, #8]
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	2302      	movs	r3, #2
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	2300      	movs	r3, #0
 8005256:	460a      	mov	r2, r1
 8005258:	4911      	ldr	r1, [pc, #68]	@ (80052a0 <xTimerCreateTimerTask+0x88>)
 800525a:	4812      	ldr	r0, [pc, #72]	@ (80052a4 <xTimerCreateTimerTask+0x8c>)
 800525c:	f7fe ffc4 	bl	80041e8 <xTaskCreateStatic>
 8005260:	4603      	mov	r3, r0
 8005262:	4a11      	ldr	r2, [pc, #68]	@ (80052a8 <xTimerCreateTimerTask+0x90>)
 8005264:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005266:	4b10      	ldr	r3, [pc, #64]	@ (80052a8 <xTimerCreateTimerTask+0x90>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800526e:	2301      	movs	r3, #1
 8005270:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10b      	bne.n	8005290 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	613b      	str	r3, [r7, #16]
}
 800528a:	bf00      	nop
 800528c:	bf00      	nop
 800528e:	e7fd      	b.n	800528c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005290:	697b      	ldr	r3, [r7, #20]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20000e5c 	.word	0x20000e5c
 80052a0:	08007314 	.word	0x08007314
 80052a4:	080053e5 	.word	0x080053e5
 80052a8:	20000e60 	.word	0x20000e60

080052ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08a      	sub	sp, #40	@ 0x28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80052ba:	2300      	movs	r3, #0
 80052bc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10b      	bne.n	80052dc <xTimerGenericCommand+0x30>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	623b      	str	r3, [r7, #32]
}
 80052d6:	bf00      	nop
 80052d8:	bf00      	nop
 80052da:	e7fd      	b.n	80052d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80052dc:	4b19      	ldr	r3, [pc, #100]	@ (8005344 <xTimerGenericCommand+0x98>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d02a      	beq.n	800533a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2b05      	cmp	r3, #5
 80052f4:	dc18      	bgt.n	8005328 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80052f6:	f7ff fdad 	bl	8004e54 <xTaskGetSchedulerState>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d109      	bne.n	8005314 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005300:	4b10      	ldr	r3, [pc, #64]	@ (8005344 <xTimerGenericCommand+0x98>)
 8005302:	6818      	ldr	r0, [r3, #0]
 8005304:	f107 0110 	add.w	r1, r7, #16
 8005308:	2300      	movs	r3, #0
 800530a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800530c:	f7fe f9d4 	bl	80036b8 <xQueueGenericSend>
 8005310:	6278      	str	r0, [r7, #36]	@ 0x24
 8005312:	e012      	b.n	800533a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005314:	4b0b      	ldr	r3, [pc, #44]	@ (8005344 <xTimerGenericCommand+0x98>)
 8005316:	6818      	ldr	r0, [r3, #0]
 8005318:	f107 0110 	add.w	r1, r7, #16
 800531c:	2300      	movs	r3, #0
 800531e:	2200      	movs	r2, #0
 8005320:	f7fe f9ca 	bl	80036b8 <xQueueGenericSend>
 8005324:	6278      	str	r0, [r7, #36]	@ 0x24
 8005326:	e008      	b.n	800533a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005328:	4b06      	ldr	r3, [pc, #24]	@ (8005344 <xTimerGenericCommand+0x98>)
 800532a:	6818      	ldr	r0, [r3, #0]
 800532c:	f107 0110 	add.w	r1, r7, #16
 8005330:	2300      	movs	r3, #0
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	f7fe fac2 	bl	80038bc <xQueueGenericSendFromISR>
 8005338:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800533c:	4618      	mov	r0, r3
 800533e:	3728      	adds	r7, #40	@ 0x28
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	20000e5c 	.word	0x20000e5c

08005348 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af02      	add	r7, sp, #8
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005352:	4b23      	ldr	r3, [pc, #140]	@ (80053e0 <prvProcessExpiredTimer+0x98>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	3304      	adds	r3, #4
 8005360:	4618      	mov	r0, r3
 8005362:	f7fd ff81 	bl	8003268 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	d023      	beq.n	80053bc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	699a      	ldr	r2, [r3, #24]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	18d1      	adds	r1, r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	6978      	ldr	r0, [r7, #20]
 8005382:	f000 f8d3 	bl	800552c <prvInsertTimerInActiveList>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d020      	beq.n	80053ce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800538c:	2300      	movs	r3, #0
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	2300      	movs	r3, #0
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	2100      	movs	r1, #0
 8005396:	6978      	ldr	r0, [r7, #20]
 8005398:	f7ff ff88 	bl	80052ac <xTimerGenericCommand>
 800539c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d114      	bne.n	80053ce <prvProcessExpiredTimer+0x86>
	__asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	60fb      	str	r3, [r7, #12]
}
 80053b6:	bf00      	nop
 80053b8:	bf00      	nop
 80053ba:	e7fd      	b.n	80053b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053c2:	f023 0301 	bic.w	r3, r3, #1
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	6978      	ldr	r0, [r7, #20]
 80053d4:	4798      	blx	r3
}
 80053d6:	bf00      	nop
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	20000e54 	.word	0x20000e54

080053e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053ec:	f107 0308 	add.w	r3, r7, #8
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 f859 	bl	80054a8 <prvGetNextExpireTime>
 80053f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4619      	mov	r1, r3
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 f805 	bl	800540c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005402:	f000 f8d5 	bl	80055b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005406:	bf00      	nop
 8005408:	e7f0      	b.n	80053ec <prvTimerTask+0x8>
	...

0800540c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005416:	f7ff f92b 	bl	8004670 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800541a:	f107 0308 	add.w	r3, r7, #8
 800541e:	4618      	mov	r0, r3
 8005420:	f000 f864 	bl	80054ec <prvSampleTimeNow>
 8005424:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d130      	bne.n	800548e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10a      	bne.n	8005448 <prvProcessTimerOrBlockTask+0x3c>
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	429a      	cmp	r2, r3
 8005438:	d806      	bhi.n	8005448 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800543a:	f7ff f927 	bl	800468c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800543e:	68f9      	ldr	r1, [r7, #12]
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff ff81 	bl	8005348 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005446:	e024      	b.n	8005492 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d008      	beq.n	8005460 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800544e:	4b13      	ldr	r3, [pc, #76]	@ (800549c <prvProcessTimerOrBlockTask+0x90>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <prvProcessTimerOrBlockTask+0x50>
 8005458:	2301      	movs	r3, #1
 800545a:	e000      	b.n	800545e <prvProcessTimerOrBlockTask+0x52>
 800545c:	2300      	movs	r3, #0
 800545e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005460:	4b0f      	ldr	r3, [pc, #60]	@ (80054a0 <prvProcessTimerOrBlockTask+0x94>)
 8005462:	6818      	ldr	r0, [r3, #0]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	4619      	mov	r1, r3
 800546e:	f7fe fe87 	bl	8004180 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005472:	f7ff f90b 	bl	800468c <xTaskResumeAll>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10a      	bne.n	8005492 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800547c:	4b09      	ldr	r3, [pc, #36]	@ (80054a4 <prvProcessTimerOrBlockTask+0x98>)
 800547e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	f3bf 8f6f 	isb	sy
}
 800548c:	e001      	b.n	8005492 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800548e:	f7ff f8fd 	bl	800468c <xTaskResumeAll>
}
 8005492:	bf00      	nop
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	20000e58 	.word	0x20000e58
 80054a0:	20000e5c 	.word	0x20000e5c
 80054a4:	e000ed04 	.word	0xe000ed04

080054a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80054b0:	4b0d      	ldr	r3, [pc, #52]	@ (80054e8 <prvGetNextExpireTime+0x40>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <prvGetNextExpireTime+0x16>
 80054ba:	2201      	movs	r2, #1
 80054bc:	e000      	b.n	80054c0 <prvGetNextExpireTime+0x18>
 80054be:	2200      	movs	r2, #0
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d105      	bne.n	80054d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054cc:	4b06      	ldr	r3, [pc, #24]	@ (80054e8 <prvGetNextExpireTime+0x40>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	e001      	b.n	80054dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80054dc:	68fb      	ldr	r3, [r7, #12]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc80      	pop	{r7}
 80054e6:	4770      	bx	lr
 80054e8:	20000e54 	.word	0x20000e54

080054ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80054f4:	f7ff f968 	bl	80047c8 <xTaskGetTickCount>
 80054f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80054fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005528 <prvSampleTimeNow+0x3c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	429a      	cmp	r2, r3
 8005502:	d205      	bcs.n	8005510 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005504:	f000 f93a 	bl	800577c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	e002      	b.n	8005516 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005516:	4a04      	ldr	r2, [pc, #16]	@ (8005528 <prvSampleTimeNow+0x3c>)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800551c:	68fb      	ldr	r3, [r7, #12]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20000e64 	.word	0x20000e64

0800552c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
 8005538:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800553a:	2300      	movs	r3, #0
 800553c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	429a      	cmp	r2, r3
 8005550:	d812      	bhi.n	8005578 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	1ad2      	subs	r2, r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	429a      	cmp	r2, r3
 800555e:	d302      	bcc.n	8005566 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005560:	2301      	movs	r3, #1
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	e01b      	b.n	800559e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005566:	4b10      	ldr	r3, [pc, #64]	@ (80055a8 <prvInsertTimerInActiveList+0x7c>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3304      	adds	r3, #4
 800556e:	4619      	mov	r1, r3
 8005570:	4610      	mov	r0, r2
 8005572:	f7fd fe41 	bl	80031f8 <vListInsert>
 8005576:	e012      	b.n	800559e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	429a      	cmp	r2, r3
 800557e:	d206      	bcs.n	800558e <prvInsertTimerInActiveList+0x62>
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	429a      	cmp	r2, r3
 8005586:	d302      	bcc.n	800558e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005588:	2301      	movs	r3, #1
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	e007      	b.n	800559e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800558e:	4b07      	ldr	r3, [pc, #28]	@ (80055ac <prvInsertTimerInActiveList+0x80>)
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3304      	adds	r3, #4
 8005596:	4619      	mov	r1, r3
 8005598:	4610      	mov	r0, r2
 800559a:	f7fd fe2d 	bl	80031f8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800559e:	697b      	ldr	r3, [r7, #20]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	20000e58 	.word	0x20000e58
 80055ac:	20000e54 	.word	0x20000e54

080055b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b08e      	sub	sp, #56	@ 0x38
 80055b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055b6:	e0ce      	b.n	8005756 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	da19      	bge.n	80055f2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80055be:	1d3b      	adds	r3, r7, #4
 80055c0:	3304      	adds	r3, #4
 80055c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80055c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10b      	bne.n	80055e2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80055ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	61fb      	str	r3, [r7, #28]
}
 80055dc:	bf00      	nop
 80055de:	bf00      	nop
 80055e0:	e7fd      	b.n	80055de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80055e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055e8:	6850      	ldr	r0, [r2, #4]
 80055ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055ec:	6892      	ldr	r2, [r2, #8]
 80055ee:	4611      	mov	r1, r2
 80055f0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f2c0 80ae 	blt.w	8005756 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80055fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d004      	beq.n	8005610 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005608:	3304      	adds	r3, #4
 800560a:	4618      	mov	r0, r3
 800560c:	f7fd fe2c 	bl	8003268 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005610:	463b      	mov	r3, r7
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff ff6a 	bl	80054ec <prvSampleTimeNow>
 8005618:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b09      	cmp	r3, #9
 800561e:	f200 8097 	bhi.w	8005750 <prvProcessReceivedCommands+0x1a0>
 8005622:	a201      	add	r2, pc, #4	@ (adr r2, 8005628 <prvProcessReceivedCommands+0x78>)
 8005624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005628:	08005651 	.word	0x08005651
 800562c:	08005651 	.word	0x08005651
 8005630:	08005651 	.word	0x08005651
 8005634:	080056c7 	.word	0x080056c7
 8005638:	080056db 	.word	0x080056db
 800563c:	08005727 	.word	0x08005727
 8005640:	08005651 	.word	0x08005651
 8005644:	08005651 	.word	0x08005651
 8005648:	080056c7 	.word	0x080056c7
 800564c:	080056db 	.word	0x080056db
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005652:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005656:	f043 0301 	orr.w	r3, r3, #1
 800565a:	b2da      	uxtb	r2, r3
 800565c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	18d1      	adds	r1, r2, r3
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800566e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005670:	f7ff ff5c 	bl	800552c <prvInsertTimerInActiveList>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d06c      	beq.n	8005754 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800567a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005680:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005684:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	2b00      	cmp	r3, #0
 800568e:	d061      	beq.n	8005754 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	441a      	add	r2, r3
 8005698:	2300      	movs	r3, #0
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	2300      	movs	r3, #0
 800569e:	2100      	movs	r1, #0
 80056a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056a2:	f7ff fe03 	bl	80052ac <xTimerGenericCommand>
 80056a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d152      	bne.n	8005754 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80056ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	61bb      	str	r3, [r7, #24]
}
 80056c0:	bf00      	nop
 80056c2:	bf00      	nop
 80056c4:	e7fd      	b.n	80056c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056cc:	f023 0301 	bic.w	r3, r3, #1
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80056d8:	e03d      	b.n	8005756 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80056da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056e0:	f043 0301 	orr.w	r3, r3, #1
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80056f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10b      	bne.n	8005712 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	617b      	str	r3, [r7, #20]
}
 800570c:	bf00      	nop
 800570e:	bf00      	nop
 8005710:	e7fd      	b.n	800570e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005714:	699a      	ldr	r2, [r3, #24]
 8005716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005718:	18d1      	adds	r1, r2, r3
 800571a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800571e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005720:	f7ff ff04 	bl	800552c <prvInsertTimerInActiveList>
					break;
 8005724:	e017      	b.n	8005756 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005728:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d103      	bne.n	800573c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005734:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005736:	f000 fb89 	bl	8005e4c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800573a:	e00c      	b.n	8005756 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800573c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005742:	f023 0301 	bic.w	r3, r3, #1
 8005746:	b2da      	uxtb	r2, r3
 8005748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800574e:	e002      	b.n	8005756 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005750:	bf00      	nop
 8005752:	e000      	b.n	8005756 <prvProcessReceivedCommands+0x1a6>
					break;
 8005754:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005756:	4b08      	ldr	r3, [pc, #32]	@ (8005778 <prvProcessReceivedCommands+0x1c8>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	1d39      	adds	r1, r7, #4
 800575c:	2200      	movs	r2, #0
 800575e:	4618      	mov	r0, r3
 8005760:	f7fe f94a 	bl	80039f8 <xQueueReceive>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	f47f af26 	bne.w	80055b8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800576c:	bf00      	nop
 800576e:	bf00      	nop
 8005770:	3730      	adds	r7, #48	@ 0x30
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20000e5c 	.word	0x20000e5c

0800577c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b088      	sub	sp, #32
 8005780:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005782:	e049      	b.n	8005818 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005784:	4b2e      	ldr	r3, [pc, #184]	@ (8005840 <prvSwitchTimerLists+0xc4>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800578e:	4b2c      	ldr	r3, [pc, #176]	@ (8005840 <prvSwitchTimerLists+0xc4>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	3304      	adds	r3, #4
 800579c:	4618      	mov	r0, r3
 800579e:	f7fd fd63 	bl	8003268 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057b0:	f003 0304 	and.w	r3, r3, #4
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d02f      	beq.n	8005818 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4413      	add	r3, r2
 80057c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d90e      	bls.n	80057e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057d6:	4b1a      	ldr	r3, [pc, #104]	@ (8005840 <prvSwitchTimerLists+0xc4>)
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	3304      	adds	r3, #4
 80057de:	4619      	mov	r1, r3
 80057e0:	4610      	mov	r0, r2
 80057e2:	f7fd fd09 	bl	80031f8 <vListInsert>
 80057e6:	e017      	b.n	8005818 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057e8:	2300      	movs	r3, #0
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	2300      	movs	r3, #0
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	2100      	movs	r1, #0
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f7ff fd5a 	bl	80052ac <xTimerGenericCommand>
 80057f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10b      	bne.n	8005818 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	603b      	str	r3, [r7, #0]
}
 8005812:	bf00      	nop
 8005814:	bf00      	nop
 8005816:	e7fd      	b.n	8005814 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005818:	4b09      	ldr	r3, [pc, #36]	@ (8005840 <prvSwitchTimerLists+0xc4>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1b0      	bne.n	8005784 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005822:	4b07      	ldr	r3, [pc, #28]	@ (8005840 <prvSwitchTimerLists+0xc4>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005828:	4b06      	ldr	r3, [pc, #24]	@ (8005844 <prvSwitchTimerLists+0xc8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a04      	ldr	r2, [pc, #16]	@ (8005840 <prvSwitchTimerLists+0xc4>)
 800582e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005830:	4a04      	ldr	r2, [pc, #16]	@ (8005844 <prvSwitchTimerLists+0xc8>)
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	6013      	str	r3, [r2, #0]
}
 8005836:	bf00      	nop
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000e54 	.word	0x20000e54
 8005844:	20000e58 	.word	0x20000e58

08005848 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800584e:	f000 f92d 	bl	8005aac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005852:	4b15      	ldr	r3, [pc, #84]	@ (80058a8 <prvCheckForValidListAndQueue+0x60>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d120      	bne.n	800589c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800585a:	4814      	ldr	r0, [pc, #80]	@ (80058ac <prvCheckForValidListAndQueue+0x64>)
 800585c:	f7fd fc7e 	bl	800315c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005860:	4813      	ldr	r0, [pc, #76]	@ (80058b0 <prvCheckForValidListAndQueue+0x68>)
 8005862:	f7fd fc7b 	bl	800315c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005866:	4b13      	ldr	r3, [pc, #76]	@ (80058b4 <prvCheckForValidListAndQueue+0x6c>)
 8005868:	4a10      	ldr	r2, [pc, #64]	@ (80058ac <prvCheckForValidListAndQueue+0x64>)
 800586a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800586c:	4b12      	ldr	r3, [pc, #72]	@ (80058b8 <prvCheckForValidListAndQueue+0x70>)
 800586e:	4a10      	ldr	r2, [pc, #64]	@ (80058b0 <prvCheckForValidListAndQueue+0x68>)
 8005870:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005872:	2300      	movs	r3, #0
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	4b11      	ldr	r3, [pc, #68]	@ (80058bc <prvCheckForValidListAndQueue+0x74>)
 8005878:	4a11      	ldr	r2, [pc, #68]	@ (80058c0 <prvCheckForValidListAndQueue+0x78>)
 800587a:	2110      	movs	r1, #16
 800587c:	200a      	movs	r0, #10
 800587e:	f7fd fd87 	bl	8003390 <xQueueGenericCreateStatic>
 8005882:	4603      	mov	r3, r0
 8005884:	4a08      	ldr	r2, [pc, #32]	@ (80058a8 <prvCheckForValidListAndQueue+0x60>)
 8005886:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005888:	4b07      	ldr	r3, [pc, #28]	@ (80058a8 <prvCheckForValidListAndQueue+0x60>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005890:	4b05      	ldr	r3, [pc, #20]	@ (80058a8 <prvCheckForValidListAndQueue+0x60>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	490b      	ldr	r1, [pc, #44]	@ (80058c4 <prvCheckForValidListAndQueue+0x7c>)
 8005896:	4618      	mov	r0, r3
 8005898:	f7fe fc4a 	bl	8004130 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800589c:	f000 f936 	bl	8005b0c <vPortExitCritical>
}
 80058a0:	bf00      	nop
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	20000e5c 	.word	0x20000e5c
 80058ac:	20000e2c 	.word	0x20000e2c
 80058b0:	20000e40 	.word	0x20000e40
 80058b4:	20000e54 	.word	0x20000e54
 80058b8:	20000e58 	.word	0x20000e58
 80058bc:	20000f08 	.word	0x20000f08
 80058c0:	20000e68 	.word	0x20000e68
 80058c4:	0800731c 	.word	0x0800731c

080058c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3b04      	subs	r3, #4
 80058d8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80058e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	3b04      	subs	r3, #4
 80058e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f023 0201 	bic.w	r2, r3, #1
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	3b04      	subs	r3, #4
 80058f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058f8:	4a08      	ldr	r2, [pc, #32]	@ (800591c <pxPortInitialiseStack+0x54>)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	3b14      	subs	r3, #20
 8005902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	3b20      	subs	r3, #32
 800590e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005910:	68fb      	ldr	r3, [r7, #12]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	bc80      	pop	{r7}
 800591a:	4770      	bx	lr
 800591c:	08005921 	.word	0x08005921

08005920 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005926:	2300      	movs	r3, #0
 8005928:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800592a:	4b12      	ldr	r3, [pc, #72]	@ (8005974 <prvTaskExitError+0x54>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005932:	d00b      	beq.n	800594c <prvTaskExitError+0x2c>
	__asm volatile
 8005934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	60fb      	str	r3, [r7, #12]
}
 8005946:	bf00      	nop
 8005948:	bf00      	nop
 800594a:	e7fd      	b.n	8005948 <prvTaskExitError+0x28>
	__asm volatile
 800594c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005950:	f383 8811 	msr	BASEPRI, r3
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	60bb      	str	r3, [r7, #8]
}
 800595e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005960:	bf00      	nop
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0fc      	beq.n	8005962 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005968:	bf00      	nop
 800596a:	bf00      	nop
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	bc80      	pop	{r7}
 8005972:	4770      	bx	lr
 8005974:	20000084 	.word	0x20000084
	...

08005980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005980:	4b07      	ldr	r3, [pc, #28]	@ (80059a0 <pxCurrentTCBConst2>)
 8005982:	6819      	ldr	r1, [r3, #0]
 8005984:	6808      	ldr	r0, [r1, #0]
 8005986:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800598a:	f380 8809 	msr	PSP, r0
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f04f 0000 	mov.w	r0, #0
 8005996:	f380 8811 	msr	BASEPRI, r0
 800599a:	f04e 0e0d 	orr.w	lr, lr, #13
 800599e:	4770      	bx	lr

080059a0 <pxCurrentTCBConst2>:
 80059a0:	2000092c 	.word	0x2000092c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80059a4:	bf00      	nop
 80059a6:	bf00      	nop

080059a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80059a8:	4806      	ldr	r0, [pc, #24]	@ (80059c4 <prvPortStartFirstTask+0x1c>)
 80059aa:	6800      	ldr	r0, [r0, #0]
 80059ac:	6800      	ldr	r0, [r0, #0]
 80059ae:	f380 8808 	msr	MSP, r0
 80059b2:	b662      	cpsie	i
 80059b4:	b661      	cpsie	f
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	df00      	svc	0
 80059c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80059c2:	bf00      	nop
 80059c4:	e000ed08 	.word	0xe000ed08

080059c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80059ce:	4b32      	ldr	r3, [pc, #200]	@ (8005a98 <xPortStartScheduler+0xd0>)
 80059d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	22ff      	movs	r2, #255	@ 0xff
 80059de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80059e8:	78fb      	ldrb	r3, [r7, #3]
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	4b2a      	ldr	r3, [pc, #168]	@ (8005a9c <xPortStartScheduler+0xd4>)
 80059f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80059f6:	4b2a      	ldr	r3, [pc, #168]	@ (8005aa0 <xPortStartScheduler+0xd8>)
 80059f8:	2207      	movs	r2, #7
 80059fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059fc:	e009      	b.n	8005a12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80059fe:	4b28      	ldr	r3, [pc, #160]	@ (8005aa0 <xPortStartScheduler+0xd8>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	4a26      	ldr	r2, [pc, #152]	@ (8005aa0 <xPortStartScheduler+0xd8>)
 8005a06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a08:	78fb      	ldrb	r3, [r7, #3]
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a12:	78fb      	ldrb	r3, [r7, #3]
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a1a:	2b80      	cmp	r3, #128	@ 0x80
 8005a1c:	d0ef      	beq.n	80059fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a1e:	4b20      	ldr	r3, [pc, #128]	@ (8005aa0 <xPortStartScheduler+0xd8>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f1c3 0307 	rsb	r3, r3, #7
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	d00b      	beq.n	8005a42 <xPortStartScheduler+0x7a>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	60bb      	str	r3, [r7, #8]
}
 8005a3c:	bf00      	nop
 8005a3e:	bf00      	nop
 8005a40:	e7fd      	b.n	8005a3e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a42:	4b17      	ldr	r3, [pc, #92]	@ (8005aa0 <xPortStartScheduler+0xd8>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	021b      	lsls	r3, r3, #8
 8005a48:	4a15      	ldr	r2, [pc, #84]	@ (8005aa0 <xPortStartScheduler+0xd8>)
 8005a4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a4c:	4b14      	ldr	r3, [pc, #80]	@ (8005aa0 <xPortStartScheduler+0xd8>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a54:	4a12      	ldr	r2, [pc, #72]	@ (8005aa0 <xPortStartScheduler+0xd8>)
 8005a56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a60:	4b10      	ldr	r3, [pc, #64]	@ (8005aa4 <xPortStartScheduler+0xdc>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a0f      	ldr	r2, [pc, #60]	@ (8005aa4 <xPortStartScheduler+0xdc>)
 8005a66:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005a6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa4 <xPortStartScheduler+0xdc>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a0c      	ldr	r2, [pc, #48]	@ (8005aa4 <xPortStartScheduler+0xdc>)
 8005a72:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005a76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a78:	f000 f8b8 	bl	8005bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa8 <xPortStartScheduler+0xe0>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a82:	f7ff ff91 	bl	80059a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a86:	f7fe ff67 	bl	8004958 <vTaskSwitchContext>
	prvTaskExitError();
 8005a8a:	f7ff ff49 	bl	8005920 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	e000e400 	.word	0xe000e400
 8005a9c:	20000f58 	.word	0x20000f58
 8005aa0:	20000f5c 	.word	0x20000f5c
 8005aa4:	e000ed20 	.word	0xe000ed20
 8005aa8:	20000084 	.word	0x20000084

08005aac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
	__asm volatile
 8005ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	607b      	str	r3, [r7, #4]
}
 8005ac4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8005b04 <vPortEnterCritical+0x58>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3301      	adds	r3, #1
 8005acc:	4a0d      	ldr	r2, [pc, #52]	@ (8005b04 <vPortEnterCritical+0x58>)
 8005ace:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8005b04 <vPortEnterCritical+0x58>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d110      	bne.n	8005afa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8005b08 <vPortEnterCritical+0x5c>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00b      	beq.n	8005afa <vPortEnterCritical+0x4e>
	__asm volatile
 8005ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	603b      	str	r3, [r7, #0]
}
 8005af4:	bf00      	nop
 8005af6:	bf00      	nop
 8005af8:	e7fd      	b.n	8005af6 <vPortEnterCritical+0x4a>
	}
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bc80      	pop	{r7}
 8005b02:	4770      	bx	lr
 8005b04:	20000084 	.word	0x20000084
 8005b08:	e000ed04 	.word	0xe000ed04

08005b0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b12:	4b12      	ldr	r3, [pc, #72]	@ (8005b5c <vPortExitCritical+0x50>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10b      	bne.n	8005b32 <vPortExitCritical+0x26>
	__asm volatile
 8005b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	607b      	str	r3, [r7, #4]
}
 8005b2c:	bf00      	nop
 8005b2e:	bf00      	nop
 8005b30:	e7fd      	b.n	8005b2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005b32:	4b0a      	ldr	r3, [pc, #40]	@ (8005b5c <vPortExitCritical+0x50>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	4a08      	ldr	r2, [pc, #32]	@ (8005b5c <vPortExitCritical+0x50>)
 8005b3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b3c:	4b07      	ldr	r3, [pc, #28]	@ (8005b5c <vPortExitCritical+0x50>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d105      	bne.n	8005b50 <vPortExitCritical+0x44>
 8005b44:	2300      	movs	r3, #0
 8005b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	f383 8811 	msr	BASEPRI, r3
}
 8005b4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bc80      	pop	{r7}
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	20000084 	.word	0x20000084

08005b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b60:	f3ef 8009 	mrs	r0, PSP
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba0 <pxCurrentTCBConst>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b70:	6010      	str	r0, [r2, #0]
 8005b72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005b76:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005b7a:	f380 8811 	msr	BASEPRI, r0
 8005b7e:	f7fe feeb 	bl	8004958 <vTaskSwitchContext>
 8005b82:	f04f 0000 	mov.w	r0, #0
 8005b86:	f380 8811 	msr	BASEPRI, r0
 8005b8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005b8e:	6819      	ldr	r1, [r3, #0]
 8005b90:	6808      	ldr	r0, [r1, #0]
 8005b92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b96:	f380 8809 	msr	PSP, r0
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	4770      	bx	lr

08005ba0 <pxCurrentTCBConst>:
 8005ba0:	2000092c 	.word	0x2000092c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ba4:	bf00      	nop
 8005ba6:	bf00      	nop

08005ba8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	607b      	str	r3, [r7, #4]
}
 8005bc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005bc2:	f7fe fe0f 	bl	80047e4 <xTaskIncrementTick>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005bcc:	4b06      	ldr	r3, [pc, #24]	@ (8005be8 <xPortSysTickHandler+0x40>)
 8005bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bd2:	601a      	str	r2, [r3, #0]
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	f383 8811 	msr	BASEPRI, r3
}
 8005bde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005be0:	bf00      	nop
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	e000ed04 	.word	0xe000ed04

08005bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8005c1c <vPortSetupTimerInterrupt+0x30>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8005c20 <vPortSetupTimerInterrupt+0x34>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bfc:	4b09      	ldr	r3, [pc, #36]	@ (8005c24 <vPortSetupTimerInterrupt+0x38>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a09      	ldr	r2, [pc, #36]	@ (8005c28 <vPortSetupTimerInterrupt+0x3c>)
 8005c02:	fba2 2303 	umull	r2, r3, r2, r3
 8005c06:	099b      	lsrs	r3, r3, #6
 8005c08:	4a08      	ldr	r2, [pc, #32]	@ (8005c2c <vPortSetupTimerInterrupt+0x40>)
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c0e:	4b03      	ldr	r3, [pc, #12]	@ (8005c1c <vPortSetupTimerInterrupt+0x30>)
 8005c10:	2207      	movs	r2, #7
 8005c12:	601a      	str	r2, [r3, #0]
}
 8005c14:	bf00      	nop
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bc80      	pop	{r7}
 8005c1a:	4770      	bx	lr
 8005c1c:	e000e010 	.word	0xe000e010
 8005c20:	e000e018 	.word	0xe000e018
 8005c24:	20000078 	.word	0x20000078
 8005c28:	10624dd3 	.word	0x10624dd3
 8005c2c:	e000e014 	.word	0xe000e014

08005c30 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c36:	f3ef 8305 	mrs	r3, IPSR
 8005c3a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b0f      	cmp	r3, #15
 8005c40:	d915      	bls.n	8005c6e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c42:	4a17      	ldr	r2, [pc, #92]	@ (8005ca0 <vPortValidateInterruptPriority+0x70>)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4413      	add	r3, r2
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c4c:	4b15      	ldr	r3, [pc, #84]	@ (8005ca4 <vPortValidateInterruptPriority+0x74>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	7afa      	ldrb	r2, [r7, #11]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d20b      	bcs.n	8005c6e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	607b      	str	r3, [r7, #4]
}
 8005c68:	bf00      	nop
 8005c6a:	bf00      	nop
 8005c6c:	e7fd      	b.n	8005c6a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ca8 <vPortValidateInterruptPriority+0x78>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c76:	4b0d      	ldr	r3, [pc, #52]	@ (8005cac <vPortValidateInterruptPriority+0x7c>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d90b      	bls.n	8005c96 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	603b      	str	r3, [r7, #0]
}
 8005c90:	bf00      	nop
 8005c92:	bf00      	nop
 8005c94:	e7fd      	b.n	8005c92 <vPortValidateInterruptPriority+0x62>
	}
 8005c96:	bf00      	nop
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bc80      	pop	{r7}
 8005c9e:	4770      	bx	lr
 8005ca0:	e000e3f0 	.word	0xe000e3f0
 8005ca4:	20000f58 	.word	0x20000f58
 8005ca8:	e000ed0c 	.word	0xe000ed0c
 8005cac:	20000f5c 	.word	0x20000f5c

08005cb0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08a      	sub	sp, #40	@ 0x28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005cbc:	f7fe fcd8 	bl	8004670 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005cc0:	4b5c      	ldr	r3, [pc, #368]	@ (8005e34 <pvPortMalloc+0x184>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d101      	bne.n	8005ccc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005cc8:	f000 f924 	bl	8005f14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ccc:	4b5a      	ldr	r3, [pc, #360]	@ (8005e38 <pvPortMalloc+0x188>)
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f040 8095 	bne.w	8005e04 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d01e      	beq.n	8005d1e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005ce0:	2208      	movs	r2, #8
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d015      	beq.n	8005d1e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f023 0307 	bic.w	r3, r3, #7
 8005cf8:	3308      	adds	r3, #8
 8005cfa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f003 0307 	and.w	r3, r3, #7
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00b      	beq.n	8005d1e <pvPortMalloc+0x6e>
	__asm volatile
 8005d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d0a:	f383 8811 	msr	BASEPRI, r3
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	617b      	str	r3, [r7, #20]
}
 8005d18:	bf00      	nop
 8005d1a:	bf00      	nop
 8005d1c:	e7fd      	b.n	8005d1a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d06f      	beq.n	8005e04 <pvPortMalloc+0x154>
 8005d24:	4b45      	ldr	r3, [pc, #276]	@ (8005e3c <pvPortMalloc+0x18c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d86a      	bhi.n	8005e04 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d2e:	4b44      	ldr	r3, [pc, #272]	@ (8005e40 <pvPortMalloc+0x190>)
 8005d30:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d32:	4b43      	ldr	r3, [pc, #268]	@ (8005e40 <pvPortMalloc+0x190>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d38:	e004      	b.n	8005d44 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d903      	bls.n	8005d56 <pvPortMalloc+0xa6>
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1f1      	bne.n	8005d3a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d56:	4b37      	ldr	r3, [pc, #220]	@ (8005e34 <pvPortMalloc+0x184>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d051      	beq.n	8005e04 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2208      	movs	r2, #8
 8005d66:	4413      	add	r3, r2
 8005d68:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	1ad2      	subs	r2, r2, r3
 8005d7a:	2308      	movs	r3, #8
 8005d7c:	005b      	lsls	r3, r3, #1
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d920      	bls.n	8005dc4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4413      	add	r3, r2
 8005d88:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00b      	beq.n	8005dac <pvPortMalloc+0xfc>
	__asm volatile
 8005d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	613b      	str	r3, [r7, #16]
}
 8005da6:	bf00      	nop
 8005da8:	bf00      	nop
 8005daa:	e7fd      	b.n	8005da8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	1ad2      	subs	r2, r2, r3
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005dbe:	69b8      	ldr	r0, [r7, #24]
 8005dc0:	f000 f90a 	bl	8005fd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8005e3c <pvPortMalloc+0x18c>)
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	4a1b      	ldr	r2, [pc, #108]	@ (8005e3c <pvPortMalloc+0x18c>)
 8005dd0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8005e3c <pvPortMalloc+0x18c>)
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8005e44 <pvPortMalloc+0x194>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d203      	bcs.n	8005de6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005dde:	4b17      	ldr	r3, [pc, #92]	@ (8005e3c <pvPortMalloc+0x18c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a18      	ldr	r2, [pc, #96]	@ (8005e44 <pvPortMalloc+0x194>)
 8005de4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	4b13      	ldr	r3, [pc, #76]	@ (8005e38 <pvPortMalloc+0x188>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	431a      	orrs	r2, r3
 8005df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df6:	2200      	movs	r2, #0
 8005df8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005dfa:	4b13      	ldr	r3, [pc, #76]	@ (8005e48 <pvPortMalloc+0x198>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	4a11      	ldr	r2, [pc, #68]	@ (8005e48 <pvPortMalloc+0x198>)
 8005e02:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e04:	f7fe fc42 	bl	800468c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00b      	beq.n	8005e2a <pvPortMalloc+0x17a>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	60fb      	str	r3, [r7, #12]
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop
 8005e28:	e7fd      	b.n	8005e26 <pvPortMalloc+0x176>
	return pvReturn;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3728      	adds	r7, #40	@ 0x28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	20003f68 	.word	0x20003f68
 8005e38:	20003f7c 	.word	0x20003f7c
 8005e3c:	20003f6c 	.word	0x20003f6c
 8005e40:	20003f60 	.word	0x20003f60
 8005e44:	20003f70 	.word	0x20003f70
 8005e48:	20003f74 	.word	0x20003f74

08005e4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d04f      	beq.n	8005efe <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e5e:	2308      	movs	r3, #8
 8005e60:	425b      	negs	r3, r3
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4413      	add	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	4b25      	ldr	r3, [pc, #148]	@ (8005f08 <vPortFree+0xbc>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4013      	ands	r3, r2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10b      	bne.n	8005e92 <vPortFree+0x46>
	__asm volatile
 8005e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	60fb      	str	r3, [r7, #12]
}
 8005e8c:	bf00      	nop
 8005e8e:	bf00      	nop
 8005e90:	e7fd      	b.n	8005e8e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00b      	beq.n	8005eb2 <vPortFree+0x66>
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	60bb      	str	r3, [r7, #8]
}
 8005eac:	bf00      	nop
 8005eae:	bf00      	nop
 8005eb0:	e7fd      	b.n	8005eae <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	4b14      	ldr	r3, [pc, #80]	@ (8005f08 <vPortFree+0xbc>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01e      	beq.n	8005efe <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d11a      	bne.n	8005efe <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8005f08 <vPortFree+0xbc>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	401a      	ands	r2, r3
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ed8:	f7fe fbca 	bl	8004670 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8005f0c <vPortFree+0xc0>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	4a09      	ldr	r2, [pc, #36]	@ (8005f0c <vPortFree+0xc0>)
 8005ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005eea:	6938      	ldr	r0, [r7, #16]
 8005eec:	f000 f874 	bl	8005fd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ef0:	4b07      	ldr	r3, [pc, #28]	@ (8005f10 <vPortFree+0xc4>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	4a06      	ldr	r2, [pc, #24]	@ (8005f10 <vPortFree+0xc4>)
 8005ef8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005efa:	f7fe fbc7 	bl	800468c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005efe:	bf00      	nop
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20003f7c 	.word	0x20003f7c
 8005f0c:	20003f6c 	.word	0x20003f6c
 8005f10:	20003f78 	.word	0x20003f78

08005f14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f1a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8005f1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f20:	4b27      	ldr	r3, [pc, #156]	@ (8005fc0 <prvHeapInit+0xac>)
 8005f22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00c      	beq.n	8005f48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3307      	adds	r3, #7
 8005f32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f023 0307 	bic.w	r3, r3, #7
 8005f3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	4a1f      	ldr	r2, [pc, #124]	@ (8005fc0 <prvHeapInit+0xac>)
 8005f44:	4413      	add	r3, r2
 8005f46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8005fc4 <prvHeapInit+0xb0>)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f52:	4b1c      	ldr	r3, [pc, #112]	@ (8005fc4 <prvHeapInit+0xb0>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f60:	2208      	movs	r2, #8
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	1a9b      	subs	r3, r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 0307 	bic.w	r3, r3, #7
 8005f6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4a15      	ldr	r2, [pc, #84]	@ (8005fc8 <prvHeapInit+0xb4>)
 8005f74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f76:	4b14      	ldr	r3, [pc, #80]	@ (8005fc8 <prvHeapInit+0xb4>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f7e:	4b12      	ldr	r3, [pc, #72]	@ (8005fc8 <prvHeapInit+0xb4>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	1ad2      	subs	r2, r2, r3
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f94:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc8 <prvHeapInit+0xb4>)
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8005fcc <prvHeapInit+0xb8>)
 8005fa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	4a09      	ldr	r2, [pc, #36]	@ (8005fd0 <prvHeapInit+0xbc>)
 8005faa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fac:	4b09      	ldr	r3, [pc, #36]	@ (8005fd4 <prvHeapInit+0xc0>)
 8005fae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005fb2:	601a      	str	r2, [r3, #0]
}
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bc80      	pop	{r7}
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	20000f60 	.word	0x20000f60
 8005fc4:	20003f60 	.word	0x20003f60
 8005fc8:	20003f68 	.word	0x20003f68
 8005fcc:	20003f70 	.word	0x20003f70
 8005fd0:	20003f6c 	.word	0x20003f6c
 8005fd4:	20003f7c 	.word	0x20003f7c

08005fd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fe0:	4b27      	ldr	r3, [pc, #156]	@ (8006080 <prvInsertBlockIntoFreeList+0xa8>)
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	e002      	b.n	8005fec <prvInsertBlockIntoFreeList+0x14>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d8f7      	bhi.n	8005fe6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	4413      	add	r3, r2
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	429a      	cmp	r2, r3
 8006006:	d108      	bne.n	800601a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	441a      	add	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	441a      	add	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	429a      	cmp	r2, r3
 800602c:	d118      	bne.n	8006060 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	4b14      	ldr	r3, [pc, #80]	@ (8006084 <prvInsertBlockIntoFreeList+0xac>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	429a      	cmp	r2, r3
 8006038:	d00d      	beq.n	8006056 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	441a      	add	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	e008      	b.n	8006068 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006056:	4b0b      	ldr	r3, [pc, #44]	@ (8006084 <prvInsertBlockIntoFreeList+0xac>)
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	e003      	b.n	8006068 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	429a      	cmp	r2, r3
 800606e:	d002      	beq.n	8006076 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006076:	bf00      	nop
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	bc80      	pop	{r7}
 800607e:	4770      	bx	lr
 8006080:	20003f60 	.word	0x20003f60
 8006084:	20003f68 	.word	0x20003f68

08006088 <std>:
 8006088:	2300      	movs	r3, #0
 800608a:	b510      	push	{r4, lr}
 800608c:	4604      	mov	r4, r0
 800608e:	e9c0 3300 	strd	r3, r3, [r0]
 8006092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006096:	6083      	str	r3, [r0, #8]
 8006098:	8181      	strh	r1, [r0, #12]
 800609a:	6643      	str	r3, [r0, #100]	@ 0x64
 800609c:	81c2      	strh	r2, [r0, #14]
 800609e:	6183      	str	r3, [r0, #24]
 80060a0:	4619      	mov	r1, r3
 80060a2:	2208      	movs	r2, #8
 80060a4:	305c      	adds	r0, #92	@ 0x5c
 80060a6:	f000 f9f9 	bl	800649c <memset>
 80060aa:	4b0d      	ldr	r3, [pc, #52]	@ (80060e0 <std+0x58>)
 80060ac:	6224      	str	r4, [r4, #32]
 80060ae:	6263      	str	r3, [r4, #36]	@ 0x24
 80060b0:	4b0c      	ldr	r3, [pc, #48]	@ (80060e4 <std+0x5c>)
 80060b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80060b4:	4b0c      	ldr	r3, [pc, #48]	@ (80060e8 <std+0x60>)
 80060b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80060b8:	4b0c      	ldr	r3, [pc, #48]	@ (80060ec <std+0x64>)
 80060ba:	6323      	str	r3, [r4, #48]	@ 0x30
 80060bc:	4b0c      	ldr	r3, [pc, #48]	@ (80060f0 <std+0x68>)
 80060be:	429c      	cmp	r4, r3
 80060c0:	d006      	beq.n	80060d0 <std+0x48>
 80060c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80060c6:	4294      	cmp	r4, r2
 80060c8:	d002      	beq.n	80060d0 <std+0x48>
 80060ca:	33d0      	adds	r3, #208	@ 0xd0
 80060cc:	429c      	cmp	r4, r3
 80060ce:	d105      	bne.n	80060dc <std+0x54>
 80060d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80060d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060d8:	f000 ba58 	b.w	800658c <__retarget_lock_init_recursive>
 80060dc:	bd10      	pop	{r4, pc}
 80060de:	bf00      	nop
 80060e0:	080062ed 	.word	0x080062ed
 80060e4:	0800630f 	.word	0x0800630f
 80060e8:	08006347 	.word	0x08006347
 80060ec:	0800636b 	.word	0x0800636b
 80060f0:	20003f80 	.word	0x20003f80

080060f4 <stdio_exit_handler>:
 80060f4:	4a02      	ldr	r2, [pc, #8]	@ (8006100 <stdio_exit_handler+0xc>)
 80060f6:	4903      	ldr	r1, [pc, #12]	@ (8006104 <stdio_exit_handler+0x10>)
 80060f8:	4803      	ldr	r0, [pc, #12]	@ (8006108 <stdio_exit_handler+0x14>)
 80060fa:	f000 b869 	b.w	80061d0 <_fwalk_sglue>
 80060fe:	bf00      	nop
 8006100:	20000088 	.word	0x20000088
 8006104:	08006e3d 	.word	0x08006e3d
 8006108:	20000098 	.word	0x20000098

0800610c <cleanup_stdio>:
 800610c:	6841      	ldr	r1, [r0, #4]
 800610e:	4b0c      	ldr	r3, [pc, #48]	@ (8006140 <cleanup_stdio+0x34>)
 8006110:	b510      	push	{r4, lr}
 8006112:	4299      	cmp	r1, r3
 8006114:	4604      	mov	r4, r0
 8006116:	d001      	beq.n	800611c <cleanup_stdio+0x10>
 8006118:	f000 fe90 	bl	8006e3c <_fflush_r>
 800611c:	68a1      	ldr	r1, [r4, #8]
 800611e:	4b09      	ldr	r3, [pc, #36]	@ (8006144 <cleanup_stdio+0x38>)
 8006120:	4299      	cmp	r1, r3
 8006122:	d002      	beq.n	800612a <cleanup_stdio+0x1e>
 8006124:	4620      	mov	r0, r4
 8006126:	f000 fe89 	bl	8006e3c <_fflush_r>
 800612a:	68e1      	ldr	r1, [r4, #12]
 800612c:	4b06      	ldr	r3, [pc, #24]	@ (8006148 <cleanup_stdio+0x3c>)
 800612e:	4299      	cmp	r1, r3
 8006130:	d004      	beq.n	800613c <cleanup_stdio+0x30>
 8006132:	4620      	mov	r0, r4
 8006134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006138:	f000 be80 	b.w	8006e3c <_fflush_r>
 800613c:	bd10      	pop	{r4, pc}
 800613e:	bf00      	nop
 8006140:	20003f80 	.word	0x20003f80
 8006144:	20003fe8 	.word	0x20003fe8
 8006148:	20004050 	.word	0x20004050

0800614c <global_stdio_init.part.0>:
 800614c:	b510      	push	{r4, lr}
 800614e:	4b0b      	ldr	r3, [pc, #44]	@ (800617c <global_stdio_init.part.0+0x30>)
 8006150:	4c0b      	ldr	r4, [pc, #44]	@ (8006180 <global_stdio_init.part.0+0x34>)
 8006152:	4a0c      	ldr	r2, [pc, #48]	@ (8006184 <global_stdio_init.part.0+0x38>)
 8006154:	4620      	mov	r0, r4
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	2104      	movs	r1, #4
 800615a:	2200      	movs	r2, #0
 800615c:	f7ff ff94 	bl	8006088 <std>
 8006160:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006164:	2201      	movs	r2, #1
 8006166:	2109      	movs	r1, #9
 8006168:	f7ff ff8e 	bl	8006088 <std>
 800616c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006170:	2202      	movs	r2, #2
 8006172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006176:	2112      	movs	r1, #18
 8006178:	f7ff bf86 	b.w	8006088 <std>
 800617c:	200040b8 	.word	0x200040b8
 8006180:	20003f80 	.word	0x20003f80
 8006184:	080060f5 	.word	0x080060f5

08006188 <__sfp_lock_acquire>:
 8006188:	4801      	ldr	r0, [pc, #4]	@ (8006190 <__sfp_lock_acquire+0x8>)
 800618a:	f000 ba00 	b.w	800658e <__retarget_lock_acquire_recursive>
 800618e:	bf00      	nop
 8006190:	200040c1 	.word	0x200040c1

08006194 <__sfp_lock_release>:
 8006194:	4801      	ldr	r0, [pc, #4]	@ (800619c <__sfp_lock_release+0x8>)
 8006196:	f000 b9fb 	b.w	8006590 <__retarget_lock_release_recursive>
 800619a:	bf00      	nop
 800619c:	200040c1 	.word	0x200040c1

080061a0 <__sinit>:
 80061a0:	b510      	push	{r4, lr}
 80061a2:	4604      	mov	r4, r0
 80061a4:	f7ff fff0 	bl	8006188 <__sfp_lock_acquire>
 80061a8:	6a23      	ldr	r3, [r4, #32]
 80061aa:	b11b      	cbz	r3, 80061b4 <__sinit+0x14>
 80061ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061b0:	f7ff bff0 	b.w	8006194 <__sfp_lock_release>
 80061b4:	4b04      	ldr	r3, [pc, #16]	@ (80061c8 <__sinit+0x28>)
 80061b6:	6223      	str	r3, [r4, #32]
 80061b8:	4b04      	ldr	r3, [pc, #16]	@ (80061cc <__sinit+0x2c>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1f5      	bne.n	80061ac <__sinit+0xc>
 80061c0:	f7ff ffc4 	bl	800614c <global_stdio_init.part.0>
 80061c4:	e7f2      	b.n	80061ac <__sinit+0xc>
 80061c6:	bf00      	nop
 80061c8:	0800610d 	.word	0x0800610d
 80061cc:	200040b8 	.word	0x200040b8

080061d0 <_fwalk_sglue>:
 80061d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061d4:	4607      	mov	r7, r0
 80061d6:	4688      	mov	r8, r1
 80061d8:	4614      	mov	r4, r2
 80061da:	2600      	movs	r6, #0
 80061dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061e0:	f1b9 0901 	subs.w	r9, r9, #1
 80061e4:	d505      	bpl.n	80061f2 <_fwalk_sglue+0x22>
 80061e6:	6824      	ldr	r4, [r4, #0]
 80061e8:	2c00      	cmp	r4, #0
 80061ea:	d1f7      	bne.n	80061dc <_fwalk_sglue+0xc>
 80061ec:	4630      	mov	r0, r6
 80061ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061f2:	89ab      	ldrh	r3, [r5, #12]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d907      	bls.n	8006208 <_fwalk_sglue+0x38>
 80061f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061fc:	3301      	adds	r3, #1
 80061fe:	d003      	beq.n	8006208 <_fwalk_sglue+0x38>
 8006200:	4629      	mov	r1, r5
 8006202:	4638      	mov	r0, r7
 8006204:	47c0      	blx	r8
 8006206:	4306      	orrs	r6, r0
 8006208:	3568      	adds	r5, #104	@ 0x68
 800620a:	e7e9      	b.n	80061e0 <_fwalk_sglue+0x10>

0800620c <iprintf>:
 800620c:	b40f      	push	{r0, r1, r2, r3}
 800620e:	b507      	push	{r0, r1, r2, lr}
 8006210:	4906      	ldr	r1, [pc, #24]	@ (800622c <iprintf+0x20>)
 8006212:	ab04      	add	r3, sp, #16
 8006214:	6808      	ldr	r0, [r1, #0]
 8006216:	f853 2b04 	ldr.w	r2, [r3], #4
 800621a:	6881      	ldr	r1, [r0, #8]
 800621c:	9301      	str	r3, [sp, #4]
 800621e:	f000 fae5 	bl	80067ec <_vfiprintf_r>
 8006222:	b003      	add	sp, #12
 8006224:	f85d eb04 	ldr.w	lr, [sp], #4
 8006228:	b004      	add	sp, #16
 800622a:	4770      	bx	lr
 800622c:	20000094 	.word	0x20000094

08006230 <_puts_r>:
 8006230:	6a03      	ldr	r3, [r0, #32]
 8006232:	b570      	push	{r4, r5, r6, lr}
 8006234:	4605      	mov	r5, r0
 8006236:	460e      	mov	r6, r1
 8006238:	6884      	ldr	r4, [r0, #8]
 800623a:	b90b      	cbnz	r3, 8006240 <_puts_r+0x10>
 800623c:	f7ff ffb0 	bl	80061a0 <__sinit>
 8006240:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006242:	07db      	lsls	r3, r3, #31
 8006244:	d405      	bmi.n	8006252 <_puts_r+0x22>
 8006246:	89a3      	ldrh	r3, [r4, #12]
 8006248:	0598      	lsls	r0, r3, #22
 800624a:	d402      	bmi.n	8006252 <_puts_r+0x22>
 800624c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800624e:	f000 f99e 	bl	800658e <__retarget_lock_acquire_recursive>
 8006252:	89a3      	ldrh	r3, [r4, #12]
 8006254:	0719      	lsls	r1, r3, #28
 8006256:	d502      	bpl.n	800625e <_puts_r+0x2e>
 8006258:	6923      	ldr	r3, [r4, #16]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d135      	bne.n	80062ca <_puts_r+0x9a>
 800625e:	4621      	mov	r1, r4
 8006260:	4628      	mov	r0, r5
 8006262:	f000 f8c5 	bl	80063f0 <__swsetup_r>
 8006266:	b380      	cbz	r0, 80062ca <_puts_r+0x9a>
 8006268:	f04f 35ff 	mov.w	r5, #4294967295
 800626c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800626e:	07da      	lsls	r2, r3, #31
 8006270:	d405      	bmi.n	800627e <_puts_r+0x4e>
 8006272:	89a3      	ldrh	r3, [r4, #12]
 8006274:	059b      	lsls	r3, r3, #22
 8006276:	d402      	bmi.n	800627e <_puts_r+0x4e>
 8006278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800627a:	f000 f989 	bl	8006590 <__retarget_lock_release_recursive>
 800627e:	4628      	mov	r0, r5
 8006280:	bd70      	pop	{r4, r5, r6, pc}
 8006282:	2b00      	cmp	r3, #0
 8006284:	da04      	bge.n	8006290 <_puts_r+0x60>
 8006286:	69a2      	ldr	r2, [r4, #24]
 8006288:	429a      	cmp	r2, r3
 800628a:	dc17      	bgt.n	80062bc <_puts_r+0x8c>
 800628c:	290a      	cmp	r1, #10
 800628e:	d015      	beq.n	80062bc <_puts_r+0x8c>
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	1c5a      	adds	r2, r3, #1
 8006294:	6022      	str	r2, [r4, #0]
 8006296:	7019      	strb	r1, [r3, #0]
 8006298:	68a3      	ldr	r3, [r4, #8]
 800629a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800629e:	3b01      	subs	r3, #1
 80062a0:	60a3      	str	r3, [r4, #8]
 80062a2:	2900      	cmp	r1, #0
 80062a4:	d1ed      	bne.n	8006282 <_puts_r+0x52>
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	da11      	bge.n	80062ce <_puts_r+0x9e>
 80062aa:	4622      	mov	r2, r4
 80062ac:	210a      	movs	r1, #10
 80062ae:	4628      	mov	r0, r5
 80062b0:	f000 f85f 	bl	8006372 <__swbuf_r>
 80062b4:	3001      	adds	r0, #1
 80062b6:	d0d7      	beq.n	8006268 <_puts_r+0x38>
 80062b8:	250a      	movs	r5, #10
 80062ba:	e7d7      	b.n	800626c <_puts_r+0x3c>
 80062bc:	4622      	mov	r2, r4
 80062be:	4628      	mov	r0, r5
 80062c0:	f000 f857 	bl	8006372 <__swbuf_r>
 80062c4:	3001      	adds	r0, #1
 80062c6:	d1e7      	bne.n	8006298 <_puts_r+0x68>
 80062c8:	e7ce      	b.n	8006268 <_puts_r+0x38>
 80062ca:	3e01      	subs	r6, #1
 80062cc:	e7e4      	b.n	8006298 <_puts_r+0x68>
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	6022      	str	r2, [r4, #0]
 80062d4:	220a      	movs	r2, #10
 80062d6:	701a      	strb	r2, [r3, #0]
 80062d8:	e7ee      	b.n	80062b8 <_puts_r+0x88>
	...

080062dc <puts>:
 80062dc:	4b02      	ldr	r3, [pc, #8]	@ (80062e8 <puts+0xc>)
 80062de:	4601      	mov	r1, r0
 80062e0:	6818      	ldr	r0, [r3, #0]
 80062e2:	f7ff bfa5 	b.w	8006230 <_puts_r>
 80062e6:	bf00      	nop
 80062e8:	20000094 	.word	0x20000094

080062ec <__sread>:
 80062ec:	b510      	push	{r4, lr}
 80062ee:	460c      	mov	r4, r1
 80062f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062f4:	f000 f8fc 	bl	80064f0 <_read_r>
 80062f8:	2800      	cmp	r0, #0
 80062fa:	bfab      	itete	ge
 80062fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80062fe:	89a3      	ldrhlt	r3, [r4, #12]
 8006300:	181b      	addge	r3, r3, r0
 8006302:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006306:	bfac      	ite	ge
 8006308:	6563      	strge	r3, [r4, #84]	@ 0x54
 800630a:	81a3      	strhlt	r3, [r4, #12]
 800630c:	bd10      	pop	{r4, pc}

0800630e <__swrite>:
 800630e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006312:	461f      	mov	r7, r3
 8006314:	898b      	ldrh	r3, [r1, #12]
 8006316:	4605      	mov	r5, r0
 8006318:	05db      	lsls	r3, r3, #23
 800631a:	460c      	mov	r4, r1
 800631c:	4616      	mov	r6, r2
 800631e:	d505      	bpl.n	800632c <__swrite+0x1e>
 8006320:	2302      	movs	r3, #2
 8006322:	2200      	movs	r2, #0
 8006324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006328:	f000 f8d0 	bl	80064cc <_lseek_r>
 800632c:	89a3      	ldrh	r3, [r4, #12]
 800632e:	4632      	mov	r2, r6
 8006330:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006334:	81a3      	strh	r3, [r4, #12]
 8006336:	4628      	mov	r0, r5
 8006338:	463b      	mov	r3, r7
 800633a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800633e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006342:	f000 b8e7 	b.w	8006514 <_write_r>

08006346 <__sseek>:
 8006346:	b510      	push	{r4, lr}
 8006348:	460c      	mov	r4, r1
 800634a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800634e:	f000 f8bd 	bl	80064cc <_lseek_r>
 8006352:	1c43      	adds	r3, r0, #1
 8006354:	89a3      	ldrh	r3, [r4, #12]
 8006356:	bf15      	itete	ne
 8006358:	6560      	strne	r0, [r4, #84]	@ 0x54
 800635a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800635e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006362:	81a3      	strheq	r3, [r4, #12]
 8006364:	bf18      	it	ne
 8006366:	81a3      	strhne	r3, [r4, #12]
 8006368:	bd10      	pop	{r4, pc}

0800636a <__sclose>:
 800636a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800636e:	f000 b89d 	b.w	80064ac <_close_r>

08006372 <__swbuf_r>:
 8006372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006374:	460e      	mov	r6, r1
 8006376:	4614      	mov	r4, r2
 8006378:	4605      	mov	r5, r0
 800637a:	b118      	cbz	r0, 8006384 <__swbuf_r+0x12>
 800637c:	6a03      	ldr	r3, [r0, #32]
 800637e:	b90b      	cbnz	r3, 8006384 <__swbuf_r+0x12>
 8006380:	f7ff ff0e 	bl	80061a0 <__sinit>
 8006384:	69a3      	ldr	r3, [r4, #24]
 8006386:	60a3      	str	r3, [r4, #8]
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	071a      	lsls	r2, r3, #28
 800638c:	d501      	bpl.n	8006392 <__swbuf_r+0x20>
 800638e:	6923      	ldr	r3, [r4, #16]
 8006390:	b943      	cbnz	r3, 80063a4 <__swbuf_r+0x32>
 8006392:	4621      	mov	r1, r4
 8006394:	4628      	mov	r0, r5
 8006396:	f000 f82b 	bl	80063f0 <__swsetup_r>
 800639a:	b118      	cbz	r0, 80063a4 <__swbuf_r+0x32>
 800639c:	f04f 37ff 	mov.w	r7, #4294967295
 80063a0:	4638      	mov	r0, r7
 80063a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	6922      	ldr	r2, [r4, #16]
 80063a8:	b2f6      	uxtb	r6, r6
 80063aa:	1a98      	subs	r0, r3, r2
 80063ac:	6963      	ldr	r3, [r4, #20]
 80063ae:	4637      	mov	r7, r6
 80063b0:	4283      	cmp	r3, r0
 80063b2:	dc05      	bgt.n	80063c0 <__swbuf_r+0x4e>
 80063b4:	4621      	mov	r1, r4
 80063b6:	4628      	mov	r0, r5
 80063b8:	f000 fd40 	bl	8006e3c <_fflush_r>
 80063bc:	2800      	cmp	r0, #0
 80063be:	d1ed      	bne.n	800639c <__swbuf_r+0x2a>
 80063c0:	68a3      	ldr	r3, [r4, #8]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	60a3      	str	r3, [r4, #8]
 80063c6:	6823      	ldr	r3, [r4, #0]
 80063c8:	1c5a      	adds	r2, r3, #1
 80063ca:	6022      	str	r2, [r4, #0]
 80063cc:	701e      	strb	r6, [r3, #0]
 80063ce:	6962      	ldr	r2, [r4, #20]
 80063d0:	1c43      	adds	r3, r0, #1
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d004      	beq.n	80063e0 <__swbuf_r+0x6e>
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	07db      	lsls	r3, r3, #31
 80063da:	d5e1      	bpl.n	80063a0 <__swbuf_r+0x2e>
 80063dc:	2e0a      	cmp	r6, #10
 80063de:	d1df      	bne.n	80063a0 <__swbuf_r+0x2e>
 80063e0:	4621      	mov	r1, r4
 80063e2:	4628      	mov	r0, r5
 80063e4:	f000 fd2a 	bl	8006e3c <_fflush_r>
 80063e8:	2800      	cmp	r0, #0
 80063ea:	d0d9      	beq.n	80063a0 <__swbuf_r+0x2e>
 80063ec:	e7d6      	b.n	800639c <__swbuf_r+0x2a>
	...

080063f0 <__swsetup_r>:
 80063f0:	b538      	push	{r3, r4, r5, lr}
 80063f2:	4b29      	ldr	r3, [pc, #164]	@ (8006498 <__swsetup_r+0xa8>)
 80063f4:	4605      	mov	r5, r0
 80063f6:	6818      	ldr	r0, [r3, #0]
 80063f8:	460c      	mov	r4, r1
 80063fa:	b118      	cbz	r0, 8006404 <__swsetup_r+0x14>
 80063fc:	6a03      	ldr	r3, [r0, #32]
 80063fe:	b90b      	cbnz	r3, 8006404 <__swsetup_r+0x14>
 8006400:	f7ff fece 	bl	80061a0 <__sinit>
 8006404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006408:	0719      	lsls	r1, r3, #28
 800640a:	d422      	bmi.n	8006452 <__swsetup_r+0x62>
 800640c:	06da      	lsls	r2, r3, #27
 800640e:	d407      	bmi.n	8006420 <__swsetup_r+0x30>
 8006410:	2209      	movs	r2, #9
 8006412:	602a      	str	r2, [r5, #0]
 8006414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006418:	f04f 30ff 	mov.w	r0, #4294967295
 800641c:	81a3      	strh	r3, [r4, #12]
 800641e:	e033      	b.n	8006488 <__swsetup_r+0x98>
 8006420:	0758      	lsls	r0, r3, #29
 8006422:	d512      	bpl.n	800644a <__swsetup_r+0x5a>
 8006424:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006426:	b141      	cbz	r1, 800643a <__swsetup_r+0x4a>
 8006428:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800642c:	4299      	cmp	r1, r3
 800642e:	d002      	beq.n	8006436 <__swsetup_r+0x46>
 8006430:	4628      	mov	r0, r5
 8006432:	f000 f8bd 	bl	80065b0 <_free_r>
 8006436:	2300      	movs	r3, #0
 8006438:	6363      	str	r3, [r4, #52]	@ 0x34
 800643a:	89a3      	ldrh	r3, [r4, #12]
 800643c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006440:	81a3      	strh	r3, [r4, #12]
 8006442:	2300      	movs	r3, #0
 8006444:	6063      	str	r3, [r4, #4]
 8006446:	6923      	ldr	r3, [r4, #16]
 8006448:	6023      	str	r3, [r4, #0]
 800644a:	89a3      	ldrh	r3, [r4, #12]
 800644c:	f043 0308 	orr.w	r3, r3, #8
 8006450:	81a3      	strh	r3, [r4, #12]
 8006452:	6923      	ldr	r3, [r4, #16]
 8006454:	b94b      	cbnz	r3, 800646a <__swsetup_r+0x7a>
 8006456:	89a3      	ldrh	r3, [r4, #12]
 8006458:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800645c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006460:	d003      	beq.n	800646a <__swsetup_r+0x7a>
 8006462:	4621      	mov	r1, r4
 8006464:	4628      	mov	r0, r5
 8006466:	f000 fd36 	bl	8006ed6 <__smakebuf_r>
 800646a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800646e:	f013 0201 	ands.w	r2, r3, #1
 8006472:	d00a      	beq.n	800648a <__swsetup_r+0x9a>
 8006474:	2200      	movs	r2, #0
 8006476:	60a2      	str	r2, [r4, #8]
 8006478:	6962      	ldr	r2, [r4, #20]
 800647a:	4252      	negs	r2, r2
 800647c:	61a2      	str	r2, [r4, #24]
 800647e:	6922      	ldr	r2, [r4, #16]
 8006480:	b942      	cbnz	r2, 8006494 <__swsetup_r+0xa4>
 8006482:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006486:	d1c5      	bne.n	8006414 <__swsetup_r+0x24>
 8006488:	bd38      	pop	{r3, r4, r5, pc}
 800648a:	0799      	lsls	r1, r3, #30
 800648c:	bf58      	it	pl
 800648e:	6962      	ldrpl	r2, [r4, #20]
 8006490:	60a2      	str	r2, [r4, #8]
 8006492:	e7f4      	b.n	800647e <__swsetup_r+0x8e>
 8006494:	2000      	movs	r0, #0
 8006496:	e7f7      	b.n	8006488 <__swsetup_r+0x98>
 8006498:	20000094 	.word	0x20000094

0800649c <memset>:
 800649c:	4603      	mov	r3, r0
 800649e:	4402      	add	r2, r0
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d100      	bne.n	80064a6 <memset+0xa>
 80064a4:	4770      	bx	lr
 80064a6:	f803 1b01 	strb.w	r1, [r3], #1
 80064aa:	e7f9      	b.n	80064a0 <memset+0x4>

080064ac <_close_r>:
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	2300      	movs	r3, #0
 80064b0:	4d05      	ldr	r5, [pc, #20]	@ (80064c8 <_close_r+0x1c>)
 80064b2:	4604      	mov	r4, r0
 80064b4:	4608      	mov	r0, r1
 80064b6:	602b      	str	r3, [r5, #0]
 80064b8:	f7fb f8f6 	bl	80016a8 <_close>
 80064bc:	1c43      	adds	r3, r0, #1
 80064be:	d102      	bne.n	80064c6 <_close_r+0x1a>
 80064c0:	682b      	ldr	r3, [r5, #0]
 80064c2:	b103      	cbz	r3, 80064c6 <_close_r+0x1a>
 80064c4:	6023      	str	r3, [r4, #0]
 80064c6:	bd38      	pop	{r3, r4, r5, pc}
 80064c8:	200040bc 	.word	0x200040bc

080064cc <_lseek_r>:
 80064cc:	b538      	push	{r3, r4, r5, lr}
 80064ce:	4604      	mov	r4, r0
 80064d0:	4608      	mov	r0, r1
 80064d2:	4611      	mov	r1, r2
 80064d4:	2200      	movs	r2, #0
 80064d6:	4d05      	ldr	r5, [pc, #20]	@ (80064ec <_lseek_r+0x20>)
 80064d8:	602a      	str	r2, [r5, #0]
 80064da:	461a      	mov	r2, r3
 80064dc:	f7fb f908 	bl	80016f0 <_lseek>
 80064e0:	1c43      	adds	r3, r0, #1
 80064e2:	d102      	bne.n	80064ea <_lseek_r+0x1e>
 80064e4:	682b      	ldr	r3, [r5, #0]
 80064e6:	b103      	cbz	r3, 80064ea <_lseek_r+0x1e>
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	bd38      	pop	{r3, r4, r5, pc}
 80064ec:	200040bc 	.word	0x200040bc

080064f0 <_read_r>:
 80064f0:	b538      	push	{r3, r4, r5, lr}
 80064f2:	4604      	mov	r4, r0
 80064f4:	4608      	mov	r0, r1
 80064f6:	4611      	mov	r1, r2
 80064f8:	2200      	movs	r2, #0
 80064fa:	4d05      	ldr	r5, [pc, #20]	@ (8006510 <_read_r+0x20>)
 80064fc:	602a      	str	r2, [r5, #0]
 80064fe:	461a      	mov	r2, r3
 8006500:	f7fb f8b5 	bl	800166e <_read>
 8006504:	1c43      	adds	r3, r0, #1
 8006506:	d102      	bne.n	800650e <_read_r+0x1e>
 8006508:	682b      	ldr	r3, [r5, #0]
 800650a:	b103      	cbz	r3, 800650e <_read_r+0x1e>
 800650c:	6023      	str	r3, [r4, #0]
 800650e:	bd38      	pop	{r3, r4, r5, pc}
 8006510:	200040bc 	.word	0x200040bc

08006514 <_write_r>:
 8006514:	b538      	push	{r3, r4, r5, lr}
 8006516:	4604      	mov	r4, r0
 8006518:	4608      	mov	r0, r1
 800651a:	4611      	mov	r1, r2
 800651c:	2200      	movs	r2, #0
 800651e:	4d05      	ldr	r5, [pc, #20]	@ (8006534 <_write_r+0x20>)
 8006520:	602a      	str	r2, [r5, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	f7fa ffe4 	bl	80014f0 <_write>
 8006528:	1c43      	adds	r3, r0, #1
 800652a:	d102      	bne.n	8006532 <_write_r+0x1e>
 800652c:	682b      	ldr	r3, [r5, #0]
 800652e:	b103      	cbz	r3, 8006532 <_write_r+0x1e>
 8006530:	6023      	str	r3, [r4, #0]
 8006532:	bd38      	pop	{r3, r4, r5, pc}
 8006534:	200040bc 	.word	0x200040bc

08006538 <__errno>:
 8006538:	4b01      	ldr	r3, [pc, #4]	@ (8006540 <__errno+0x8>)
 800653a:	6818      	ldr	r0, [r3, #0]
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	20000094 	.word	0x20000094

08006544 <__libc_init_array>:
 8006544:	b570      	push	{r4, r5, r6, lr}
 8006546:	2600      	movs	r6, #0
 8006548:	4d0c      	ldr	r5, [pc, #48]	@ (800657c <__libc_init_array+0x38>)
 800654a:	4c0d      	ldr	r4, [pc, #52]	@ (8006580 <__libc_init_array+0x3c>)
 800654c:	1b64      	subs	r4, r4, r5
 800654e:	10a4      	asrs	r4, r4, #2
 8006550:	42a6      	cmp	r6, r4
 8006552:	d109      	bne.n	8006568 <__libc_init_array+0x24>
 8006554:	f000 fd3c 	bl	8006fd0 <_init>
 8006558:	2600      	movs	r6, #0
 800655a:	4d0a      	ldr	r5, [pc, #40]	@ (8006584 <__libc_init_array+0x40>)
 800655c:	4c0a      	ldr	r4, [pc, #40]	@ (8006588 <__libc_init_array+0x44>)
 800655e:	1b64      	subs	r4, r4, r5
 8006560:	10a4      	asrs	r4, r4, #2
 8006562:	42a6      	cmp	r6, r4
 8006564:	d105      	bne.n	8006572 <__libc_init_array+0x2e>
 8006566:	bd70      	pop	{r4, r5, r6, pc}
 8006568:	f855 3b04 	ldr.w	r3, [r5], #4
 800656c:	4798      	blx	r3
 800656e:	3601      	adds	r6, #1
 8006570:	e7ee      	b.n	8006550 <__libc_init_array+0xc>
 8006572:	f855 3b04 	ldr.w	r3, [r5], #4
 8006576:	4798      	blx	r3
 8006578:	3601      	adds	r6, #1
 800657a:	e7f2      	b.n	8006562 <__libc_init_array+0x1e>
 800657c:	080073a8 	.word	0x080073a8
 8006580:	080073a8 	.word	0x080073a8
 8006584:	080073a8 	.word	0x080073a8
 8006588:	080073ac 	.word	0x080073ac

0800658c <__retarget_lock_init_recursive>:
 800658c:	4770      	bx	lr

0800658e <__retarget_lock_acquire_recursive>:
 800658e:	4770      	bx	lr

08006590 <__retarget_lock_release_recursive>:
 8006590:	4770      	bx	lr

08006592 <memcpy>:
 8006592:	440a      	add	r2, r1
 8006594:	4291      	cmp	r1, r2
 8006596:	f100 33ff 	add.w	r3, r0, #4294967295
 800659a:	d100      	bne.n	800659e <memcpy+0xc>
 800659c:	4770      	bx	lr
 800659e:	b510      	push	{r4, lr}
 80065a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065a4:	4291      	cmp	r1, r2
 80065a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065aa:	d1f9      	bne.n	80065a0 <memcpy+0xe>
 80065ac:	bd10      	pop	{r4, pc}
	...

080065b0 <_free_r>:
 80065b0:	b538      	push	{r3, r4, r5, lr}
 80065b2:	4605      	mov	r5, r0
 80065b4:	2900      	cmp	r1, #0
 80065b6:	d040      	beq.n	800663a <_free_r+0x8a>
 80065b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065bc:	1f0c      	subs	r4, r1, #4
 80065be:	2b00      	cmp	r3, #0
 80065c0:	bfb8      	it	lt
 80065c2:	18e4      	addlt	r4, r4, r3
 80065c4:	f000 f8de 	bl	8006784 <__malloc_lock>
 80065c8:	4a1c      	ldr	r2, [pc, #112]	@ (800663c <_free_r+0x8c>)
 80065ca:	6813      	ldr	r3, [r2, #0]
 80065cc:	b933      	cbnz	r3, 80065dc <_free_r+0x2c>
 80065ce:	6063      	str	r3, [r4, #4]
 80065d0:	6014      	str	r4, [r2, #0]
 80065d2:	4628      	mov	r0, r5
 80065d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065d8:	f000 b8da 	b.w	8006790 <__malloc_unlock>
 80065dc:	42a3      	cmp	r3, r4
 80065de:	d908      	bls.n	80065f2 <_free_r+0x42>
 80065e0:	6820      	ldr	r0, [r4, #0]
 80065e2:	1821      	adds	r1, r4, r0
 80065e4:	428b      	cmp	r3, r1
 80065e6:	bf01      	itttt	eq
 80065e8:	6819      	ldreq	r1, [r3, #0]
 80065ea:	685b      	ldreq	r3, [r3, #4]
 80065ec:	1809      	addeq	r1, r1, r0
 80065ee:	6021      	streq	r1, [r4, #0]
 80065f0:	e7ed      	b.n	80065ce <_free_r+0x1e>
 80065f2:	461a      	mov	r2, r3
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	b10b      	cbz	r3, 80065fc <_free_r+0x4c>
 80065f8:	42a3      	cmp	r3, r4
 80065fa:	d9fa      	bls.n	80065f2 <_free_r+0x42>
 80065fc:	6811      	ldr	r1, [r2, #0]
 80065fe:	1850      	adds	r0, r2, r1
 8006600:	42a0      	cmp	r0, r4
 8006602:	d10b      	bne.n	800661c <_free_r+0x6c>
 8006604:	6820      	ldr	r0, [r4, #0]
 8006606:	4401      	add	r1, r0
 8006608:	1850      	adds	r0, r2, r1
 800660a:	4283      	cmp	r3, r0
 800660c:	6011      	str	r1, [r2, #0]
 800660e:	d1e0      	bne.n	80065d2 <_free_r+0x22>
 8006610:	6818      	ldr	r0, [r3, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	4408      	add	r0, r1
 8006616:	6010      	str	r0, [r2, #0]
 8006618:	6053      	str	r3, [r2, #4]
 800661a:	e7da      	b.n	80065d2 <_free_r+0x22>
 800661c:	d902      	bls.n	8006624 <_free_r+0x74>
 800661e:	230c      	movs	r3, #12
 8006620:	602b      	str	r3, [r5, #0]
 8006622:	e7d6      	b.n	80065d2 <_free_r+0x22>
 8006624:	6820      	ldr	r0, [r4, #0]
 8006626:	1821      	adds	r1, r4, r0
 8006628:	428b      	cmp	r3, r1
 800662a:	bf01      	itttt	eq
 800662c:	6819      	ldreq	r1, [r3, #0]
 800662e:	685b      	ldreq	r3, [r3, #4]
 8006630:	1809      	addeq	r1, r1, r0
 8006632:	6021      	streq	r1, [r4, #0]
 8006634:	6063      	str	r3, [r4, #4]
 8006636:	6054      	str	r4, [r2, #4]
 8006638:	e7cb      	b.n	80065d2 <_free_r+0x22>
 800663a:	bd38      	pop	{r3, r4, r5, pc}
 800663c:	200040c8 	.word	0x200040c8

08006640 <sbrk_aligned>:
 8006640:	b570      	push	{r4, r5, r6, lr}
 8006642:	4e0f      	ldr	r6, [pc, #60]	@ (8006680 <sbrk_aligned+0x40>)
 8006644:	460c      	mov	r4, r1
 8006646:	6831      	ldr	r1, [r6, #0]
 8006648:	4605      	mov	r5, r0
 800664a:	b911      	cbnz	r1, 8006652 <sbrk_aligned+0x12>
 800664c:	f000 fca2 	bl	8006f94 <_sbrk_r>
 8006650:	6030      	str	r0, [r6, #0]
 8006652:	4621      	mov	r1, r4
 8006654:	4628      	mov	r0, r5
 8006656:	f000 fc9d 	bl	8006f94 <_sbrk_r>
 800665a:	1c43      	adds	r3, r0, #1
 800665c:	d103      	bne.n	8006666 <sbrk_aligned+0x26>
 800665e:	f04f 34ff 	mov.w	r4, #4294967295
 8006662:	4620      	mov	r0, r4
 8006664:	bd70      	pop	{r4, r5, r6, pc}
 8006666:	1cc4      	adds	r4, r0, #3
 8006668:	f024 0403 	bic.w	r4, r4, #3
 800666c:	42a0      	cmp	r0, r4
 800666e:	d0f8      	beq.n	8006662 <sbrk_aligned+0x22>
 8006670:	1a21      	subs	r1, r4, r0
 8006672:	4628      	mov	r0, r5
 8006674:	f000 fc8e 	bl	8006f94 <_sbrk_r>
 8006678:	3001      	adds	r0, #1
 800667a:	d1f2      	bne.n	8006662 <sbrk_aligned+0x22>
 800667c:	e7ef      	b.n	800665e <sbrk_aligned+0x1e>
 800667e:	bf00      	nop
 8006680:	200040c4 	.word	0x200040c4

08006684 <_malloc_r>:
 8006684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006688:	1ccd      	adds	r5, r1, #3
 800668a:	f025 0503 	bic.w	r5, r5, #3
 800668e:	3508      	adds	r5, #8
 8006690:	2d0c      	cmp	r5, #12
 8006692:	bf38      	it	cc
 8006694:	250c      	movcc	r5, #12
 8006696:	2d00      	cmp	r5, #0
 8006698:	4606      	mov	r6, r0
 800669a:	db01      	blt.n	80066a0 <_malloc_r+0x1c>
 800669c:	42a9      	cmp	r1, r5
 800669e:	d904      	bls.n	80066aa <_malloc_r+0x26>
 80066a0:	230c      	movs	r3, #12
 80066a2:	6033      	str	r3, [r6, #0]
 80066a4:	2000      	movs	r0, #0
 80066a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006780 <_malloc_r+0xfc>
 80066ae:	f000 f869 	bl	8006784 <__malloc_lock>
 80066b2:	f8d8 3000 	ldr.w	r3, [r8]
 80066b6:	461c      	mov	r4, r3
 80066b8:	bb44      	cbnz	r4, 800670c <_malloc_r+0x88>
 80066ba:	4629      	mov	r1, r5
 80066bc:	4630      	mov	r0, r6
 80066be:	f7ff ffbf 	bl	8006640 <sbrk_aligned>
 80066c2:	1c43      	adds	r3, r0, #1
 80066c4:	4604      	mov	r4, r0
 80066c6:	d158      	bne.n	800677a <_malloc_r+0xf6>
 80066c8:	f8d8 4000 	ldr.w	r4, [r8]
 80066cc:	4627      	mov	r7, r4
 80066ce:	2f00      	cmp	r7, #0
 80066d0:	d143      	bne.n	800675a <_malloc_r+0xd6>
 80066d2:	2c00      	cmp	r4, #0
 80066d4:	d04b      	beq.n	800676e <_malloc_r+0xea>
 80066d6:	6823      	ldr	r3, [r4, #0]
 80066d8:	4639      	mov	r1, r7
 80066da:	4630      	mov	r0, r6
 80066dc:	eb04 0903 	add.w	r9, r4, r3
 80066e0:	f000 fc58 	bl	8006f94 <_sbrk_r>
 80066e4:	4581      	cmp	r9, r0
 80066e6:	d142      	bne.n	800676e <_malloc_r+0xea>
 80066e8:	6821      	ldr	r1, [r4, #0]
 80066ea:	4630      	mov	r0, r6
 80066ec:	1a6d      	subs	r5, r5, r1
 80066ee:	4629      	mov	r1, r5
 80066f0:	f7ff ffa6 	bl	8006640 <sbrk_aligned>
 80066f4:	3001      	adds	r0, #1
 80066f6:	d03a      	beq.n	800676e <_malloc_r+0xea>
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	442b      	add	r3, r5
 80066fc:	6023      	str	r3, [r4, #0]
 80066fe:	f8d8 3000 	ldr.w	r3, [r8]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	bb62      	cbnz	r2, 8006760 <_malloc_r+0xdc>
 8006706:	f8c8 7000 	str.w	r7, [r8]
 800670a:	e00f      	b.n	800672c <_malloc_r+0xa8>
 800670c:	6822      	ldr	r2, [r4, #0]
 800670e:	1b52      	subs	r2, r2, r5
 8006710:	d420      	bmi.n	8006754 <_malloc_r+0xd0>
 8006712:	2a0b      	cmp	r2, #11
 8006714:	d917      	bls.n	8006746 <_malloc_r+0xc2>
 8006716:	1961      	adds	r1, r4, r5
 8006718:	42a3      	cmp	r3, r4
 800671a:	6025      	str	r5, [r4, #0]
 800671c:	bf18      	it	ne
 800671e:	6059      	strne	r1, [r3, #4]
 8006720:	6863      	ldr	r3, [r4, #4]
 8006722:	bf08      	it	eq
 8006724:	f8c8 1000 	streq.w	r1, [r8]
 8006728:	5162      	str	r2, [r4, r5]
 800672a:	604b      	str	r3, [r1, #4]
 800672c:	4630      	mov	r0, r6
 800672e:	f000 f82f 	bl	8006790 <__malloc_unlock>
 8006732:	f104 000b 	add.w	r0, r4, #11
 8006736:	1d23      	adds	r3, r4, #4
 8006738:	f020 0007 	bic.w	r0, r0, #7
 800673c:	1ac2      	subs	r2, r0, r3
 800673e:	bf1c      	itt	ne
 8006740:	1a1b      	subne	r3, r3, r0
 8006742:	50a3      	strne	r3, [r4, r2]
 8006744:	e7af      	b.n	80066a6 <_malloc_r+0x22>
 8006746:	6862      	ldr	r2, [r4, #4]
 8006748:	42a3      	cmp	r3, r4
 800674a:	bf0c      	ite	eq
 800674c:	f8c8 2000 	streq.w	r2, [r8]
 8006750:	605a      	strne	r2, [r3, #4]
 8006752:	e7eb      	b.n	800672c <_malloc_r+0xa8>
 8006754:	4623      	mov	r3, r4
 8006756:	6864      	ldr	r4, [r4, #4]
 8006758:	e7ae      	b.n	80066b8 <_malloc_r+0x34>
 800675a:	463c      	mov	r4, r7
 800675c:	687f      	ldr	r7, [r7, #4]
 800675e:	e7b6      	b.n	80066ce <_malloc_r+0x4a>
 8006760:	461a      	mov	r2, r3
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	42a3      	cmp	r3, r4
 8006766:	d1fb      	bne.n	8006760 <_malloc_r+0xdc>
 8006768:	2300      	movs	r3, #0
 800676a:	6053      	str	r3, [r2, #4]
 800676c:	e7de      	b.n	800672c <_malloc_r+0xa8>
 800676e:	230c      	movs	r3, #12
 8006770:	4630      	mov	r0, r6
 8006772:	6033      	str	r3, [r6, #0]
 8006774:	f000 f80c 	bl	8006790 <__malloc_unlock>
 8006778:	e794      	b.n	80066a4 <_malloc_r+0x20>
 800677a:	6005      	str	r5, [r0, #0]
 800677c:	e7d6      	b.n	800672c <_malloc_r+0xa8>
 800677e:	bf00      	nop
 8006780:	200040c8 	.word	0x200040c8

08006784 <__malloc_lock>:
 8006784:	4801      	ldr	r0, [pc, #4]	@ (800678c <__malloc_lock+0x8>)
 8006786:	f7ff bf02 	b.w	800658e <__retarget_lock_acquire_recursive>
 800678a:	bf00      	nop
 800678c:	200040c0 	.word	0x200040c0

08006790 <__malloc_unlock>:
 8006790:	4801      	ldr	r0, [pc, #4]	@ (8006798 <__malloc_unlock+0x8>)
 8006792:	f7ff befd 	b.w	8006590 <__retarget_lock_release_recursive>
 8006796:	bf00      	nop
 8006798:	200040c0 	.word	0x200040c0

0800679c <__sfputc_r>:
 800679c:	6893      	ldr	r3, [r2, #8]
 800679e:	b410      	push	{r4}
 80067a0:	3b01      	subs	r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	6093      	str	r3, [r2, #8]
 80067a6:	da07      	bge.n	80067b8 <__sfputc_r+0x1c>
 80067a8:	6994      	ldr	r4, [r2, #24]
 80067aa:	42a3      	cmp	r3, r4
 80067ac:	db01      	blt.n	80067b2 <__sfputc_r+0x16>
 80067ae:	290a      	cmp	r1, #10
 80067b0:	d102      	bne.n	80067b8 <__sfputc_r+0x1c>
 80067b2:	bc10      	pop	{r4}
 80067b4:	f7ff bddd 	b.w	8006372 <__swbuf_r>
 80067b8:	6813      	ldr	r3, [r2, #0]
 80067ba:	1c58      	adds	r0, r3, #1
 80067bc:	6010      	str	r0, [r2, #0]
 80067be:	7019      	strb	r1, [r3, #0]
 80067c0:	4608      	mov	r0, r1
 80067c2:	bc10      	pop	{r4}
 80067c4:	4770      	bx	lr

080067c6 <__sfputs_r>:
 80067c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c8:	4606      	mov	r6, r0
 80067ca:	460f      	mov	r7, r1
 80067cc:	4614      	mov	r4, r2
 80067ce:	18d5      	adds	r5, r2, r3
 80067d0:	42ac      	cmp	r4, r5
 80067d2:	d101      	bne.n	80067d8 <__sfputs_r+0x12>
 80067d4:	2000      	movs	r0, #0
 80067d6:	e007      	b.n	80067e8 <__sfputs_r+0x22>
 80067d8:	463a      	mov	r2, r7
 80067da:	4630      	mov	r0, r6
 80067dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067e0:	f7ff ffdc 	bl	800679c <__sfputc_r>
 80067e4:	1c43      	adds	r3, r0, #1
 80067e6:	d1f3      	bne.n	80067d0 <__sfputs_r+0xa>
 80067e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080067ec <_vfiprintf_r>:
 80067ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f0:	460d      	mov	r5, r1
 80067f2:	4614      	mov	r4, r2
 80067f4:	4698      	mov	r8, r3
 80067f6:	4606      	mov	r6, r0
 80067f8:	b09d      	sub	sp, #116	@ 0x74
 80067fa:	b118      	cbz	r0, 8006804 <_vfiprintf_r+0x18>
 80067fc:	6a03      	ldr	r3, [r0, #32]
 80067fe:	b90b      	cbnz	r3, 8006804 <_vfiprintf_r+0x18>
 8006800:	f7ff fcce 	bl	80061a0 <__sinit>
 8006804:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006806:	07d9      	lsls	r1, r3, #31
 8006808:	d405      	bmi.n	8006816 <_vfiprintf_r+0x2a>
 800680a:	89ab      	ldrh	r3, [r5, #12]
 800680c:	059a      	lsls	r2, r3, #22
 800680e:	d402      	bmi.n	8006816 <_vfiprintf_r+0x2a>
 8006810:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006812:	f7ff febc 	bl	800658e <__retarget_lock_acquire_recursive>
 8006816:	89ab      	ldrh	r3, [r5, #12]
 8006818:	071b      	lsls	r3, r3, #28
 800681a:	d501      	bpl.n	8006820 <_vfiprintf_r+0x34>
 800681c:	692b      	ldr	r3, [r5, #16]
 800681e:	b99b      	cbnz	r3, 8006848 <_vfiprintf_r+0x5c>
 8006820:	4629      	mov	r1, r5
 8006822:	4630      	mov	r0, r6
 8006824:	f7ff fde4 	bl	80063f0 <__swsetup_r>
 8006828:	b170      	cbz	r0, 8006848 <_vfiprintf_r+0x5c>
 800682a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800682c:	07dc      	lsls	r4, r3, #31
 800682e:	d504      	bpl.n	800683a <_vfiprintf_r+0x4e>
 8006830:	f04f 30ff 	mov.w	r0, #4294967295
 8006834:	b01d      	add	sp, #116	@ 0x74
 8006836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800683a:	89ab      	ldrh	r3, [r5, #12]
 800683c:	0598      	lsls	r0, r3, #22
 800683e:	d4f7      	bmi.n	8006830 <_vfiprintf_r+0x44>
 8006840:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006842:	f7ff fea5 	bl	8006590 <__retarget_lock_release_recursive>
 8006846:	e7f3      	b.n	8006830 <_vfiprintf_r+0x44>
 8006848:	2300      	movs	r3, #0
 800684a:	9309      	str	r3, [sp, #36]	@ 0x24
 800684c:	2320      	movs	r3, #32
 800684e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006852:	2330      	movs	r3, #48	@ 0x30
 8006854:	f04f 0901 	mov.w	r9, #1
 8006858:	f8cd 800c 	str.w	r8, [sp, #12]
 800685c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006a08 <_vfiprintf_r+0x21c>
 8006860:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006864:	4623      	mov	r3, r4
 8006866:	469a      	mov	sl, r3
 8006868:	f813 2b01 	ldrb.w	r2, [r3], #1
 800686c:	b10a      	cbz	r2, 8006872 <_vfiprintf_r+0x86>
 800686e:	2a25      	cmp	r2, #37	@ 0x25
 8006870:	d1f9      	bne.n	8006866 <_vfiprintf_r+0x7a>
 8006872:	ebba 0b04 	subs.w	fp, sl, r4
 8006876:	d00b      	beq.n	8006890 <_vfiprintf_r+0xa4>
 8006878:	465b      	mov	r3, fp
 800687a:	4622      	mov	r2, r4
 800687c:	4629      	mov	r1, r5
 800687e:	4630      	mov	r0, r6
 8006880:	f7ff ffa1 	bl	80067c6 <__sfputs_r>
 8006884:	3001      	adds	r0, #1
 8006886:	f000 80a7 	beq.w	80069d8 <_vfiprintf_r+0x1ec>
 800688a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800688c:	445a      	add	r2, fp
 800688e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006890:	f89a 3000 	ldrb.w	r3, [sl]
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 809f 	beq.w	80069d8 <_vfiprintf_r+0x1ec>
 800689a:	2300      	movs	r3, #0
 800689c:	f04f 32ff 	mov.w	r2, #4294967295
 80068a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068a4:	f10a 0a01 	add.w	sl, sl, #1
 80068a8:	9304      	str	r3, [sp, #16]
 80068aa:	9307      	str	r3, [sp, #28]
 80068ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80068b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80068b2:	4654      	mov	r4, sl
 80068b4:	2205      	movs	r2, #5
 80068b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068ba:	4853      	ldr	r0, [pc, #332]	@ (8006a08 <_vfiprintf_r+0x21c>)
 80068bc:	f000 fb7a 	bl	8006fb4 <memchr>
 80068c0:	9a04      	ldr	r2, [sp, #16]
 80068c2:	b9d8      	cbnz	r0, 80068fc <_vfiprintf_r+0x110>
 80068c4:	06d1      	lsls	r1, r2, #27
 80068c6:	bf44      	itt	mi
 80068c8:	2320      	movmi	r3, #32
 80068ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068ce:	0713      	lsls	r3, r2, #28
 80068d0:	bf44      	itt	mi
 80068d2:	232b      	movmi	r3, #43	@ 0x2b
 80068d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068d8:	f89a 3000 	ldrb.w	r3, [sl]
 80068dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80068de:	d015      	beq.n	800690c <_vfiprintf_r+0x120>
 80068e0:	4654      	mov	r4, sl
 80068e2:	2000      	movs	r0, #0
 80068e4:	f04f 0c0a 	mov.w	ip, #10
 80068e8:	9a07      	ldr	r2, [sp, #28]
 80068ea:	4621      	mov	r1, r4
 80068ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068f0:	3b30      	subs	r3, #48	@ 0x30
 80068f2:	2b09      	cmp	r3, #9
 80068f4:	d94b      	bls.n	800698e <_vfiprintf_r+0x1a2>
 80068f6:	b1b0      	cbz	r0, 8006926 <_vfiprintf_r+0x13a>
 80068f8:	9207      	str	r2, [sp, #28]
 80068fa:	e014      	b.n	8006926 <_vfiprintf_r+0x13a>
 80068fc:	eba0 0308 	sub.w	r3, r0, r8
 8006900:	fa09 f303 	lsl.w	r3, r9, r3
 8006904:	4313      	orrs	r3, r2
 8006906:	46a2      	mov	sl, r4
 8006908:	9304      	str	r3, [sp, #16]
 800690a:	e7d2      	b.n	80068b2 <_vfiprintf_r+0xc6>
 800690c:	9b03      	ldr	r3, [sp, #12]
 800690e:	1d19      	adds	r1, r3, #4
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	9103      	str	r1, [sp, #12]
 8006914:	2b00      	cmp	r3, #0
 8006916:	bfbb      	ittet	lt
 8006918:	425b      	neglt	r3, r3
 800691a:	f042 0202 	orrlt.w	r2, r2, #2
 800691e:	9307      	strge	r3, [sp, #28]
 8006920:	9307      	strlt	r3, [sp, #28]
 8006922:	bfb8      	it	lt
 8006924:	9204      	strlt	r2, [sp, #16]
 8006926:	7823      	ldrb	r3, [r4, #0]
 8006928:	2b2e      	cmp	r3, #46	@ 0x2e
 800692a:	d10a      	bne.n	8006942 <_vfiprintf_r+0x156>
 800692c:	7863      	ldrb	r3, [r4, #1]
 800692e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006930:	d132      	bne.n	8006998 <_vfiprintf_r+0x1ac>
 8006932:	9b03      	ldr	r3, [sp, #12]
 8006934:	3402      	adds	r4, #2
 8006936:	1d1a      	adds	r2, r3, #4
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	9203      	str	r2, [sp, #12]
 800693c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006940:	9305      	str	r3, [sp, #20]
 8006942:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006a0c <_vfiprintf_r+0x220>
 8006946:	2203      	movs	r2, #3
 8006948:	4650      	mov	r0, sl
 800694a:	7821      	ldrb	r1, [r4, #0]
 800694c:	f000 fb32 	bl	8006fb4 <memchr>
 8006950:	b138      	cbz	r0, 8006962 <_vfiprintf_r+0x176>
 8006952:	2240      	movs	r2, #64	@ 0x40
 8006954:	9b04      	ldr	r3, [sp, #16]
 8006956:	eba0 000a 	sub.w	r0, r0, sl
 800695a:	4082      	lsls	r2, r0
 800695c:	4313      	orrs	r3, r2
 800695e:	3401      	adds	r4, #1
 8006960:	9304      	str	r3, [sp, #16]
 8006962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006966:	2206      	movs	r2, #6
 8006968:	4829      	ldr	r0, [pc, #164]	@ (8006a10 <_vfiprintf_r+0x224>)
 800696a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800696e:	f000 fb21 	bl	8006fb4 <memchr>
 8006972:	2800      	cmp	r0, #0
 8006974:	d03f      	beq.n	80069f6 <_vfiprintf_r+0x20a>
 8006976:	4b27      	ldr	r3, [pc, #156]	@ (8006a14 <_vfiprintf_r+0x228>)
 8006978:	bb1b      	cbnz	r3, 80069c2 <_vfiprintf_r+0x1d6>
 800697a:	9b03      	ldr	r3, [sp, #12]
 800697c:	3307      	adds	r3, #7
 800697e:	f023 0307 	bic.w	r3, r3, #7
 8006982:	3308      	adds	r3, #8
 8006984:	9303      	str	r3, [sp, #12]
 8006986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006988:	443b      	add	r3, r7
 800698a:	9309      	str	r3, [sp, #36]	@ 0x24
 800698c:	e76a      	b.n	8006864 <_vfiprintf_r+0x78>
 800698e:	460c      	mov	r4, r1
 8006990:	2001      	movs	r0, #1
 8006992:	fb0c 3202 	mla	r2, ip, r2, r3
 8006996:	e7a8      	b.n	80068ea <_vfiprintf_r+0xfe>
 8006998:	2300      	movs	r3, #0
 800699a:	f04f 0c0a 	mov.w	ip, #10
 800699e:	4619      	mov	r1, r3
 80069a0:	3401      	adds	r4, #1
 80069a2:	9305      	str	r3, [sp, #20]
 80069a4:	4620      	mov	r0, r4
 80069a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069aa:	3a30      	subs	r2, #48	@ 0x30
 80069ac:	2a09      	cmp	r2, #9
 80069ae:	d903      	bls.n	80069b8 <_vfiprintf_r+0x1cc>
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d0c6      	beq.n	8006942 <_vfiprintf_r+0x156>
 80069b4:	9105      	str	r1, [sp, #20]
 80069b6:	e7c4      	b.n	8006942 <_vfiprintf_r+0x156>
 80069b8:	4604      	mov	r4, r0
 80069ba:	2301      	movs	r3, #1
 80069bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80069c0:	e7f0      	b.n	80069a4 <_vfiprintf_r+0x1b8>
 80069c2:	ab03      	add	r3, sp, #12
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	462a      	mov	r2, r5
 80069c8:	4630      	mov	r0, r6
 80069ca:	4b13      	ldr	r3, [pc, #76]	@ (8006a18 <_vfiprintf_r+0x22c>)
 80069cc:	a904      	add	r1, sp, #16
 80069ce:	f3af 8000 	nop.w
 80069d2:	4607      	mov	r7, r0
 80069d4:	1c78      	adds	r0, r7, #1
 80069d6:	d1d6      	bne.n	8006986 <_vfiprintf_r+0x19a>
 80069d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069da:	07d9      	lsls	r1, r3, #31
 80069dc:	d405      	bmi.n	80069ea <_vfiprintf_r+0x1fe>
 80069de:	89ab      	ldrh	r3, [r5, #12]
 80069e0:	059a      	lsls	r2, r3, #22
 80069e2:	d402      	bmi.n	80069ea <_vfiprintf_r+0x1fe>
 80069e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069e6:	f7ff fdd3 	bl	8006590 <__retarget_lock_release_recursive>
 80069ea:	89ab      	ldrh	r3, [r5, #12]
 80069ec:	065b      	lsls	r3, r3, #25
 80069ee:	f53f af1f 	bmi.w	8006830 <_vfiprintf_r+0x44>
 80069f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069f4:	e71e      	b.n	8006834 <_vfiprintf_r+0x48>
 80069f6:	ab03      	add	r3, sp, #12
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	462a      	mov	r2, r5
 80069fc:	4630      	mov	r0, r6
 80069fe:	4b06      	ldr	r3, [pc, #24]	@ (8006a18 <_vfiprintf_r+0x22c>)
 8006a00:	a904      	add	r1, sp, #16
 8006a02:	f000 f87d 	bl	8006b00 <_printf_i>
 8006a06:	e7e4      	b.n	80069d2 <_vfiprintf_r+0x1e6>
 8006a08:	08007372 	.word	0x08007372
 8006a0c:	08007378 	.word	0x08007378
 8006a10:	0800737c 	.word	0x0800737c
 8006a14:	00000000 	.word	0x00000000
 8006a18:	080067c7 	.word	0x080067c7

08006a1c <_printf_common>:
 8006a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a20:	4616      	mov	r6, r2
 8006a22:	4698      	mov	r8, r3
 8006a24:	688a      	ldr	r2, [r1, #8]
 8006a26:	690b      	ldr	r3, [r1, #16]
 8006a28:	4607      	mov	r7, r0
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	bfb8      	it	lt
 8006a2e:	4613      	movlt	r3, r2
 8006a30:	6033      	str	r3, [r6, #0]
 8006a32:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a36:	460c      	mov	r4, r1
 8006a38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a3c:	b10a      	cbz	r2, 8006a42 <_printf_common+0x26>
 8006a3e:	3301      	adds	r3, #1
 8006a40:	6033      	str	r3, [r6, #0]
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	0699      	lsls	r1, r3, #26
 8006a46:	bf42      	ittt	mi
 8006a48:	6833      	ldrmi	r3, [r6, #0]
 8006a4a:	3302      	addmi	r3, #2
 8006a4c:	6033      	strmi	r3, [r6, #0]
 8006a4e:	6825      	ldr	r5, [r4, #0]
 8006a50:	f015 0506 	ands.w	r5, r5, #6
 8006a54:	d106      	bne.n	8006a64 <_printf_common+0x48>
 8006a56:	f104 0a19 	add.w	sl, r4, #25
 8006a5a:	68e3      	ldr	r3, [r4, #12]
 8006a5c:	6832      	ldr	r2, [r6, #0]
 8006a5e:	1a9b      	subs	r3, r3, r2
 8006a60:	42ab      	cmp	r3, r5
 8006a62:	dc2b      	bgt.n	8006abc <_printf_common+0xa0>
 8006a64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a68:	6822      	ldr	r2, [r4, #0]
 8006a6a:	3b00      	subs	r3, #0
 8006a6c:	bf18      	it	ne
 8006a6e:	2301      	movne	r3, #1
 8006a70:	0692      	lsls	r2, r2, #26
 8006a72:	d430      	bmi.n	8006ad6 <_printf_common+0xba>
 8006a74:	4641      	mov	r1, r8
 8006a76:	4638      	mov	r0, r7
 8006a78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a7c:	47c8      	blx	r9
 8006a7e:	3001      	adds	r0, #1
 8006a80:	d023      	beq.n	8006aca <_printf_common+0xae>
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	6922      	ldr	r2, [r4, #16]
 8006a86:	f003 0306 	and.w	r3, r3, #6
 8006a8a:	2b04      	cmp	r3, #4
 8006a8c:	bf14      	ite	ne
 8006a8e:	2500      	movne	r5, #0
 8006a90:	6833      	ldreq	r3, [r6, #0]
 8006a92:	f04f 0600 	mov.w	r6, #0
 8006a96:	bf08      	it	eq
 8006a98:	68e5      	ldreq	r5, [r4, #12]
 8006a9a:	f104 041a 	add.w	r4, r4, #26
 8006a9e:	bf08      	it	eq
 8006aa0:	1aed      	subeq	r5, r5, r3
 8006aa2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006aa6:	bf08      	it	eq
 8006aa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006aac:	4293      	cmp	r3, r2
 8006aae:	bfc4      	itt	gt
 8006ab0:	1a9b      	subgt	r3, r3, r2
 8006ab2:	18ed      	addgt	r5, r5, r3
 8006ab4:	42b5      	cmp	r5, r6
 8006ab6:	d11a      	bne.n	8006aee <_printf_common+0xd2>
 8006ab8:	2000      	movs	r0, #0
 8006aba:	e008      	b.n	8006ace <_printf_common+0xb2>
 8006abc:	2301      	movs	r3, #1
 8006abe:	4652      	mov	r2, sl
 8006ac0:	4641      	mov	r1, r8
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	47c8      	blx	r9
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	d103      	bne.n	8006ad2 <_printf_common+0xb6>
 8006aca:	f04f 30ff 	mov.w	r0, #4294967295
 8006ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad2:	3501      	adds	r5, #1
 8006ad4:	e7c1      	b.n	8006a5a <_printf_common+0x3e>
 8006ad6:	2030      	movs	r0, #48	@ 0x30
 8006ad8:	18e1      	adds	r1, r4, r3
 8006ada:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ade:	1c5a      	adds	r2, r3, #1
 8006ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ae4:	4422      	add	r2, r4
 8006ae6:	3302      	adds	r3, #2
 8006ae8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006aec:	e7c2      	b.n	8006a74 <_printf_common+0x58>
 8006aee:	2301      	movs	r3, #1
 8006af0:	4622      	mov	r2, r4
 8006af2:	4641      	mov	r1, r8
 8006af4:	4638      	mov	r0, r7
 8006af6:	47c8      	blx	r9
 8006af8:	3001      	adds	r0, #1
 8006afa:	d0e6      	beq.n	8006aca <_printf_common+0xae>
 8006afc:	3601      	adds	r6, #1
 8006afe:	e7d9      	b.n	8006ab4 <_printf_common+0x98>

08006b00 <_printf_i>:
 8006b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b04:	7e0f      	ldrb	r7, [r1, #24]
 8006b06:	4691      	mov	r9, r2
 8006b08:	2f78      	cmp	r7, #120	@ 0x78
 8006b0a:	4680      	mov	r8, r0
 8006b0c:	460c      	mov	r4, r1
 8006b0e:	469a      	mov	sl, r3
 8006b10:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b16:	d807      	bhi.n	8006b28 <_printf_i+0x28>
 8006b18:	2f62      	cmp	r7, #98	@ 0x62
 8006b1a:	d80a      	bhi.n	8006b32 <_printf_i+0x32>
 8006b1c:	2f00      	cmp	r7, #0
 8006b1e:	f000 80d1 	beq.w	8006cc4 <_printf_i+0x1c4>
 8006b22:	2f58      	cmp	r7, #88	@ 0x58
 8006b24:	f000 80b8 	beq.w	8006c98 <_printf_i+0x198>
 8006b28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b30:	e03a      	b.n	8006ba8 <_printf_i+0xa8>
 8006b32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b36:	2b15      	cmp	r3, #21
 8006b38:	d8f6      	bhi.n	8006b28 <_printf_i+0x28>
 8006b3a:	a101      	add	r1, pc, #4	@ (adr r1, 8006b40 <_printf_i+0x40>)
 8006b3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b40:	08006b99 	.word	0x08006b99
 8006b44:	08006bad 	.word	0x08006bad
 8006b48:	08006b29 	.word	0x08006b29
 8006b4c:	08006b29 	.word	0x08006b29
 8006b50:	08006b29 	.word	0x08006b29
 8006b54:	08006b29 	.word	0x08006b29
 8006b58:	08006bad 	.word	0x08006bad
 8006b5c:	08006b29 	.word	0x08006b29
 8006b60:	08006b29 	.word	0x08006b29
 8006b64:	08006b29 	.word	0x08006b29
 8006b68:	08006b29 	.word	0x08006b29
 8006b6c:	08006cab 	.word	0x08006cab
 8006b70:	08006bd7 	.word	0x08006bd7
 8006b74:	08006c65 	.word	0x08006c65
 8006b78:	08006b29 	.word	0x08006b29
 8006b7c:	08006b29 	.word	0x08006b29
 8006b80:	08006ccd 	.word	0x08006ccd
 8006b84:	08006b29 	.word	0x08006b29
 8006b88:	08006bd7 	.word	0x08006bd7
 8006b8c:	08006b29 	.word	0x08006b29
 8006b90:	08006b29 	.word	0x08006b29
 8006b94:	08006c6d 	.word	0x08006c6d
 8006b98:	6833      	ldr	r3, [r6, #0]
 8006b9a:	1d1a      	adds	r2, r3, #4
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6032      	str	r2, [r6, #0]
 8006ba0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ba4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e09c      	b.n	8006ce6 <_printf_i+0x1e6>
 8006bac:	6833      	ldr	r3, [r6, #0]
 8006bae:	6820      	ldr	r0, [r4, #0]
 8006bb0:	1d19      	adds	r1, r3, #4
 8006bb2:	6031      	str	r1, [r6, #0]
 8006bb4:	0606      	lsls	r6, r0, #24
 8006bb6:	d501      	bpl.n	8006bbc <_printf_i+0xbc>
 8006bb8:	681d      	ldr	r5, [r3, #0]
 8006bba:	e003      	b.n	8006bc4 <_printf_i+0xc4>
 8006bbc:	0645      	lsls	r5, r0, #25
 8006bbe:	d5fb      	bpl.n	8006bb8 <_printf_i+0xb8>
 8006bc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006bc4:	2d00      	cmp	r5, #0
 8006bc6:	da03      	bge.n	8006bd0 <_printf_i+0xd0>
 8006bc8:	232d      	movs	r3, #45	@ 0x2d
 8006bca:	426d      	negs	r5, r5
 8006bcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bd0:	230a      	movs	r3, #10
 8006bd2:	4858      	ldr	r0, [pc, #352]	@ (8006d34 <_printf_i+0x234>)
 8006bd4:	e011      	b.n	8006bfa <_printf_i+0xfa>
 8006bd6:	6821      	ldr	r1, [r4, #0]
 8006bd8:	6833      	ldr	r3, [r6, #0]
 8006bda:	0608      	lsls	r0, r1, #24
 8006bdc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006be0:	d402      	bmi.n	8006be8 <_printf_i+0xe8>
 8006be2:	0649      	lsls	r1, r1, #25
 8006be4:	bf48      	it	mi
 8006be6:	b2ad      	uxthmi	r5, r5
 8006be8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006bea:	6033      	str	r3, [r6, #0]
 8006bec:	bf14      	ite	ne
 8006bee:	230a      	movne	r3, #10
 8006bf0:	2308      	moveq	r3, #8
 8006bf2:	4850      	ldr	r0, [pc, #320]	@ (8006d34 <_printf_i+0x234>)
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006bfa:	6866      	ldr	r6, [r4, #4]
 8006bfc:	2e00      	cmp	r6, #0
 8006bfe:	60a6      	str	r6, [r4, #8]
 8006c00:	db05      	blt.n	8006c0e <_printf_i+0x10e>
 8006c02:	6821      	ldr	r1, [r4, #0]
 8006c04:	432e      	orrs	r6, r5
 8006c06:	f021 0104 	bic.w	r1, r1, #4
 8006c0a:	6021      	str	r1, [r4, #0]
 8006c0c:	d04b      	beq.n	8006ca6 <_printf_i+0x1a6>
 8006c0e:	4616      	mov	r6, r2
 8006c10:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c14:	fb03 5711 	mls	r7, r3, r1, r5
 8006c18:	5dc7      	ldrb	r7, [r0, r7]
 8006c1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c1e:	462f      	mov	r7, r5
 8006c20:	42bb      	cmp	r3, r7
 8006c22:	460d      	mov	r5, r1
 8006c24:	d9f4      	bls.n	8006c10 <_printf_i+0x110>
 8006c26:	2b08      	cmp	r3, #8
 8006c28:	d10b      	bne.n	8006c42 <_printf_i+0x142>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	07df      	lsls	r7, r3, #31
 8006c2e:	d508      	bpl.n	8006c42 <_printf_i+0x142>
 8006c30:	6923      	ldr	r3, [r4, #16]
 8006c32:	6861      	ldr	r1, [r4, #4]
 8006c34:	4299      	cmp	r1, r3
 8006c36:	bfde      	ittt	le
 8006c38:	2330      	movle	r3, #48	@ 0x30
 8006c3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c42:	1b92      	subs	r2, r2, r6
 8006c44:	6122      	str	r2, [r4, #16]
 8006c46:	464b      	mov	r3, r9
 8006c48:	4621      	mov	r1, r4
 8006c4a:	4640      	mov	r0, r8
 8006c4c:	f8cd a000 	str.w	sl, [sp]
 8006c50:	aa03      	add	r2, sp, #12
 8006c52:	f7ff fee3 	bl	8006a1c <_printf_common>
 8006c56:	3001      	adds	r0, #1
 8006c58:	d14a      	bne.n	8006cf0 <_printf_i+0x1f0>
 8006c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5e:	b004      	add	sp, #16
 8006c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	f043 0320 	orr.w	r3, r3, #32
 8006c6a:	6023      	str	r3, [r4, #0]
 8006c6c:	2778      	movs	r7, #120	@ 0x78
 8006c6e:	4832      	ldr	r0, [pc, #200]	@ (8006d38 <_printf_i+0x238>)
 8006c70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c74:	6823      	ldr	r3, [r4, #0]
 8006c76:	6831      	ldr	r1, [r6, #0]
 8006c78:	061f      	lsls	r7, r3, #24
 8006c7a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c7e:	d402      	bmi.n	8006c86 <_printf_i+0x186>
 8006c80:	065f      	lsls	r7, r3, #25
 8006c82:	bf48      	it	mi
 8006c84:	b2ad      	uxthmi	r5, r5
 8006c86:	6031      	str	r1, [r6, #0]
 8006c88:	07d9      	lsls	r1, r3, #31
 8006c8a:	bf44      	itt	mi
 8006c8c:	f043 0320 	orrmi.w	r3, r3, #32
 8006c90:	6023      	strmi	r3, [r4, #0]
 8006c92:	b11d      	cbz	r5, 8006c9c <_printf_i+0x19c>
 8006c94:	2310      	movs	r3, #16
 8006c96:	e7ad      	b.n	8006bf4 <_printf_i+0xf4>
 8006c98:	4826      	ldr	r0, [pc, #152]	@ (8006d34 <_printf_i+0x234>)
 8006c9a:	e7e9      	b.n	8006c70 <_printf_i+0x170>
 8006c9c:	6823      	ldr	r3, [r4, #0]
 8006c9e:	f023 0320 	bic.w	r3, r3, #32
 8006ca2:	6023      	str	r3, [r4, #0]
 8006ca4:	e7f6      	b.n	8006c94 <_printf_i+0x194>
 8006ca6:	4616      	mov	r6, r2
 8006ca8:	e7bd      	b.n	8006c26 <_printf_i+0x126>
 8006caa:	6833      	ldr	r3, [r6, #0]
 8006cac:	6825      	ldr	r5, [r4, #0]
 8006cae:	1d18      	adds	r0, r3, #4
 8006cb0:	6961      	ldr	r1, [r4, #20]
 8006cb2:	6030      	str	r0, [r6, #0]
 8006cb4:	062e      	lsls	r6, r5, #24
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	d501      	bpl.n	8006cbe <_printf_i+0x1be>
 8006cba:	6019      	str	r1, [r3, #0]
 8006cbc:	e002      	b.n	8006cc4 <_printf_i+0x1c4>
 8006cbe:	0668      	lsls	r0, r5, #25
 8006cc0:	d5fb      	bpl.n	8006cba <_printf_i+0x1ba>
 8006cc2:	8019      	strh	r1, [r3, #0]
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	4616      	mov	r6, r2
 8006cc8:	6123      	str	r3, [r4, #16]
 8006cca:	e7bc      	b.n	8006c46 <_printf_i+0x146>
 8006ccc:	6833      	ldr	r3, [r6, #0]
 8006cce:	2100      	movs	r1, #0
 8006cd0:	1d1a      	adds	r2, r3, #4
 8006cd2:	6032      	str	r2, [r6, #0]
 8006cd4:	681e      	ldr	r6, [r3, #0]
 8006cd6:	6862      	ldr	r2, [r4, #4]
 8006cd8:	4630      	mov	r0, r6
 8006cda:	f000 f96b 	bl	8006fb4 <memchr>
 8006cde:	b108      	cbz	r0, 8006ce4 <_printf_i+0x1e4>
 8006ce0:	1b80      	subs	r0, r0, r6
 8006ce2:	6060      	str	r0, [r4, #4]
 8006ce4:	6863      	ldr	r3, [r4, #4]
 8006ce6:	6123      	str	r3, [r4, #16]
 8006ce8:	2300      	movs	r3, #0
 8006cea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cee:	e7aa      	b.n	8006c46 <_printf_i+0x146>
 8006cf0:	4632      	mov	r2, r6
 8006cf2:	4649      	mov	r1, r9
 8006cf4:	4640      	mov	r0, r8
 8006cf6:	6923      	ldr	r3, [r4, #16]
 8006cf8:	47d0      	blx	sl
 8006cfa:	3001      	adds	r0, #1
 8006cfc:	d0ad      	beq.n	8006c5a <_printf_i+0x15a>
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	079b      	lsls	r3, r3, #30
 8006d02:	d413      	bmi.n	8006d2c <_printf_i+0x22c>
 8006d04:	68e0      	ldr	r0, [r4, #12]
 8006d06:	9b03      	ldr	r3, [sp, #12]
 8006d08:	4298      	cmp	r0, r3
 8006d0a:	bfb8      	it	lt
 8006d0c:	4618      	movlt	r0, r3
 8006d0e:	e7a6      	b.n	8006c5e <_printf_i+0x15e>
 8006d10:	2301      	movs	r3, #1
 8006d12:	4632      	mov	r2, r6
 8006d14:	4649      	mov	r1, r9
 8006d16:	4640      	mov	r0, r8
 8006d18:	47d0      	blx	sl
 8006d1a:	3001      	adds	r0, #1
 8006d1c:	d09d      	beq.n	8006c5a <_printf_i+0x15a>
 8006d1e:	3501      	adds	r5, #1
 8006d20:	68e3      	ldr	r3, [r4, #12]
 8006d22:	9903      	ldr	r1, [sp, #12]
 8006d24:	1a5b      	subs	r3, r3, r1
 8006d26:	42ab      	cmp	r3, r5
 8006d28:	dcf2      	bgt.n	8006d10 <_printf_i+0x210>
 8006d2a:	e7eb      	b.n	8006d04 <_printf_i+0x204>
 8006d2c:	2500      	movs	r5, #0
 8006d2e:	f104 0619 	add.w	r6, r4, #25
 8006d32:	e7f5      	b.n	8006d20 <_printf_i+0x220>
 8006d34:	08007383 	.word	0x08007383
 8006d38:	08007394 	.word	0x08007394

08006d3c <__sflush_r>:
 8006d3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d42:	0716      	lsls	r6, r2, #28
 8006d44:	4605      	mov	r5, r0
 8006d46:	460c      	mov	r4, r1
 8006d48:	d454      	bmi.n	8006df4 <__sflush_r+0xb8>
 8006d4a:	684b      	ldr	r3, [r1, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	dc02      	bgt.n	8006d56 <__sflush_r+0x1a>
 8006d50:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	dd48      	ble.n	8006de8 <__sflush_r+0xac>
 8006d56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d58:	2e00      	cmp	r6, #0
 8006d5a:	d045      	beq.n	8006de8 <__sflush_r+0xac>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d62:	682f      	ldr	r7, [r5, #0]
 8006d64:	6a21      	ldr	r1, [r4, #32]
 8006d66:	602b      	str	r3, [r5, #0]
 8006d68:	d030      	beq.n	8006dcc <__sflush_r+0x90>
 8006d6a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d6c:	89a3      	ldrh	r3, [r4, #12]
 8006d6e:	0759      	lsls	r1, r3, #29
 8006d70:	d505      	bpl.n	8006d7e <__sflush_r+0x42>
 8006d72:	6863      	ldr	r3, [r4, #4]
 8006d74:	1ad2      	subs	r2, r2, r3
 8006d76:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d78:	b10b      	cbz	r3, 8006d7e <__sflush_r+0x42>
 8006d7a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d7c:	1ad2      	subs	r2, r2, r3
 8006d7e:	2300      	movs	r3, #0
 8006d80:	4628      	mov	r0, r5
 8006d82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d84:	6a21      	ldr	r1, [r4, #32]
 8006d86:	47b0      	blx	r6
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	d106      	bne.n	8006d9c <__sflush_r+0x60>
 8006d8e:	6829      	ldr	r1, [r5, #0]
 8006d90:	291d      	cmp	r1, #29
 8006d92:	d82b      	bhi.n	8006dec <__sflush_r+0xb0>
 8006d94:	4a28      	ldr	r2, [pc, #160]	@ (8006e38 <__sflush_r+0xfc>)
 8006d96:	40ca      	lsrs	r2, r1
 8006d98:	07d6      	lsls	r6, r2, #31
 8006d9a:	d527      	bpl.n	8006dec <__sflush_r+0xb0>
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	6062      	str	r2, [r4, #4]
 8006da0:	6922      	ldr	r2, [r4, #16]
 8006da2:	04d9      	lsls	r1, r3, #19
 8006da4:	6022      	str	r2, [r4, #0]
 8006da6:	d504      	bpl.n	8006db2 <__sflush_r+0x76>
 8006da8:	1c42      	adds	r2, r0, #1
 8006daa:	d101      	bne.n	8006db0 <__sflush_r+0x74>
 8006dac:	682b      	ldr	r3, [r5, #0]
 8006dae:	b903      	cbnz	r3, 8006db2 <__sflush_r+0x76>
 8006db0:	6560      	str	r0, [r4, #84]	@ 0x54
 8006db2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006db4:	602f      	str	r7, [r5, #0]
 8006db6:	b1b9      	cbz	r1, 8006de8 <__sflush_r+0xac>
 8006db8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006dbc:	4299      	cmp	r1, r3
 8006dbe:	d002      	beq.n	8006dc6 <__sflush_r+0x8a>
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	f7ff fbf5 	bl	80065b0 <_free_r>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006dca:	e00d      	b.n	8006de8 <__sflush_r+0xac>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	4628      	mov	r0, r5
 8006dd0:	47b0      	blx	r6
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	1c50      	adds	r0, r2, #1
 8006dd6:	d1c9      	bne.n	8006d6c <__sflush_r+0x30>
 8006dd8:	682b      	ldr	r3, [r5, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d0c6      	beq.n	8006d6c <__sflush_r+0x30>
 8006dde:	2b1d      	cmp	r3, #29
 8006de0:	d001      	beq.n	8006de6 <__sflush_r+0xaa>
 8006de2:	2b16      	cmp	r3, #22
 8006de4:	d11d      	bne.n	8006e22 <__sflush_r+0xe6>
 8006de6:	602f      	str	r7, [r5, #0]
 8006de8:	2000      	movs	r0, #0
 8006dea:	e021      	b.n	8006e30 <__sflush_r+0xf4>
 8006dec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006df0:	b21b      	sxth	r3, r3
 8006df2:	e01a      	b.n	8006e2a <__sflush_r+0xee>
 8006df4:	690f      	ldr	r7, [r1, #16]
 8006df6:	2f00      	cmp	r7, #0
 8006df8:	d0f6      	beq.n	8006de8 <__sflush_r+0xac>
 8006dfa:	0793      	lsls	r3, r2, #30
 8006dfc:	bf18      	it	ne
 8006dfe:	2300      	movne	r3, #0
 8006e00:	680e      	ldr	r6, [r1, #0]
 8006e02:	bf08      	it	eq
 8006e04:	694b      	ldreq	r3, [r1, #20]
 8006e06:	1bf6      	subs	r6, r6, r7
 8006e08:	600f      	str	r7, [r1, #0]
 8006e0a:	608b      	str	r3, [r1, #8]
 8006e0c:	2e00      	cmp	r6, #0
 8006e0e:	ddeb      	ble.n	8006de8 <__sflush_r+0xac>
 8006e10:	4633      	mov	r3, r6
 8006e12:	463a      	mov	r2, r7
 8006e14:	4628      	mov	r0, r5
 8006e16:	6a21      	ldr	r1, [r4, #32]
 8006e18:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006e1c:	47e0      	blx	ip
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	dc07      	bgt.n	8006e32 <__sflush_r+0xf6>
 8006e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e2e:	81a3      	strh	r3, [r4, #12]
 8006e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e32:	4407      	add	r7, r0
 8006e34:	1a36      	subs	r6, r6, r0
 8006e36:	e7e9      	b.n	8006e0c <__sflush_r+0xd0>
 8006e38:	20400001 	.word	0x20400001

08006e3c <_fflush_r>:
 8006e3c:	b538      	push	{r3, r4, r5, lr}
 8006e3e:	690b      	ldr	r3, [r1, #16]
 8006e40:	4605      	mov	r5, r0
 8006e42:	460c      	mov	r4, r1
 8006e44:	b913      	cbnz	r3, 8006e4c <_fflush_r+0x10>
 8006e46:	2500      	movs	r5, #0
 8006e48:	4628      	mov	r0, r5
 8006e4a:	bd38      	pop	{r3, r4, r5, pc}
 8006e4c:	b118      	cbz	r0, 8006e56 <_fflush_r+0x1a>
 8006e4e:	6a03      	ldr	r3, [r0, #32]
 8006e50:	b90b      	cbnz	r3, 8006e56 <_fflush_r+0x1a>
 8006e52:	f7ff f9a5 	bl	80061a0 <__sinit>
 8006e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d0f3      	beq.n	8006e46 <_fflush_r+0xa>
 8006e5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e60:	07d0      	lsls	r0, r2, #31
 8006e62:	d404      	bmi.n	8006e6e <_fflush_r+0x32>
 8006e64:	0599      	lsls	r1, r3, #22
 8006e66:	d402      	bmi.n	8006e6e <_fflush_r+0x32>
 8006e68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e6a:	f7ff fb90 	bl	800658e <__retarget_lock_acquire_recursive>
 8006e6e:	4628      	mov	r0, r5
 8006e70:	4621      	mov	r1, r4
 8006e72:	f7ff ff63 	bl	8006d3c <__sflush_r>
 8006e76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e78:	4605      	mov	r5, r0
 8006e7a:	07da      	lsls	r2, r3, #31
 8006e7c:	d4e4      	bmi.n	8006e48 <_fflush_r+0xc>
 8006e7e:	89a3      	ldrh	r3, [r4, #12]
 8006e80:	059b      	lsls	r3, r3, #22
 8006e82:	d4e1      	bmi.n	8006e48 <_fflush_r+0xc>
 8006e84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e86:	f7ff fb83 	bl	8006590 <__retarget_lock_release_recursive>
 8006e8a:	e7dd      	b.n	8006e48 <_fflush_r+0xc>

08006e8c <__swhatbuf_r>:
 8006e8c:	b570      	push	{r4, r5, r6, lr}
 8006e8e:	460c      	mov	r4, r1
 8006e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e94:	4615      	mov	r5, r2
 8006e96:	2900      	cmp	r1, #0
 8006e98:	461e      	mov	r6, r3
 8006e9a:	b096      	sub	sp, #88	@ 0x58
 8006e9c:	da0c      	bge.n	8006eb8 <__swhatbuf_r+0x2c>
 8006e9e:	89a3      	ldrh	r3, [r4, #12]
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006ea6:	bf14      	ite	ne
 8006ea8:	2340      	movne	r3, #64	@ 0x40
 8006eaa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006eae:	2000      	movs	r0, #0
 8006eb0:	6031      	str	r1, [r6, #0]
 8006eb2:	602b      	str	r3, [r5, #0]
 8006eb4:	b016      	add	sp, #88	@ 0x58
 8006eb6:	bd70      	pop	{r4, r5, r6, pc}
 8006eb8:	466a      	mov	r2, sp
 8006eba:	f000 f849 	bl	8006f50 <_fstat_r>
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	dbed      	blt.n	8006e9e <__swhatbuf_r+0x12>
 8006ec2:	9901      	ldr	r1, [sp, #4]
 8006ec4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006ec8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006ecc:	4259      	negs	r1, r3
 8006ece:	4159      	adcs	r1, r3
 8006ed0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ed4:	e7eb      	b.n	8006eae <__swhatbuf_r+0x22>

08006ed6 <__smakebuf_r>:
 8006ed6:	898b      	ldrh	r3, [r1, #12]
 8006ed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006eda:	079d      	lsls	r5, r3, #30
 8006edc:	4606      	mov	r6, r0
 8006ede:	460c      	mov	r4, r1
 8006ee0:	d507      	bpl.n	8006ef2 <__smakebuf_r+0x1c>
 8006ee2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006ee6:	6023      	str	r3, [r4, #0]
 8006ee8:	6123      	str	r3, [r4, #16]
 8006eea:	2301      	movs	r3, #1
 8006eec:	6163      	str	r3, [r4, #20]
 8006eee:	b003      	add	sp, #12
 8006ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ef2:	466a      	mov	r2, sp
 8006ef4:	ab01      	add	r3, sp, #4
 8006ef6:	f7ff ffc9 	bl	8006e8c <__swhatbuf_r>
 8006efa:	9f00      	ldr	r7, [sp, #0]
 8006efc:	4605      	mov	r5, r0
 8006efe:	4639      	mov	r1, r7
 8006f00:	4630      	mov	r0, r6
 8006f02:	f7ff fbbf 	bl	8006684 <_malloc_r>
 8006f06:	b948      	cbnz	r0, 8006f1c <__smakebuf_r+0x46>
 8006f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f0c:	059a      	lsls	r2, r3, #22
 8006f0e:	d4ee      	bmi.n	8006eee <__smakebuf_r+0x18>
 8006f10:	f023 0303 	bic.w	r3, r3, #3
 8006f14:	f043 0302 	orr.w	r3, r3, #2
 8006f18:	81a3      	strh	r3, [r4, #12]
 8006f1a:	e7e2      	b.n	8006ee2 <__smakebuf_r+0xc>
 8006f1c:	89a3      	ldrh	r3, [r4, #12]
 8006f1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f26:	81a3      	strh	r3, [r4, #12]
 8006f28:	9b01      	ldr	r3, [sp, #4]
 8006f2a:	6020      	str	r0, [r4, #0]
 8006f2c:	b15b      	cbz	r3, 8006f46 <__smakebuf_r+0x70>
 8006f2e:	4630      	mov	r0, r6
 8006f30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f34:	f000 f81e 	bl	8006f74 <_isatty_r>
 8006f38:	b128      	cbz	r0, 8006f46 <__smakebuf_r+0x70>
 8006f3a:	89a3      	ldrh	r3, [r4, #12]
 8006f3c:	f023 0303 	bic.w	r3, r3, #3
 8006f40:	f043 0301 	orr.w	r3, r3, #1
 8006f44:	81a3      	strh	r3, [r4, #12]
 8006f46:	89a3      	ldrh	r3, [r4, #12]
 8006f48:	431d      	orrs	r5, r3
 8006f4a:	81a5      	strh	r5, [r4, #12]
 8006f4c:	e7cf      	b.n	8006eee <__smakebuf_r+0x18>
	...

08006f50 <_fstat_r>:
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	2300      	movs	r3, #0
 8006f54:	4d06      	ldr	r5, [pc, #24]	@ (8006f70 <_fstat_r+0x20>)
 8006f56:	4604      	mov	r4, r0
 8006f58:	4608      	mov	r0, r1
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	602b      	str	r3, [r5, #0]
 8006f5e:	f7fa fbae 	bl	80016be <_fstat>
 8006f62:	1c43      	adds	r3, r0, #1
 8006f64:	d102      	bne.n	8006f6c <_fstat_r+0x1c>
 8006f66:	682b      	ldr	r3, [r5, #0]
 8006f68:	b103      	cbz	r3, 8006f6c <_fstat_r+0x1c>
 8006f6a:	6023      	str	r3, [r4, #0]
 8006f6c:	bd38      	pop	{r3, r4, r5, pc}
 8006f6e:	bf00      	nop
 8006f70:	200040bc 	.word	0x200040bc

08006f74 <_isatty_r>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	2300      	movs	r3, #0
 8006f78:	4d05      	ldr	r5, [pc, #20]	@ (8006f90 <_isatty_r+0x1c>)
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	4608      	mov	r0, r1
 8006f7e:	602b      	str	r3, [r5, #0]
 8006f80:	f7fa fbac 	bl	80016dc <_isatty>
 8006f84:	1c43      	adds	r3, r0, #1
 8006f86:	d102      	bne.n	8006f8e <_isatty_r+0x1a>
 8006f88:	682b      	ldr	r3, [r5, #0]
 8006f8a:	b103      	cbz	r3, 8006f8e <_isatty_r+0x1a>
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	bd38      	pop	{r3, r4, r5, pc}
 8006f90:	200040bc 	.word	0x200040bc

08006f94 <_sbrk_r>:
 8006f94:	b538      	push	{r3, r4, r5, lr}
 8006f96:	2300      	movs	r3, #0
 8006f98:	4d05      	ldr	r5, [pc, #20]	@ (8006fb0 <_sbrk_r+0x1c>)
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	4608      	mov	r0, r1
 8006f9e:	602b      	str	r3, [r5, #0]
 8006fa0:	f7fa fbb2 	bl	8001708 <_sbrk>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	d102      	bne.n	8006fae <_sbrk_r+0x1a>
 8006fa8:	682b      	ldr	r3, [r5, #0]
 8006faa:	b103      	cbz	r3, 8006fae <_sbrk_r+0x1a>
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	bd38      	pop	{r3, r4, r5, pc}
 8006fb0:	200040bc 	.word	0x200040bc

08006fb4 <memchr>:
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	b510      	push	{r4, lr}
 8006fb8:	b2c9      	uxtb	r1, r1
 8006fba:	4402      	add	r2, r0
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	d101      	bne.n	8006fc6 <memchr+0x12>
 8006fc2:	2000      	movs	r0, #0
 8006fc4:	e003      	b.n	8006fce <memchr+0x1a>
 8006fc6:	7804      	ldrb	r4, [r0, #0]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	428c      	cmp	r4, r1
 8006fcc:	d1f6      	bne.n	8006fbc <memchr+0x8>
 8006fce:	bd10      	pop	{r4, pc}

08006fd0 <_init>:
 8006fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd2:	bf00      	nop
 8006fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd6:	bc08      	pop	{r3}
 8006fd8:	469e      	mov	lr, r3
 8006fda:	4770      	bx	lr

08006fdc <_fini>:
 8006fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fde:	bf00      	nop
 8006fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fe2:	bc08      	pop	{r3}
 8006fe4:	469e      	mov	lr, r3
 8006fe6:	4770      	bx	lr
