
stmDemoApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b38  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  08006c48  08006c48  00007c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f5c  08006f5c  000080b8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006f5c  08006f5c  000080b8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006f5c  08006f5c  000080b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f5c  08006f5c  00007f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f60  08006f60  00007f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b8  20000000  08006f64  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f54  200000b8  0800701c  000080b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000400c  0800701c  0000900c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000080b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128f7  00000000  00000000  000080e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000378b  00000000  00000000  0001a9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  0001e168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cdb  00000000  00000000  0001f280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a39b  00000000  00000000  0001ff5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001540e  00000000  00000000  0003a2f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee1d  00000000  00000000  0004f704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de521  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b18  00000000  00000000  000de564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e307c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b8 	.word	0x200000b8
 800012c:	00000000 	.word	0x00000000
 8000130:	08006c30 	.word	0x08006c30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000bc 	.word	0x200000bc
 800014c:	08006c30 	.word	0x08006c30

08000150 <AppMain>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void AppMain()
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
	bool blFlag =  FALSE;
 8000156:	2300      	movs	r3, #0
 8000158:	71fb      	strb	r3, [r7, #7]

	printf("Hello from STM32 via UART!\r\n");
 800015a:	480a      	ldr	r0, [pc, #40]	@ (8000184 <AppMain+0x34>)
 800015c:	f005 feee 	bl	8005f3c <puts>
	blFlag = TaskInit();
 8000160:	f000 fb72 	bl	8000848 <TaskInit>
 8000164:	4603      	mov	r3, r0
 8000166:	71fb      	strb	r3, [r7, #7]

	if(blFlag == FALSE)
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	f083 0301 	eor.w	r3, r3, #1
 800016e:	b2db      	uxtb	r3, r3
 8000170:	2b00      	cmp	r3, #0
 8000172:	d002      	beq.n	800017a <AppMain+0x2a>
	{
		printf("Thread Creation Failed\r\n");
 8000174:	4804      	ldr	r0, [pc, #16]	@ (8000188 <AppMain+0x38>)
 8000176:	f005 fee1 	bl	8005f3c <puts>
	}
}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	08006c48 	.word	0x08006c48
 8000188:	08006c64 	.word	0x08006c64

0800018c <WatchDogTimerInit>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void WatchDogTimerInit()
{
 800018c:	b480      	push	{r7}
 800018e:	af00      	add	r7, sp, #0
	pstIWDG->KR = WRITE_ACCESS;
 8000190:	4b0d      	ldr	r3, [pc, #52]	@ (80001c8 <WatchDogTimerInit+0x3c>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000198:	601a      	str	r2, [r3, #0]
	pstIWDG->PR = PRESCALAR_VALUE;
 800019a:	4b0b      	ldr	r3, [pc, #44]	@ (80001c8 <WatchDogTimerInit+0x3c>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	2206      	movs	r2, #6
 80001a0:	605a      	str	r2, [r3, #4]
	pstIWDG->RLR = RELOAD_VALUE;
 80001a2:	4b09      	ldr	r3, [pc, #36]	@ (80001c8 <WatchDogTimerInit+0x3c>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80001aa:	609a      	str	r2, [r3, #8]
	pstIWDG->KR = RESET_COUNTER;
 80001ac:	4b06      	ldr	r3, [pc, #24]	@ (80001c8 <WatchDogTimerInit+0x3c>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80001b4:	601a      	str	r2, [r3, #0]
	pstIWDG->KR = START_WATCHDOG;
 80001b6:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <WatchDogTimerInit+0x3c>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80001be:	601a      	str	r2, [r3, #0]
}
 80001c0:	bf00      	nop
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	20000000 	.word	0x20000000

080001cc <WatchdogTimerClear>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void WatchdogTimerClear()
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
	pstIWDG->KR = RESET_COUNTER;
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <WatchdogTimerClear+0x18>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000000 	.word	0x20000000

080001e8 <GPIOLEDSet>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
bool GPIOLEDSet(PORT_TYPE LEDPort, PIN_NUMBER LEDPin, bool blLEDStatus)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
 80001f2:	460b      	mov	r3, r1
 80001f4:	71bb      	strb	r3, [r7, #6]
 80001f6:	4613      	mov	r3, r2
 80001f8:	717b      	strb	r3, [r7, #5]
	bool blFlag = FALSE;
 80001fa:	2300      	movs	r3, #0
 80001fc:	75fb      	strb	r3, [r7, #23]
	GPIO_TypeDef* gpioPort = NULL;
 80001fe:	2300      	movs	r3, #0
 8000200:	613b      	str	r3, [r7, #16]
	uint32_t gpioPin = 1;
 8000202:	2301      	movs	r3, #1
 8000204:	60fb      	str	r3, [r7, #12]
	uint8 ucIndex = 0;
 8000206:	2300      	movs	r3, #0
 8000208:	72fb      	strb	r3, [r7, #11]

	switch(LEDPort)
 800020a:	79fb      	ldrb	r3, [r7, #7]
 800020c:	2b03      	cmp	r3, #3
 800020e:	d817      	bhi.n	8000240 <GPIOLEDSet+0x58>
 8000210:	a201      	add	r2, pc, #4	@ (adr r2, 8000218 <GPIOLEDSet+0x30>)
 8000212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000216:	bf00      	nop
 8000218:	08000229 	.word	0x08000229
 800021c:	0800022f 	.word	0x0800022f
 8000220:	08000235 	.word	0x08000235
 8000224:	0800023b 	.word	0x0800023b
	{
		case PORT_A:
			gpioPort = GPIOA;
 8000228:	4b17      	ldr	r3, [pc, #92]	@ (8000288 <GPIOLEDSet+0xa0>)
 800022a:	613b      	str	r3, [r7, #16]
			break;
 800022c:	e008      	b.n	8000240 <GPIOLEDSet+0x58>
		case PORT_B:
			gpioPort = GPIOB;
 800022e:	4b17      	ldr	r3, [pc, #92]	@ (800028c <GPIOLEDSet+0xa4>)
 8000230:	613b      	str	r3, [r7, #16]
			break;
 8000232:	e005      	b.n	8000240 <GPIOLEDSet+0x58>
		case PORT_C:
			gpioPort = GPIOC;
 8000234:	4b16      	ldr	r3, [pc, #88]	@ (8000290 <GPIOLEDSet+0xa8>)
 8000236:	613b      	str	r3, [r7, #16]
			break;
 8000238:	e002      	b.n	8000240 <GPIOLEDSet+0x58>
		case PORT_D:
			gpioPort = GPIOD;
 800023a:	4b16      	ldr	r3, [pc, #88]	@ (8000294 <GPIOLEDSet+0xac>)
 800023c:	613b      	str	r3, [r7, #16]
			break;
 800023e:	bf00      	nop
	}

	for(ucIndex = 0; ucIndex<16; ucIndex++)
 8000240:	2300      	movs	r3, #0
 8000242:	72fb      	strb	r3, [r7, #11]
 8000244:	e00b      	b.n	800025e <GPIOLEDSet+0x76>
	{
		if(LEDPin == ucIndex)
 8000246:	79ba      	ldrb	r2, [r7, #6]
 8000248:	7afb      	ldrb	r3, [r7, #11]
 800024a:	429a      	cmp	r2, r3
 800024c:	d104      	bne.n	8000258 <GPIOLEDSet+0x70>
		{
			gpioPin = gpioPin << LEDPin;
 800024e:	79bb      	ldrb	r3, [r7, #6]
 8000250:	68fa      	ldr	r2, [r7, #12]
 8000252:	fa02 f303 	lsl.w	r3, r2, r3
 8000256:	60fb      	str	r3, [r7, #12]
	for(ucIndex = 0; ucIndex<16; ucIndex++)
 8000258:	7afb      	ldrb	r3, [r7, #11]
 800025a:	3301      	adds	r3, #1
 800025c:	72fb      	strb	r3, [r7, #11]
 800025e:	7afb      	ldrb	r3, [r7, #11]
 8000260:	2b0f      	cmp	r3, #15
 8000262:	d9f0      	bls.n	8000246 <GPIOLEDSet+0x5e>
		}
	}

	if(gpioPort != NULL)
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d008      	beq.n	800027c <GPIOLEDSet+0x94>
	{
		HAL_GPIO_WritePin(gpioPort, gpioPin, blLEDStatus);
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	b29b      	uxth	r3, r3
 800026e:	797a      	ldrb	r2, [r7, #5]
 8000270:	4619      	mov	r1, r3
 8000272:	6938      	ldr	r0, [r7, #16]
 8000274:	f001 fbbd 	bl	80019f2 <HAL_GPIO_WritePin>
		blFlag = TRUE;
 8000278:	2301      	movs	r3, #1
 800027a:	75fb      	strb	r3, [r7, #23]
	}

	return blFlag;
 800027c:	7dfb      	ldrb	r3, [r7, #23]
}
 800027e:	4618      	mov	r0, r3
 8000280:	3718      	adds	r7, #24
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	40010800 	.word	0x40010800
 800028c:	40010c00 	.word	0x40010c00
 8000290:	40011000 	.word	0x40011000
 8000294:	40011400 	.word	0x40011400

08000298 <GPIOReadButtonPress>:
//Outputs : None
//Return  : TRUE - Button Pressed , FALSE - Button Not pressed
//Notes   : None
//*****************************************************************************
bool GPIOReadButtonPress()
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
	bool blFlag = FALSE;
 800029e:	2300      	movs	r3, #0
 80002a0:	71fb      	strb	r3, [r7, #7]

	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 80002a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002a6:	4806      	ldr	r0, [pc, #24]	@ (80002c0 <GPIOReadButtonPress+0x28>)
 80002a8:	f001 fb8c 	bl	80019c4 <HAL_GPIO_ReadPin>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d101      	bne.n	80002b6 <GPIOReadButtonPress+0x1e>
	{
		blFlag = TRUE;
 80002b2:	2301      	movs	r3, #1
 80002b4:	71fb      	strb	r3, [r7, #7]
	}

	return blFlag;
 80002b6:	79fb      	ldrb	r3, [r7, #7]
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	3708      	adds	r7, #8
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	40011000 	.word	0x40011000

080002c4 <LEDToggle>:
//Outputs : None
//Return  : TRUE - LED Blinking success, FALSE - failed
//Notes   : None
//*****************************************************************************
bool LEDToggle(uint8 ucLEDState)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	71fb      	strb	r3, [r7, #7]
	bool blFlag = FALSE;
 80002ce:	2300      	movs	r3, #0
 80002d0:	73fb      	strb	r3, [r7, #15]
	PORT_TYPE port = PORT_A;
 80002d2:	2300      	movs	r3, #0
 80002d4:	73bb      	strb	r3, [r7, #14]
	PIN_NUMBER pin = PIN_5;
 80002d6:	2305      	movs	r3, #5
 80002d8:	737b      	strb	r3, [r7, #13]

	if(ucLEDState == TRUE)
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d10b      	bne.n	80002f8 <LEDToggle+0x34>
	{
		blFlag = GPIOLEDSet(port, pin, TRUE);
 80002e0:	7b79      	ldrb	r1, [r7, #13]
 80002e2:	7bbb      	ldrb	r3, [r7, #14]
 80002e4:	2201      	movs	r2, #1
 80002e6:	4618      	mov	r0, r3
 80002e8:	f7ff ff7e 	bl	80001e8 <GPIOLEDSet>
 80002ec:	4603      	mov	r3, r0
 80002ee:	73fb      	strb	r3, [r7, #15]
		printf("LED ON\r\n");
 80002f0:	4809      	ldr	r0, [pc, #36]	@ (8000318 <LEDToggle+0x54>)
 80002f2:	f005 fe23 	bl	8005f3c <puts>
 80002f6:	e00a      	b.n	800030e <LEDToggle+0x4a>
	}
	else
	{
		blFlag = GPIOLEDSet(port, pin, FALSE);
 80002f8:	7b79      	ldrb	r1, [r7, #13]
 80002fa:	7bbb      	ldrb	r3, [r7, #14]
 80002fc:	2200      	movs	r2, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ff72 	bl	80001e8 <GPIOLEDSet>
 8000304:	4603      	mov	r3, r0
 8000306:	73fb      	strb	r3, [r7, #15]
		printf("LED OFF\r\n");
 8000308:	4804      	ldr	r0, [pc, #16]	@ (800031c <LEDToggle+0x58>)
 800030a:	f005 fe17 	bl	8005f3c <puts>
	}

	return blFlag;
 800030e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000310:	4618      	mov	r0, r3
 8000312:	3710      	adds	r7, #16
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	08006c7c 	.word	0x08006c7c
 800031c:	08006c84 	.word	0x08006c84

08000320 <LoggerTask>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void LoggerTask()
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b086      	sub	sp, #24
 8000324:	af00      	add	r7, sp, #0
	LOGGER_MSG stLogMsg = {0, 0};
 8000326:	2300      	movs	r3, #0
 8000328:	60fb      	str	r3, [r7, #12]
 800032a:	2300      	movs	r3, #0
 800032c:	743b      	strb	r3, [r7, #16]
	LOGACK_MSG stLogAckMsg ={0, 0};
 800032e:	2300      	movs	r3, #0
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	2300      	movs	r3, #0
 8000334:	723b      	strb	r3, [r7, #8]
	WATCHDOG_EVENT stLoggerEvent = {0};
 8000336:	2300      	movs	r3, #0
 8000338:	703b      	strb	r3, [r7, #0]
	bool blFlag = FALSE;
 800033a:	2300      	movs	r3, #0
 800033c:	75fb      	strb	r3, [r7, #23]
	uint8 ucStatus = 0;
 800033e:	2300      	movs	r3, #0
 8000340:	75bb      	strb	r3, [r7, #22]

	if(osMsgqLoggerToReceiverInit(sizeof(stLogAckMsg)))
 8000342:	2008      	movs	r0, #8
 8000344:	f000 f9f2 	bl	800072c <osMsgqLoggerToReceiverInit>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d055      	beq.n	80003fa <LoggerTask+0xda>
	{
		while(1)
		{
			if(osMsgqMsgRcvFromReceiver(&stLogMsg))
 800034e:	f107 030c 	add.w	r3, r7, #12
 8000352:	4618      	mov	r0, r3
 8000354:	f000 fa22 	bl	800079c <osMsgqMsgRcvFromReceiver>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d034      	beq.n	80003c8 <LoggerTask+0xa8>
			{
				LOG("Logger: LOGUID=%lu LEDState=0x%02X\r\n",
 800035e:	f000 fb1b 	bl	8000998 <UARTMutexAcquire>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d005      	beq.n	8000374 <LoggerTask+0x54>
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	7c3a      	ldrb	r2, [r7, #16]
 800036c:	4619      	mov	r1, r3
 800036e:	4825      	ldr	r0, [pc, #148]	@ (8000404 <LoggerTask+0xe4>)
 8000370:	f005 fd7c 	bl	8005e6c <iprintf>
 8000374:	f000 fafa 	bl	800096c <UARTMutexRelease>
						stLogMsg.ulUId, stLogMsg.ucLEDState);


				if(LoggerTaskProcessLoggerMsg(&stLogMsg))
 8000378:	f107 030c 	add.w	r3, r7, #12
 800037c:	4618      	mov	r0, r3
 800037e:	f000 f847 	bl	8000410 <LoggerTaskProcessLoggerMsg>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d01f      	beq.n	80003c8 <LoggerTask+0xa8>
				{
					blFlag = LEDToggle(sgulLEDSate);
 8000388:	4b1f      	ldr	r3, [pc, #124]	@ (8000408 <LoggerTask+0xe8>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	4618      	mov	r0, r3
 800038e:	f7ff ff99 	bl	80002c4 <LEDToggle>
 8000392:	4603      	mov	r3, r0
 8000394:	75fb      	strb	r3, [r7, #23]
					ucStatus = (blFlag != FALSE) ? ACK_STATUS_OK : ACK_STAUS_ERROR;
 8000396:	7dfb      	ldrb	r3, [r7, #23]
 8000398:	f083 0301 	eor.w	r3, r3, #1
 800039c:	b2db      	uxtb	r3, r3
 800039e:	75bb      	strb	r3, [r7, #22]

					if(LoggerTaskSetAckMsg(&stLogAckMsg, ucStatus))
 80003a0:	7dba      	ldrb	r2, [r7, #22]
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	4611      	mov	r1, r2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 f88a 	bl	80004c0 <LoggerTaskSetAckMsg>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d00a      	beq.n	80003c8 <LoggerTask+0xa8>
					{
						if(osMsgqMsgSendToReceiver(stLogAckMsg))
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80003b8:	f000 fa0c 	bl	80007d4 <osMsgqMsgSendToReceiver>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d002      	beq.n	80003c8 <LoggerTask+0xa8>
						{
							osTaskDelay(DELAY_200);
 80003c2:	20c8      	movs	r0, #200	@ 0xc8
 80003c4:	f000 fb00 	bl	80009c8 <osTaskDelay>
						}
					}
				}
			}
			stLoggerEvent.src = WATCHDOG_SRC_LOGGER;
 80003c8:	2303      	movs	r3, #3
 80003ca:	703b      	strb	r3, [r7, #0]
			if(!osMsgqSendToWatchdog(stLoggerEvent))
 80003cc:	7838      	ldrb	r0, [r7, #0]
 80003ce:	f000 f959 	bl	8000684 <osMsgqSendToWatchdog>
 80003d2:	4603      	mov	r3, r0
 80003d4:	f083 0301 	eor.w	r3, r3, #1
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d009      	beq.n	80003f2 <LoggerTask+0xd2>
			{
				LOG("Logger : Send Event to watchDogHandler Failed");
 80003de:	f000 fadb 	bl	8000998 <UARTMutexAcquire>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d002      	beq.n	80003ee <LoggerTask+0xce>
 80003e8:	4808      	ldr	r0, [pc, #32]	@ (800040c <LoggerTask+0xec>)
 80003ea:	f005 fd3f 	bl	8005e6c <iprintf>
 80003ee:	f000 fabd 	bl	800096c <UARTMutexRelease>
			}
			osTaskDelay(DELAY_100);
 80003f2:	2064      	movs	r0, #100	@ 0x64
 80003f4:	f000 fae8 	bl	80009c8 <osTaskDelay>
			if(osMsgqMsgRcvFromReceiver(&stLogMsg))
 80003f8:	e7a9      	b.n	800034e <LoggerTask+0x2e>
		}
	}
}
 80003fa:	bf00      	nop
 80003fc:	3718      	adds	r7, #24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	08006c90 	.word	0x08006c90
 8000408:	200000d8 	.word	0x200000d8
 800040c:	08006cb8 	.word	0x08006cb8

08000410 <LoggerTaskProcessLoggerMsg>:
//Outputs : None
//Return  : TRUE - Request Message Processed, FALSE - error
//Notes   : None
//*****************************************************************************
static bool LoggerTaskProcessLoggerMsg(LOGGER_MSG* stLogMsg)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000418:	2300      	movs	r3, #0
 800041a:	73fb      	strb	r3, [r7, #15]

	do
	{
		if(stLogMsg == NULL)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d014      	beq.n	800044c <LoggerTaskProcessLoggerMsg+0x3c>
		{
			break;
		}

		if(!LoggerTaskProcessUID(stLogMsg))
 8000422:	6878      	ldr	r0, [r7, #4]
 8000424:	f000 f81c 	bl	8000460 <LoggerTaskProcessUID>
 8000428:	4603      	mov	r3, r0
 800042a:	f083 0301 	eor.w	r3, r3, #1
 800042e:	b2db      	uxtb	r3, r3
 8000430:	2b00      	cmp	r3, #0
 8000432:	d10d      	bne.n	8000450 <LoggerTaskProcessLoggerMsg+0x40>
		{
			break;
		}

		if(!LoggerTaskProcessLEDState(stLogMsg))
 8000434:	6878      	ldr	r0, [r7, #4]
 8000436:	f000 f82b 	bl	8000490 <LoggerTaskProcessLEDState>
 800043a:	4603      	mov	r3, r0
 800043c:	f083 0301 	eor.w	r3, r3, #1
 8000440:	b2db      	uxtb	r3, r3
 8000442:	2b00      	cmp	r3, #0
 8000444:	d106      	bne.n	8000454 <LoggerTaskProcessLoggerMsg+0x44>
		{
			break;
		}

		// If all succeeded
		blFlag = TRUE;
 8000446:	2301      	movs	r3, #1
 8000448:	73fb      	strb	r3, [r7, #15]
 800044a:	e004      	b.n	8000456 <LoggerTaskProcessLoggerMsg+0x46>
			break;
 800044c:	bf00      	nop
 800044e:	e002      	b.n	8000456 <LoggerTaskProcessLoggerMsg+0x46>
			break;
 8000450:	bf00      	nop
 8000452:	e000      	b.n	8000456 <LoggerTaskProcessLoggerMsg+0x46>
			break;
 8000454:	bf00      	nop

	}while(0);

	return blFlag;
 8000456:	7bfb      	ldrb	r3, [r7, #15]
}
 8000458:	4618      	mov	r0, r3
 800045a:	3710      	adds	r7, #16
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <LoggerTaskProcessUID>:
//Outputs : None
//Return  : TRUE - Request Message UID processed, FALSE - error
//Notes   : None
//*****************************************************************************
static bool LoggerTaskProcessUID(LOGGER_MSG* stLogMsg)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000468:	2300      	movs	r3, #0
 800046a:	73fb      	strb	r3, [r7, #15]

	if(stLogMsg != NULL)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d005      	beq.n	800047e <LoggerTaskProcessUID+0x1e>
	{
		sgulUId =  stLogMsg->ulUId;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a05      	ldr	r2, [pc, #20]	@ (800048c <LoggerTaskProcessUID+0x2c>)
 8000478:	6013      	str	r3, [r2, #0]
		blFlag = TRUE;
 800047a:	2301      	movs	r3, #1
 800047c:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 800047e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000480:	4618      	mov	r0, r3
 8000482:	3714      	adds	r7, #20
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	200000d4 	.word	0x200000d4

08000490 <LoggerTaskProcessLEDState>:
//Outputs : None
//Return  : TRUE - Request Message DATA processed, FALSE - error
//Notes   : None
//*****************************************************************************
static bool LoggerTaskProcessLEDState(LOGGER_MSG* stLogMsg)
{
 8000490:	b480      	push	{r7}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000498:	2300      	movs	r3, #0
 800049a:	73fb      	strb	r3, [r7, #15]

	if(stLogMsg != NULL)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d005      	beq.n	80004ae <LoggerTaskProcessLEDState+0x1e>
	{
		sgulLEDSate = stLogMsg->ucLEDState;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	791a      	ldrb	r2, [r3, #4]
 80004a6:	4b05      	ldr	r3, [pc, #20]	@ (80004bc <LoggerTaskProcessLEDState+0x2c>)
 80004a8:	701a      	strb	r2, [r3, #0]
		blFlag = TRUE;
 80004aa:	2301      	movs	r3, #1
 80004ac:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3714      	adds	r7, #20
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	200000d8 	.word	0x200000d8

080004c0 <LoggerTaskSetAckMsg>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
static bool LoggerTaskSetAckMsg(LOGACK_MSG* stLogAckMsg, uint8 ucState)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	460b      	mov	r3, r1
 80004ca:	70fb      	strb	r3, [r7, #3]
	bool blFlag = FALSE;
 80004cc:	2300      	movs	r3, #0
 80004ce:	73fb      	strb	r3, [r7, #15]

	if(stLogAckMsg != NULL)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d008      	beq.n	80004e8 <LoggerTaskSetAckMsg+0x28>
	{
		stLogAckMsg->ulUId = sgulUId;
 80004d6:	4b07      	ldr	r3, [pc, #28]	@ (80004f4 <LoggerTaskSetAckMsg+0x34>)
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	601a      	str	r2, [r3, #0]
		stLogAckMsg->ucState = ucState;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	78fa      	ldrb	r2, [r7, #3]
 80004e2:	711a      	strb	r2, [r3, #4]
		blFlag = TRUE;
 80004e4:	2301      	movs	r3, #1
 80004e6:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	200000d4 	.word	0x200000d4

080004f8 <osMsgqPollerToRecieverInit>:
//Outputs : None
//Return  : TRUE - Message Queue Initialization completed, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqPollerToRecieverInit(uint32 MsgSize)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000500:	2300      	movs	r3, #0
 8000502:	73fb      	strb	r3, [r7, #15]

	PollerToReceiverId = osMessageQueueNew(MSG_COUNT, MsgSize, NULL);
 8000504:	2200      	movs	r2, #0
 8000506:	6879      	ldr	r1, [r7, #4]
 8000508:	200a      	movs	r0, #10
 800050a:	f002 faf6 	bl	8002afa <osMessageQueueNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a06      	ldr	r2, [pc, #24]	@ (800052c <osMsgqPollerToRecieverInit+0x34>)
 8000512:	6013      	str	r3, [r2, #0]

	if(PollerToReceiverId != NULL)
 8000514:	4b05      	ldr	r3, [pc, #20]	@ (800052c <osMsgqPollerToRecieverInit+0x34>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <osMsgqPollerToRecieverInit+0x28>
	{
		blFlag = TRUE;
 800051c:	2301      	movs	r3, #1
 800051e:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000520:	7bfb      	ldrb	r3, [r7, #15]
}
 8000522:	4618      	mov	r0, r3
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	200000dc 	.word	0x200000dc

08000530 <osMsgqRecieverToPollerInit>:
//Outputs : None
//Return  : TRUE - Message Queue Initialization completed, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqRecieverToPollerInit(uint32 MsgSize)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000538:	2300      	movs	r3, #0
 800053a:	73fb      	strb	r3, [r7, #15]

	ReceiverToPollerId = osMessageQueueNew(MSG_COUNT, MsgSize, NULL);
 800053c:	2200      	movs	r2, #0
 800053e:	6879      	ldr	r1, [r7, #4]
 8000540:	200a      	movs	r0, #10
 8000542:	f002 fada 	bl	8002afa <osMessageQueueNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a06      	ldr	r2, [pc, #24]	@ (8000564 <osMsgqRecieverToPollerInit+0x34>)
 800054a:	6013      	str	r3, [r2, #0]

	if(ReceiverToPollerId != NULL)
 800054c:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <osMsgqRecieverToPollerInit+0x34>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <osMsgqRecieverToPollerInit+0x28>
	{
		blFlag = TRUE;
 8000554:	2301      	movs	r3, #1
 8000556:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000558:	7bfb      	ldrb	r3, [r7, #15]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	200000e0 	.word	0x200000e0

08000568 <osMsgqMessageSendToReceiver>:
//Outputs : None
//Return  : TRUE - Message sent, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMessageSendToReceiver(REQUEST_MSG stReqMsg)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	bool blFlag = FALSE;
 8000574:	2300      	movs	r3, #0
 8000576:	75fb      	strb	r3, [r7, #23]

	if(osMessageQueuePut(PollerToReceiverId, &stReqMsg, MSG_PRIORITY,
 8000578:	4b08      	ldr	r3, [pc, #32]	@ (800059c <osMsgqMessageSendToReceiver+0x34>)
 800057a:	6818      	ldr	r0, [r3, #0]
 800057c:	1d39      	adds	r1, r7, #4
 800057e:	2300      	movs	r3, #0
 8000580:	2200      	movs	r2, #0
 8000582:	f002 fb2d 	bl	8002be0 <osMessageQueuePut>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d101      	bne.n	8000590 <osMsgqMessageSendToReceiver+0x28>
			0) == osOK)
	{
		blFlag = TRUE;
 800058c:	2301      	movs	r3, #1
 800058e:	75fb      	strb	r3, [r7, #23]
	}

	return blFlag;
 8000590:	7dfb      	ldrb	r3, [r7, #23]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3718      	adds	r7, #24
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	200000dc 	.word	0x200000dc

080005a0 <osMsgqMessageRcvFromPoller>:
//Outputs : None
//Return  : TRUE - Message Received, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMessageRcvFromPoller(REQUEST_MSG* stReqMsg)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	73fb      	strb	r3, [r7, #15]

	if(stReqMsg != NULL)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d00b      	beq.n	80005ca <osMsgqMessageRcvFromPoller+0x2a>
	{
		if (osMessageQueueGet(PollerToReceiverId, stReqMsg, NULL,
 80005b2:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <osMsgqMessageRcvFromPoller+0x34>)
 80005b4:	6818      	ldr	r0, [r3, #0]
 80005b6:	2364      	movs	r3, #100	@ 0x64
 80005b8:	2200      	movs	r2, #0
 80005ba:	6879      	ldr	r1, [r7, #4]
 80005bc:	f002 fb70 	bl	8002ca0 <osMessageQueueGet>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d101      	bne.n	80005ca <osMsgqMessageRcvFromPoller+0x2a>
				100) == osOK)
		{
			blFlag = TRUE;
 80005c6:	2301      	movs	r3, #1
 80005c8:	73fb      	strb	r3, [r7, #15]
		}
	}

	return blFlag;
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000dc 	.word	0x200000dc

080005d8 <osMsgqMessageSendToPoller>:
//Outputs : None
//Return  : TRUE - Message Sent, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMessageSendToPoller(ACK_MSG stAckMsg)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	bool blFlag = FALSE;
 80005e4:	2300      	movs	r3, #0
 80005e6:	75fb      	strb	r3, [r7, #23]

	if(osMessageQueuePut(ReceiverToPollerId, &stAckMsg, MSG_PRIORITY,
 80005e8:	4b08      	ldr	r3, [pc, #32]	@ (800060c <osMsgqMessageSendToPoller+0x34>)
 80005ea:	6818      	ldr	r0, [r3, #0]
 80005ec:	1d39      	adds	r1, r7, #4
 80005ee:	2300      	movs	r3, #0
 80005f0:	2200      	movs	r2, #0
 80005f2:	f002 faf5 	bl	8002be0 <osMessageQueuePut>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d101      	bne.n	8000600 <osMsgqMessageSendToPoller+0x28>
			                                 0) == osOK)
	{
		blFlag = TRUE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	75fb      	strb	r3, [r7, #23]
	}

	return blFlag;
 8000600:	7dfb      	ldrb	r3, [r7, #23]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3718      	adds	r7, #24
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200000e0 	.word	0x200000e0

08000610 <osMsgqMessageRcvFromReceiver>:
//Outputs : None
//Return  : TRUE - Message Received, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMessageRcvFromReceiver(ACK_MSG* stAckMsg)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000618:	2300      	movs	r3, #0
 800061a:	73fb      	strb	r3, [r7, #15]

	if(stAckMsg != NULL)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d00c      	beq.n	800063c <osMsgqMessageRcvFromReceiver+0x2c>
	{
		if (osMessageQueueGet(ReceiverToPollerId, stAckMsg, NULL,
 8000622:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <osMsgqMessageRcvFromReceiver+0x38>)
 8000624:	6818      	ldr	r0, [r3, #0]
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	2200      	movs	r2, #0
 800062c:	6879      	ldr	r1, [r7, #4]
 800062e:	f002 fb37 	bl	8002ca0 <osMessageQueueGet>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d101      	bne.n	800063c <osMsgqMessageRcvFromReceiver+0x2c>
				osWaitForever) == osOK)
		{
			blFlag = TRUE;
 8000638:	2301      	movs	r3, #1
 800063a:	73fb      	strb	r3, [r7, #15]
		}
	}

	return blFlag;
 800063c:	7bfb      	ldrb	r3, [r7, #15]
}
 800063e:	4618      	mov	r0, r3
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200000e0 	.word	0x200000e0

0800064c <osMsgqWatchdogInit>:
//Outputs : None
//Return  : TRUE - Message Queue Initialization completed, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqWatchdogInit(uint32 MsgSize)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000654:	2300      	movs	r3, #0
 8000656:	73fb      	strb	r3, [r7, #15]

	WatchdogQueueId = osMessageQueueNew(MSG_COUNT, MsgSize, NULL);
 8000658:	2200      	movs	r2, #0
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	200a      	movs	r0, #10
 800065e:	f002 fa4c 	bl	8002afa <osMessageQueueNew>
 8000662:	4603      	mov	r3, r0
 8000664:	4a06      	ldr	r2, [pc, #24]	@ (8000680 <osMsgqWatchdogInit+0x34>)
 8000666:	6013      	str	r3, [r2, #0]

	if(WatchdogQueueId != NULL)
 8000668:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <osMsgqWatchdogInit+0x34>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <osMsgqWatchdogInit+0x28>
	{
		blFlag = TRUE;
 8000670:	2301      	movs	r3, #1
 8000672:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000674:	7bfb      	ldrb	r3, [r7, #15]
}
 8000676:	4618      	mov	r0, r3
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200000e4 	.word	0x200000e4

08000684 <osMsgqSendToWatchdog>:
//Outputs : None
//Return  : TRUE - Message Sent, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqSendToWatchdog(WATCHDOG_EVENT stEvent)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	7138      	strb	r0, [r7, #4]
	bool blFlag = FALSE;
 800068c:	2300      	movs	r3, #0
 800068e:	73fb      	strb	r3, [r7, #15]

    if(osMessageQueuePut(WatchdogQueueId, &stEvent, 0, osWaitForever) == osOK)
 8000690:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <osMsgqSendToWatchdog+0x30>)
 8000692:	6818      	ldr	r0, [r3, #0]
 8000694:	1d39      	adds	r1, r7, #4
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	2200      	movs	r2, #0
 800069c:	f002 faa0 	bl	8002be0 <osMessageQueuePut>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d101      	bne.n	80006aa <osMsgqSendToWatchdog+0x26>
    {
    	blFlag = TRUE;
 80006a6:	2301      	movs	r3, #1
 80006a8:	73fb      	strb	r3, [r7, #15]
    }

    return blFlag;
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	200000e4 	.word	0x200000e4

080006b8 <osMsgqRcvFromWatchdog>:
//Outputs : None
//Return  : TRUE - Message Received, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqRcvFromWatchdog(WATCHDOG_EVENT* stEvent)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	73fb      	strb	r3, [r7, #15]

	if(stEvent != NULL)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d00c      	beq.n	80006e4 <osMsgqRcvFromWatchdog+0x2c>
	{
		if(osMessageQueueGet(WatchdogQueueId, stEvent, NULL,
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <osMsgqRcvFromWatchdog+0x38>)
 80006cc:	6818      	ldr	r0, [r3, #0]
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
 80006d2:	2200      	movs	r2, #0
 80006d4:	6879      	ldr	r1, [r7, #4]
 80006d6:	f002 fae3 	bl	8002ca0 <osMessageQueueGet>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d101      	bne.n	80006e4 <osMsgqRcvFromWatchdog+0x2c>
				osWaitForever) == osOK)
		{
			blFlag = TRUE;
 80006e0:	2301      	movs	r3, #1
 80006e2:	73fb      	strb	r3, [r7, #15]
		}
	}

    return blFlag;
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000e4 	.word	0x200000e4

080006f4 <osMsgqReceiverToLoggerInit>:
//Outputs : None
//Return  : TRUE - Message Queue Initialization completed, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqReceiverToLoggerInit(uint32 MsgSize)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	73fb      	strb	r3, [r7, #15]

	ReceiverToLoggerId = osMessageQueueNew(MSG_COUNT, MsgSize, NULL);
 8000700:	2200      	movs	r2, #0
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	200a      	movs	r0, #10
 8000706:	f002 f9f8 	bl	8002afa <osMessageQueueNew>
 800070a:	4603      	mov	r3, r0
 800070c:	4a06      	ldr	r2, [pc, #24]	@ (8000728 <osMsgqReceiverToLoggerInit+0x34>)
 800070e:	6013      	str	r3, [r2, #0]

	if(ReceiverToLoggerId != NULL)
 8000710:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <osMsgqReceiverToLoggerInit+0x34>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <osMsgqReceiverToLoggerInit+0x28>
	{
		blFlag = TRUE;
 8000718:	2301      	movs	r3, #1
 800071a:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 800071c:	7bfb      	ldrb	r3, [r7, #15]
}
 800071e:	4618      	mov	r0, r3
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200000e8 	.word	0x200000e8

0800072c <osMsgqLoggerToReceiverInit>:
//Outputs : None
//Return  : TRUE - Message Queue Initialization completed, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqLoggerToReceiverInit(uint32 MsgSize)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000734:	2300      	movs	r3, #0
 8000736:	73fb      	strb	r3, [r7, #15]

	LoggerToReceiverId = osMessageQueueNew(MSG_COUNT, MsgSize, NULL);
 8000738:	2200      	movs	r2, #0
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	200a      	movs	r0, #10
 800073e:	f002 f9dc 	bl	8002afa <osMessageQueueNew>
 8000742:	4603      	mov	r3, r0
 8000744:	4a06      	ldr	r2, [pc, #24]	@ (8000760 <osMsgqLoggerToReceiverInit+0x34>)
 8000746:	6013      	str	r3, [r2, #0]

	if(LoggerToReceiverId != NULL)
 8000748:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <osMsgqLoggerToReceiverInit+0x34>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <osMsgqLoggerToReceiverInit+0x28>
	{
		blFlag = TRUE;
 8000750:	2301      	movs	r3, #1
 8000752:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000754:	7bfb      	ldrb	r3, [r7, #15]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000ec 	.word	0x200000ec

08000764 <osMsgqMessageSendToLogger>:
//Outputs : None
//Return  : TRUE - Message sent, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMessageSendToLogger(LOGGER_MSG stLogMsg)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	463b      	mov	r3, r7
 800076c:	e883 0003 	stmia.w	r3, {r0, r1}
	bool blFlag = FALSE;
 8000770:	2300      	movs	r3, #0
 8000772:	73fb      	strb	r3, [r7, #15]

	if(osMessageQueuePut(ReceiverToLoggerId, &stLogMsg, MSG_PRIORITY,
 8000774:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <osMsgqMessageSendToLogger+0x34>)
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	4639      	mov	r1, r7
 800077a:	2300      	movs	r3, #0
 800077c:	2200      	movs	r2, #0
 800077e:	f002 fa2f 	bl	8002be0 <osMessageQueuePut>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d101      	bne.n	800078c <osMsgqMessageSendToLogger+0x28>
			0) == osOK)
	{
		blFlag = TRUE;
 8000788:	2301      	movs	r3, #1
 800078a:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 800078c:	7bfb      	ldrb	r3, [r7, #15]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200000e8 	.word	0x200000e8

0800079c <osMsgqMsgRcvFromReceiver>:
//Outputs : None
//Return  : TRUE - Message Received, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMsgRcvFromReceiver(LOGGER_MSG* stLogMsg)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	73fb      	strb	r3, [r7, #15]

	if(stLogMsg != NULL)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d00b      	beq.n	80007c6 <osMsgqMsgRcvFromReceiver+0x2a>
	{
		if (osMessageQueueGet(ReceiverToLoggerId, stLogMsg, NULL,
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <osMsgqMsgRcvFromReceiver+0x34>)
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	2364      	movs	r3, #100	@ 0x64
 80007b4:	2200      	movs	r2, #0
 80007b6:	6879      	ldr	r1, [r7, #4]
 80007b8:	f002 fa72 	bl	8002ca0 <osMessageQueueGet>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d101      	bne.n	80007c6 <osMsgqMsgRcvFromReceiver+0x2a>
				100) == osOK)
		{
			blFlag = TRUE;
 80007c2:	2301      	movs	r3, #1
 80007c4:	73fb      	strb	r3, [r7, #15]
		}
	}

	return blFlag;
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000e8 	.word	0x200000e8

080007d4 <osMsgqMsgSendToReceiver>:
//Outputs : None
//Return  : TRUE - Message Sent, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMsgSendToReceiver(LOGACK_MSG stLogAckMsg)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	463b      	mov	r3, r7
 80007dc:	e883 0003 	stmia.w	r3, {r0, r1}
	bool blFlag = FALSE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	73fb      	strb	r3, [r7, #15]

	if(osMessageQueuePut(LoggerToReceiverId, &stLogAckMsg, MSG_PRIORITY,
 80007e4:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <osMsgqMsgSendToReceiver+0x34>)
 80007e6:	6818      	ldr	r0, [r3, #0]
 80007e8:	4639      	mov	r1, r7
 80007ea:	2300      	movs	r3, #0
 80007ec:	2200      	movs	r2, #0
 80007ee:	f002 f9f7 	bl	8002be0 <osMessageQueuePut>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d101      	bne.n	80007fc <osMsgqMsgSendToReceiver+0x28>
			                                 0) == osOK)
	{
		blFlag = TRUE;
 80007f8:	2301      	movs	r3, #1
 80007fa:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000ec 	.word	0x200000ec

0800080c <osMsgqMessageRcvFromLogger>:
//Outputs : None
//Return  : TRUE - Message Received, FALSE - error
//Notes   : None
//*****************************************************************************
bool osMsgqMessageRcvFromLogger(LOGACK_MSG* stLogAckMsg)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000814:	2300      	movs	r3, #0
 8000816:	73fb      	strb	r3, [r7, #15]

	if(stLogAckMsg != NULL)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d00c      	beq.n	8000838 <osMsgqMessageRcvFromLogger+0x2c>
	{
		if (osMessageQueueGet(LoggerToReceiverId, stLogAckMsg, NULL,
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <osMsgqMessageRcvFromLogger+0x38>)
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	2200      	movs	r2, #0
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	f002 fa39 	bl	8002ca0 <osMessageQueueGet>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d101      	bne.n	8000838 <osMsgqMessageRcvFromLogger+0x2c>
				osWaitForever) == osOK)
		{
			blFlag = TRUE;
 8000834:	2301      	movs	r3, #1
 8000836:	73fb      	strb	r3, [r7, #15]
		}
	}

	return blFlag;
 8000838:	7bfb      	ldrb	r3, [r7, #15]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200000ec 	.word	0x200000ec

08000848 <TaskInit>:
//Outputs : None
//Return  : TRUE - initialized , FALSE - Error
//Notes   : None
//*****************************************************************************
bool TaskInit()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
	uint8 ucIndex = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	71fb      	strb	r3, [r7, #7]
	bool blFlag = FALSE;
 8000852:	2300      	movs	r3, #0
 8000854:	71bb      	strb	r3, [r7, #6]

	CreateUARTMutex();
 8000856:	f000 f871 	bl	800093c <CreateUARTMutex>

	for(ucIndex = 0; ucIndex < TASKS_MAX_SIZE; ucIndex++)
 800085a:	2300      	movs	r3, #0
 800085c:	71fb      	strb	r3, [r7, #7]
 800085e:	e00b      	b.n	8000878 <TaskInit+0x30>
	{
		blFlag = osTaskCreate(&stTasks[ucIndex]);
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	011b      	lsls	r3, r3, #4
 8000864:	4a08      	ldr	r2, [pc, #32]	@ (8000888 <TaskInit+0x40>)
 8000866:	4413      	add	r3, r2
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f80f 	bl	800088c <osTaskCreate>
 800086e:	4603      	mov	r3, r0
 8000870:	71bb      	strb	r3, [r7, #6]
	for(ucIndex = 0; ucIndex < TASKS_MAX_SIZE; ucIndex++)
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	3301      	adds	r3, #1
 8000876:	71fb      	strb	r3, [r7, #7]
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	2b03      	cmp	r3, #3
 800087c:	d9f0      	bls.n	8000860 <TaskInit+0x18>
	}

	return blFlag;
 800087e:	79bb      	ldrb	r3, [r7, #6]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000004 	.word	0x20000004

0800088c <osTaskCreate>:
//Outputs : None
//Return  : TRUE - created thread successfully , FALSE - error
//Notes   : None
//*****************************************************************************
static bool osTaskCreate(TASKS *stTask)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b08d      	sub	sp, #52	@ 0x34
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000894:	2300      	movs	r3, #0
 8000896:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	osThreadAttr_t attr = {0, 0, 0, 0, 0, 0, 0, 0, 0};
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	2224      	movs	r2, #36	@ 0x24
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f005 fc2a 	bl	80060fc <memset>

	if(stTask != NULL)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d037      	beq.n	800091e <osTaskCreate+0x92>
	{
		attr.name = (const char *)stTask->pucTaskName;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	60bb      	str	r3, [r7, #8]
		attr.stack_size = stTask->ulStackSize;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	61fb      	str	r3, [r7, #28]
		attr.priority = (osPriority_t)osPriorityNormal;
 80008ba:	2318      	movs	r3, #24
 80008bc:	623b      	str	r3, [r7, #32]

		ThreadHandles[ucThreadIndex] = osThreadNew(stTask->pTaskFunc,
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	4a1a      	ldr	r2, [pc, #104]	@ (800092c <osTaskCreate+0xa0>)
 80008c4:	7812      	ldrb	r2, [r2, #0]
 80008c6:	4614      	mov	r4, r2
 80008c8:	f107 0208 	add.w	r2, r7, #8
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f001 ff58 	bl	8002784 <osThreadNew>
 80008d4:	4603      	mov	r3, r0
 80008d6:	4a16      	ldr	r2, [pc, #88]	@ (8000930 <osTaskCreate+0xa4>)
 80008d8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
														NULL, &attr);

		if(ThreadHandles[ucThreadIndex] == NULL)
 80008dc:	4b13      	ldr	r3, [pc, #76]	@ (800092c <osTaskCreate+0xa0>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <osTaskCreate+0xa4>)
 80008e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d109      	bne.n	8000900 <osTaskCreate+0x74>
		{
			blFlag = FALSE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		    printf("Failed to create thread: %s\r\n", stTask->pucTaskName);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4619      	mov	r1, r3
 80008f8:	480e      	ldr	r0, [pc, #56]	@ (8000934 <osTaskCreate+0xa8>)
 80008fa:	f005 fab7 	bl	8005e6c <iprintf>
 80008fe:	e00e      	b.n	800091e <osTaskCreate+0x92>
		}
		else
		{
			printf("Created thread: %s\r\n", stTask->pucTaskName);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4619      	mov	r1, r3
 8000906:	480c      	ldr	r0, [pc, #48]	@ (8000938 <osTaskCreate+0xac>)
 8000908:	f005 fab0 	bl	8005e6c <iprintf>
			ucThreadIndex++;
 800090c:	4b07      	ldr	r3, [pc, #28]	@ (800092c <osTaskCreate+0xa0>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	3301      	adds	r3, #1
 8000912:	b2da      	uxtb	r2, r3
 8000914:	4b05      	ldr	r3, [pc, #20]	@ (800092c <osTaskCreate+0xa0>)
 8000916:	701a      	strb	r2, [r3, #0]
			blFlag = TRUE;
 8000918:	2301      	movs	r3, #1
 800091a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}

	}

	return blFlag;
 800091e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000922:	4618      	mov	r0, r3
 8000924:	3734      	adds	r7, #52	@ 0x34
 8000926:	46bd      	mov	sp, r7
 8000928:	bd90      	pop	{r4, r7, pc}
 800092a:	bf00      	nop
 800092c:	20000100 	.word	0x20000100
 8000930:	200000f0 	.word	0x200000f0
 8000934:	08006d14 	.word	0x08006d14
 8000938:	08006d34 	.word	0x08006d34

0800093c <CreateUARTMutex>:
//Outputs : None
//Return  : TRUE - return success , FALSE - Failed
//Notes   : None
//*****************************************************************************
static bool CreateUARTMutex()
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
	bool blFlag = FALSE;
 8000942:	2300      	movs	r3, #0
 8000944:	71fb      	strb	r3, [r7, #7]

	uartMutex = osMutexNew(NULL);
 8000946:	2000      	movs	r0, #0
 8000948:	f001 ffc9 	bl	80028de <osMutexNew>
 800094c:	4603      	mov	r3, r0
 800094e:	4a06      	ldr	r2, [pc, #24]	@ (8000968 <CreateUARTMutex+0x2c>)
 8000950:	6013      	str	r3, [r2, #0]

	if(uartMutex != NULL)
 8000952:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <CreateUARTMutex+0x2c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <CreateUARTMutex+0x22>
	{
		blFlag = TRUE;
 800095a:	2301      	movs	r3, #1
 800095c:	71fb      	strb	r3, [r7, #7]
	}

	return blFlag;
 800095e:	79fb      	ldrb	r3, [r7, #7]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000104 	.word	0x20000104

0800096c <UARTMutexRelease>:
//Outputs : None
//Return  : TRUE - return success , FALSE - Failed
//Notes   : None
//*****************************************************************************
bool UARTMutexRelease()
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
	bool blFlag = FALSE;
 8000972:	2300      	movs	r3, #0
 8000974:	71fb      	strb	r3, [r7, #7]

	if(osMutexRelease(uartMutex) == osOK)
 8000976:	4b07      	ldr	r3, [pc, #28]	@ (8000994 <UARTMutexRelease+0x28>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4618      	mov	r0, r3
 800097c:	f002 f880 	bl	8002a80 <osMutexRelease>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d101      	bne.n	800098a <UARTMutexRelease+0x1e>
	{
		blFlag = TRUE;
 8000986:	2301      	movs	r3, #1
 8000988:	71fb      	strb	r3, [r7, #7]
	}

	return blFlag;
 800098a:	79fb      	ldrb	r3, [r7, #7]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000104 	.word	0x20000104

08000998 <UARTMutexAcquire>:
//Outputs : None
//Return  : TRUE - return success , FALSE - Failed
//Notes   : None
//*****************************************************************************
bool UARTMutexAcquire()
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
	bool blFlag = FALSE;
 800099e:	2300      	movs	r3, #0
 80009a0:	71fb      	strb	r3, [r7, #7]

	if(osMutexAcquire(uartMutex, osWaitForever) == osOK)
 80009a2:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <UARTMutexAcquire+0x2c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f04f 31ff 	mov.w	r1, #4294967295
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 f81d 	bl	80029ea <osMutexAcquire>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d101      	bne.n	80009ba <UARTMutexAcquire+0x22>
	{
		blFlag = TRUE;
 80009b6:	2301      	movs	r3, #1
 80009b8:	71fb      	strb	r3, [r7, #7]
	}

	return blFlag;
 80009ba:	79fb      	ldrb	r3, [r7, #7]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000104 	.word	0x20000104

080009c8 <osTaskDelay>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void osTaskDelay(uint32 delay)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	osDelay(delay);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f001 ff69 	bl	80028a8 <osDelay>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <PollerTask>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void PollerTask()
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	@ 0x28
 80009e4:	af02      	add	r7, sp, #8
	REQUEST_MSG stReqMsg = {0, 0, 0};
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	2300      	movs	r3, #0
 80009ec:	763b      	strb	r3, [r7, #24]
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
	ACK_MSG stAckMsg = {0, 0, 0, 0};
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
	WATCHDOG_EVENT stPollerEvent = {0};
 80009fe:	2300      	movs	r3, #0
 8000a00:	713b      	strb	r3, [r7, #4]

	if((osMsgqPollerToRecieverInit(sizeof(stReqMsg))) && \
 8000a02:	200c      	movs	r0, #12
 8000a04:	f7ff fd78 	bl	80004f8 <osMsgqPollerToRecieverInit>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d065      	beq.n	8000ada <PollerTask+0xfa>
			(osMsgqWatchdogInit(sizeof(stPollerEvent))))
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f7ff fe1c 	bl	800064c <osMsgqWatchdogInit>
 8000a14:	4603      	mov	r3, r0
	if((osMsgqPollerToRecieverInit(sizeof(stReqMsg))) && \
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d05f      	beq.n	8000ada <PollerTask+0xfa>
	{
		while(1)
		{
			if(GPIOReadButtonPress())
 8000a1a:	f7ff fc3d 	bl	8000298 <GPIOReadButtonPress>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d044      	beq.n	8000aae <PollerTask+0xce>
			{
				LOG("\nButton Pressed\r\n");
 8000a24:	f7ff ffb8 	bl	8000998 <UARTMutexAcquire>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d002      	beq.n	8000a34 <PollerTask+0x54>
 8000a2e:	482d      	ldr	r0, [pc, #180]	@ (8000ae4 <PollerTask+0x104>)
 8000a30:	f005 fa84 	bl	8005f3c <puts>
 8000a34:	f7ff ff9a 	bl	800096c <UARTMutexRelease>

				if(PollerTaskBuildRequest(&stReqMsg))
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 f859 	bl	8000af4 <PollerTaskBuildRequest>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d02f      	beq.n	8000aa8 <PollerTask+0xc8>
				{
					LOG("Poller:Request Building\r\n");
 8000a48:	f7ff ffa6 	bl	8000998 <UARTMutexAcquire>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d002      	beq.n	8000a58 <PollerTask+0x78>
 8000a52:	4825      	ldr	r0, [pc, #148]	@ (8000ae8 <PollerTask+0x108>)
 8000a54:	f005 fa72 	bl	8005f3c <puts>
 8000a58:	f7ff ff88 	bl	800096c <UARTMutexRelease>

					if(osMsgqMessageSendToReceiver(stReqMsg))
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a64:	f7ff fd80 	bl	8000568 <osMsgqMessageSendToReceiver>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d002      	beq.n	8000a74 <PollerTask+0x94>
					{
						osTaskDelay(DELAY_200);
 8000a6e:	20c8      	movs	r0, #200	@ 0xc8
 8000a70:	f7ff ffaa 	bl	80009c8 <osTaskDelay>
					}

					if(osMsgqMessageRcvFromReceiver(&stAckMsg))
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fdc9 	bl	8000610 <osMsgqMessageRcvFromReceiver>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d011      	beq.n	8000aa8 <PollerTask+0xc8>
					{
						LOG("Poller: ACKUID=%lu, CMD=0x%02X, "
 8000a84:	f7ff ff88 	bl	8000998 <UARTMutexAcquire>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d00a      	beq.n	8000aa4 <PollerTask+0xc4>
 8000a8e:	68b9      	ldr	r1, [r7, #8]
 8000a90:	7b3b      	ldrb	r3, [r7, #12]
 8000a92:	461a      	mov	r2, r3
 8000a94:	7b7b      	ldrb	r3, [r7, #13]
 8000a96:	4618      	mov	r0, r3
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	4813      	ldr	r0, [pc, #76]	@ (8000aec <PollerTask+0x10c>)
 8000aa0:	f005 f9e4 	bl	8005e6c <iprintf>
 8000aa4:	f7ff ff62 	bl	800096c <UARTMutexRelease>
									"STATE=0x%02X, DATA=0x%08lX\r\n\n", \
								stAckMsg.ulUId, stAckMsg.ucCmd,
								stAckMsg.ucState, stAckMsg.ulData);
					}
				}
				osTaskDelay(DELAY_100);
 8000aa8:	2064      	movs	r0, #100	@ 0x64
 8000aaa:	f7ff ff8d 	bl	80009c8 <osTaskDelay>
			}
			stPollerEvent.src = WATCHDOG_SRC_POLLER;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	713b      	strb	r3, [r7, #4]
			if(!osMsgqSendToWatchdog(stPollerEvent))
 8000ab2:	7938      	ldrb	r0, [r7, #4]
 8000ab4:	f7ff fde6 	bl	8000684 <osMsgqSendToWatchdog>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	f083 0301 	eor.w	r3, r3, #1
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0aa      	beq.n	8000a1a <PollerTask+0x3a>
			{
				LOG("Poller : Send Event to watchDogHandler Failed\r\n");
 8000ac4:	f7ff ff68 	bl	8000998 <UARTMutexAcquire>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d002      	beq.n	8000ad4 <PollerTask+0xf4>
 8000ace:	4808      	ldr	r0, [pc, #32]	@ (8000af0 <PollerTask+0x110>)
 8000ad0:	f005 fa34 	bl	8005f3c <puts>
 8000ad4:	f7ff ff4a 	bl	800096c <UARTMutexRelease>
			if(GPIOReadButtonPress())
 8000ad8:	e79f      	b.n	8000a1a <PollerTask+0x3a>
			}
		}
	}
}
 8000ada:	bf00      	nop
 8000adc:	3720      	adds	r7, #32
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	08006d4c 	.word	0x08006d4c
 8000ae8:	08006d60 	.word	0x08006d60
 8000aec:	08006d7c 	.word	0x08006d7c
 8000af0:	08006dbc 	.word	0x08006dbc

08000af4 <PollerTaskBuildRequest>:
//Outputs : None
//Return  : TRUE - Request Message built, FALSE - error
//Notes   : None
//*****************************************************************************
static bool PollerTaskBuildRequest(REQUEST_MSG* stReqMsg)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	73fb      	strb	r3, [r7, #15]

	if(stReqMsg != NULL)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d018      	beq.n	8000b38 <PollerTaskBuildRequest+0x44>
	{
		stReqMsg->ulUId = ++ulUIdCounter;
 8000b06:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <PollerTaskBuildRequest+0x50>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b44 <PollerTaskBuildRequest+0x50>)
 8000b0e:	6013      	str	r3, [r2, #0]
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <PollerTaskBuildRequest+0x50>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	601a      	str	r2, [r3, #0]
		stReqMsg->ucCmd = SET_CMD;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	711a      	strb	r2, [r3, #4]
		ulDATA = ulDATA ^ ulMASK;
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <PollerTaskBuildRequest+0x54>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <PollerTaskBuildRequest+0x58>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4053      	eors	r3, r2
 8000b28:	4a07      	ldr	r2, [pc, #28]	@ (8000b48 <PollerTaskBuildRequest+0x54>)
 8000b2a:	6013      	str	r3, [r2, #0]
		stReqMsg->ulData = ulDATA;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <PollerTaskBuildRequest+0x54>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	609a      	str	r2, [r3, #8]
		blFlag = TRUE;
 8000b34:	2301      	movs	r3, #1
 8000b36:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	20000108 	.word	0x20000108
 8000b48:	2000010c 	.word	0x2000010c
 8000b4c:	20000044 	.word	0x20000044

08000b50 <RecieverTask>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void RecieverTask()
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08c      	sub	sp, #48	@ 0x30
 8000b54:	af00      	add	r7, sp, #0
	REQUEST_MSG stReqMsg = {0, 0, 0};
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	@ 0x28
	ACK_MSG stAckMsg = {0, 0, 0, 0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
	LOGGER_MSG stLogMsg = {0, 0};
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	2300      	movs	r3, #0
 8000b76:	743b      	strb	r3, [r7, #16]
	LOGACK_MSG stLogAckMsg = {0, 0};
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	723b      	strb	r3, [r7, #8]
	bool blFlag = FALSE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8 ucStatus = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	WATCHDOG_EVENT stReceiverEvent = {0};
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	703b      	strb	r3, [r7, #0]

	if((osMsgqRecieverToPollerInit(sizeof(stAckMsg))) && \
 8000b90:	200c      	movs	r0, #12
 8000b92:	f7ff fccd 	bl	8000530 <osMsgqRecieverToPollerInit>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f000 8084 	beq.w	8000ca6 <RecieverTask+0x156>
			(osMsgqReceiverToLoggerInit(sizeof(stLogMsg))))
 8000b9e:	2008      	movs	r0, #8
 8000ba0:	f7ff fda8 	bl	80006f4 <osMsgqReceiverToLoggerInit>
 8000ba4:	4603      	mov	r3, r0
	if((osMsgqRecieverToPollerInit(sizeof(stAckMsg))) && \
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d07d      	beq.n	8000ca6 <RecieverTask+0x156>
	{
		while(1)
		{
			if(osMsgqMessageRcvFromPoller(&stReqMsg))
 8000baa:	f107 0320 	add.w	r3, r7, #32
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fcf6 	bl	80005a0 <osMsgqMessageRcvFromPoller>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d05c      	beq.n	8000c74 <RecieverTask+0x124>
			{
				LOG("Receiver: REQUID=%lu CMD=0x%02X DATA=0x%08lX\r\n",
 8000bba:	f7ff feed 	bl	8000998 <UARTMutexAcquire>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d007      	beq.n	8000bd4 <RecieverTask+0x84>
 8000bc4:	6a39      	ldr	r1, [r7, #32]
 8000bc6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000bca:	461a      	mov	r2, r3
 8000bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bce:	4838      	ldr	r0, [pc, #224]	@ (8000cb0 <RecieverTask+0x160>)
 8000bd0:	f005 f94c 	bl	8005e6c <iprintf>
 8000bd4:	f7ff feca 	bl	800096c <UARTMutexRelease>
						stReqMsg.ulUId, stReqMsg.ucCmd, stReqMsg.ulData);
				blFlag = RecieverTaskProcessRequest(&stReqMsg);
 8000bd8:	f107 0320 	add.w	r3, r7, #32
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 f895 	bl	8000d0c <RecieverTaskProcessRequest>
 8000be2:	4603      	mov	r3, r0
 8000be4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				ucStatus = (blFlag != FALSE) ? ACK_STATUS_OK : ACK_STAUS_ERROR;
 8000be8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bec:	f083 0301 	eor.w	r3, r3, #1
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

				if(ReceiverTaskSetAckMsg(&stAckMsg, ucStatus))
 8000bf6:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f85b 	bl	8000cbc <ReceiverTaskSetAckMsg>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d00b      	beq.n	8000c24 <RecieverTask+0xd4>
				{
					if(osMsgqMessageSendToPoller(stAckMsg))
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c14:	f7ff fce0 	bl	80005d8 <osMsgqMessageSendToPoller>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d002      	beq.n	8000c24 <RecieverTask+0xd4>
					{
						osTaskDelay(DELAY_200);
 8000c1e:	20c8      	movs	r0, #200	@ 0xc8
 8000c20:	f7ff fed2 	bl	80009c8 <osTaskDelay>
					}
				}

				if(RecieverTaskBuildLoggerMsg(&stLogMsg))
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 f907 	bl	8000e3c <RecieverTaskBuildLoggerMsg>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d00b      	beq.n	8000c4c <RecieverTask+0xfc>
				{
					if(osMsgqMessageSendToLogger(stLogMsg))
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c3c:	f7ff fd92 	bl	8000764 <osMsgqMessageSendToLogger>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d002      	beq.n	8000c4c <RecieverTask+0xfc>
					{
						osTaskDelay(DELAY_200);
 8000c46:	20c8      	movs	r0, #200	@ 0xc8
 8000c48:	f7ff febe 	bl	80009c8 <osTaskDelay>
					}
				}

				if(osMsgqMessageRcvFromLogger(&stLogAckMsg))
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fddc 	bl	800080c <osMsgqMessageRcvFromLogger>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d00c      	beq.n	8000c74 <RecieverTask+0x124>
				{
					LOG("Receiver: LOGACKUID=%lu State=0x%02X\r\n",
 8000c5a:	f7ff fe9d 	bl	8000998 <UARTMutexAcquire>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d005      	beq.n	8000c70 <RecieverTask+0x120>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	7a3a      	ldrb	r2, [r7, #8]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4812      	ldr	r0, [pc, #72]	@ (8000cb4 <RecieverTask+0x164>)
 8000c6c:	f005 f8fe 	bl	8005e6c <iprintf>
 8000c70:	f7ff fe7c 	bl	800096c <UARTMutexRelease>
							stLogAckMsg.ulUId, stLogAckMsg.ucState);
				}
			}
			stReceiverEvent.src = WATCHDOG_SRC_RECEIVER;
 8000c74:	2302      	movs	r3, #2
 8000c76:	703b      	strb	r3, [r7, #0]
			if(!osMsgqSendToWatchdog(stReceiverEvent))
 8000c78:	7838      	ldrb	r0, [r7, #0]
 8000c7a:	f7ff fd03 	bl	8000684 <osMsgqSendToWatchdog>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	f083 0301 	eor.w	r3, r3, #1
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d009      	beq.n	8000c9e <RecieverTask+0x14e>
			{
				LOG("Receiver : Send Event to watchDogHandler Failed");
 8000c8a:	f7ff fe85 	bl	8000998 <UARTMutexAcquire>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d002      	beq.n	8000c9a <RecieverTask+0x14a>
 8000c94:	4808      	ldr	r0, [pc, #32]	@ (8000cb8 <RecieverTask+0x168>)
 8000c96:	f005 f8e9 	bl	8005e6c <iprintf>
 8000c9a:	f7ff fe67 	bl	800096c <UARTMutexRelease>
			}
			osTaskDelay(DELAY_100);
 8000c9e:	2064      	movs	r0, #100	@ 0x64
 8000ca0:	f7ff fe92 	bl	80009c8 <osTaskDelay>
			if(osMsgqMessageRcvFromPoller(&stReqMsg))
 8000ca4:	e781      	b.n	8000baa <RecieverTask+0x5a>
		}
	}
}
 8000ca6:	bf00      	nop
 8000ca8:	3730      	adds	r7, #48	@ 0x30
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	08006dec 	.word	0x08006dec
 8000cb4:	08006e1c 	.word	0x08006e1c
 8000cb8:	08006e44 	.word	0x08006e44

08000cbc <ReceiverTaskSetAckMsg>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
static bool ReceiverTaskSetAckMsg(ACK_MSG* stAckMsg, uint8 ucState)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	70fb      	strb	r3, [r7, #3]
	bool blFlag = FALSE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	73fb      	strb	r3, [r7, #15]
	CMD_TYPE cmd = CMD_ACK;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73bb      	strb	r3, [r7, #14]

	if(stAckMsg != NULL)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00f      	beq.n	8000cf6 <ReceiverTaskSetAckMsg+0x3a>
	{
		stAckMsg->ulUId = sgulUId;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d04 <ReceiverTaskSetAckMsg+0x48>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	601a      	str	r2, [r3, #0]
		stAckMsg->ucCmd = cmd;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	7bba      	ldrb	r2, [r7, #14]
 8000ce2:	711a      	strb	r2, [r3, #4]
		stAckMsg->ulData = sgulData;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <ReceiverTaskSetAckMsg+0x4c>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	609a      	str	r2, [r3, #8]
		stAckMsg->ucState = ucState;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	78fa      	ldrb	r2, [r7, #3]
 8000cf0:	715a      	strb	r2, [r3, #5]
		blFlag = TRUE;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000110 	.word	0x20000110
 8000d08:	20000048 	.word	0x20000048

08000d0c <RecieverTaskProcessRequest>:
//Outputs : None
//Return  : TRUE - Request Message Processed, FALSE - error
//Notes   : None
//*****************************************************************************
static bool RecieverTaskProcessRequest(REQUEST_MSG* stReqMsg)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	73fb      	strb	r3, [r7, #15]

	do
	{
		if(stReqMsg == NULL)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d01d      	beq.n	8000d5a <RecieverTaskProcessRequest+0x4e>
		{
			break;
		}

		if(!RecieverTaskProcessUID(stReqMsg))
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f000 f828 	bl	8000d74 <RecieverTaskProcessUID>
 8000d24:	4603      	mov	r3, r0
 8000d26:	f083 0301 	eor.w	r3, r3, #1
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d116      	bne.n	8000d5e <RecieverTaskProcessRequest+0x52>
		{
			break;
		}

		if(!RecieverTaskProcessDATA(stReqMsg))
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f000 f86b 	bl	8000e0c <RecieverTaskProcessDATA>
 8000d36:	4603      	mov	r3, r0
 8000d38:	f083 0301 	eor.w	r3, r3, #1
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d10f      	bne.n	8000d62 <RecieverTaskProcessRequest+0x56>
		{
			break;
		}

		if(!RecieverTaskProcessCMD(stReqMsg))
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f000 f82e 	bl	8000da4 <RecieverTaskProcessCMD>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	f083 0301 	eor.w	r3, r3, #1
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d108      	bne.n	8000d66 <RecieverTaskProcessRequest+0x5a>
		{
			break;
		}

		// If all succeeded
		blFlag = TRUE;
 8000d54:	2301      	movs	r3, #1
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	e006      	b.n	8000d68 <RecieverTaskProcessRequest+0x5c>
			break;
 8000d5a:	bf00      	nop
 8000d5c:	e004      	b.n	8000d68 <RecieverTaskProcessRequest+0x5c>
			break;
 8000d5e:	bf00      	nop
 8000d60:	e002      	b.n	8000d68 <RecieverTaskProcessRequest+0x5c>
			break;
 8000d62:	bf00      	nop
 8000d64:	e000      	b.n	8000d68 <RecieverTaskProcessRequest+0x5c>
			break;
 8000d66:	bf00      	nop

	}while(0);

	return blFlag;
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <RecieverTaskProcessUID>:
//Outputs : None
//Return  : TRUE - Request Message UID processed, FALSE - error
//Notes   : None
//*****************************************************************************
static bool RecieverTaskProcessUID(REQUEST_MSG* stReqMsg)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	73fb      	strb	r3, [r7, #15]

	if(stReqMsg != NULL)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d005      	beq.n	8000d92 <RecieverTaskProcessUID+0x1e>
	{
		sgulUId =  stReqMsg->ulUId;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a05      	ldr	r2, [pc, #20]	@ (8000da0 <RecieverTaskProcessUID+0x2c>)
 8000d8c:	6013      	str	r3, [r2, #0]
		blFlag = TRUE;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000110 	.word	0x20000110

08000da4 <RecieverTaskProcessCMD>:
//Outputs : None
//Return  : TRUE - Request Message CMD processed, FALSE - error
//Notes   : None
//*****************************************************************************
static bool RecieverTaskProcessCMD(REQUEST_MSG* stReqMsg)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	73fb      	strb	r3, [r7, #15]

	if(stReqMsg != NULL)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d01f      	beq.n	8000df6 <RecieverTaskProcessCMD+0x52>
	{
		switch(stReqMsg->ucCmd)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	791b      	ldrb	r3, [r3, #4]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d011      	beq.n	8000de2 <RecieverTaskProcessCMD+0x3e>
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d112      	bne.n	8000de8 <RecieverTaskProcessCMD+0x44>
		{
			case CMD_SET:
				if((sgulData & MASK) == MASK)
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <RecieverTaskProcessCMD+0x5c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <RecieverTaskProcessCMD+0x32>
				{
					gucLEDState = TRUE;
 8000dce:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <RecieverTaskProcessCMD+0x60>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
 8000dd4:	e002      	b.n	8000ddc <RecieverTaskProcessCMD+0x38>
				}
				else
				{
					gucLEDState = FALSE;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <RecieverTaskProcessCMD+0x60>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
				}

				blFlag = TRUE;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]
				break;
 8000de0:	e009      	b.n	8000df6 <RecieverTaskProcessCMD+0x52>

			case CMD_GET:
				//:TO DO: Retrieve the current LED state
				blFlag = TRUE;
 8000de2:	2301      	movs	r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]
				break;
 8000de6:	e006      	b.n	8000df6 <RecieverTaskProcessCMD+0x52>

			default:
				printf("Invalid Command: 0x%02X\r\n", stReqMsg->ucCmd);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	791b      	ldrb	r3, [r3, #4]
 8000dec:	4619      	mov	r1, r3
 8000dee:	4806      	ldr	r0, [pc, #24]	@ (8000e08 <RecieverTaskProcessCMD+0x64>)
 8000df0:	f005 f83c 	bl	8005e6c <iprintf>
				break;
 8000df4:	bf00      	nop
		}
	}

	return blFlag;
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000048 	.word	0x20000048
 8000e04:	20000114 	.word	0x20000114
 8000e08:	08006e74 	.word	0x08006e74

08000e0c <RecieverTaskProcessDATA>:
//Outputs : None
//Return  : TRUE - Request Message DATA processed, FALSE - error
//Notes   : None
//*****************************************************************************
static bool RecieverTaskProcessDATA(REQUEST_MSG* stReqMsg)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]

	if(stReqMsg != NULL)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d005      	beq.n	8000e2a <RecieverTaskProcessDATA+0x1e>
	{
		sgulData = stReqMsg->ulData;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	4a05      	ldr	r2, [pc, #20]	@ (8000e38 <RecieverTaskProcessDATA+0x2c>)
 8000e24:	6013      	str	r3, [r2, #0]
		blFlag = TRUE;
 8000e26:	2301      	movs	r3, #1
 8000e28:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000048 	.word	0x20000048

08000e3c <RecieverTaskBuildLoggerMsg>:
//Outputs : None
//Return  : TRUE - Request Message built, FALSE - error
//Notes   : None
//*****************************************************************************
static bool RecieverTaskBuildLoggerMsg(LOGGER_MSG* stLogMsg)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]

	if(stLogMsg != NULL)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d009      	beq.n	8000e62 <RecieverTaskBuildLoggerMsg+0x26>
	{
		stLogMsg->ulUId = sgulUId;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <RecieverTaskBuildLoggerMsg+0x34>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	601a      	str	r2, [r3, #0]
		stLogMsg->ucLEDState = gucLEDState;
 8000e56:	4b07      	ldr	r3, [pc, #28]	@ (8000e74 <RecieverTaskBuildLoggerMsg+0x38>)
 8000e58:	781a      	ldrb	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	711a      	strb	r2, [r3, #4]
		blFlag = TRUE;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
	}

	return blFlag;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000110 	.word	0x20000110
 8000e74:	20000114 	.word	0x20000114

08000e78 <WatchDogHandler>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
void WatchDogHandler()
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
	WATCHDOG_EVENT stEvent = {0};
 8000e7e:	2300      	movs	r3, #0
 8000e80:	713b      	strb	r3, [r7, #4]

	WatchDogTimerInit();
 8000e82:	f7ff f983 	bl	800018c <WatchDogTimerInit>

	while(1)
	{
		if(osMsgqRcvFromWatchdog(&stEvent))
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fc15 	bl	80006b8 <osMsgqRcvFromWatchdog>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d019      	beq.n	8000ec8 <WatchDogHandler+0x50>
		{
			if(WatchDogHandlerProcessEvent(&stEvent))
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f81e 	bl	8000ed8 <WatchDogHandlerProcessEvent>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d012      	beq.n	8000ec8 <WatchDogHandler+0x50>
			{
				if(stFlags.ucAll == ALL_EVENTS_SET)
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <WatchDogHandler+0x58>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b07      	cmp	r3, #7
 8000ea8:	d10e      	bne.n	8000ec8 <WatchDogHandler+0x50>
				{
					WatchdogTimerClear();
 8000eaa:	f7ff f98f 	bl	80001cc <WatchdogTimerClear>
					LOG("Watchdog Cleared\r\n");
 8000eae:	f7ff fd73 	bl	8000998 <UARTMutexAcquire>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d002      	beq.n	8000ebe <WatchDogHandler+0x46>
 8000eb8:	4806      	ldr	r0, [pc, #24]	@ (8000ed4 <WatchDogHandler+0x5c>)
 8000eba:	f005 f83f 	bl	8005f3c <puts>
 8000ebe:	f7ff fd55 	bl	800096c <UARTMutexRelease>
					stFlags.ucAll = 0;  // Reset for next cycle
 8000ec2:	4b03      	ldr	r3, [pc, #12]	@ (8000ed0 <WatchDogHandler+0x58>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		osTaskDelay(DELAY_100);
 8000ec8:	2064      	movs	r0, #100	@ 0x64
 8000eca:	f7ff fd7d 	bl	80009c8 <osTaskDelay>
		if(osMsgqRcvFromWatchdog(&stEvent))
 8000ece:	e7da      	b.n	8000e86 <WatchDogHandler+0xe>
 8000ed0:	20000118 	.word	0x20000118
 8000ed4:	08006e90 	.word	0x08006e90

08000ed8 <WatchDogHandlerProcessEvent>:
//Outputs : None
//Return  : None
//Notes   : None
//*****************************************************************************
static bool WatchDogHandlerProcessEvent(WATCHDOG_EVENT* stEvent)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	bool blFlag = FALSE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	73fb      	strb	r3, [r7, #15]

	if(stEvent != NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d02c      	beq.n	8000f44 <WatchDogHandlerProcessEvent+0x6c>
	{
		switch(stEvent->src)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d016      	beq.n	8000f20 <WatchDogHandlerProcessEvent+0x48>
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	dc1c      	bgt.n	8000f30 <WatchDogHandlerProcessEvent+0x58>
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d002      	beq.n	8000f00 <WatchDogHandlerProcessEvent+0x28>
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d008      	beq.n	8000f10 <WatchDogHandlerProcessEvent+0x38>
 8000efe:	e017      	b.n	8000f30 <WatchDogHandlerProcessEvent+0x58>
		{
			case WATCHDOG_SRC_POLLER :
				stFlags.BITS.ucPoller = TRUE;
 8000f00:	4a13      	ldr	r2, [pc, #76]	@ (8000f50 <WatchDogHandlerProcessEvent+0x78>)
 8000f02:	7813      	ldrb	r3, [r2, #0]
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	7013      	strb	r3, [r2, #0]
				blFlag = TRUE;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	73fb      	strb	r3, [r7, #15]
				break;
 8000f0e:	e019      	b.n	8000f44 <WatchDogHandlerProcessEvent+0x6c>
			case WATCHDOG_SRC_RECEIVER :
				stFlags.BITS.ucReceiver = TRUE;
 8000f10:	4a0f      	ldr	r2, [pc, #60]	@ (8000f50 <WatchDogHandlerProcessEvent+0x78>)
 8000f12:	7813      	ldrb	r3, [r2, #0]
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	7013      	strb	r3, [r2, #0]
				blFlag = TRUE;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	73fb      	strb	r3, [r7, #15]
				break;
 8000f1e:	e011      	b.n	8000f44 <WatchDogHandlerProcessEvent+0x6c>
			case WATCHDOG_SRC_LOGGER :
				stFlags.BITS.ucLogger = TRUE;
 8000f20:	4a0b      	ldr	r2, [pc, #44]	@ (8000f50 <WatchDogHandlerProcessEvent+0x78>)
 8000f22:	7813      	ldrb	r3, [r2, #0]
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	7013      	strb	r3, [r2, #0]
				blFlag = TRUE;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]
				break;
 8000f2e:	e009      	b.n	8000f44 <WatchDogHandlerProcessEvent+0x6c>
			default :
				LOG("Invalid Event\r\n");
 8000f30:	f7ff fd32 	bl	8000998 <UARTMutexAcquire>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <WatchDogHandlerProcessEvent+0x68>
 8000f3a:	4806      	ldr	r0, [pc, #24]	@ (8000f54 <WatchDogHandlerProcessEvent+0x7c>)
 8000f3c:	f004 fffe 	bl	8005f3c <puts>
 8000f40:	f7ff fd14 	bl	800096c <UARTMutexRelease>
		}
	}

	return blFlag;
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000118 	.word	0x20000118
 8000f54:	08006ea4 	.word	0x08006ea4

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5c:	f000 fa68 	bl	8001430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f60:	f000 f81a 	bl	8000f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f64:	f000 f884 	bl	8001070 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f68:	f000 f858 	bl	800101c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f6c:	f001 fbc2 	bl	80026f4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f70:	4a06      	ldr	r2, [pc, #24]	@ (8000f8c <main+0x34>)
 8000f72:	2100      	movs	r1, #0
 8000f74:	4806      	ldr	r0, [pc, #24]	@ (8000f90 <main+0x38>)
 8000f76:	f001 fc05 	bl	8002784 <osThreadNew>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a05      	ldr	r2, [pc, #20]	@ (8000f94 <main+0x3c>)
 8000f7e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
  AppMain();
 8000f80:	f7ff f8e6 	bl	8000150 <AppMain>
  /* Start scheduler */
  osKernelStart();
 8000f84:	f001 fbd8 	bl	8002738 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <main+0x30>
 8000f8c:	08006ed8 	.word	0x08006ed8
 8000f90:	08001139 	.word	0x08001139
 8000f94:	20000164 	.word	0x20000164

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b090      	sub	sp, #64	@ 0x40
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 0318 	add.w	r3, r7, #24
 8000fa2:	2228      	movs	r2, #40	@ 0x28
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f005 f8a8 	bl	80060fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
 8000fb8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc2:	2310      	movs	r3, #16
 8000fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000fce:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd4:	f107 0318 	add.w	r3, r7, #24
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 fd23 	bl	8001a24 <HAL_RCC_OscConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000fe4:	f000 f8b0 	bl	8001148 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe8:	230f      	movs	r3, #15
 8000fea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fec:	2302      	movs	r3, #2
 8000fee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ff8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2102      	movs	r1, #2
 8001002:	4618      	mov	r0, r3
 8001004:	f000 ff90 	bl	8001f28 <HAL_RCC_ClockConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800100e:	f000 f89b 	bl	8001148 <Error_Handler>
  }
}
 8001012:	bf00      	nop
 8001014:	3740      	adds	r7, #64	@ 0x40
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001020:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <MX_USART2_UART_Init+0x4c>)
 8001022:	4a12      	ldr	r2, [pc, #72]	@ (800106c <MX_USART2_UART_Init+0x50>)
 8001024:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001026:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <MX_USART2_UART_Init+0x4c>)
 8001028:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800102c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <MX_USART2_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001034:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <MX_USART2_UART_Init+0x4c>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800103a:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <MX_USART2_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001040:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <MX_USART2_UART_Init+0x4c>)
 8001042:	220c      	movs	r2, #12
 8001044:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <MX_USART2_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <MX_USART2_UART_Init+0x4c>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <MX_USART2_UART_Init+0x4c>)
 8001054:	f001 f8f6 	bl	8002244 <HAL_UART_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800105e:	f000 f873 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	2000011c 	.word	0x2000011c
 800106c:	40004400 	.word	0x40004400

08001070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	f107 0310 	add.w	r3, r7, #16
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001084:	4b29      	ldr	r3, [pc, #164]	@ (800112c <MX_GPIO_Init+0xbc>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a28      	ldr	r2, [pc, #160]	@ (800112c <MX_GPIO_Init+0xbc>)
 800108a:	f043 0310 	orr.w	r3, r3, #16
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b26      	ldr	r3, [pc, #152]	@ (800112c <MX_GPIO_Init+0xbc>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0310 	and.w	r3, r3, #16
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109c:	4b23      	ldr	r3, [pc, #140]	@ (800112c <MX_GPIO_Init+0xbc>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a22      	ldr	r2, [pc, #136]	@ (800112c <MX_GPIO_Init+0xbc>)
 80010a2:	f043 0320 	orr.w	r3, r3, #32
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b20      	ldr	r3, [pc, #128]	@ (800112c <MX_GPIO_Init+0xbc>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f003 0320 	and.w	r3, r3, #32
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <MX_GPIO_Init+0xbc>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a1c      	ldr	r2, [pc, #112]	@ (800112c <MX_GPIO_Init+0xbc>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b1a      	ldr	r3, [pc, #104]	@ (800112c <MX_GPIO_Init+0xbc>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010cc:	4b17      	ldr	r3, [pc, #92]	@ (800112c <MX_GPIO_Init+0xbc>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a16      	ldr	r2, [pc, #88]	@ (800112c <MX_GPIO_Init+0xbc>)
 80010d2:	f043 0308 	orr.w	r3, r3, #8
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b14      	ldr	r3, [pc, #80]	@ (800112c <MX_GPIO_Init+0xbc>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0308 	and.w	r3, r3, #8
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2120      	movs	r1, #32
 80010e8:	4811      	ldr	r0, [pc, #68]	@ (8001130 <MX_GPIO_Init+0xc0>)
 80010ea:	f000 fc82 	bl	80019f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	4619      	mov	r1, r3
 8001102:	480c      	ldr	r0, [pc, #48]	@ (8001134 <MX_GPIO_Init+0xc4>)
 8001104:	f000 fada 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001108:	2320      	movs	r3, #32
 800110a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2302      	movs	r3, #2
 8001116:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	4619      	mov	r1, r3
 800111e:	4804      	ldr	r0, [pc, #16]	@ (8001130 <MX_GPIO_Init+0xc0>)
 8001120:	f000 facc 	bl	80016bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001124:	bf00      	nop
 8001126:	3720      	adds	r7, #32
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40021000 	.word	0x40021000
 8001130:	40010800 	.word	0x40010800
 8001134:	40011000 	.word	0x40011000

08001138 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001140:	2001      	movs	r0, #1
 8001142:	f001 fbb1 	bl	80028a8 <osDelay>
 8001146:	e7fb      	b.n	8001140 <StartDefaultTask+0x8>

08001148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800114c:	b672      	cpsid	i
}
 800114e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <Error_Handler+0x8>

08001154 <_write>:
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
int _write(int file, char *ptr, int len)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	b29a      	uxth	r2, r3
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	4804      	ldr	r0, [pc, #16]	@ (800117c <_write+0x28>)
 800116c:	f001 f8ba 	bl	80022e4 <HAL_UART_Transmit>
    return len;
 8001170:	687b      	ldr	r3, [r7, #4]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2000011c 	.word	0x2000011c

08001180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001186:	4b18      	ldr	r3, [pc, #96]	@ (80011e8 <HAL_MspInit+0x68>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	4a17      	ldr	r2, [pc, #92]	@ (80011e8 <HAL_MspInit+0x68>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6193      	str	r3, [r2, #24]
 8001192:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <HAL_MspInit+0x68>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <HAL_MspInit+0x68>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	4a11      	ldr	r2, [pc, #68]	@ (80011e8 <HAL_MspInit+0x68>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a8:	61d3      	str	r3, [r2, #28]
 80011aa:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <HAL_MspInit+0x68>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	210f      	movs	r1, #15
 80011ba:	f06f 0001 	mvn.w	r0, #1
 80011be:	f000 fa54 	bl	800166a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011c2:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <HAL_MspInit+0x6c>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	4a04      	ldr	r2, [pc, #16]	@ (80011ec <HAL_MspInit+0x6c>)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40010000 	.word	0x40010000

080011f0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a1b      	ldr	r2, [pc, #108]	@ (8001278 <HAL_UART_MspInit+0x88>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d12f      	bne.n	8001270 <HAL_UART_MspInit+0x80>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001210:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <HAL_UART_MspInit+0x8c>)
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	4a19      	ldr	r2, [pc, #100]	@ (800127c <HAL_UART_MspInit+0x8c>)
 8001216:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800121a:	61d3      	str	r3, [r2, #28]
 800121c:	4b17      	ldr	r3, [pc, #92]	@ (800127c <HAL_UART_MspInit+0x8c>)
 800121e:	69db      	ldr	r3, [r3, #28]
 8001220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001228:	4b14      	ldr	r3, [pc, #80]	@ (800127c <HAL_UART_MspInit+0x8c>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	4a13      	ldr	r2, [pc, #76]	@ (800127c <HAL_UART_MspInit+0x8c>)
 800122e:	f043 0304 	orr.w	r3, r3, #4
 8001232:	6193      	str	r3, [r2, #24]
 8001234:	4b11      	ldr	r3, [pc, #68]	@ (800127c <HAL_UART_MspInit+0x8c>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001240:	2304      	movs	r3, #4
 8001242:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001248:	2303      	movs	r3, #3
 800124a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	4619      	mov	r1, r3
 8001252:	480b      	ldr	r0, [pc, #44]	@ (8001280 <HAL_UART_MspInit+0x90>)
 8001254:	f000 fa32 	bl	80016bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001258:	2308      	movs	r3, #8
 800125a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	4619      	mov	r1, r3
 800126a:	4805      	ldr	r0, [pc, #20]	@ (8001280 <HAL_UART_MspInit+0x90>)
 800126c:	f000 fa26 	bl	80016bc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001270:	bf00      	nop
 8001272:	3720      	adds	r7, #32
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40004400 	.word	0x40004400
 800127c:	40021000 	.word	0x40021000
 8001280:	40010800 	.word	0x40010800

08001284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <NMI_Handler+0x4>

0800128c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <HardFault_Handler+0x4>

08001294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <MemManage_Handler+0x4>

0800129c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <BusFault_Handler+0x4>

080012a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <UsageFault_Handler+0x4>

080012ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr

080012b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012bc:	f000 f8fe 	bl	80014bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80012c0:	f003 fbfa 	bl	8004ab8 <xTaskGetSchedulerState>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d001      	beq.n	80012ce <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80012ca:	f004 fa9d 	bl	8005808 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b086      	sub	sp, #24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	60f8      	str	r0, [r7, #12]
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	e00a      	b.n	80012fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012e4:	f3af 8000 	nop.w
 80012e8:	4601      	mov	r1, r0
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	60ba      	str	r2, [r7, #8]
 80012f0:	b2ca      	uxtb	r2, r1
 80012f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	3301      	adds	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	429a      	cmp	r2, r3
 8001300:	dbf0      	blt.n	80012e4 <_read+0x12>
  }

  return len;
 8001302:	687b      	ldr	r3, [r7, #4]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <_close>:
  }
  return len;
}

int _close(int file)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001332:	605a      	str	r2, [r3, #4]
  return 0;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <_isatty>:

int _isatty(int file)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001348:	2301      	movs	r3, #1
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001374:	4a14      	ldr	r2, [pc, #80]	@ (80013c8 <_sbrk+0x5c>)
 8001376:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <_sbrk+0x60>)
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001380:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001388:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <_sbrk+0x64>)
 800138a:	4a12      	ldr	r2, [pc, #72]	@ (80013d4 <_sbrk+0x68>)
 800138c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138e:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	429a      	cmp	r2, r3
 800139a:	d207      	bcs.n	80013ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800139c:	f004 fefc 	bl	8006198 <__errno>
 80013a0:	4603      	mov	r3, r0
 80013a2:	220c      	movs	r2, #12
 80013a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
 80013aa:	e009      	b.n	80013c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ac:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b2:	4b07      	ldr	r3, [pc, #28]	@ (80013d0 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a05      	ldr	r2, [pc, #20]	@ (80013d0 <_sbrk+0x64>)
 80013bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20005000 	.word	0x20005000
 80013cc:	00000400 	.word	0x00000400
 80013d0:	20000168 	.word	0x20000168
 80013d4:	20004010 	.word	0x20004010

080013d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013e4:	f7ff fff8 	bl	80013d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e8:	480b      	ldr	r0, [pc, #44]	@ (8001418 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013ea:	490c      	ldr	r1, [pc, #48]	@ (800141c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001420 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a09      	ldr	r2, [pc, #36]	@ (8001424 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001400:	4c09      	ldr	r4, [pc, #36]	@ (8001428 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800140e:	f004 fec9 	bl	80061a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001412:	f7ff fda1 	bl	8000f58 <main>
  bx lr
 8001416:	4770      	bx	lr
  ldr r0, =_sdata
 8001418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800141c:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8001420:	08006f64 	.word	0x08006f64
  ldr r2, =_sbss
 8001424:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8001428:	2000400c 	.word	0x2000400c

0800142c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC1_2_IRQHandler>
	...

08001430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001434:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <HAL_Init+0x28>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a07      	ldr	r2, [pc, #28]	@ (8001458 <HAL_Init+0x28>)
 800143a:	f043 0310 	orr.w	r3, r3, #16
 800143e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001440:	2003      	movs	r0, #3
 8001442:	f000 f907 	bl	8001654 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001446:	200f      	movs	r0, #15
 8001448:	f000 f808 	bl	800145c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800144c:	f7ff fe98 	bl	8001180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40022000 	.word	0x40022000

0800145c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001464:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <HAL_InitTick+0x54>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <HAL_InitTick+0x58>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001472:	fbb3 f3f1 	udiv	r3, r3, r1
 8001476:	fbb2 f3f3 	udiv	r3, r2, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f911 	bl	80016a2 <HAL_SYSTICK_Config>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e00e      	b.n	80014a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b0f      	cmp	r3, #15
 800148e:	d80a      	bhi.n	80014a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001490:	2200      	movs	r2, #0
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f000 f8e7 	bl	800166a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800149c:	4a06      	ldr	r2, [pc, #24]	@ (80014b8 <HAL_InitTick+0x5c>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e000      	b.n	80014a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	2000004c 	.word	0x2000004c
 80014b4:	20000054 	.word	0x20000054
 80014b8:	20000050 	.word	0x20000050

080014bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c0:	4b05      	ldr	r3, [pc, #20]	@ (80014d8 <HAL_IncTick+0x1c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <HAL_IncTick+0x20>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a03      	ldr	r2, [pc, #12]	@ (80014dc <HAL_IncTick+0x20>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	20000054 	.word	0x20000054
 80014dc:	2000016c 	.word	0x2000016c

080014e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return uwTick;
 80014e4:	4b02      	ldr	r3, [pc, #8]	@ (80014f0 <HAL_GetTick+0x10>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	2000016c 	.word	0x2000016c

080014f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001504:	4b0c      	ldr	r3, [pc, #48]	@ (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001510:	4013      	ands	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800151c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001526:	4a04      	ldr	r2, [pc, #16]	@ (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	60d3      	str	r3, [r2, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001540:	4b04      	ldr	r3, [pc, #16]	@ (8001554 <__NVIC_GetPriorityGrouping+0x18>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	f003 0307 	and.w	r3, r3, #7
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	6039      	str	r1, [r7, #0]
 8001562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	2b00      	cmp	r3, #0
 800156a:	db0a      	blt.n	8001582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	b2da      	uxtb	r2, r3
 8001570:	490c      	ldr	r1, [pc, #48]	@ (80015a4 <__NVIC_SetPriority+0x4c>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	0112      	lsls	r2, r2, #4
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	440b      	add	r3, r1
 800157c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001580:	e00a      	b.n	8001598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4908      	ldr	r1, [pc, #32]	@ (80015a8 <__NVIC_SetPriority+0x50>)
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	3b04      	subs	r3, #4
 8001590:	0112      	lsls	r2, r2, #4
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	440b      	add	r3, r1
 8001596:	761a      	strb	r2, [r3, #24]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000e100 	.word	0xe000e100
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b089      	sub	sp, #36	@ 0x24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f1c3 0307 	rsb	r3, r3, #7
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	bf28      	it	cs
 80015ca:	2304      	movcs	r3, #4
 80015cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3304      	adds	r3, #4
 80015d2:	2b06      	cmp	r3, #6
 80015d4:	d902      	bls.n	80015dc <NVIC_EncodePriority+0x30>
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3b03      	subs	r3, #3
 80015da:	e000      	b.n	80015de <NVIC_EncodePriority+0x32>
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	f04f 32ff 	mov.w	r2, #4294967295
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43da      	mvns	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	401a      	ands	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f4:	f04f 31ff 	mov.w	r1, #4294967295
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	43d9      	mvns	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	4313      	orrs	r3, r2
         );
}
 8001606:	4618      	mov	r0, r3
 8001608:	3724      	adds	r7, #36	@ 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001620:	d301      	bcc.n	8001626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001622:	2301      	movs	r3, #1
 8001624:	e00f      	b.n	8001646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001626:	4a0a      	ldr	r2, [pc, #40]	@ (8001650 <SysTick_Config+0x40>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3b01      	subs	r3, #1
 800162c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162e:	210f      	movs	r1, #15
 8001630:	f04f 30ff 	mov.w	r0, #4294967295
 8001634:	f7ff ff90 	bl	8001558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001638:	4b05      	ldr	r3, [pc, #20]	@ (8001650 <SysTick_Config+0x40>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163e:	4b04      	ldr	r3, [pc, #16]	@ (8001650 <SysTick_Config+0x40>)
 8001640:	2207      	movs	r2, #7
 8001642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	e000e010 	.word	0xe000e010

08001654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff ff49 	bl	80014f4 <__NVIC_SetPriorityGrouping>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800167c:	f7ff ff5e 	bl	800153c <__NVIC_GetPriorityGrouping>
 8001680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	68b9      	ldr	r1, [r7, #8]
 8001686:	6978      	ldr	r0, [r7, #20]
 8001688:	f7ff ff90 	bl	80015ac <NVIC_EncodePriority>
 800168c:	4602      	mov	r2, r0
 800168e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001692:	4611      	mov	r1, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff5f 	bl	8001558 <__NVIC_SetPriority>
}
 800169a:	bf00      	nop
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ffb0 	bl	8001610 <SysTick_Config>
 80016b0:	4603      	mov	r3, r0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016bc:	b480      	push	{r7}
 80016be:	b08b      	sub	sp, #44	@ 0x2c
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ce:	e169      	b.n	80019a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016d0:	2201      	movs	r2, #1
 80016d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	f040 8158 	bne.w	800199e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4a9a      	ldr	r2, [pc, #616]	@ (800195c <HAL_GPIO_Init+0x2a0>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d05e      	beq.n	80017b6 <HAL_GPIO_Init+0xfa>
 80016f8:	4a98      	ldr	r2, [pc, #608]	@ (800195c <HAL_GPIO_Init+0x2a0>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d875      	bhi.n	80017ea <HAL_GPIO_Init+0x12e>
 80016fe:	4a98      	ldr	r2, [pc, #608]	@ (8001960 <HAL_GPIO_Init+0x2a4>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d058      	beq.n	80017b6 <HAL_GPIO_Init+0xfa>
 8001704:	4a96      	ldr	r2, [pc, #600]	@ (8001960 <HAL_GPIO_Init+0x2a4>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d86f      	bhi.n	80017ea <HAL_GPIO_Init+0x12e>
 800170a:	4a96      	ldr	r2, [pc, #600]	@ (8001964 <HAL_GPIO_Init+0x2a8>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d052      	beq.n	80017b6 <HAL_GPIO_Init+0xfa>
 8001710:	4a94      	ldr	r2, [pc, #592]	@ (8001964 <HAL_GPIO_Init+0x2a8>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d869      	bhi.n	80017ea <HAL_GPIO_Init+0x12e>
 8001716:	4a94      	ldr	r2, [pc, #592]	@ (8001968 <HAL_GPIO_Init+0x2ac>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d04c      	beq.n	80017b6 <HAL_GPIO_Init+0xfa>
 800171c:	4a92      	ldr	r2, [pc, #584]	@ (8001968 <HAL_GPIO_Init+0x2ac>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d863      	bhi.n	80017ea <HAL_GPIO_Init+0x12e>
 8001722:	4a92      	ldr	r2, [pc, #584]	@ (800196c <HAL_GPIO_Init+0x2b0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d046      	beq.n	80017b6 <HAL_GPIO_Init+0xfa>
 8001728:	4a90      	ldr	r2, [pc, #576]	@ (800196c <HAL_GPIO_Init+0x2b0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d85d      	bhi.n	80017ea <HAL_GPIO_Init+0x12e>
 800172e:	2b12      	cmp	r3, #18
 8001730:	d82a      	bhi.n	8001788 <HAL_GPIO_Init+0xcc>
 8001732:	2b12      	cmp	r3, #18
 8001734:	d859      	bhi.n	80017ea <HAL_GPIO_Init+0x12e>
 8001736:	a201      	add	r2, pc, #4	@ (adr r2, 800173c <HAL_GPIO_Init+0x80>)
 8001738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173c:	080017b7 	.word	0x080017b7
 8001740:	08001791 	.word	0x08001791
 8001744:	080017a3 	.word	0x080017a3
 8001748:	080017e5 	.word	0x080017e5
 800174c:	080017eb 	.word	0x080017eb
 8001750:	080017eb 	.word	0x080017eb
 8001754:	080017eb 	.word	0x080017eb
 8001758:	080017eb 	.word	0x080017eb
 800175c:	080017eb 	.word	0x080017eb
 8001760:	080017eb 	.word	0x080017eb
 8001764:	080017eb 	.word	0x080017eb
 8001768:	080017eb 	.word	0x080017eb
 800176c:	080017eb 	.word	0x080017eb
 8001770:	080017eb 	.word	0x080017eb
 8001774:	080017eb 	.word	0x080017eb
 8001778:	080017eb 	.word	0x080017eb
 800177c:	080017eb 	.word	0x080017eb
 8001780:	08001799 	.word	0x08001799
 8001784:	080017ad 	.word	0x080017ad
 8001788:	4a79      	ldr	r2, [pc, #484]	@ (8001970 <HAL_GPIO_Init+0x2b4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d013      	beq.n	80017b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800178e:	e02c      	b.n	80017ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	623b      	str	r3, [r7, #32]
          break;
 8001796:	e029      	b.n	80017ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	3304      	adds	r3, #4
 800179e:	623b      	str	r3, [r7, #32]
          break;
 80017a0:	e024      	b.n	80017ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	3308      	adds	r3, #8
 80017a8:	623b      	str	r3, [r7, #32]
          break;
 80017aa:	e01f      	b.n	80017ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	330c      	adds	r3, #12
 80017b2:	623b      	str	r3, [r7, #32]
          break;
 80017b4:	e01a      	b.n	80017ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d102      	bne.n	80017c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017be:	2304      	movs	r3, #4
 80017c0:	623b      	str	r3, [r7, #32]
          break;
 80017c2:	e013      	b.n	80017ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d105      	bne.n	80017d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017cc:	2308      	movs	r3, #8
 80017ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	611a      	str	r2, [r3, #16]
          break;
 80017d6:	e009      	b.n	80017ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d8:	2308      	movs	r3, #8
 80017da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69fa      	ldr	r2, [r7, #28]
 80017e0:	615a      	str	r2, [r3, #20]
          break;
 80017e2:	e003      	b.n	80017ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
          break;
 80017e8:	e000      	b.n	80017ec <HAL_GPIO_Init+0x130>
          break;
 80017ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	2bff      	cmp	r3, #255	@ 0xff
 80017f0:	d801      	bhi.n	80017f6 <HAL_GPIO_Init+0x13a>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	e001      	b.n	80017fa <HAL_GPIO_Init+0x13e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3304      	adds	r3, #4
 80017fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2bff      	cmp	r3, #255	@ 0xff
 8001800:	d802      	bhi.n	8001808 <HAL_GPIO_Init+0x14c>
 8001802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	e002      	b.n	800180e <HAL_GPIO_Init+0x152>
 8001808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180a:	3b08      	subs	r3, #8
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	210f      	movs	r1, #15
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	fa01 f303 	lsl.w	r3, r1, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	401a      	ands	r2, r3
 8001820:	6a39      	ldr	r1, [r7, #32]
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	431a      	orrs	r2, r3
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 80b1 	beq.w	800199e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800183c:	4b4d      	ldr	r3, [pc, #308]	@ (8001974 <HAL_GPIO_Init+0x2b8>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	4a4c      	ldr	r2, [pc, #304]	@ (8001974 <HAL_GPIO_Init+0x2b8>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6193      	str	r3, [r2, #24]
 8001848:	4b4a      	ldr	r3, [pc, #296]	@ (8001974 <HAL_GPIO_Init+0x2b8>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001854:	4a48      	ldr	r2, [pc, #288]	@ (8001978 <HAL_GPIO_Init+0x2bc>)
 8001856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001858:	089b      	lsrs	r3, r3, #2
 800185a:	3302      	adds	r3, #2
 800185c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001860:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	220f      	movs	r2, #15
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	4013      	ands	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a40      	ldr	r2, [pc, #256]	@ (800197c <HAL_GPIO_Init+0x2c0>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d013      	beq.n	80018a8 <HAL_GPIO_Init+0x1ec>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a3f      	ldr	r2, [pc, #252]	@ (8001980 <HAL_GPIO_Init+0x2c4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d00d      	beq.n	80018a4 <HAL_GPIO_Init+0x1e8>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a3e      	ldr	r2, [pc, #248]	@ (8001984 <HAL_GPIO_Init+0x2c8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d007      	beq.n	80018a0 <HAL_GPIO_Init+0x1e4>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a3d      	ldr	r2, [pc, #244]	@ (8001988 <HAL_GPIO_Init+0x2cc>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d101      	bne.n	800189c <HAL_GPIO_Init+0x1e0>
 8001898:	2303      	movs	r3, #3
 800189a:	e006      	b.n	80018aa <HAL_GPIO_Init+0x1ee>
 800189c:	2304      	movs	r3, #4
 800189e:	e004      	b.n	80018aa <HAL_GPIO_Init+0x1ee>
 80018a0:	2302      	movs	r3, #2
 80018a2:	e002      	b.n	80018aa <HAL_GPIO_Init+0x1ee>
 80018a4:	2301      	movs	r3, #1
 80018a6:	e000      	b.n	80018aa <HAL_GPIO_Init+0x1ee>
 80018a8:	2300      	movs	r3, #0
 80018aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ac:	f002 0203 	and.w	r2, r2, #3
 80018b0:	0092      	lsls	r2, r2, #2
 80018b2:	4093      	lsls	r3, r2
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ba:	492f      	ldr	r1, [pc, #188]	@ (8001978 <HAL_GPIO_Init+0x2bc>)
 80018bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	3302      	adds	r3, #2
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d006      	beq.n	80018e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018d4:	4b2d      	ldr	r3, [pc, #180]	@ (800198c <HAL_GPIO_Init+0x2d0>)
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	492c      	ldr	r1, [pc, #176]	@ (800198c <HAL_GPIO_Init+0x2d0>)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	608b      	str	r3, [r1, #8]
 80018e0:	e006      	b.n	80018f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018e2:	4b2a      	ldr	r3, [pc, #168]	@ (800198c <HAL_GPIO_Init+0x2d0>)
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	4928      	ldr	r1, [pc, #160]	@ (800198c <HAL_GPIO_Init+0x2d0>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d006      	beq.n	800190a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018fc:	4b23      	ldr	r3, [pc, #140]	@ (800198c <HAL_GPIO_Init+0x2d0>)
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	4922      	ldr	r1, [pc, #136]	@ (800198c <HAL_GPIO_Init+0x2d0>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	60cb      	str	r3, [r1, #12]
 8001908:	e006      	b.n	8001918 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800190a:	4b20      	ldr	r3, [pc, #128]	@ (800198c <HAL_GPIO_Init+0x2d0>)
 800190c:	68da      	ldr	r2, [r3, #12]
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	43db      	mvns	r3, r3
 8001912:	491e      	ldr	r1, [pc, #120]	@ (800198c <HAL_GPIO_Init+0x2d0>)
 8001914:	4013      	ands	r3, r2
 8001916:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d006      	beq.n	8001932 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001924:	4b19      	ldr	r3, [pc, #100]	@ (800198c <HAL_GPIO_Init+0x2d0>)
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	4918      	ldr	r1, [pc, #96]	@ (800198c <HAL_GPIO_Init+0x2d0>)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
 8001930:	e006      	b.n	8001940 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001932:	4b16      	ldr	r3, [pc, #88]	@ (800198c <HAL_GPIO_Init+0x2d0>)
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	43db      	mvns	r3, r3
 800193a:	4914      	ldr	r1, [pc, #80]	@ (800198c <HAL_GPIO_Init+0x2d0>)
 800193c:	4013      	ands	r3, r2
 800193e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d021      	beq.n	8001990 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800194c:	4b0f      	ldr	r3, [pc, #60]	@ (800198c <HAL_GPIO_Init+0x2d0>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	490e      	ldr	r1, [pc, #56]	@ (800198c <HAL_GPIO_Init+0x2d0>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	600b      	str	r3, [r1, #0]
 8001958:	e021      	b.n	800199e <HAL_GPIO_Init+0x2e2>
 800195a:	bf00      	nop
 800195c:	10320000 	.word	0x10320000
 8001960:	10310000 	.word	0x10310000
 8001964:	10220000 	.word	0x10220000
 8001968:	10210000 	.word	0x10210000
 800196c:	10120000 	.word	0x10120000
 8001970:	10110000 	.word	0x10110000
 8001974:	40021000 	.word	0x40021000
 8001978:	40010000 	.word	0x40010000
 800197c:	40010800 	.word	0x40010800
 8001980:	40010c00 	.word	0x40010c00
 8001984:	40011000 	.word	0x40011000
 8001988:	40011400 	.word	0x40011400
 800198c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001990:	4b0b      	ldr	r3, [pc, #44]	@ (80019c0 <HAL_GPIO_Init+0x304>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	43db      	mvns	r3, r3
 8001998:	4909      	ldr	r1, [pc, #36]	@ (80019c0 <HAL_GPIO_Init+0x304>)
 800199a:	4013      	ands	r3, r2
 800199c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a0:	3301      	adds	r3, #1
 80019a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019aa:	fa22 f303 	lsr.w	r3, r2, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f47f ae8e 	bne.w	80016d0 <HAL_GPIO_Init+0x14>
  }
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	372c      	adds	r7, #44	@ 0x2c
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	40010400 	.word	0x40010400

080019c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	887b      	ldrh	r3, [r7, #2]
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d002      	beq.n	80019e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019dc:	2301      	movs	r3, #1
 80019de:	73fb      	strb	r3, [r7, #15]
 80019e0:	e001      	b.n	80019e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019e2:	2300      	movs	r3, #0
 80019e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr

080019f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	460b      	mov	r3, r1
 80019fc:	807b      	strh	r3, [r7, #2]
 80019fe:	4613      	mov	r3, r2
 8001a00:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a02:	787b      	ldrb	r3, [r7, #1]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a08:	887a      	ldrh	r2, [r7, #2]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a0e:	e003      	b.n	8001a18 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a10:	887b      	ldrh	r3, [r7, #2]
 8001a12:	041a      	lsls	r2, r3, #16
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	611a      	str	r2, [r3, #16]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
	...

08001a24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e272      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 8087 	beq.w	8001b52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a44:	4b92      	ldr	r3, [pc, #584]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 030c 	and.w	r3, r3, #12
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d00c      	beq.n	8001a6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a50:	4b8f      	ldr	r3, [pc, #572]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 030c 	and.w	r3, r3, #12
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d112      	bne.n	8001a82 <HAL_RCC_OscConfig+0x5e>
 8001a5c:	4b8c      	ldr	r3, [pc, #560]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a68:	d10b      	bne.n	8001a82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a6a:	4b89      	ldr	r3, [pc, #548]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d06c      	beq.n	8001b50 <HAL_RCC_OscConfig+0x12c>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d168      	bne.n	8001b50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e24c      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a8a:	d106      	bne.n	8001a9a <HAL_RCC_OscConfig+0x76>
 8001a8c:	4b80      	ldr	r3, [pc, #512]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a7f      	ldr	r2, [pc, #508]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	e02e      	b.n	8001af8 <HAL_RCC_OscConfig+0xd4>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10c      	bne.n	8001abc <HAL_RCC_OscConfig+0x98>
 8001aa2:	4b7b      	ldr	r3, [pc, #492]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a7a      	ldr	r2, [pc, #488]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	4b78      	ldr	r3, [pc, #480]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a77      	ldr	r2, [pc, #476]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e01d      	b.n	8001af8 <HAL_RCC_OscConfig+0xd4>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0xbc>
 8001ac6:	4b72      	ldr	r3, [pc, #456]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a71      	ldr	r2, [pc, #452]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	4b6f      	ldr	r3, [pc, #444]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a6e      	ldr	r2, [pc, #440]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e00b      	b.n	8001af8 <HAL_RCC_OscConfig+0xd4>
 8001ae0:	4b6b      	ldr	r3, [pc, #428]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a6a      	ldr	r2, [pc, #424]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	4b68      	ldr	r3, [pc, #416]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a67      	ldr	r2, [pc, #412]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001af2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001af6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d013      	beq.n	8001b28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7ff fcee 	bl	80014e0 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b08:	f7ff fcea 	bl	80014e0 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b64      	cmp	r3, #100	@ 0x64
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e200      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1a:	4b5d      	ldr	r3, [pc, #372]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0xe4>
 8001b26:	e014      	b.n	8001b52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b28:	f7ff fcda 	bl	80014e0 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b30:	f7ff fcd6 	bl	80014e0 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b64      	cmp	r3, #100	@ 0x64
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e1ec      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b42:	4b53      	ldr	r3, [pc, #332]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_RCC_OscConfig+0x10c>
 8001b4e:	e000      	b.n	8001b52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d063      	beq.n	8001c26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b5e:	4b4c      	ldr	r3, [pc, #304]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00b      	beq.n	8001b82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b6a:	4b49      	ldr	r3, [pc, #292]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d11c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x18c>
 8001b76:	4b46      	ldr	r3, [pc, #280]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d116      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b82:	4b43      	ldr	r3, [pc, #268]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d005      	beq.n	8001b9a <HAL_RCC_OscConfig+0x176>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d001      	beq.n	8001b9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e1c0      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	4939      	ldr	r1, [pc, #228]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bae:	e03a      	b.n	8001c26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d020      	beq.n	8001bfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb8:	4b36      	ldr	r3, [pc, #216]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbe:	f7ff fc8f 	bl	80014e0 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc6:	f7ff fc8b 	bl	80014e0 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e1a1      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd8:	4b2d      	ldr	r3, [pc, #180]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0f0      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	4927      	ldr	r1, [pc, #156]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	600b      	str	r3, [r1, #0]
 8001bf8:	e015      	b.n	8001c26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bfa:	4b26      	ldr	r3, [pc, #152]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7ff fc6e 	bl	80014e0 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c08:	f7ff fc6a 	bl	80014e0 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e180      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d03a      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d019      	beq.n	8001c6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c3a:	4b17      	ldr	r3, [pc, #92]	@ (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c40:	f7ff fc4e 	bl	80014e0 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c48:	f7ff fc4a 	bl	80014e0 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e160      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c66:	2001      	movs	r0, #1
 8001c68:	f000 face 	bl	8002208 <RCC_Delay>
 8001c6c:	e01c      	b.n	8001ca8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c74:	f7ff fc34 	bl	80014e0 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c7a:	e00f      	b.n	8001c9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c7c:	f7ff fc30 	bl	80014e0 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d908      	bls.n	8001c9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e146      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
 8001c8e:	bf00      	nop
 8001c90:	40021000 	.word	0x40021000
 8001c94:	42420000 	.word	0x42420000
 8001c98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9c:	4b92      	ldr	r3, [pc, #584]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1e9      	bne.n	8001c7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 80a6 	beq.w	8001e02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cba:	4b8b      	ldr	r3, [pc, #556]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10d      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc6:	4b88      	ldr	r3, [pc, #544]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	4a87      	ldr	r2, [pc, #540]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd0:	61d3      	str	r3, [r2, #28]
 8001cd2:	4b85      	ldr	r3, [pc, #532]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce2:	4b82      	ldr	r3, [pc, #520]	@ (8001eec <HAL_RCC_OscConfig+0x4c8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d118      	bne.n	8001d20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cee:	4b7f      	ldr	r3, [pc, #508]	@ (8001eec <HAL_RCC_OscConfig+0x4c8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a7e      	ldr	r2, [pc, #504]	@ (8001eec <HAL_RCC_OscConfig+0x4c8>)
 8001cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cfa:	f7ff fbf1 	bl	80014e0 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d02:	f7ff fbed 	bl	80014e0 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b64      	cmp	r3, #100	@ 0x64
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e103      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d14:	4b75      	ldr	r3, [pc, #468]	@ (8001eec <HAL_RCC_OscConfig+0x4c8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d106      	bne.n	8001d36 <HAL_RCC_OscConfig+0x312>
 8001d28:	4b6f      	ldr	r3, [pc, #444]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	4a6e      	ldr	r2, [pc, #440]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6213      	str	r3, [r2, #32]
 8001d34:	e02d      	b.n	8001d92 <HAL_RCC_OscConfig+0x36e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x334>
 8001d3e:	4b6a      	ldr	r3, [pc, #424]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	4a69      	ldr	r2, [pc, #420]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d44:	f023 0301 	bic.w	r3, r3, #1
 8001d48:	6213      	str	r3, [r2, #32]
 8001d4a:	4b67      	ldr	r3, [pc, #412]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	4a66      	ldr	r2, [pc, #408]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d50:	f023 0304 	bic.w	r3, r3, #4
 8001d54:	6213      	str	r3, [r2, #32]
 8001d56:	e01c      	b.n	8001d92 <HAL_RCC_OscConfig+0x36e>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b05      	cmp	r3, #5
 8001d5e:	d10c      	bne.n	8001d7a <HAL_RCC_OscConfig+0x356>
 8001d60:	4b61      	ldr	r3, [pc, #388]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	4a60      	ldr	r2, [pc, #384]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d66:	f043 0304 	orr.w	r3, r3, #4
 8001d6a:	6213      	str	r3, [r2, #32]
 8001d6c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	4a5d      	ldr	r2, [pc, #372]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6213      	str	r3, [r2, #32]
 8001d78:	e00b      	b.n	8001d92 <HAL_RCC_OscConfig+0x36e>
 8001d7a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	4a5a      	ldr	r2, [pc, #360]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	f023 0301 	bic.w	r3, r3, #1
 8001d84:	6213      	str	r3, [r2, #32]
 8001d86:	4b58      	ldr	r3, [pc, #352]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	4a57      	ldr	r2, [pc, #348]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	f023 0304 	bic.w	r3, r3, #4
 8001d90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d015      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9a:	f7ff fba1 	bl	80014e0 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da0:	e00a      	b.n	8001db8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da2:	f7ff fb9d 	bl	80014e0 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e0b1      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db8:	4b4b      	ldr	r3, [pc, #300]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0ee      	beq.n	8001da2 <HAL_RCC_OscConfig+0x37e>
 8001dc4:	e014      	b.n	8001df0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc6:	f7ff fb8b 	bl	80014e0 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dcc:	e00a      	b.n	8001de4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dce:	f7ff fb87 	bl	80014e0 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e09b      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de4:	4b40      	ldr	r3, [pc, #256]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1ee      	bne.n	8001dce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001df0:	7dfb      	ldrb	r3, [r7, #23]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d105      	bne.n	8001e02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	4a3b      	ldr	r2, [pc, #236]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 8087 	beq.w	8001f1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e0c:	4b36      	ldr	r3, [pc, #216]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 030c 	and.w	r3, r3, #12
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d061      	beq.n	8001edc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d146      	bne.n	8001eae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e20:	4b33      	ldr	r3, [pc, #204]	@ (8001ef0 <HAL_RCC_OscConfig+0x4cc>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e26:	f7ff fb5b 	bl	80014e0 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2e:	f7ff fb57 	bl	80014e0 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e06d      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e40:	4b29      	ldr	r3, [pc, #164]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f0      	bne.n	8001e2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e54:	d108      	bne.n	8001e68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e56:	4b24      	ldr	r3, [pc, #144]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	4921      	ldr	r1, [pc, #132]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e68:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a19      	ldr	r1, [r3, #32]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e78:	430b      	orrs	r3, r1
 8001e7a:	491b      	ldr	r1, [pc, #108]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e80:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef0 <HAL_RCC_OscConfig+0x4cc>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7ff fb2b 	bl	80014e0 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8e:	f7ff fb27 	bl	80014e0 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e03d      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea0:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x46a>
 8001eac:	e035      	b.n	8001f1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eae:	4b10      	ldr	r3, [pc, #64]	@ (8001ef0 <HAL_RCC_OscConfig+0x4cc>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb4:	f7ff fb14 	bl	80014e0 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ebc:	f7ff fb10 	bl	80014e0 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e026      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ece:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x498>
 8001eda:	e01e      	b.n	8001f1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d107      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e019      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40007000 	.word	0x40007000
 8001ef0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f24 <HAL_RCC_OscConfig+0x500>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d106      	bne.n	8001f16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d001      	beq.n	8001f1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40021000 	.word	0x40021000

08001f28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0d0      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b6a      	ldr	r3, [pc, #424]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d910      	bls.n	8001f6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b67      	ldr	r3, [pc, #412]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 0207 	bic.w	r2, r3, #7
 8001f52:	4965      	ldr	r1, [pc, #404]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5a:	4b63      	ldr	r3, [pc, #396]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0b8      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d020      	beq.n	8001fba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f84:	4b59      	ldr	r3, [pc, #356]	@ (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4a58      	ldr	r2, [pc, #352]	@ (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001f8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f9c:	4b53      	ldr	r3, [pc, #332]	@ (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	4a52      	ldr	r2, [pc, #328]	@ (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001fa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa8:	4b50      	ldr	r3, [pc, #320]	@ (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	494d      	ldr	r1, [pc, #308]	@ (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d040      	beq.n	8002048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d107      	bne.n	8001fde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	4b47      	ldr	r3, [pc, #284]	@ (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d115      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e07f      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe6:	4b41      	ldr	r3, [pc, #260]	@ (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e073      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	@ (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e06b      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002006:	4b39      	ldr	r3, [pc, #228]	@ (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f023 0203 	bic.w	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4936      	ldr	r1, [pc, #216]	@ (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002018:	f7ff fa62 	bl	80014e0 <HAL_GetTick>
 800201c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201e:	e00a      	b.n	8002036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002020:	f7ff fa5e 	bl	80014e0 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e053      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002036:	4b2d      	ldr	r3, [pc, #180]	@ (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 020c 	and.w	r2, r3, #12
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	429a      	cmp	r2, r3
 8002046:	d1eb      	bne.n	8002020 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002048:	4b27      	ldr	r3, [pc, #156]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d210      	bcs.n	8002078 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b24      	ldr	r3, [pc, #144]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 0207 	bic.w	r2, r3, #7
 800205e:	4922      	ldr	r1, [pc, #136]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	4b20      	ldr	r3, [pc, #128]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e032      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002084:	4b19      	ldr	r3, [pc, #100]	@ (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	4916      	ldr	r1, [pc, #88]	@ (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	4313      	orrs	r3, r2
 8002094:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d009      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020a2:	4b12      	ldr	r3, [pc, #72]	@ (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	490e      	ldr	r1, [pc, #56]	@ (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020b6:	f000 f821 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 80020ba:	4602      	mov	r2, r0
 80020bc:	4b0b      	ldr	r3, [pc, #44]	@ (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	490a      	ldr	r1, [pc, #40]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 80020c8:	5ccb      	ldrb	r3, [r1, r3]
 80020ca:	fa22 f303 	lsr.w	r3, r2, r3
 80020ce:	4a09      	ldr	r2, [pc, #36]	@ (80020f4 <HAL_RCC_ClockConfig+0x1cc>)
 80020d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020d2:	4b09      	ldr	r3, [pc, #36]	@ (80020f8 <HAL_RCC_ClockConfig+0x1d0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff f9c0 	bl	800145c <HAL_InitTick>

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40022000 	.word	0x40022000
 80020ec:	40021000 	.word	0x40021000
 80020f0:	08006efc 	.word	0x08006efc
 80020f4:	2000004c 	.word	0x2000004c
 80020f8:	20000050 	.word	0x20000050

080020fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002116:	4b1e      	ldr	r3, [pc, #120]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x94>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b04      	cmp	r3, #4
 8002124:	d002      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x30>
 8002126:	2b08      	cmp	r3, #8
 8002128:	d003      	beq.n	8002132 <HAL_RCC_GetSysClockFreq+0x36>
 800212a:	e027      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800212c:	4b19      	ldr	r3, [pc, #100]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x98>)
 800212e:	613b      	str	r3, [r7, #16]
      break;
 8002130:	e027      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	0c9b      	lsrs	r3, r3, #18
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	4a17      	ldr	r2, [pc, #92]	@ (8002198 <HAL_RCC_GetSysClockFreq+0x9c>)
 800213c:	5cd3      	ldrb	r3, [r2, r3]
 800213e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d010      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800214a:	4b11      	ldr	r3, [pc, #68]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x94>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	0c5b      	lsrs	r3, r3, #17
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	4a11      	ldr	r2, [pc, #68]	@ (800219c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a0d      	ldr	r2, [pc, #52]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x98>)
 800215e:	fb03 f202 	mul.w	r2, r3, r2
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	fbb2 f3f3 	udiv	r3, r2, r3
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	e004      	b.n	8002176 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a0c      	ldr	r2, [pc, #48]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002170:	fb02 f303 	mul.w	r3, r2, r3
 8002174:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	613b      	str	r3, [r7, #16]
      break;
 800217a:	e002      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800217c:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x98>)
 800217e:	613b      	str	r3, [r7, #16]
      break;
 8002180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002182:	693b      	ldr	r3, [r7, #16]
}
 8002184:	4618      	mov	r0, r3
 8002186:	371c      	adds	r7, #28
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
 8002194:	007a1200 	.word	0x007a1200
 8002198:	08006f14 	.word	0x08006f14
 800219c:	08006f24 	.word	0x08006f24
 80021a0:	003d0900 	.word	0x003d0900

080021a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a8:	4b02      	ldr	r3, [pc, #8]	@ (80021b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80021aa:	681b      	ldr	r3, [r3, #0]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	2000004c 	.word	0x2000004c

080021b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021bc:	f7ff fff2 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 80021c0:	4602      	mov	r2, r0
 80021c2:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	0a1b      	lsrs	r3, r3, #8
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	4903      	ldr	r1, [pc, #12]	@ (80021dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ce:	5ccb      	ldrb	r3, [r1, r3]
 80021d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40021000 	.word	0x40021000
 80021dc:	08006f0c 	.word	0x08006f0c

080021e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021e4:	f7ff ffde 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	0adb      	lsrs	r3, r3, #11
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	4903      	ldr	r1, [pc, #12]	@ (8002204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000
 8002204:	08006f0c 	.word	0x08006f0c

08002208 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002210:	4b0a      	ldr	r3, [pc, #40]	@ (800223c <RCC_Delay+0x34>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0a      	ldr	r2, [pc, #40]	@ (8002240 <RCC_Delay+0x38>)
 8002216:	fba2 2303 	umull	r2, r3, r2, r3
 800221a:	0a5b      	lsrs	r3, r3, #9
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	fb02 f303 	mul.w	r3, r2, r3
 8002222:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002224:	bf00      	nop
  }
  while (Delay --);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1e5a      	subs	r2, r3, #1
 800222a:	60fa      	str	r2, [r7, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f9      	bne.n	8002224 <RCC_Delay+0x1c>
}
 8002230:	bf00      	nop
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	2000004c 	.word	0x2000004c
 8002240:	10624dd3 	.word	0x10624dd3

08002244 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e042      	b.n	80022dc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d106      	bne.n	8002270 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7fe ffc0 	bl	80011f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2224      	movs	r2, #36	@ 0x24
 8002274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002286:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f971 	bl	8002570 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800229c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2220      	movs	r2, #32
 80022c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08a      	sub	sp, #40	@ 0x28
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	4613      	mov	r3, r2
 80022f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b20      	cmp	r3, #32
 8002302:	d175      	bne.n	80023f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <HAL_UART_Transmit+0x2c>
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e06e      	b.n	80023f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2221      	movs	r2, #33	@ 0x21
 800231e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002322:	f7ff f8dd 	bl	80014e0 <HAL_GetTick>
 8002326:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	88fa      	ldrh	r2, [r7, #6]
 800232c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	88fa      	ldrh	r2, [r7, #6]
 8002332:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800233c:	d108      	bne.n	8002350 <HAL_UART_Transmit+0x6c>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d104      	bne.n	8002350 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	61bb      	str	r3, [r7, #24]
 800234e:	e003      	b.n	8002358 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002354:	2300      	movs	r3, #0
 8002356:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002358:	e02e      	b.n	80023b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2200      	movs	r2, #0
 8002362:	2180      	movs	r1, #128	@ 0x80
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 f848 	bl	80023fa <UART_WaitOnFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2220      	movs	r2, #32
 8002374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e03a      	b.n	80023f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10b      	bne.n	800239a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002390:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	3302      	adds	r3, #2
 8002396:	61bb      	str	r3, [r7, #24]
 8002398:	e007      	b.n	80023aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	781a      	ldrb	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	3301      	adds	r3, #1
 80023a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023bc:	b29b      	uxth	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1cb      	bne.n	800235a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2200      	movs	r2, #0
 80023ca:	2140      	movs	r1, #64	@ 0x40
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 f814 	bl	80023fa <UART_WaitOnFlagUntilTimeout>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e006      	b.n	80023f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	e000      	b.n	80023f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80023f0:	2302      	movs	r3, #2
  }
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3720      	adds	r7, #32
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b086      	sub	sp, #24
 80023fe:	af00      	add	r7, sp, #0
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	603b      	str	r3, [r7, #0]
 8002406:	4613      	mov	r3, r2
 8002408:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800240a:	e03b      	b.n	8002484 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002412:	d037      	beq.n	8002484 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002414:	f7ff f864 	bl	80014e0 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	6a3a      	ldr	r2, [r7, #32]
 8002420:	429a      	cmp	r2, r3
 8002422:	d302      	bcc.n	800242a <UART_WaitOnFlagUntilTimeout+0x30>
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e03a      	b.n	80024a4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d023      	beq.n	8002484 <UART_WaitOnFlagUntilTimeout+0x8a>
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b80      	cmp	r3, #128	@ 0x80
 8002440:	d020      	beq.n	8002484 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2b40      	cmp	r3, #64	@ 0x40
 8002446:	d01d      	beq.n	8002484 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b08      	cmp	r3, #8
 8002454:	d116      	bne.n	8002484 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 f81d 	bl	80024ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2208      	movs	r2, #8
 8002476:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e00f      	b.n	80024a4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	4013      	ands	r3, r2
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	429a      	cmp	r2, r3
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d0b4      	beq.n	800240c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b095      	sub	sp, #84	@ 0x54
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	330c      	adds	r3, #12
 80024ba:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024be:	e853 3f00 	ldrex	r3, [r3]
 80024c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80024c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80024ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	330c      	adds	r3, #12
 80024d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80024d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80024da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80024dc:	e841 2300 	strex	r3, r2, [r1]
 80024e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80024e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1e5      	bne.n	80024b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	3314      	adds	r3, #20
 80024ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	e853 3f00 	ldrex	r3, [r3]
 80024f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f023 0301 	bic.w	r3, r3, #1
 80024fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3314      	adds	r3, #20
 8002506:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002508:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800250a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800250c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800250e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002510:	e841 2300 	strex	r3, r2, [r1]
 8002514:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1e5      	bne.n	80024e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002520:	2b01      	cmp	r3, #1
 8002522:	d119      	bne.n	8002558 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	330c      	adds	r3, #12
 800252a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	e853 3f00 	ldrex	r3, [r3]
 8002532:	60bb      	str	r3, [r7, #8]
   return(result);
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f023 0310 	bic.w	r3, r3, #16
 800253a:	647b      	str	r3, [r7, #68]	@ 0x44
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	330c      	adds	r3, #12
 8002542:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002544:	61ba      	str	r2, [r7, #24]
 8002546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002548:	6979      	ldr	r1, [r7, #20]
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	e841 2300 	strex	r3, r2, [r1]
 8002550:	613b      	str	r3, [r7, #16]
   return(result);
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1e5      	bne.n	8002524 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002566:	bf00      	nop
 8002568:	3754      	adds	r7, #84	@ 0x54
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	4313      	orrs	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80025aa:	f023 030c 	bic.w	r3, r3, #12
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	68b9      	ldr	r1, [r7, #8]
 80025b4:	430b      	orrs	r3, r1
 80025b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699a      	ldr	r2, [r3, #24]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a2c      	ldr	r2, [pc, #176]	@ (8002684 <UART_SetConfig+0x114>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d103      	bne.n	80025e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025d8:	f7ff fe02 	bl	80021e0 <HAL_RCC_GetPCLK2Freq>
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	e002      	b.n	80025e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025e0:	f7ff fdea 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
 80025e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	009a      	lsls	r2, r3, #2
 80025f0:	441a      	add	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	4a22      	ldr	r2, [pc, #136]	@ (8002688 <UART_SetConfig+0x118>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	0119      	lsls	r1, r3, #4
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	009a      	lsls	r2, r3, #2
 8002610:	441a      	add	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	fbb2 f2f3 	udiv	r2, r2, r3
 800261c:	4b1a      	ldr	r3, [pc, #104]	@ (8002688 <UART_SetConfig+0x118>)
 800261e:	fba3 0302 	umull	r0, r3, r3, r2
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	2064      	movs	r0, #100	@ 0x64
 8002626:	fb00 f303 	mul.w	r3, r0, r3
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	3332      	adds	r3, #50	@ 0x32
 8002630:	4a15      	ldr	r2, [pc, #84]	@ (8002688 <UART_SetConfig+0x118>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800263c:	4419      	add	r1, r3
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	009a      	lsls	r2, r3, #2
 8002648:	441a      	add	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	fbb2 f2f3 	udiv	r2, r2, r3
 8002654:	4b0c      	ldr	r3, [pc, #48]	@ (8002688 <UART_SetConfig+0x118>)
 8002656:	fba3 0302 	umull	r0, r3, r3, r2
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	2064      	movs	r0, #100	@ 0x64
 800265e:	fb00 f303 	mul.w	r3, r0, r3
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	3332      	adds	r3, #50	@ 0x32
 8002668:	4a07      	ldr	r2, [pc, #28]	@ (8002688 <UART_SetConfig+0x118>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	f003 020f 	and.w	r2, r3, #15
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	440a      	add	r2, r1
 800267a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800267c:	bf00      	nop
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40013800 	.word	0x40013800
 8002688:	51eb851f 	.word	0x51eb851f

0800268c <__NVIC_SetPriority>:
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	6039      	str	r1, [r7, #0]
 8002696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	2b00      	cmp	r3, #0
 800269e:	db0a      	blt.n	80026b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	490c      	ldr	r1, [pc, #48]	@ (80026d8 <__NVIC_SetPriority+0x4c>)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	0112      	lsls	r2, r2, #4
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	440b      	add	r3, r1
 80026b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80026b4:	e00a      	b.n	80026cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	4908      	ldr	r1, [pc, #32]	@ (80026dc <__NVIC_SetPriority+0x50>)
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	3b04      	subs	r3, #4
 80026c4:	0112      	lsls	r2, r2, #4
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	440b      	add	r3, r1
 80026ca:	761a      	strb	r2, [r3, #24]
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	e000e100 	.word	0xe000e100
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80026e4:	2100      	movs	r1, #0
 80026e6:	f06f 0004 	mvn.w	r0, #4
 80026ea:	f7ff ffcf 	bl	800268c <__NVIC_SetPriority>
#endif
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026fa:	f3ef 8305 	mrs	r3, IPSR
 80026fe:	603b      	str	r3, [r7, #0]
  return(result);
 8002700:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002706:	f06f 0305 	mvn.w	r3, #5
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	e00c      	b.n	8002728 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800270e:	4b09      	ldr	r3, [pc, #36]	@ (8002734 <osKernelInitialize+0x40>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d105      	bne.n	8002722 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002716:	4b07      	ldr	r3, [pc, #28]	@ (8002734 <osKernelInitialize+0x40>)
 8002718:	2201      	movs	r2, #1
 800271a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800271c:	2300      	movs	r3, #0
 800271e:	607b      	str	r3, [r7, #4]
 8002720:	e002      	b.n	8002728 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002722:	f04f 33ff 	mov.w	r3, #4294967295
 8002726:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002728:	687b      	ldr	r3, [r7, #4]
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	20000170 	.word	0x20000170

08002738 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800273e:	f3ef 8305 	mrs	r3, IPSR
 8002742:	603b      	str	r3, [r7, #0]
  return(result);
 8002744:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <osKernelStart+0x1a>
    stat = osErrorISR;
 800274a:	f06f 0305 	mvn.w	r3, #5
 800274e:	607b      	str	r3, [r7, #4]
 8002750:	e010      	b.n	8002774 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002752:	4b0b      	ldr	r3, [pc, #44]	@ (8002780 <osKernelStart+0x48>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d109      	bne.n	800276e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800275a:	f7ff ffc1 	bl	80026e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800275e:	4b08      	ldr	r3, [pc, #32]	@ (8002780 <osKernelStart+0x48>)
 8002760:	2202      	movs	r2, #2
 8002762:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002764:	f001 fd4e 	bl	8004204 <vTaskStartScheduler>
      stat = osOK;
 8002768:	2300      	movs	r3, #0
 800276a:	607b      	str	r3, [r7, #4]
 800276c:	e002      	b.n	8002774 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800276e:	f04f 33ff 	mov.w	r3, #4294967295
 8002772:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002774:	687b      	ldr	r3, [r7, #4]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000170 	.word	0x20000170

08002784 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002784:	b580      	push	{r7, lr}
 8002786:	b08e      	sub	sp, #56	@ 0x38
 8002788:	af04      	add	r7, sp, #16
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002790:	2300      	movs	r3, #0
 8002792:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002794:	f3ef 8305 	mrs	r3, IPSR
 8002798:	617b      	str	r3, [r7, #20]
  return(result);
 800279a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800279c:	2b00      	cmp	r3, #0
 800279e:	d17e      	bne.n	800289e <osThreadNew+0x11a>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d07b      	beq.n	800289e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80027a6:	2380      	movs	r3, #128	@ 0x80
 80027a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80027aa:	2318      	movs	r3, #24
 80027ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80027b2:	f04f 33ff 	mov.w	r3, #4294967295
 80027b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d045      	beq.n	800284a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <osThreadNew+0x48>
        name = attr->name;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <osThreadNew+0x6e>
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	2b38      	cmp	r3, #56	@ 0x38
 80027e4:	d805      	bhi.n	80027f2 <osThreadNew+0x6e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <osThreadNew+0x72>
        return (NULL);
 80027f2:	2300      	movs	r3, #0
 80027f4:	e054      	b.n	80028a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	089b      	lsrs	r3, r3, #2
 8002804:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00e      	beq.n	800282c <osThreadNew+0xa8>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2b5b      	cmp	r3, #91	@ 0x5b
 8002814:	d90a      	bls.n	800282c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800281a:	2b00      	cmp	r3, #0
 800281c:	d006      	beq.n	800282c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <osThreadNew+0xa8>
        mem = 1;
 8002826:	2301      	movs	r3, #1
 8002828:	61bb      	str	r3, [r7, #24]
 800282a:	e010      	b.n	800284e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10c      	bne.n	800284e <osThreadNew+0xca>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d108      	bne.n	800284e <osThreadNew+0xca>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d104      	bne.n	800284e <osThreadNew+0xca>
          mem = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	61bb      	str	r3, [r7, #24]
 8002848:	e001      	b.n	800284e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d110      	bne.n	8002876 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800285c:	9202      	str	r2, [sp, #8]
 800285e:	9301      	str	r3, [sp, #4]
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	6a3a      	ldr	r2, [r7, #32]
 8002868:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f001 faee 	bl	8003e4c <xTaskCreateStatic>
 8002870:	4603      	mov	r3, r0
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	e013      	b.n	800289e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d110      	bne.n	800289e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	b29a      	uxth	r2, r3
 8002880:	f107 0310 	add.w	r3, r7, #16
 8002884:	9301      	str	r3, [sp, #4]
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f001 fb3c 	bl	8003f0c <xTaskCreate>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d001      	beq.n	800289e <osThreadNew+0x11a>
            hTask = NULL;
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800289e:	693b      	ldr	r3, [r7, #16]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3728      	adds	r7, #40	@ 0x28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028b0:	f3ef 8305 	mrs	r3, IPSR
 80028b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80028b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <osDelay+0x1c>
    stat = osErrorISR;
 80028bc:	f06f 0305 	mvn.w	r3, #5
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	e007      	b.n	80028d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d002      	beq.n	80028d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f001 fc62 	bl	8004198 <vTaskDelay>
    }
  }

  return (stat);
 80028d4:	68fb      	ldr	r3, [r7, #12]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80028de:	b580      	push	{r7, lr}
 80028e0:	b088      	sub	sp, #32
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028ea:	f3ef 8305 	mrs	r3, IPSR
 80028ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80028f0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d174      	bne.n	80029e0 <osMutexNew+0x102>
    if (attr != NULL) {
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <osMutexNew+0x26>
      type = attr->attr_bits;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	e001      	b.n	8002908 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <osMutexNew+0x3a>
      rmtx = 1U;
 8002912:	2301      	movs	r3, #1
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	e001      	b.n	800291c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d15c      	bne.n	80029e0 <osMutexNew+0x102>
      mem = -1;
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
 800292a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d015      	beq.n	800295e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d006      	beq.n	8002948 <osMutexNew+0x6a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2b4f      	cmp	r3, #79	@ 0x4f
 8002940:	d902      	bls.n	8002948 <osMutexNew+0x6a>
          mem = 1;
 8002942:	2301      	movs	r3, #1
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	e00c      	b.n	8002962 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d108      	bne.n	8002962 <osMutexNew+0x84>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d104      	bne.n	8002962 <osMutexNew+0x84>
            mem = 0;
 8002958:	2300      	movs	r3, #0
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	e001      	b.n	8002962 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d112      	bne.n	800298e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	4619      	mov	r1, r3
 8002974:	2004      	movs	r0, #4
 8002976:	f000 fc4a 	bl	800320e <xQueueCreateMutexStatic>
 800297a:	61f8      	str	r0, [r7, #28]
 800297c:	e016      	b.n	80029ac <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	4619      	mov	r1, r3
 8002984:	2001      	movs	r0, #1
 8002986:	f000 fc42 	bl	800320e <xQueueCreateMutexStatic>
 800298a:	61f8      	str	r0, [r7, #28]
 800298c:	e00e      	b.n	80029ac <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10b      	bne.n	80029ac <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d004      	beq.n	80029a4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800299a:	2004      	movs	r0, #4
 800299c:	f000 fc1f 	bl	80031de <xQueueCreateMutex>
 80029a0:	61f8      	str	r0, [r7, #28]
 80029a2:	e003      	b.n	80029ac <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80029a4:	2001      	movs	r0, #1
 80029a6:	f000 fc1a 	bl	80031de <xQueueCreateMutex>
 80029aa:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00c      	beq.n	80029cc <osMutexNew+0xee>
        if (attr != NULL) {
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <osMutexNew+0xe2>
          name = attr->name;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	e001      	b.n	80029c4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80029c4:	68f9      	ldr	r1, [r7, #12]
 80029c6:	69f8      	ldr	r0, [r7, #28]
 80029c8:	f001 f9e4 	bl	8003d94 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d006      	beq.n	80029e0 <osMutexNew+0x102>
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80029e0:	69fb      	ldr	r3, [r7, #28]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3720      	adds	r7, #32
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b086      	sub	sp, #24
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f023 0301 	bic.w	r3, r3, #1
 80029fa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a08:	f3ef 8305 	mrs	r3, IPSR
 8002a0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a0e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8002a14:	f06f 0305 	mvn.w	r3, #5
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	e02c      	b.n	8002a76 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d103      	bne.n	8002a2a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8002a22:	f06f 0303 	mvn.w	r3, #3
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	e025      	b.n	8002a76 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8002a30:	6839      	ldr	r1, [r7, #0]
 8002a32:	6938      	ldr	r0, [r7, #16]
 8002a34:	f000 fc3b 	bl	80032ae <xQueueTakeMutexRecursive>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d01b      	beq.n	8002a76 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8002a44:	f06f 0301 	mvn.w	r3, #1
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	e014      	b.n	8002a76 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002a4c:	f06f 0302 	mvn.w	r3, #2
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	e010      	b.n	8002a76 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8002a54:	6839      	ldr	r1, [r7, #0]
 8002a56:	6938      	ldr	r0, [r7, #16]
 8002a58:	f000 fee2 	bl	8003820 <xQueueSemaphoreTake>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d009      	beq.n	8002a76 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8002a68:	f06f 0301 	mvn.w	r3, #1
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	e002      	b.n	8002a76 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002a70:	f06f 0302 	mvn.w	r3, #2
 8002a74:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8002a76:	697b      	ldr	r3, [r7, #20]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f023 0301 	bic.w	r3, r3, #1
 8002a8e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a9c:	f3ef 8305 	mrs	r3, IPSR
 8002aa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002aa2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <osMutexRelease+0x30>
    stat = osErrorISR;
 8002aa8:	f06f 0305 	mvn.w	r3, #5
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	e01f      	b.n	8002af0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d103      	bne.n	8002abe <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8002ab6:	f06f 0303 	mvn.w	r3, #3
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	e018      	b.n	8002af0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d009      	beq.n	8002ad8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8002ac4:	6938      	ldr	r0, [r7, #16]
 8002ac6:	f000 fbbd 	bl	8003244 <xQueueGiveMutexRecursive>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d00f      	beq.n	8002af0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8002ad0:	f06f 0302 	mvn.w	r3, #2
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	e00b      	b.n	8002af0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8002ad8:	2300      	movs	r3, #0
 8002ada:	2200      	movs	r2, #0
 8002adc:	2100      	movs	r1, #0
 8002ade:	6938      	ldr	r0, [r7, #16]
 8002ae0:	f000 fc1c 	bl	800331c <xQueueGenericSend>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d002      	beq.n	8002af0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8002aea:	f06f 0302 	mvn.w	r3, #2
 8002aee:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002af0:	697b      	ldr	r3, [r7, #20]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b08a      	sub	sp, #40	@ 0x28
 8002afe:	af02      	add	r7, sp, #8
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b0a:	f3ef 8305 	mrs	r3, IPSR
 8002b0e:	613b      	str	r3, [r7, #16]
  return(result);
 8002b10:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d15f      	bne.n	8002bd6 <osMessageQueueNew+0xdc>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d05c      	beq.n	8002bd6 <osMessageQueueNew+0xdc>
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d059      	beq.n	8002bd6 <osMessageQueueNew+0xdc>
    mem = -1;
 8002b22:	f04f 33ff 	mov.w	r3, #4294967295
 8002b26:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d029      	beq.n	8002b82 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d012      	beq.n	8002b5c <osMessageQueueNew+0x62>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2b4f      	cmp	r3, #79	@ 0x4f
 8002b3c:	d90e      	bls.n	8002b5c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	68b9      	ldr	r1, [r7, #8]
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d302      	bcc.n	8002b5c <osMessageQueueNew+0x62>
        mem = 1;
 8002b56:	2301      	movs	r3, #1
 8002b58:	61bb      	str	r3, [r7, #24]
 8002b5a:	e014      	b.n	8002b86 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d110      	bne.n	8002b86 <osMessageQueueNew+0x8c>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10c      	bne.n	8002b86 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d108      	bne.n	8002b86 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d104      	bne.n	8002b86 <osMessageQueueNew+0x8c>
          mem = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61bb      	str	r3, [r7, #24]
 8002b80:	e001      	b.n	8002b86 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d10b      	bne.n	8002ba4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2100      	movs	r1, #0
 8002b96:	9100      	str	r1, [sp, #0]
 8002b98:	68b9      	ldr	r1, [r7, #8]
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 fa2a 	bl	8002ff4 <xQueueGenericCreateStatic>
 8002ba0:	61f8      	str	r0, [r7, #28]
 8002ba2:	e008      	b.n	8002bb6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d105      	bne.n	8002bb6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8002baa:	2200      	movs	r2, #0
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 fa9d 	bl	80030ee <xQueueGenericCreate>
 8002bb4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00c      	beq.n	8002bd6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <osMessageQueueNew+0xd0>
        name = attr->name;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	e001      	b.n	8002bce <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8002bce:	6979      	ldr	r1, [r7, #20]
 8002bd0:	69f8      	ldr	r0, [r7, #28]
 8002bd2:	f001 f8df 	bl	8003d94 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002bd6:	69fb      	ldr	r3, [r7, #28]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3720      	adds	r7, #32
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	4613      	mov	r3, r2
 8002bee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bf8:	f3ef 8305 	mrs	r3, IPSR
 8002bfc:	617b      	str	r3, [r7, #20]
  return(result);
 8002bfe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d028      	beq.n	8002c56 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <osMessageQueuePut+0x36>
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <osMessageQueuePut+0x36>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8002c16:	f06f 0303 	mvn.w	r3, #3
 8002c1a:	61fb      	str	r3, [r7, #28]
 8002c1c:	e038      	b.n	8002c90 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002c22:	f107 0210 	add.w	r2, r7, #16
 8002c26:	2300      	movs	r3, #0
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	69b8      	ldr	r0, [r7, #24]
 8002c2c:	f000 fc78 	bl	8003520 <xQueueGenericSendFromISR>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d003      	beq.n	8002c3e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8002c36:	f06f 0302 	mvn.w	r3, #2
 8002c3a:	61fb      	str	r3, [r7, #28]
 8002c3c:	e028      	b.n	8002c90 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d025      	beq.n	8002c90 <osMessageQueuePut+0xb0>
 8002c44:	4b15      	ldr	r3, [pc, #84]	@ (8002c9c <osMessageQueuePut+0xbc>)
 8002c46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	e01c      	b.n	8002c90 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <osMessageQueuePut+0x82>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d103      	bne.n	8002c6a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8002c62:	f06f 0303 	mvn.w	r3, #3
 8002c66:	61fb      	str	r3, [r7, #28]
 8002c68:	e012      	b.n	8002c90 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	69b8      	ldr	r0, [r7, #24]
 8002c72:	f000 fb53 	bl	800331c <xQueueGenericSend>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d009      	beq.n	8002c90 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8002c82:	f06f 0301 	mvn.w	r3, #1
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	e002      	b.n	8002c90 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8002c8a:	f06f 0302 	mvn.w	r3, #2
 8002c8e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002c90:	69fb      	ldr	r3, [r7, #28]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3720      	adds	r7, #32
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	e000ed04 	.word	0xe000ed04

08002ca0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cb6:	f3ef 8305 	mrs	r3, IPSR
 8002cba:	617b      	str	r3, [r7, #20]
  return(result);
 8002cbc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d028      	beq.n	8002d14 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <osMessageQueueGet+0x34>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <osMessageQueueGet+0x34>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8002cd4:	f06f 0303 	mvn.w	r3, #3
 8002cd8:	61fb      	str	r3, [r7, #28]
 8002cda:	e037      	b.n	8002d4c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002ce0:	f107 0310 	add.w	r3, r7, #16
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	68b9      	ldr	r1, [r7, #8]
 8002ce8:	69b8      	ldr	r0, [r7, #24]
 8002cea:	f000 fea9 	bl	8003a40 <xQueueReceiveFromISR>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d003      	beq.n	8002cfc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8002cf4:	f06f 0302 	mvn.w	r3, #2
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	e027      	b.n	8002d4c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d024      	beq.n	8002d4c <osMessageQueueGet+0xac>
 8002d02:	4b15      	ldr	r3, [pc, #84]	@ (8002d58 <osMessageQueueGet+0xb8>)
 8002d04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	f3bf 8f6f 	isb	sy
 8002d12:	e01b      	b.n	8002d4c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <osMessageQueueGet+0x80>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d103      	bne.n	8002d28 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8002d20:	f06f 0303 	mvn.w	r3, #3
 8002d24:	61fb      	str	r3, [r7, #28]
 8002d26:	e011      	b.n	8002d4c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	68b9      	ldr	r1, [r7, #8]
 8002d2c:	69b8      	ldr	r0, [r7, #24]
 8002d2e:	f000 fc95 	bl	800365c <xQueueReceive>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d009      	beq.n	8002d4c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8002d3e:	f06f 0301 	mvn.w	r3, #1
 8002d42:	61fb      	str	r3, [r7, #28]
 8002d44:	e002      	b.n	8002d4c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8002d46:	f06f 0302 	mvn.w	r3, #2
 8002d4a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002d4c:	69fb      	ldr	r3, [r7, #28]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3720      	adds	r7, #32
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	e000ed04 	.word	0xe000ed04

08002d5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4a06      	ldr	r2, [pc, #24]	@ (8002d84 <vApplicationGetIdleTaskMemory+0x28>)
 8002d6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	4a05      	ldr	r2, [pc, #20]	@ (8002d88 <vApplicationGetIdleTaskMemory+0x2c>)
 8002d72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2280      	movs	r2, #128	@ 0x80
 8002d78:	601a      	str	r2, [r3, #0]
}
 8002d7a:	bf00      	nop
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	20000174 	.word	0x20000174
 8002d88:	200001d0 	.word	0x200001d0

08002d8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4a07      	ldr	r2, [pc, #28]	@ (8002db8 <vApplicationGetTimerTaskMemory+0x2c>)
 8002d9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	4a06      	ldr	r2, [pc, #24]	@ (8002dbc <vApplicationGetTimerTaskMemory+0x30>)
 8002da2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002daa:	601a      	str	r2, [r3, #0]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	200003d0 	.word	0x200003d0
 8002dbc:	2000042c 	.word	0x2000042c

08002dc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f103 0208 	add.w	r2, r3, #8
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f103 0208 	add.w	r2, r3, #8
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f103 0208 	add.w	r2, r3, #8
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr

08002dfe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr

08002e16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e16:	b480      	push	{r7}
 8002e18:	b085      	sub	sp, #20
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	601a      	str	r2, [r3, #0]
}
 8002e52:	bf00      	nop
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e72:	d103      	bne.n	8002e7c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	e00c      	b.n	8002e96 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3308      	adds	r3, #8
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	e002      	b.n	8002e8a <vListInsert+0x2e>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d2f6      	bcs.n	8002e84 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	601a      	str	r2, [r3, #0]
}
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6892      	ldr	r2, [r2, #8]
 8002ee2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6852      	ldr	r2, [r2, #4]
 8002eec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d103      	bne.n	8002f00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	1e5a      	subs	r2, r3, #1
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr
	...

08002f20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10b      	bne.n	8002f4c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002f46:	bf00      	nop
 8002f48:	bf00      	nop
 8002f4a:	e7fd      	b.n	8002f48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002f4c:	f002 fbde 	bl	800570c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f58:	68f9      	ldr	r1, [r7, #12]
 8002f5a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002f5c:	fb01 f303 	mul.w	r3, r1, r3
 8002f60:	441a      	add	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	68f9      	ldr	r1, [r7, #12]
 8002f80:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	441a      	add	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	22ff      	movs	r2, #255	@ 0xff
 8002f90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	22ff      	movs	r2, #255	@ 0xff
 8002f98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d114      	bne.n	8002fcc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d01a      	beq.n	8002fe0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	3310      	adds	r3, #16
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f001 fbb4 	bl	800471c <xTaskRemoveFromEventList>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d012      	beq.n	8002fe0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002fba:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff0 <xQueueGenericReset+0xd0>)
 8002fbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	f3bf 8f4f 	dsb	sy
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	e009      	b.n	8002fe0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	3310      	adds	r3, #16
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff fef5 	bl	8002dc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	3324      	adds	r3, #36	@ 0x24
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fef0 	bl	8002dc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002fe0:	f002 fbc4 	bl	800576c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002fe4:	2301      	movs	r3, #1
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	e000ed04 	.word	0xe000ed04

08002ff4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08e      	sub	sp, #56	@ 0x38
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10b      	bne.n	8003020 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800300c:	f383 8811 	msr	BASEPRI, r3
 8003010:	f3bf 8f6f 	isb	sy
 8003014:	f3bf 8f4f 	dsb	sy
 8003018:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800301a:	bf00      	nop
 800301c:	bf00      	nop
 800301e:	e7fd      	b.n	800301c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10b      	bne.n	800303e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800302a:	f383 8811 	msr	BASEPRI, r3
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003038:	bf00      	nop
 800303a:	bf00      	nop
 800303c:	e7fd      	b.n	800303a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <xQueueGenericCreateStatic+0x56>
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <xQueueGenericCreateStatic+0x5a>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <xQueueGenericCreateStatic+0x5c>
 800304e:	2300      	movs	r3, #0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10b      	bne.n	800306c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	623b      	str	r3, [r7, #32]
}
 8003066:	bf00      	nop
 8003068:	bf00      	nop
 800306a:	e7fd      	b.n	8003068 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d102      	bne.n	8003078 <xQueueGenericCreateStatic+0x84>
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <xQueueGenericCreateStatic+0x88>
 8003078:	2301      	movs	r3, #1
 800307a:	e000      	b.n	800307e <xQueueGenericCreateStatic+0x8a>
 800307c:	2300      	movs	r3, #0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10b      	bne.n	800309a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003086:	f383 8811 	msr	BASEPRI, r3
 800308a:	f3bf 8f6f 	isb	sy
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	61fb      	str	r3, [r7, #28]
}
 8003094:	bf00      	nop
 8003096:	bf00      	nop
 8003098:	e7fd      	b.n	8003096 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800309a:	2350      	movs	r3, #80	@ 0x50
 800309c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2b50      	cmp	r3, #80	@ 0x50
 80030a2:	d00b      	beq.n	80030bc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80030a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a8:	f383 8811 	msr	BASEPRI, r3
 80030ac:	f3bf 8f6f 	isb	sy
 80030b0:	f3bf 8f4f 	dsb	sy
 80030b4:	61bb      	str	r3, [r7, #24]
}
 80030b6:	bf00      	nop
 80030b8:	bf00      	nop
 80030ba:	e7fd      	b.n	80030b8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80030bc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80030c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00d      	beq.n	80030e4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80030c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030d0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80030d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	4613      	mov	r3, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	68b9      	ldr	r1, [r7, #8]
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f840 	bl	8003164 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80030e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3730      	adds	r7, #48	@ 0x30
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b08a      	sub	sp, #40	@ 0x28
 80030f2:	af02      	add	r7, sp, #8
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	4613      	mov	r3, r2
 80030fa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10b      	bne.n	800311a <xQueueGenericCreate+0x2c>
	__asm volatile
 8003102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003106:	f383 8811 	msr	BASEPRI, r3
 800310a:	f3bf 8f6f 	isb	sy
 800310e:	f3bf 8f4f 	dsb	sy
 8003112:	613b      	str	r3, [r7, #16]
}
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	e7fd      	b.n	8003116 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	fb02 f303 	mul.w	r3, r2, r3
 8003122:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	3350      	adds	r3, #80	@ 0x50
 8003128:	4618      	mov	r0, r3
 800312a:	f002 fbf1 	bl	8005910 <pvPortMalloc>
 800312e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d011      	beq.n	800315a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	3350      	adds	r3, #80	@ 0x50
 800313e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003148:	79fa      	ldrb	r2, [r7, #7]
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	4613      	mov	r3, r2
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	68b9      	ldr	r1, [r7, #8]
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f805 	bl	8003164 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800315a:	69bb      	ldr	r3, [r7, #24]
	}
 800315c:	4618      	mov	r0, r3
 800315e:	3720      	adds	r7, #32
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d103      	bne.n	8003180 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	e002      	b.n	8003186 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003192:	2101      	movs	r1, #1
 8003194:	69b8      	ldr	r0, [r7, #24]
 8003196:	f7ff fec3 	bl	8002f20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80031a2:	bf00      	nop
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00e      	beq.n	80031d6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80031ca:	2300      	movs	r3, #0
 80031cc:	2200      	movs	r2, #0
 80031ce:	2100      	movs	r1, #0
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f8a3 	bl	800331c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80031d6:	bf00      	nop
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b086      	sub	sp, #24
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	4603      	mov	r3, r0
 80031e6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80031e8:	2301      	movs	r3, #1
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	2300      	movs	r3, #0
 80031ee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	461a      	mov	r2, r3
 80031f4:	6939      	ldr	r1, [r7, #16]
 80031f6:	6978      	ldr	r0, [r7, #20]
 80031f8:	f7ff ff79 	bl	80030ee <xQueueGenericCreate>
 80031fc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f7ff ffd3 	bl	80031aa <prvInitialiseMutex>

		return xNewQueue;
 8003204:	68fb      	ldr	r3, [r7, #12]
	}
 8003206:	4618      	mov	r0, r3
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800320e:	b580      	push	{r7, lr}
 8003210:	b088      	sub	sp, #32
 8003212:	af02      	add	r7, sp, #8
 8003214:	4603      	mov	r3, r0
 8003216:	6039      	str	r1, [r7, #0]
 8003218:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800321a:	2301      	movs	r3, #1
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	2300      	movs	r3, #0
 8003220:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2200      	movs	r2, #0
 800322a:	6939      	ldr	r1, [r7, #16]
 800322c:	6978      	ldr	r0, [r7, #20]
 800322e:	f7ff fee1 	bl	8002ff4 <xQueueGenericCreateStatic>
 8003232:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f7ff ffb8 	bl	80031aa <prvInitialiseMutex>

		return xNewQueue;
 800323a:	68fb      	ldr	r3, [r7, #12]
	}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10b      	bne.n	800326e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8003256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800325a:	f383 8811 	msr	BASEPRI, r3
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	60fb      	str	r3, [r7, #12]
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	e7fd      	b.n	800326a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	689c      	ldr	r4, [r3, #8]
 8003272:	f001 fc13 	bl	8004a9c <xTaskGetCurrentTaskHandle>
 8003276:	4603      	mov	r3, r0
 8003278:	429c      	cmp	r4, r3
 800327a:	d111      	bne.n	80032a0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	1e5a      	subs	r2, r3, #1
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d105      	bne.n	800329a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800328e:	2300      	movs	r3, #0
 8003290:	2200      	movs	r2, #0
 8003292:	2100      	movs	r1, #0
 8003294:	6938      	ldr	r0, [r7, #16]
 8003296:	f000 f841 	bl	800331c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800329a:	2301      	movs	r3, #1
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	e001      	b.n	80032a4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80032a4:	697b      	ldr	r3, [r7, #20]
	}
 80032a6:	4618      	mov	r0, r3
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd90      	pop	{r4, r7, pc}

080032ae <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80032ae:	b590      	push	{r4, r7, lr}
 80032b0:	b087      	sub	sp, #28
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10b      	bne.n	80032da <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80032c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c6:	f383 8811 	msr	BASEPRI, r3
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	60fb      	str	r3, [r7, #12]
}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop
 80032d8:	e7fd      	b.n	80032d6 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	689c      	ldr	r4, [r3, #8]
 80032de:	f001 fbdd 	bl	8004a9c <xTaskGetCurrentTaskHandle>
 80032e2:	4603      	mov	r3, r0
 80032e4:	429c      	cmp	r4, r3
 80032e6:	d107      	bne.n	80032f8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80032f2:	2301      	movs	r3, #1
 80032f4:	617b      	str	r3, [r7, #20]
 80032f6:	e00c      	b.n	8003312 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80032f8:	6839      	ldr	r1, [r7, #0]
 80032fa:	6938      	ldr	r0, [r7, #16]
 80032fc:	f000 fa90 	bl	8003820 <xQueueSemaphoreTake>
 8003300:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d004      	beq.n	8003312 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8003312:	697b      	ldr	r3, [r7, #20]
	}
 8003314:	4618      	mov	r0, r3
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	bd90      	pop	{r4, r7, pc}

0800331c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08e      	sub	sp, #56	@ 0x38
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
 8003328:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800332a:	2300      	movs	r3, #0
 800332c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10b      	bne.n	8003350 <xQueueGenericSend+0x34>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800334a:	bf00      	nop
 800334c:	bf00      	nop
 800334e:	e7fd      	b.n	800334c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d103      	bne.n	800335e <xQueueGenericSend+0x42>
 8003356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <xQueueGenericSend+0x46>
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <xQueueGenericSend+0x48>
 8003362:	2300      	movs	r3, #0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10b      	bne.n	8003380 <xQueueGenericSend+0x64>
	__asm volatile
 8003368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800336c:	f383 8811 	msr	BASEPRI, r3
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800337a:	bf00      	nop
 800337c:	bf00      	nop
 800337e:	e7fd      	b.n	800337c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d103      	bne.n	800338e <xQueueGenericSend+0x72>
 8003386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <xQueueGenericSend+0x76>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <xQueueGenericSend+0x78>
 8003392:	2300      	movs	r3, #0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10b      	bne.n	80033b0 <xQueueGenericSend+0x94>
	__asm volatile
 8003398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800339c:	f383 8811 	msr	BASEPRI, r3
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	623b      	str	r3, [r7, #32]
}
 80033aa:	bf00      	nop
 80033ac:	bf00      	nop
 80033ae:	e7fd      	b.n	80033ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033b0:	f001 fb82 	bl	8004ab8 <xTaskGetSchedulerState>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d102      	bne.n	80033c0 <xQueueGenericSend+0xa4>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <xQueueGenericSend+0xa8>
 80033c0:	2301      	movs	r3, #1
 80033c2:	e000      	b.n	80033c6 <xQueueGenericSend+0xaa>
 80033c4:	2300      	movs	r3, #0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10b      	bne.n	80033e2 <xQueueGenericSend+0xc6>
	__asm volatile
 80033ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	61fb      	str	r3, [r7, #28]
}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	e7fd      	b.n	80033de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033e2:	f002 f993 	bl	800570c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d302      	bcc.n	80033f8 <xQueueGenericSend+0xdc>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d129      	bne.n	800344c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	68b9      	ldr	r1, [r7, #8]
 80033fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033fe:	f000 fbb8 	bl	8003b72 <prvCopyDataToQueue>
 8003402:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003408:	2b00      	cmp	r3, #0
 800340a:	d010      	beq.n	800342e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800340c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800340e:	3324      	adds	r3, #36	@ 0x24
 8003410:	4618      	mov	r0, r3
 8003412:	f001 f983 	bl	800471c <xTaskRemoveFromEventList>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d013      	beq.n	8003444 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800341c:	4b3f      	ldr	r3, [pc, #252]	@ (800351c <xQueueGenericSend+0x200>)
 800341e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	e00a      	b.n	8003444 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800342e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003434:	4b39      	ldr	r3, [pc, #228]	@ (800351c <xQueueGenericSend+0x200>)
 8003436:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	f3bf 8f4f 	dsb	sy
 8003440:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003444:	f002 f992 	bl	800576c <vPortExitCritical>
				return pdPASS;
 8003448:	2301      	movs	r3, #1
 800344a:	e063      	b.n	8003514 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d103      	bne.n	800345a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003452:	f002 f98b 	bl	800576c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003456:	2300      	movs	r3, #0
 8003458:	e05c      	b.n	8003514 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800345a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800345c:	2b00      	cmp	r3, #0
 800345e:	d106      	bne.n	800346e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003460:	f107 0314 	add.w	r3, r7, #20
 8003464:	4618      	mov	r0, r3
 8003466:	f001 f9bd 	bl	80047e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800346a:	2301      	movs	r3, #1
 800346c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800346e:	f002 f97d 	bl	800576c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003472:	f000 ff2f 	bl	80042d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003476:	f002 f949 	bl	800570c <vPortEnterCritical>
 800347a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003480:	b25b      	sxtb	r3, r3
 8003482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003486:	d103      	bne.n	8003490 <xQueueGenericSend+0x174>
 8003488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003492:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003496:	b25b      	sxtb	r3, r3
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d103      	bne.n	80034a6 <xQueueGenericSend+0x18a>
 800349e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034a6:	f002 f961 	bl	800576c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034aa:	1d3a      	adds	r2, r7, #4
 80034ac:	f107 0314 	add.w	r3, r7, #20
 80034b0:	4611      	mov	r1, r2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f001 f9ac 	bl	8004810 <xTaskCheckForTimeOut>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d124      	bne.n	8003508 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034c0:	f000 fc4f 	bl	8003d62 <prvIsQueueFull>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d018      	beq.n	80034fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034cc:	3310      	adds	r3, #16
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	4611      	mov	r1, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f001 f8d0 	bl	8004678 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80034d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034da:	f000 fbda 	bl	8003c92 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80034de:	f000 ff07 	bl	80042f0 <xTaskResumeAll>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f47f af7c 	bne.w	80033e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80034ea:	4b0c      	ldr	r3, [pc, #48]	@ (800351c <xQueueGenericSend+0x200>)
 80034ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	e772      	b.n	80033e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80034fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034fe:	f000 fbc8 	bl	8003c92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003502:	f000 fef5 	bl	80042f0 <xTaskResumeAll>
 8003506:	e76c      	b.n	80033e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003508:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800350a:	f000 fbc2 	bl	8003c92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800350e:	f000 feef 	bl	80042f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003512:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003514:	4618      	mov	r0, r3
 8003516:	3738      	adds	r7, #56	@ 0x38
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	e000ed04 	.word	0xe000ed04

08003520 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b090      	sub	sp, #64	@ 0x40
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10b      	bne.n	8003550 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800354a:	bf00      	nop
 800354c:	bf00      	nop
 800354e:	e7fd      	b.n	800354c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d103      	bne.n	800355e <xQueueGenericSendFromISR+0x3e>
 8003556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <xQueueGenericSendFromISR+0x42>
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <xQueueGenericSendFromISR+0x44>
 8003562:	2300      	movs	r3, #0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10b      	bne.n	8003580 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800356c:	f383 8811 	msr	BASEPRI, r3
 8003570:	f3bf 8f6f 	isb	sy
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800357a:	bf00      	nop
 800357c:	bf00      	nop
 800357e:	e7fd      	b.n	800357c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d103      	bne.n	800358e <xQueueGenericSendFromISR+0x6e>
 8003586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <xQueueGenericSendFromISR+0x72>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <xQueueGenericSendFromISR+0x74>
 8003592:	2300      	movs	r3, #0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10b      	bne.n	80035b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	623b      	str	r3, [r7, #32]
}
 80035aa:	bf00      	nop
 80035ac:	bf00      	nop
 80035ae:	e7fd      	b.n	80035ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035b0:	f002 f96e 	bl	8005890 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80035b4:	f3ef 8211 	mrs	r2, BASEPRI
 80035b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	61fa      	str	r2, [r7, #28]
 80035ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80035cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d8:	429a      	cmp	r2, r3
 80035da:	d302      	bcc.n	80035e2 <xQueueGenericSendFromISR+0xc2>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d12f      	bne.n	8003642 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80035e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80035f8:	f000 fabb 	bl	8003b72 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80035fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003604:	d112      	bne.n	800362c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	2b00      	cmp	r3, #0
 800360c:	d016      	beq.n	800363c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800360e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003610:	3324      	adds	r3, #36	@ 0x24
 8003612:	4618      	mov	r0, r3
 8003614:	f001 f882 	bl	800471c <xTaskRemoveFromEventList>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00e      	beq.n	800363c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00b      	beq.n	800363c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	e007      	b.n	800363c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800362c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003630:	3301      	adds	r3, #1
 8003632:	b2db      	uxtb	r3, r3
 8003634:	b25a      	sxtb	r2, r3
 8003636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800363c:	2301      	movs	r3, #1
 800363e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003640:	e001      	b.n	8003646 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003642:	2300      	movs	r3, #0
 8003644:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003648:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003650:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003654:	4618      	mov	r0, r3
 8003656:	3740      	adds	r7, #64	@ 0x40
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08c      	sub	sp, #48	@ 0x30
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003668:	2300      	movs	r3, #0
 800366a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10b      	bne.n	800368e <xQueueReceive+0x32>
	__asm volatile
 8003676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800367a:	f383 8811 	msr	BASEPRI, r3
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	623b      	str	r3, [r7, #32]
}
 8003688:	bf00      	nop
 800368a:	bf00      	nop
 800368c:	e7fd      	b.n	800368a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d103      	bne.n	800369c <xQueueReceive+0x40>
 8003694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <xQueueReceive+0x44>
 800369c:	2301      	movs	r3, #1
 800369e:	e000      	b.n	80036a2 <xQueueReceive+0x46>
 80036a0:	2300      	movs	r3, #0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10b      	bne.n	80036be <xQueueReceive+0x62>
	__asm volatile
 80036a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	61fb      	str	r3, [r7, #28]
}
 80036b8:	bf00      	nop
 80036ba:	bf00      	nop
 80036bc:	e7fd      	b.n	80036ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036be:	f001 f9fb 	bl	8004ab8 <xTaskGetSchedulerState>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d102      	bne.n	80036ce <xQueueReceive+0x72>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <xQueueReceive+0x76>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <xQueueReceive+0x78>
 80036d2:	2300      	movs	r3, #0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10b      	bne.n	80036f0 <xQueueReceive+0x94>
	__asm volatile
 80036d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036dc:	f383 8811 	msr	BASEPRI, r3
 80036e0:	f3bf 8f6f 	isb	sy
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	61bb      	str	r3, [r7, #24]
}
 80036ea:	bf00      	nop
 80036ec:	bf00      	nop
 80036ee:	e7fd      	b.n	80036ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036f0:	f002 f80c 	bl	800570c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d01f      	beq.n	8003740 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003700:	68b9      	ldr	r1, [r7, #8]
 8003702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003704:	f000 fa9f 	bl	8003c46 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370a:	1e5a      	subs	r2, r3, #1
 800370c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00f      	beq.n	8003738 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800371a:	3310      	adds	r3, #16
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fffd 	bl	800471c <xTaskRemoveFromEventList>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d007      	beq.n	8003738 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003728:	4b3c      	ldr	r3, [pc, #240]	@ (800381c <xQueueReceive+0x1c0>)
 800372a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003738:	f002 f818 	bl	800576c <vPortExitCritical>
				return pdPASS;
 800373c:	2301      	movs	r3, #1
 800373e:	e069      	b.n	8003814 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d103      	bne.n	800374e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003746:	f002 f811 	bl	800576c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800374a:	2300      	movs	r3, #0
 800374c:	e062      	b.n	8003814 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800374e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003750:	2b00      	cmp	r3, #0
 8003752:	d106      	bne.n	8003762 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003754:	f107 0310 	add.w	r3, r7, #16
 8003758:	4618      	mov	r0, r3
 800375a:	f001 f843 	bl	80047e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800375e:	2301      	movs	r3, #1
 8003760:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003762:	f002 f803 	bl	800576c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003766:	f000 fdb5 	bl	80042d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800376a:	f001 ffcf 	bl	800570c <vPortEnterCritical>
 800376e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003770:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003774:	b25b      	sxtb	r3, r3
 8003776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377a:	d103      	bne.n	8003784 <xQueueReceive+0x128>
 800377c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003786:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800378a:	b25b      	sxtb	r3, r3
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d103      	bne.n	800379a <xQueueReceive+0x13e>
 8003792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800379a:	f001 ffe7 	bl	800576c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800379e:	1d3a      	adds	r2, r7, #4
 80037a0:	f107 0310 	add.w	r3, r7, #16
 80037a4:	4611      	mov	r1, r2
 80037a6:	4618      	mov	r0, r3
 80037a8:	f001 f832 	bl	8004810 <xTaskCheckForTimeOut>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d123      	bne.n	80037fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037b4:	f000 fabf 	bl	8003d36 <prvIsQueueEmpty>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d017      	beq.n	80037ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c0:	3324      	adds	r3, #36	@ 0x24
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	4611      	mov	r1, r2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 ff56 	bl	8004678 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037ce:	f000 fa60 	bl	8003c92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037d2:	f000 fd8d 	bl	80042f0 <xTaskResumeAll>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d189      	bne.n	80036f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80037dc:	4b0f      	ldr	r3, [pc, #60]	@ (800381c <xQueueReceive+0x1c0>)
 80037de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	e780      	b.n	80036f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80037ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037f0:	f000 fa4f 	bl	8003c92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037f4:	f000 fd7c 	bl	80042f0 <xTaskResumeAll>
 80037f8:	e77a      	b.n	80036f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80037fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037fc:	f000 fa49 	bl	8003c92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003800:	f000 fd76 	bl	80042f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003804:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003806:	f000 fa96 	bl	8003d36 <prvIsQueueEmpty>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	f43f af6f 	beq.w	80036f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003812:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003814:	4618      	mov	r0, r3
 8003816:	3730      	adds	r7, #48	@ 0x30
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	e000ed04 	.word	0xe000ed04

08003820 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08e      	sub	sp, #56	@ 0x38
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800382a:	2300      	movs	r3, #0
 800382c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003832:	2300      	movs	r3, #0
 8003834:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10b      	bne.n	8003854 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	623b      	str	r3, [r7, #32]
}
 800384e:	bf00      	nop
 8003850:	bf00      	nop
 8003852:	e7fd      	b.n	8003850 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00b      	beq.n	8003874 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800385c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003860:	f383 8811 	msr	BASEPRI, r3
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	61fb      	str	r3, [r7, #28]
}
 800386e:	bf00      	nop
 8003870:	bf00      	nop
 8003872:	e7fd      	b.n	8003870 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003874:	f001 f920 	bl	8004ab8 <xTaskGetSchedulerState>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d102      	bne.n	8003884 <xQueueSemaphoreTake+0x64>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <xQueueSemaphoreTake+0x68>
 8003884:	2301      	movs	r3, #1
 8003886:	e000      	b.n	800388a <xQueueSemaphoreTake+0x6a>
 8003888:	2300      	movs	r3, #0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10b      	bne.n	80038a6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800388e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	61bb      	str	r3, [r7, #24]
}
 80038a0:	bf00      	nop
 80038a2:	bf00      	nop
 80038a4:	e7fd      	b.n	80038a2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038a6:	f001 ff31 	bl	800570c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80038aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ae:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80038b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d024      	beq.n	8003900 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80038b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b8:	1e5a      	subs	r2, r3, #1
 80038ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038bc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d104      	bne.n	80038d0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80038c6:	f001 fa71 	bl	8004dac <pvTaskIncrementMutexHeldCount>
 80038ca:	4602      	mov	r2, r0
 80038cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ce:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00f      	beq.n	80038f8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038da:	3310      	adds	r3, #16
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 ff1d 	bl	800471c <xTaskRemoveFromEventList>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80038e8:	4b54      	ldr	r3, [pc, #336]	@ (8003a3c <xQueueSemaphoreTake+0x21c>)
 80038ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80038f8:	f001 ff38 	bl	800576c <vPortExitCritical>
				return pdPASS;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e098      	b.n	8003a32 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d112      	bne.n	800392c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00b      	beq.n	8003924 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800390c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	617b      	str	r3, [r7, #20]
}
 800391e:	bf00      	nop
 8003920:	bf00      	nop
 8003922:	e7fd      	b.n	8003920 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003924:	f001 ff22 	bl	800576c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003928:	2300      	movs	r3, #0
 800392a:	e082      	b.n	8003a32 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800392c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800392e:	2b00      	cmp	r3, #0
 8003930:	d106      	bne.n	8003940 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003932:	f107 030c 	add.w	r3, r7, #12
 8003936:	4618      	mov	r0, r3
 8003938:	f000 ff54 	bl	80047e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800393c:	2301      	movs	r3, #1
 800393e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003940:	f001 ff14 	bl	800576c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003944:	f000 fcc6 	bl	80042d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003948:	f001 fee0 	bl	800570c <vPortEnterCritical>
 800394c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800394e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003952:	b25b      	sxtb	r3, r3
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003958:	d103      	bne.n	8003962 <xQueueSemaphoreTake+0x142>
 800395a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003964:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003968:	b25b      	sxtb	r3, r3
 800396a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396e:	d103      	bne.n	8003978 <xQueueSemaphoreTake+0x158>
 8003970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003978:	f001 fef8 	bl	800576c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800397c:	463a      	mov	r2, r7
 800397e:	f107 030c 	add.w	r3, r7, #12
 8003982:	4611      	mov	r1, r2
 8003984:	4618      	mov	r0, r3
 8003986:	f000 ff43 	bl	8004810 <xTaskCheckForTimeOut>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d132      	bne.n	80039f6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003990:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003992:	f000 f9d0 	bl	8003d36 <prvIsQueueEmpty>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d026      	beq.n	80039ea <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800399c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d109      	bne.n	80039b8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80039a4:	f001 feb2 	bl	800570c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80039a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f001 f8a1 	bl	8004af4 <xTaskPriorityInherit>
 80039b2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80039b4:	f001 feda 	bl	800576c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80039b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ba:	3324      	adds	r3, #36	@ 0x24
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	4611      	mov	r1, r2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fe59 	bl	8004678 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80039c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80039c8:	f000 f963 	bl	8003c92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80039cc:	f000 fc90 	bl	80042f0 <xTaskResumeAll>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f47f af67 	bne.w	80038a6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80039d8:	4b18      	ldr	r3, [pc, #96]	@ (8003a3c <xQueueSemaphoreTake+0x21c>)
 80039da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	f3bf 8f6f 	isb	sy
 80039e8:	e75d      	b.n	80038a6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80039ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80039ec:	f000 f951 	bl	8003c92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039f0:	f000 fc7e 	bl	80042f0 <xTaskResumeAll>
 80039f4:	e757      	b.n	80038a6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80039f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80039f8:	f000 f94b 	bl	8003c92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039fc:	f000 fc78 	bl	80042f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a02:	f000 f998 	bl	8003d36 <prvIsQueueEmpty>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f43f af4c 	beq.w	80038a6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00d      	beq.n	8003a30 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003a14:	f001 fe7a 	bl	800570c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003a18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a1a:	f000 f893 	bl	8003b44 <prvGetDisinheritPriorityAfterTimeout>
 8003a1e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a26:	4618      	mov	r0, r3
 8003a28:	f001 f93c 	bl	8004ca4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003a2c:	f001 fe9e 	bl	800576c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3738      	adds	r7, #56	@ 0x38
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	e000ed04 	.word	0xe000ed04

08003a40 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08e      	sub	sp, #56	@ 0x38
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10b      	bne.n	8003a6e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a5a:	f383 8811 	msr	BASEPRI, r3
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	623b      	str	r3, [r7, #32]
}
 8003a68:	bf00      	nop
 8003a6a:	bf00      	nop
 8003a6c:	e7fd      	b.n	8003a6a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d103      	bne.n	8003a7c <xQueueReceiveFromISR+0x3c>
 8003a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <xQueueReceiveFromISR+0x40>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <xQueueReceiveFromISR+0x42>
 8003a80:	2300      	movs	r3, #0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10b      	bne.n	8003a9e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a8a:	f383 8811 	msr	BASEPRI, r3
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	61fb      	str	r3, [r7, #28]
}
 8003a98:	bf00      	nop
 8003a9a:	bf00      	nop
 8003a9c:	e7fd      	b.n	8003a9a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a9e:	f001 fef7 	bl	8005890 <vPortValidateInterruptPriority>
	__asm volatile
 8003aa2:	f3ef 8211 	mrs	r2, BASEPRI
 8003aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	61ba      	str	r2, [r7, #24]
 8003ab8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003aba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d02f      	beq.n	8003b2a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003acc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ad0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ad8:	f000 f8b5 	bl	8003c46 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ade:	1e5a      	subs	r2, r3, #1
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003ae4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d112      	bne.n	8003b14 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d016      	beq.n	8003b24 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af8:	3310      	adds	r3, #16
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fe0e 	bl	800471c <xTaskRemoveFromEventList>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00e      	beq.n	8003b24 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00b      	beq.n	8003b24 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	e007      	b.n	8003b24 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003b14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b18:	3301      	adds	r3, #1
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	b25a      	sxtb	r2, r3
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003b24:	2301      	movs	r3, #1
 8003b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b28:	e001      	b.n	8003b2e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b30:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f383 8811 	msr	BASEPRI, r3
}
 8003b38:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3738      	adds	r7, #56	@ 0x38
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d006      	beq.n	8003b62 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	e001      	b.n	8003b66 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003b66:	68fb      	ldr	r3, [r7, #12]
	}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr

08003b72 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b086      	sub	sp, #24
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	60f8      	str	r0, [r7, #12]
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b86:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10d      	bne.n	8003bac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d14d      	bne.n	8003c34 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f001 f811 	bl	8004bc4 <xTaskPriorityDisinherit>
 8003ba2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	609a      	str	r2, [r3, #8]
 8003baa:	e043      	b.n	8003c34 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d119      	bne.n	8003be6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6858      	ldr	r0, [r3, #4]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bba:	461a      	mov	r2, r3
 8003bbc:	68b9      	ldr	r1, [r7, #8]
 8003bbe:	f002 fb18 	bl	80061f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bca:	441a      	add	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d32b      	bcc.n	8003c34 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	605a      	str	r2, [r3, #4]
 8003be4:	e026      	b.n	8003c34 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	68d8      	ldr	r0, [r3, #12]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68b9      	ldr	r1, [r7, #8]
 8003bf2:	f002 fafe 	bl	80061f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	425b      	negs	r3, r3
 8003c00:	441a      	add	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d207      	bcs.n	8003c22 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1a:	425b      	negs	r3, r3
 8003c1c:	441a      	add	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d105      	bne.n	8003c34 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	3b01      	subs	r3, #1
 8003c32:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003c3c:	697b      	ldr	r3, [r7, #20]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d018      	beq.n	8003c8a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c60:	441a      	add	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d303      	bcc.n	8003c7a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68d9      	ldr	r1, [r3, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c82:	461a      	mov	r2, r3
 8003c84:	6838      	ldr	r0, [r7, #0]
 8003c86:	f002 fab4 	bl	80061f2 <memcpy>
	}
}
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b084      	sub	sp, #16
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c9a:	f001 fd37 	bl	800570c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ca4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ca6:	e011      	b.n	8003ccc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d012      	beq.n	8003cd6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3324      	adds	r3, #36	@ 0x24
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fd31 	bl	800471c <xTaskRemoveFromEventList>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003cc0:	f000 fe0a 	bl	80048d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	dce9      	bgt.n	8003ca8 <prvUnlockQueue+0x16>
 8003cd4:	e000      	b.n	8003cd8 <prvUnlockQueue+0x46>
					break;
 8003cd6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	22ff      	movs	r2, #255	@ 0xff
 8003cdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003ce0:	f001 fd44 	bl	800576c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ce4:	f001 fd12 	bl	800570c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cf0:	e011      	b.n	8003d16 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d012      	beq.n	8003d20 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3310      	adds	r3, #16
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fd0c 	bl	800471c <xTaskRemoveFromEventList>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d0a:	f000 fde5 	bl	80048d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d0e:	7bbb      	ldrb	r3, [r7, #14]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	dce9      	bgt.n	8003cf2 <prvUnlockQueue+0x60>
 8003d1e:	e000      	b.n	8003d22 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d20:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	22ff      	movs	r2, #255	@ 0xff
 8003d26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003d2a:	f001 fd1f 	bl	800576c <vPortExitCritical>
}
 8003d2e:	bf00      	nop
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b084      	sub	sp, #16
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d3e:	f001 fce5 	bl	800570c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d102      	bne.n	8003d50 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	e001      	b.n	8003d54 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d50:	2300      	movs	r3, #0
 8003d52:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d54:	f001 fd0a 	bl	800576c <vPortExitCritical>

	return xReturn;
 8003d58:	68fb      	ldr	r3, [r7, #12]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b084      	sub	sp, #16
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d6a:	f001 fccf 	bl	800570c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d102      	bne.n	8003d80 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	e001      	b.n	8003d84 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d80:	2300      	movs	r3, #0
 8003d82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d84:	f001 fcf2 	bl	800576c <vPortExitCritical>

	return xReturn;
 8003d88:	68fb      	ldr	r3, [r7, #12]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	e014      	b.n	8003dce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003da4:	4a0e      	ldr	r2, [pc, #56]	@ (8003de0 <vQueueAddToRegistry+0x4c>)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10b      	bne.n	8003dc8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003db0:	490b      	ldr	r1, [pc, #44]	@ (8003de0 <vQueueAddToRegistry+0x4c>)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003dba:	4a09      	ldr	r2, [pc, #36]	@ (8003de0 <vQueueAddToRegistry+0x4c>)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003dc6:	e006      	b.n	8003dd6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b07      	cmp	r3, #7
 8003dd2:	d9e7      	bls.n	8003da4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003dd4:	bf00      	nop
 8003dd6:	bf00      	nop
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr
 8003de0:	2000082c 	.word	0x2000082c

08003de4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003df4:	f001 fc8a 	bl	800570c <vPortEnterCritical>
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003dfe:	b25b      	sxtb	r3, r3
 8003e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e04:	d103      	bne.n	8003e0e <vQueueWaitForMessageRestricted+0x2a>
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e14:	b25b      	sxtb	r3, r3
 8003e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1a:	d103      	bne.n	8003e24 <vQueueWaitForMessageRestricted+0x40>
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e24:	f001 fca2 	bl	800576c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d106      	bne.n	8003e3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	3324      	adds	r3, #36	@ 0x24
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	68b9      	ldr	r1, [r7, #8]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 fc43 	bl	80046c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e3e:	6978      	ldr	r0, [r7, #20]
 8003e40:	f7ff ff27 	bl	8003c92 <prvUnlockQueue>
	}
 8003e44:	bf00      	nop
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08e      	sub	sp, #56	@ 0x38
 8003e50:	af04      	add	r7, sp, #16
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10b      	bne.n	8003e78 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	623b      	str	r3, [r7, #32]
}
 8003e72:	bf00      	nop
 8003e74:	bf00      	nop
 8003e76:	e7fd      	b.n	8003e74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10b      	bne.n	8003e96 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	61fb      	str	r3, [r7, #28]
}
 8003e90:	bf00      	nop
 8003e92:	bf00      	nop
 8003e94:	e7fd      	b.n	8003e92 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e96:	235c      	movs	r3, #92	@ 0x5c
 8003e98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b5c      	cmp	r3, #92	@ 0x5c
 8003e9e:	d00b      	beq.n	8003eb8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	61bb      	str	r3, [r7, #24]
}
 8003eb2:	bf00      	nop
 8003eb4:	bf00      	nop
 8003eb6:	e7fd      	b.n	8003eb4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003eb8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d01e      	beq.n	8003efe <xTaskCreateStatic+0xb2>
 8003ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d01b      	beq.n	8003efe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ece:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ed8:	2300      	movs	r3, #0
 8003eda:	9303      	str	r3, [sp, #12]
 8003edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ede:	9302      	str	r3, [sp, #8]
 8003ee0:	f107 0314 	add.w	r3, r7, #20
 8003ee4:	9301      	str	r3, [sp, #4]
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	68b9      	ldr	r1, [r7, #8]
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 f850 	bl	8003f96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ef6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ef8:	f000 f8de 	bl	80040b8 <prvAddNewTaskToReadyList>
 8003efc:	e001      	b.n	8003f02 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f02:	697b      	ldr	r3, [r7, #20]
	}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3728      	adds	r7, #40	@ 0x28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08c      	sub	sp, #48	@ 0x30
 8003f10:	af04      	add	r7, sp, #16
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	603b      	str	r3, [r7, #0]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f1c:	88fb      	ldrh	r3, [r7, #6]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f001 fcf5 	bl	8005910 <pvPortMalloc>
 8003f26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00e      	beq.n	8003f4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f2e:	205c      	movs	r0, #92	@ 0x5c
 8003f30:	f001 fcee 	bl	8005910 <pvPortMalloc>
 8003f34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f42:	e005      	b.n	8003f50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f44:	6978      	ldr	r0, [r7, #20]
 8003f46:	f001 fdb1 	bl	8005aac <vPortFree>
 8003f4a:	e001      	b.n	8003f50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d017      	beq.n	8003f86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f5e:	88fa      	ldrh	r2, [r7, #6]
 8003f60:	2300      	movs	r3, #0
 8003f62:	9303      	str	r3, [sp, #12]
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	9302      	str	r3, [sp, #8]
 8003f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f6a:	9301      	str	r3, [sp, #4]
 8003f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	68b9      	ldr	r1, [r7, #8]
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 f80e 	bl	8003f96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f7a:	69f8      	ldr	r0, [r7, #28]
 8003f7c:	f000 f89c 	bl	80040b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f80:	2301      	movs	r3, #1
 8003f82:	61bb      	str	r3, [r7, #24]
 8003f84:	e002      	b.n	8003f8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f86:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f8c:	69bb      	ldr	r3, [r7, #24]
	}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3720      	adds	r7, #32
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b088      	sub	sp, #32
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	607a      	str	r2, [r7, #4]
 8003fa2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	461a      	mov	r2, r3
 8003fae:	21a5      	movs	r1, #165	@ 0xa5
 8003fb0:	f002 f8a4 	bl	80060fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	f023 0307 	bic.w	r3, r3, #7
 8003fcc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00b      	beq.n	8003ff0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	617b      	str	r3, [r7, #20]
}
 8003fea:	bf00      	nop
 8003fec:	bf00      	nop
 8003fee:	e7fd      	b.n	8003fec <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d01f      	beq.n	8004036 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
 8003ffa:	e012      	b.n	8004022 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	4413      	add	r3, r2
 8004002:	7819      	ldrb	r1, [r3, #0]
 8004004:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	4413      	add	r3, r2
 800400a:	3334      	adds	r3, #52	@ 0x34
 800400c:	460a      	mov	r2, r1
 800400e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	4413      	add	r3, r2
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d006      	beq.n	800402a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	3301      	adds	r3, #1
 8004020:	61fb      	str	r3, [r7, #28]
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	2b0f      	cmp	r3, #15
 8004026:	d9e9      	bls.n	8003ffc <prvInitialiseNewTask+0x66>
 8004028:	e000      	b.n	800402c <prvInitialiseNewTask+0x96>
			{
				break;
 800402a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800402c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004034:	e003      	b.n	800403e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800403e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004040:	2b37      	cmp	r3, #55	@ 0x37
 8004042:	d901      	bls.n	8004048 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004044:	2337      	movs	r3, #55	@ 0x37
 8004046:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800404c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800404e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004050:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004052:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004056:	2200      	movs	r2, #0
 8004058:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800405a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405c:	3304      	adds	r3, #4
 800405e:	4618      	mov	r0, r3
 8004060:	f7fe fecd 	bl	8002dfe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004066:	3318      	adds	r3, #24
 8004068:	4618      	mov	r0, r3
 800406a:	f7fe fec8 	bl	8002dfe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800406e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004072:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004076:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800407a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800407e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004080:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004082:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004086:	2200      	movs	r2, #0
 8004088:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800408a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	68f9      	ldr	r1, [r7, #12]
 8004096:	69b8      	ldr	r0, [r7, #24]
 8004098:	f001 fa48 	bl	800552c <pxPortInitialiseStack>
 800409c:	4602      	mov	r2, r0
 800409e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80040a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040ae:	bf00      	nop
 80040b0:	3720      	adds	r7, #32
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80040c0:	f001 fb24 	bl	800570c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80040c4:	4b2d      	ldr	r3, [pc, #180]	@ (800417c <prvAddNewTaskToReadyList+0xc4>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3301      	adds	r3, #1
 80040ca:	4a2c      	ldr	r2, [pc, #176]	@ (800417c <prvAddNewTaskToReadyList+0xc4>)
 80040cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040ce:	4b2c      	ldr	r3, [pc, #176]	@ (8004180 <prvAddNewTaskToReadyList+0xc8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d109      	bne.n	80040ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040d6:	4a2a      	ldr	r2, [pc, #168]	@ (8004180 <prvAddNewTaskToReadyList+0xc8>)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040dc:	4b27      	ldr	r3, [pc, #156]	@ (800417c <prvAddNewTaskToReadyList+0xc4>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d110      	bne.n	8004106 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040e4:	f000 fc1c 	bl	8004920 <prvInitialiseTaskLists>
 80040e8:	e00d      	b.n	8004106 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040ea:	4b26      	ldr	r3, [pc, #152]	@ (8004184 <prvAddNewTaskToReadyList+0xcc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d109      	bne.n	8004106 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040f2:	4b23      	ldr	r3, [pc, #140]	@ (8004180 <prvAddNewTaskToReadyList+0xc8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d802      	bhi.n	8004106 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004100:	4a1f      	ldr	r2, [pc, #124]	@ (8004180 <prvAddNewTaskToReadyList+0xc8>)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004106:	4b20      	ldr	r3, [pc, #128]	@ (8004188 <prvAddNewTaskToReadyList+0xd0>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3301      	adds	r3, #1
 800410c:	4a1e      	ldr	r2, [pc, #120]	@ (8004188 <prvAddNewTaskToReadyList+0xd0>)
 800410e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004110:	4b1d      	ldr	r3, [pc, #116]	@ (8004188 <prvAddNewTaskToReadyList+0xd0>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800411c:	4b1b      	ldr	r3, [pc, #108]	@ (800418c <prvAddNewTaskToReadyList+0xd4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d903      	bls.n	800412c <prvAddNewTaskToReadyList+0x74>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004128:	4a18      	ldr	r2, [pc, #96]	@ (800418c <prvAddNewTaskToReadyList+0xd4>)
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4a15      	ldr	r2, [pc, #84]	@ (8004190 <prvAddNewTaskToReadyList+0xd8>)
 800413a:	441a      	add	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3304      	adds	r3, #4
 8004140:	4619      	mov	r1, r3
 8004142:	4610      	mov	r0, r2
 8004144:	f7fe fe67 	bl	8002e16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004148:	f001 fb10 	bl	800576c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800414c:	4b0d      	ldr	r3, [pc, #52]	@ (8004184 <prvAddNewTaskToReadyList+0xcc>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00e      	beq.n	8004172 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004154:	4b0a      	ldr	r3, [pc, #40]	@ (8004180 <prvAddNewTaskToReadyList+0xc8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415e:	429a      	cmp	r2, r3
 8004160:	d207      	bcs.n	8004172 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004162:	4b0c      	ldr	r3, [pc, #48]	@ (8004194 <prvAddNewTaskToReadyList+0xdc>)
 8004164:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004172:	bf00      	nop
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20000d40 	.word	0x20000d40
 8004180:	2000086c 	.word	0x2000086c
 8004184:	20000d4c 	.word	0x20000d4c
 8004188:	20000d5c 	.word	0x20000d5c
 800418c:	20000d48 	.word	0x20000d48
 8004190:	20000870 	.word	0x20000870
 8004194:	e000ed04 	.word	0xe000ed04

08004198 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d018      	beq.n	80041dc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80041aa:	4b14      	ldr	r3, [pc, #80]	@ (80041fc <vTaskDelay+0x64>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00b      	beq.n	80041ca <vTaskDelay+0x32>
	__asm volatile
 80041b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	60bb      	str	r3, [r7, #8]
}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop
 80041c8:	e7fd      	b.n	80041c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80041ca:	f000 f883 	bl	80042d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80041ce:	2100      	movs	r1, #0
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 fdff 	bl	8004dd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80041d6:	f000 f88b 	bl	80042f0 <xTaskResumeAll>
 80041da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d107      	bne.n	80041f2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80041e2:	4b07      	ldr	r3, [pc, #28]	@ (8004200 <vTaskDelay+0x68>)
 80041e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000d68 	.word	0x20000d68
 8004200:	e000ed04 	.word	0xe000ed04

08004204 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	@ 0x28
 8004208:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800420a:	2300      	movs	r3, #0
 800420c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800420e:	2300      	movs	r3, #0
 8004210:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004212:	463a      	mov	r2, r7
 8004214:	1d39      	adds	r1, r7, #4
 8004216:	f107 0308 	add.w	r3, r7, #8
 800421a:	4618      	mov	r0, r3
 800421c:	f7fe fd9e 	bl	8002d5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004220:	6839      	ldr	r1, [r7, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	9202      	str	r2, [sp, #8]
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	2300      	movs	r3, #0
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	2300      	movs	r3, #0
 8004230:	460a      	mov	r2, r1
 8004232:	4922      	ldr	r1, [pc, #136]	@ (80042bc <vTaskStartScheduler+0xb8>)
 8004234:	4822      	ldr	r0, [pc, #136]	@ (80042c0 <vTaskStartScheduler+0xbc>)
 8004236:	f7ff fe09 	bl	8003e4c <xTaskCreateStatic>
 800423a:	4603      	mov	r3, r0
 800423c:	4a21      	ldr	r2, [pc, #132]	@ (80042c4 <vTaskStartScheduler+0xc0>)
 800423e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004240:	4b20      	ldr	r3, [pc, #128]	@ (80042c4 <vTaskStartScheduler+0xc0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004248:	2301      	movs	r3, #1
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	e001      	b.n	8004252 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800424e:	2300      	movs	r3, #0
 8004250:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d102      	bne.n	800425e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004258:	f000 fe10 	bl	8004e7c <xTimerCreateTimerTask>
 800425c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d116      	bne.n	8004292 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	613b      	str	r3, [r7, #16]
}
 8004276:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004278:	4b13      	ldr	r3, [pc, #76]	@ (80042c8 <vTaskStartScheduler+0xc4>)
 800427a:	f04f 32ff 	mov.w	r2, #4294967295
 800427e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004280:	4b12      	ldr	r3, [pc, #72]	@ (80042cc <vTaskStartScheduler+0xc8>)
 8004282:	2201      	movs	r2, #1
 8004284:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004286:	4b12      	ldr	r3, [pc, #72]	@ (80042d0 <vTaskStartScheduler+0xcc>)
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800428c:	f001 f9cc 	bl	8005628 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004290:	e00f      	b.n	80042b2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004298:	d10b      	bne.n	80042b2 <vTaskStartScheduler+0xae>
	__asm volatile
 800429a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	60fb      	str	r3, [r7, #12]
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	e7fd      	b.n	80042ae <vTaskStartScheduler+0xaa>
}
 80042b2:	bf00      	nop
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	08006ec0 	.word	0x08006ec0
 80042c0:	080048f1 	.word	0x080048f1
 80042c4:	20000d64 	.word	0x20000d64
 80042c8:	20000d60 	.word	0x20000d60
 80042cc:	20000d4c 	.word	0x20000d4c
 80042d0:	20000d44 	.word	0x20000d44

080042d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80042d8:	4b04      	ldr	r3, [pc, #16]	@ (80042ec <vTaskSuspendAll+0x18>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3301      	adds	r3, #1
 80042de:	4a03      	ldr	r2, [pc, #12]	@ (80042ec <vTaskSuspendAll+0x18>)
 80042e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80042e2:	bf00      	nop
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	20000d68 	.word	0x20000d68

080042f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80042fe:	4b42      	ldr	r3, [pc, #264]	@ (8004408 <xTaskResumeAll+0x118>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10b      	bne.n	800431e <xTaskResumeAll+0x2e>
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	603b      	str	r3, [r7, #0]
}
 8004318:	bf00      	nop
 800431a:	bf00      	nop
 800431c:	e7fd      	b.n	800431a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800431e:	f001 f9f5 	bl	800570c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004322:	4b39      	ldr	r3, [pc, #228]	@ (8004408 <xTaskResumeAll+0x118>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3b01      	subs	r3, #1
 8004328:	4a37      	ldr	r2, [pc, #220]	@ (8004408 <xTaskResumeAll+0x118>)
 800432a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800432c:	4b36      	ldr	r3, [pc, #216]	@ (8004408 <xTaskResumeAll+0x118>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d162      	bne.n	80043fa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004334:	4b35      	ldr	r3, [pc, #212]	@ (800440c <xTaskResumeAll+0x11c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d05e      	beq.n	80043fa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800433c:	e02f      	b.n	800439e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800433e:	4b34      	ldr	r3, [pc, #208]	@ (8004410 <xTaskResumeAll+0x120>)
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3318      	adds	r3, #24
 800434a:	4618      	mov	r0, r3
 800434c:	f7fe fdbe 	bl	8002ecc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3304      	adds	r3, #4
 8004354:	4618      	mov	r0, r3
 8004356:	f7fe fdb9 	bl	8002ecc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800435e:	4b2d      	ldr	r3, [pc, #180]	@ (8004414 <xTaskResumeAll+0x124>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d903      	bls.n	800436e <xTaskResumeAll+0x7e>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436a:	4a2a      	ldr	r2, [pc, #168]	@ (8004414 <xTaskResumeAll+0x124>)
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004372:	4613      	mov	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4a27      	ldr	r2, [pc, #156]	@ (8004418 <xTaskResumeAll+0x128>)
 800437c:	441a      	add	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3304      	adds	r3, #4
 8004382:	4619      	mov	r1, r3
 8004384:	4610      	mov	r0, r2
 8004386:	f7fe fd46 	bl	8002e16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800438e:	4b23      	ldr	r3, [pc, #140]	@ (800441c <xTaskResumeAll+0x12c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004394:	429a      	cmp	r2, r3
 8004396:	d302      	bcc.n	800439e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004398:	4b21      	ldr	r3, [pc, #132]	@ (8004420 <xTaskResumeAll+0x130>)
 800439a:	2201      	movs	r2, #1
 800439c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800439e:	4b1c      	ldr	r3, [pc, #112]	@ (8004410 <xTaskResumeAll+0x120>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1cb      	bne.n	800433e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043ac:	f000 fb56 	bl	8004a5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80043b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004424 <xTaskResumeAll+0x134>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d010      	beq.n	80043de <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043bc:	f000 f844 	bl	8004448 <xTaskIncrementTick>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80043c6:	4b16      	ldr	r3, [pc, #88]	@ (8004420 <xTaskResumeAll+0x130>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1f1      	bne.n	80043bc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80043d8:	4b12      	ldr	r3, [pc, #72]	@ (8004424 <xTaskResumeAll+0x134>)
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043de:	4b10      	ldr	r3, [pc, #64]	@ (8004420 <xTaskResumeAll+0x130>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d009      	beq.n	80043fa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80043e6:	2301      	movs	r3, #1
 80043e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80043ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004428 <xTaskResumeAll+0x138>)
 80043ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043fa:	f001 f9b7 	bl	800576c <vPortExitCritical>

	return xAlreadyYielded;
 80043fe:	68bb      	ldr	r3, [r7, #8]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	20000d68 	.word	0x20000d68
 800440c:	20000d40 	.word	0x20000d40
 8004410:	20000d00 	.word	0x20000d00
 8004414:	20000d48 	.word	0x20000d48
 8004418:	20000870 	.word	0x20000870
 800441c:	2000086c 	.word	0x2000086c
 8004420:	20000d54 	.word	0x20000d54
 8004424:	20000d50 	.word	0x20000d50
 8004428:	e000ed04 	.word	0xe000ed04

0800442c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004432:	4b04      	ldr	r3, [pc, #16]	@ (8004444 <xTaskGetTickCount+0x18>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004438:	687b      	ldr	r3, [r7, #4]
}
 800443a:	4618      	mov	r0, r3
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr
 8004444:	20000d44 	.word	0x20000d44

08004448 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004452:	4b4f      	ldr	r3, [pc, #316]	@ (8004590 <xTaskIncrementTick+0x148>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	f040 8090 	bne.w	800457c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800445c:	4b4d      	ldr	r3, [pc, #308]	@ (8004594 <xTaskIncrementTick+0x14c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3301      	adds	r3, #1
 8004462:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004464:	4a4b      	ldr	r2, [pc, #300]	@ (8004594 <xTaskIncrementTick+0x14c>)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d121      	bne.n	80044b4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004470:	4b49      	ldr	r3, [pc, #292]	@ (8004598 <xTaskIncrementTick+0x150>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00b      	beq.n	8004492 <xTaskIncrementTick+0x4a>
	__asm volatile
 800447a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800447e:	f383 8811 	msr	BASEPRI, r3
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	603b      	str	r3, [r7, #0]
}
 800448c:	bf00      	nop
 800448e:	bf00      	nop
 8004490:	e7fd      	b.n	800448e <xTaskIncrementTick+0x46>
 8004492:	4b41      	ldr	r3, [pc, #260]	@ (8004598 <xTaskIncrementTick+0x150>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	4b40      	ldr	r3, [pc, #256]	@ (800459c <xTaskIncrementTick+0x154>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a3e      	ldr	r2, [pc, #248]	@ (8004598 <xTaskIncrementTick+0x150>)
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	4a3e      	ldr	r2, [pc, #248]	@ (800459c <xTaskIncrementTick+0x154>)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	4b3e      	ldr	r3, [pc, #248]	@ (80045a0 <xTaskIncrementTick+0x158>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3301      	adds	r3, #1
 80044ac:	4a3c      	ldr	r2, [pc, #240]	@ (80045a0 <xTaskIncrementTick+0x158>)
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	f000 fad4 	bl	8004a5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044b4:	4b3b      	ldr	r3, [pc, #236]	@ (80045a4 <xTaskIncrementTick+0x15c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d349      	bcc.n	8004552 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044be:	4b36      	ldr	r3, [pc, #216]	@ (8004598 <xTaskIncrementTick+0x150>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d104      	bne.n	80044d2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044c8:	4b36      	ldr	r3, [pc, #216]	@ (80045a4 <xTaskIncrementTick+0x15c>)
 80044ca:	f04f 32ff 	mov.w	r2, #4294967295
 80044ce:	601a      	str	r2, [r3, #0]
					break;
 80044d0:	e03f      	b.n	8004552 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044d2:	4b31      	ldr	r3, [pc, #196]	@ (8004598 <xTaskIncrementTick+0x150>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d203      	bcs.n	80044f2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044ea:	4a2e      	ldr	r2, [pc, #184]	@ (80045a4 <xTaskIncrementTick+0x15c>)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80044f0:	e02f      	b.n	8004552 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	3304      	adds	r3, #4
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fe fce8 	bl	8002ecc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004500:	2b00      	cmp	r3, #0
 8004502:	d004      	beq.n	800450e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	3318      	adds	r3, #24
 8004508:	4618      	mov	r0, r3
 800450a:	f7fe fcdf 	bl	8002ecc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004512:	4b25      	ldr	r3, [pc, #148]	@ (80045a8 <xTaskIncrementTick+0x160>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d903      	bls.n	8004522 <xTaskIncrementTick+0xda>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451e:	4a22      	ldr	r2, [pc, #136]	@ (80045a8 <xTaskIncrementTick+0x160>)
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4a1f      	ldr	r2, [pc, #124]	@ (80045ac <xTaskIncrementTick+0x164>)
 8004530:	441a      	add	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	3304      	adds	r3, #4
 8004536:	4619      	mov	r1, r3
 8004538:	4610      	mov	r0, r2
 800453a:	f7fe fc6c 	bl	8002e16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004542:	4b1b      	ldr	r3, [pc, #108]	@ (80045b0 <xTaskIncrementTick+0x168>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004548:	429a      	cmp	r2, r3
 800454a:	d3b8      	bcc.n	80044be <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800454c:	2301      	movs	r3, #1
 800454e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004550:	e7b5      	b.n	80044be <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004552:	4b17      	ldr	r3, [pc, #92]	@ (80045b0 <xTaskIncrementTick+0x168>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004558:	4914      	ldr	r1, [pc, #80]	@ (80045ac <xTaskIncrementTick+0x164>)
 800455a:	4613      	mov	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	440b      	add	r3, r1
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d901      	bls.n	800456e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800456a:	2301      	movs	r3, #1
 800456c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800456e:	4b11      	ldr	r3, [pc, #68]	@ (80045b4 <xTaskIncrementTick+0x16c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d007      	beq.n	8004586 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004576:	2301      	movs	r3, #1
 8004578:	617b      	str	r3, [r7, #20]
 800457a:	e004      	b.n	8004586 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800457c:	4b0e      	ldr	r3, [pc, #56]	@ (80045b8 <xTaskIncrementTick+0x170>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3301      	adds	r3, #1
 8004582:	4a0d      	ldr	r2, [pc, #52]	@ (80045b8 <xTaskIncrementTick+0x170>)
 8004584:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004586:	697b      	ldr	r3, [r7, #20]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	20000d68 	.word	0x20000d68
 8004594:	20000d44 	.word	0x20000d44
 8004598:	20000cf8 	.word	0x20000cf8
 800459c:	20000cfc 	.word	0x20000cfc
 80045a0:	20000d58 	.word	0x20000d58
 80045a4:	20000d60 	.word	0x20000d60
 80045a8:	20000d48 	.word	0x20000d48
 80045ac:	20000870 	.word	0x20000870
 80045b0:	2000086c 	.word	0x2000086c
 80045b4:	20000d54 	.word	0x20000d54
 80045b8:	20000d50 	.word	0x20000d50

080045bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045c2:	4b28      	ldr	r3, [pc, #160]	@ (8004664 <vTaskSwitchContext+0xa8>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045ca:	4b27      	ldr	r3, [pc, #156]	@ (8004668 <vTaskSwitchContext+0xac>)
 80045cc:	2201      	movs	r2, #1
 80045ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045d0:	e042      	b.n	8004658 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80045d2:	4b25      	ldr	r3, [pc, #148]	@ (8004668 <vTaskSwitchContext+0xac>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045d8:	4b24      	ldr	r3, [pc, #144]	@ (800466c <vTaskSwitchContext+0xb0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	e011      	b.n	8004604 <vTaskSwitchContext+0x48>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10b      	bne.n	80045fe <vTaskSwitchContext+0x42>
	__asm volatile
 80045e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	607b      	str	r3, [r7, #4]
}
 80045f8:	bf00      	nop
 80045fa:	bf00      	nop
 80045fc:	e7fd      	b.n	80045fa <vTaskSwitchContext+0x3e>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	3b01      	subs	r3, #1
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	491a      	ldr	r1, [pc, #104]	@ (8004670 <vTaskSwitchContext+0xb4>)
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4613      	mov	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0e3      	beq.n	80045e0 <vTaskSwitchContext+0x24>
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4613      	mov	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4a13      	ldr	r2, [pc, #76]	@ (8004670 <vTaskSwitchContext+0xb4>)
 8004624:	4413      	add	r3, r2
 8004626:	60bb      	str	r3, [r7, #8]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	605a      	str	r2, [r3, #4]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	3308      	adds	r3, #8
 800463a:	429a      	cmp	r2, r3
 800463c:	d104      	bne.n	8004648 <vTaskSwitchContext+0x8c>
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	605a      	str	r2, [r3, #4]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	4a09      	ldr	r2, [pc, #36]	@ (8004674 <vTaskSwitchContext+0xb8>)
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	4a06      	ldr	r2, [pc, #24]	@ (800466c <vTaskSwitchContext+0xb0>)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6013      	str	r3, [r2, #0]
}
 8004658:	bf00      	nop
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	20000d68 	.word	0x20000d68
 8004668:	20000d54 	.word	0x20000d54
 800466c:	20000d48 	.word	0x20000d48
 8004670:	20000870 	.word	0x20000870
 8004674:	2000086c 	.word	0x2000086c

08004678 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10b      	bne.n	80046a0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	60fb      	str	r3, [r7, #12]
}
 800469a:	bf00      	nop
 800469c:	bf00      	nop
 800469e:	e7fd      	b.n	800469c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046a0:	4b07      	ldr	r3, [pc, #28]	@ (80046c0 <vTaskPlaceOnEventList+0x48>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3318      	adds	r3, #24
 80046a6:	4619      	mov	r1, r3
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7fe fbd7 	bl	8002e5c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046ae:	2101      	movs	r1, #1
 80046b0:	6838      	ldr	r0, [r7, #0]
 80046b2:	f000 fb8f 	bl	8004dd4 <prvAddCurrentTaskToDelayedList>
}
 80046b6:	bf00      	nop
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	2000086c 	.word	0x2000086c

080046c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10b      	bne.n	80046ee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80046d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	617b      	str	r3, [r7, #20]
}
 80046e8:	bf00      	nop
 80046ea:	bf00      	nop
 80046ec:	e7fd      	b.n	80046ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004718 <vTaskPlaceOnEventListRestricted+0x54>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	3318      	adds	r3, #24
 80046f4:	4619      	mov	r1, r3
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f7fe fb8d 	bl	8002e16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004702:	f04f 33ff 	mov.w	r3, #4294967295
 8004706:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	68b8      	ldr	r0, [r7, #8]
 800470c:	f000 fb62 	bl	8004dd4 <prvAddCurrentTaskToDelayedList>
	}
 8004710:	bf00      	nop
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	2000086c 	.word	0x2000086c

0800471c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10b      	bne.n	800474a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	60fb      	str	r3, [r7, #12]
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop
 8004748:	e7fd      	b.n	8004746 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	3318      	adds	r3, #24
 800474e:	4618      	mov	r0, r3
 8004750:	f7fe fbbc 	bl	8002ecc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004754:	4b1d      	ldr	r3, [pc, #116]	@ (80047cc <xTaskRemoveFromEventList+0xb0>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d11d      	bne.n	8004798 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	3304      	adds	r3, #4
 8004760:	4618      	mov	r0, r3
 8004762:	f7fe fbb3 	bl	8002ecc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800476a:	4b19      	ldr	r3, [pc, #100]	@ (80047d0 <xTaskRemoveFromEventList+0xb4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d903      	bls.n	800477a <xTaskRemoveFromEventList+0x5e>
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004776:	4a16      	ldr	r2, [pc, #88]	@ (80047d0 <xTaskRemoveFromEventList+0xb4>)
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800477e:	4613      	mov	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4a13      	ldr	r2, [pc, #76]	@ (80047d4 <xTaskRemoveFromEventList+0xb8>)
 8004788:	441a      	add	r2, r3
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	3304      	adds	r3, #4
 800478e:	4619      	mov	r1, r3
 8004790:	4610      	mov	r0, r2
 8004792:	f7fe fb40 	bl	8002e16 <vListInsertEnd>
 8004796:	e005      	b.n	80047a4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	3318      	adds	r3, #24
 800479c:	4619      	mov	r1, r3
 800479e:	480e      	ldr	r0, [pc, #56]	@ (80047d8 <xTaskRemoveFromEventList+0xbc>)
 80047a0:	f7fe fb39 	bl	8002e16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a8:	4b0c      	ldr	r3, [pc, #48]	@ (80047dc <xTaskRemoveFromEventList+0xc0>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d905      	bls.n	80047be <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047b2:	2301      	movs	r3, #1
 80047b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047b6:	4b0a      	ldr	r3, [pc, #40]	@ (80047e0 <xTaskRemoveFromEventList+0xc4>)
 80047b8:	2201      	movs	r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	e001      	b.n	80047c2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80047c2:	697b      	ldr	r3, [r7, #20]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	20000d68 	.word	0x20000d68
 80047d0:	20000d48 	.word	0x20000d48
 80047d4:	20000870 	.word	0x20000870
 80047d8:	20000d00 	.word	0x20000d00
 80047dc:	2000086c 	.word	0x2000086c
 80047e0:	20000d54 	.word	0x20000d54

080047e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047ec:	4b06      	ldr	r3, [pc, #24]	@ (8004808 <vTaskInternalSetTimeOutState+0x24>)
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047f4:	4b05      	ldr	r3, [pc, #20]	@ (800480c <vTaskInternalSetTimeOutState+0x28>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	605a      	str	r2, [r3, #4]
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	bc80      	pop	{r7}
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	20000d58 	.word	0x20000d58
 800480c:	20000d44 	.word	0x20000d44

08004810 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b088      	sub	sp, #32
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10b      	bne.n	8004838 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	613b      	str	r3, [r7, #16]
}
 8004832:	bf00      	nop
 8004834:	bf00      	nop
 8004836:	e7fd      	b.n	8004834 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10b      	bne.n	8004856 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800483e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	60fb      	str	r3, [r7, #12]
}
 8004850:	bf00      	nop
 8004852:	bf00      	nop
 8004854:	e7fd      	b.n	8004852 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004856:	f000 ff59 	bl	800570c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800485a:	4b1d      	ldr	r3, [pc, #116]	@ (80048d0 <xTaskCheckForTimeOut+0xc0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004872:	d102      	bne.n	800487a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004874:	2300      	movs	r3, #0
 8004876:	61fb      	str	r3, [r7, #28]
 8004878:	e023      	b.n	80048c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	4b15      	ldr	r3, [pc, #84]	@ (80048d4 <xTaskCheckForTimeOut+0xc4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d007      	beq.n	8004896 <xTaskCheckForTimeOut+0x86>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	429a      	cmp	r2, r3
 800488e:	d302      	bcc.n	8004896 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004890:	2301      	movs	r3, #1
 8004892:	61fb      	str	r3, [r7, #28]
 8004894:	e015      	b.n	80048c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	429a      	cmp	r2, r3
 800489e:	d20b      	bcs.n	80048b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	1ad2      	subs	r2, r2, r3
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff ff99 	bl	80047e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61fb      	str	r3, [r7, #28]
 80048b6:	e004      	b.n	80048c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048be:	2301      	movs	r3, #1
 80048c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048c2:	f000 ff53 	bl	800576c <vPortExitCritical>

	return xReturn;
 80048c6:	69fb      	ldr	r3, [r7, #28]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3720      	adds	r7, #32
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20000d44 	.word	0x20000d44
 80048d4:	20000d58 	.word	0x20000d58

080048d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048dc:	4b03      	ldr	r3, [pc, #12]	@ (80048ec <vTaskMissedYield+0x14>)
 80048de:	2201      	movs	r2, #1
 80048e0:	601a      	str	r2, [r3, #0]
}
 80048e2:	bf00      	nop
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc80      	pop	{r7}
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	20000d54 	.word	0x20000d54

080048f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048f8:	f000 f852 	bl	80049a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048fc:	4b06      	ldr	r3, [pc, #24]	@ (8004918 <prvIdleTask+0x28>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d9f9      	bls.n	80048f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004904:	4b05      	ldr	r3, [pc, #20]	@ (800491c <prvIdleTask+0x2c>)
 8004906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004914:	e7f0      	b.n	80048f8 <prvIdleTask+0x8>
 8004916:	bf00      	nop
 8004918:	20000870 	.word	0x20000870
 800491c:	e000ed04 	.word	0xe000ed04

08004920 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004926:	2300      	movs	r3, #0
 8004928:	607b      	str	r3, [r7, #4]
 800492a:	e00c      	b.n	8004946 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4a12      	ldr	r2, [pc, #72]	@ (8004980 <prvInitialiseTaskLists+0x60>)
 8004938:	4413      	add	r3, r2
 800493a:	4618      	mov	r0, r3
 800493c:	f7fe fa40 	bl	8002dc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3301      	adds	r3, #1
 8004944:	607b      	str	r3, [r7, #4]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b37      	cmp	r3, #55	@ 0x37
 800494a:	d9ef      	bls.n	800492c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800494c:	480d      	ldr	r0, [pc, #52]	@ (8004984 <prvInitialiseTaskLists+0x64>)
 800494e:	f7fe fa37 	bl	8002dc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004952:	480d      	ldr	r0, [pc, #52]	@ (8004988 <prvInitialiseTaskLists+0x68>)
 8004954:	f7fe fa34 	bl	8002dc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004958:	480c      	ldr	r0, [pc, #48]	@ (800498c <prvInitialiseTaskLists+0x6c>)
 800495a:	f7fe fa31 	bl	8002dc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800495e:	480c      	ldr	r0, [pc, #48]	@ (8004990 <prvInitialiseTaskLists+0x70>)
 8004960:	f7fe fa2e 	bl	8002dc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004964:	480b      	ldr	r0, [pc, #44]	@ (8004994 <prvInitialiseTaskLists+0x74>)
 8004966:	f7fe fa2b 	bl	8002dc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800496a:	4b0b      	ldr	r3, [pc, #44]	@ (8004998 <prvInitialiseTaskLists+0x78>)
 800496c:	4a05      	ldr	r2, [pc, #20]	@ (8004984 <prvInitialiseTaskLists+0x64>)
 800496e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004970:	4b0a      	ldr	r3, [pc, #40]	@ (800499c <prvInitialiseTaskLists+0x7c>)
 8004972:	4a05      	ldr	r2, [pc, #20]	@ (8004988 <prvInitialiseTaskLists+0x68>)
 8004974:	601a      	str	r2, [r3, #0]
}
 8004976:	bf00      	nop
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20000870 	.word	0x20000870
 8004984:	20000cd0 	.word	0x20000cd0
 8004988:	20000ce4 	.word	0x20000ce4
 800498c:	20000d00 	.word	0x20000d00
 8004990:	20000d14 	.word	0x20000d14
 8004994:	20000d2c 	.word	0x20000d2c
 8004998:	20000cf8 	.word	0x20000cf8
 800499c:	20000cfc 	.word	0x20000cfc

080049a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049a6:	e019      	b.n	80049dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049a8:	f000 feb0 	bl	800570c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049ac:	4b10      	ldr	r3, [pc, #64]	@ (80049f0 <prvCheckTasksWaitingTermination+0x50>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3304      	adds	r3, #4
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fe fa87 	bl	8002ecc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049be:	4b0d      	ldr	r3, [pc, #52]	@ (80049f4 <prvCheckTasksWaitingTermination+0x54>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3b01      	subs	r3, #1
 80049c4:	4a0b      	ldr	r2, [pc, #44]	@ (80049f4 <prvCheckTasksWaitingTermination+0x54>)
 80049c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049c8:	4b0b      	ldr	r3, [pc, #44]	@ (80049f8 <prvCheckTasksWaitingTermination+0x58>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	4a0a      	ldr	r2, [pc, #40]	@ (80049f8 <prvCheckTasksWaitingTermination+0x58>)
 80049d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049d2:	f000 fecb 	bl	800576c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f810 	bl	80049fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049dc:	4b06      	ldr	r3, [pc, #24]	@ (80049f8 <prvCheckTasksWaitingTermination+0x58>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1e1      	bne.n	80049a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000d14 	.word	0x20000d14
 80049f4:	20000d40 	.word	0x20000d40
 80049f8:	20000d28 	.word	0x20000d28

080049fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d108      	bne.n	8004a20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a12:	4618      	mov	r0, r3
 8004a14:	f001 f84a 	bl	8005aac <vPortFree>
				vPortFree( pxTCB );
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f001 f847 	bl	8005aac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a1e:	e019      	b.n	8004a54 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d103      	bne.n	8004a32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f001 f83e 	bl	8005aac <vPortFree>
	}
 8004a30:	e010      	b.n	8004a54 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d00b      	beq.n	8004a54 <prvDeleteTCB+0x58>
	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	60fb      	str	r3, [r7, #12]
}
 8004a4e:	bf00      	nop
 8004a50:	bf00      	nop
 8004a52:	e7fd      	b.n	8004a50 <prvDeleteTCB+0x54>
	}
 8004a54:	bf00      	nop
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a62:	4b0c      	ldr	r3, [pc, #48]	@ (8004a94 <prvResetNextTaskUnblockTime+0x38>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d104      	bne.n	8004a76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a98 <prvResetNextTaskUnblockTime+0x3c>)
 8004a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a74:	e008      	b.n	8004a88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a76:	4b07      	ldr	r3, [pc, #28]	@ (8004a94 <prvResetNextTaskUnblockTime+0x38>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	4a04      	ldr	r2, [pc, #16]	@ (8004a98 <prvResetNextTaskUnblockTime+0x3c>)
 8004a86:	6013      	str	r3, [r2, #0]
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bc80      	pop	{r7}
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	20000cf8 	.word	0x20000cf8
 8004a98:	20000d60 	.word	0x20000d60

08004a9c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004aa2:	4b04      	ldr	r3, [pc, #16]	@ (8004ab4 <xTaskGetCurrentTaskHandle+0x18>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004aa8:	687b      	ldr	r3, [r7, #4]
	}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr
 8004ab4:	2000086c 	.word	0x2000086c

08004ab8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004abe:	4b0b      	ldr	r3, [pc, #44]	@ (8004aec <xTaskGetSchedulerState+0x34>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d102      	bne.n	8004acc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	607b      	str	r3, [r7, #4]
 8004aca:	e008      	b.n	8004ade <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004acc:	4b08      	ldr	r3, [pc, #32]	@ (8004af0 <xTaskGetSchedulerState+0x38>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d102      	bne.n	8004ada <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	607b      	str	r3, [r7, #4]
 8004ad8:	e001      	b.n	8004ade <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ada:	2300      	movs	r3, #0
 8004adc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ade:	687b      	ldr	r3, [r7, #4]
	}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bc80      	pop	{r7}
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	20000d4c 	.word	0x20000d4c
 8004af0:	20000d68 	.word	0x20000d68

08004af4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004b00:	2300      	movs	r3, #0
 8004b02:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d051      	beq.n	8004bae <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8004bb8 <xTaskPriorityInherit+0xc4>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d241      	bcs.n	8004b9c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	db06      	blt.n	8004b2e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b20:	4b25      	ldr	r3, [pc, #148]	@ (8004bb8 <xTaskPriorityInherit+0xc4>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b26:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	6959      	ldr	r1, [r3, #20]
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b36:	4613      	mov	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8004bbc <xTaskPriorityInherit+0xc8>)
 8004b40:	4413      	add	r3, r2
 8004b42:	4299      	cmp	r1, r3
 8004b44:	d122      	bne.n	8004b8c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	3304      	adds	r3, #4
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fe f9be 	bl	8002ecc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b50:	4b19      	ldr	r3, [pc, #100]	@ (8004bb8 <xTaskPriorityInherit+0xc4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b5e:	4b18      	ldr	r3, [pc, #96]	@ (8004bc0 <xTaskPriorityInherit+0xcc>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d903      	bls.n	8004b6e <xTaskPriorityInherit+0x7a>
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6a:	4a15      	ldr	r2, [pc, #84]	@ (8004bc0 <xTaskPriorityInherit+0xcc>)
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b72:	4613      	mov	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4a10      	ldr	r2, [pc, #64]	@ (8004bbc <xTaskPriorityInherit+0xc8>)
 8004b7c:	441a      	add	r2, r3
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	3304      	adds	r3, #4
 8004b82:	4619      	mov	r1, r3
 8004b84:	4610      	mov	r0, r2
 8004b86:	f7fe f946 	bl	8002e16 <vListInsertEnd>
 8004b8a:	e004      	b.n	8004b96 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb8 <xTaskPriorityInherit+0xc4>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004b96:	2301      	movs	r3, #1
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	e008      	b.n	8004bae <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ba0:	4b05      	ldr	r3, [pc, #20]	@ (8004bb8 <xTaskPriorityInherit+0xc4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d201      	bcs.n	8004bae <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004baa:	2301      	movs	r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004bae:	68fb      	ldr	r3, [r7, #12]
	}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	2000086c 	.word	0x2000086c
 8004bbc:	20000870 	.word	0x20000870
 8004bc0:	20000d48 	.word	0x20000d48

08004bc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d058      	beq.n	8004c8c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004bda:	4b2f      	ldr	r3, [pc, #188]	@ (8004c98 <xTaskPriorityDisinherit+0xd4>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d00b      	beq.n	8004bfc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	60fb      	str	r3, [r7, #12]
}
 8004bf6:	bf00      	nop
 8004bf8:	bf00      	nop
 8004bfa:	e7fd      	b.n	8004bf8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10b      	bne.n	8004c1c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	60bb      	str	r3, [r7, #8]
}
 8004c16:	bf00      	nop
 8004c18:	bf00      	nop
 8004c1a:	e7fd      	b.n	8004c18 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c20:	1e5a      	subs	r2, r3, #1
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d02c      	beq.n	8004c8c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d128      	bne.n	8004c8c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe f944 	bl	8002ecc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c50:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c9c <xTaskPriorityDisinherit+0xd8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d903      	bls.n	8004c6c <xTaskPriorityDisinherit+0xa8>
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c68:	4a0c      	ldr	r2, [pc, #48]	@ (8004c9c <xTaskPriorityDisinherit+0xd8>)
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c70:	4613      	mov	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4a09      	ldr	r2, [pc, #36]	@ (8004ca0 <xTaskPriorityDisinherit+0xdc>)
 8004c7a:	441a      	add	r2, r3
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	4619      	mov	r1, r3
 8004c82:	4610      	mov	r0, r2
 8004c84:	f7fe f8c7 	bl	8002e16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c8c:	697b      	ldr	r3, [r7, #20]
	}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	2000086c 	.word	0x2000086c
 8004c9c:	20000d48 	.word	0x20000d48
 8004ca0:	20000870 	.word	0x20000870

08004ca4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d06c      	beq.n	8004d96 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10b      	bne.n	8004cdc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc8:	f383 8811 	msr	BASEPRI, r3
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	60fb      	str	r3, [r7, #12]
}
 8004cd6:	bf00      	nop
 8004cd8:	bf00      	nop
 8004cda:	e7fd      	b.n	8004cd8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d902      	bls.n	8004cec <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	61fb      	str	r3, [r7, #28]
 8004cea:	e002      	b.n	8004cf2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cf0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf6:	69fa      	ldr	r2, [r7, #28]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d04c      	beq.n	8004d96 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d147      	bne.n	8004d96 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004d06:	4b26      	ldr	r3, [pc, #152]	@ (8004da0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d10b      	bne.n	8004d28 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	60bb      	str	r3, [r7, #8]
}
 8004d22:	bf00      	nop
 8004d24:	bf00      	nop
 8004d26:	e7fd      	b.n	8004d24 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	db04      	blt.n	8004d46 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	6959      	ldr	r1, [r3, #20]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4a13      	ldr	r2, [pc, #76]	@ (8004da4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004d56:	4413      	add	r3, r2
 8004d58:	4299      	cmp	r1, r3
 8004d5a:	d11c      	bne.n	8004d96 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fe f8b3 	bl	8002ecc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8004da8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d903      	bls.n	8004d7a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d76:	4a0c      	ldr	r2, [pc, #48]	@ (8004da8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4a07      	ldr	r2, [pc, #28]	@ (8004da4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004d88:	441a      	add	r2, r3
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4610      	mov	r0, r2
 8004d92:	f7fe f840 	bl	8002e16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d96:	bf00      	nop
 8004d98:	3720      	adds	r7, #32
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	2000086c 	.word	0x2000086c
 8004da4:	20000870 	.word	0x20000870
 8004da8:	20000d48 	.word	0x20000d48

08004dac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004db0:	4b07      	ldr	r3, [pc, #28]	@ (8004dd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d004      	beq.n	8004dc2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004db8:	4b05      	ldr	r3, [pc, #20]	@ (8004dd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004dbe:	3201      	adds	r2, #1
 8004dc0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8004dc2:	4b03      	ldr	r3, [pc, #12]	@ (8004dd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
	}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bc80      	pop	{r7}
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	2000086c 	.word	0x2000086c

08004dd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004dde:	4b21      	ldr	r3, [pc, #132]	@ (8004e64 <prvAddCurrentTaskToDelayedList+0x90>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004de4:	4b20      	ldr	r3, [pc, #128]	@ (8004e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3304      	adds	r3, #4
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fe f86e 	bl	8002ecc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df6:	d10a      	bne.n	8004e0e <prvAddCurrentTaskToDelayedList+0x3a>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d007      	beq.n	8004e0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8004e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3304      	adds	r3, #4
 8004e04:	4619      	mov	r1, r3
 8004e06:	4819      	ldr	r0, [pc, #100]	@ (8004e6c <prvAddCurrentTaskToDelayedList+0x98>)
 8004e08:	f7fe f805 	bl	8002e16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e0c:	e026      	b.n	8004e5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4413      	add	r3, r2
 8004e14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e16:	4b14      	ldr	r3, [pc, #80]	@ (8004e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d209      	bcs.n	8004e3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e26:	4b12      	ldr	r3, [pc, #72]	@ (8004e70 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8004e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	4619      	mov	r1, r3
 8004e32:	4610      	mov	r0, r2
 8004e34:	f7fe f812 	bl	8002e5c <vListInsert>
}
 8004e38:	e010      	b.n	8004e5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004e74 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	3304      	adds	r3, #4
 8004e44:	4619      	mov	r1, r3
 8004e46:	4610      	mov	r0, r2
 8004e48:	f7fe f808 	bl	8002e5c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d202      	bcs.n	8004e5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004e56:	4a08      	ldr	r2, [pc, #32]	@ (8004e78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	6013      	str	r3, [r2, #0]
}
 8004e5c:	bf00      	nop
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20000d44 	.word	0x20000d44
 8004e68:	2000086c 	.word	0x2000086c
 8004e6c:	20000d2c 	.word	0x20000d2c
 8004e70:	20000cfc 	.word	0x20000cfc
 8004e74:	20000cf8 	.word	0x20000cf8
 8004e78:	20000d60 	.word	0x20000d60

08004e7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08a      	sub	sp, #40	@ 0x28
 8004e80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004e86:	f000 fb11 	bl	80054ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8004f00 <xTimerCreateTimerTask+0x84>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d021      	beq.n	8004ed6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004e9a:	1d3a      	adds	r2, r7, #4
 8004e9c:	f107 0108 	add.w	r1, r7, #8
 8004ea0:	f107 030c 	add.w	r3, r7, #12
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7fd ff71 	bl	8002d8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	9202      	str	r2, [sp, #8]
 8004eb2:	9301      	str	r3, [sp, #4]
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	2300      	movs	r3, #0
 8004eba:	460a      	mov	r2, r1
 8004ebc:	4911      	ldr	r1, [pc, #68]	@ (8004f04 <xTimerCreateTimerTask+0x88>)
 8004ebe:	4812      	ldr	r0, [pc, #72]	@ (8004f08 <xTimerCreateTimerTask+0x8c>)
 8004ec0:	f7fe ffc4 	bl	8003e4c <xTaskCreateStatic>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	4a11      	ldr	r2, [pc, #68]	@ (8004f0c <xTimerCreateTimerTask+0x90>)
 8004ec8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004eca:	4b10      	ldr	r3, [pc, #64]	@ (8004f0c <xTimerCreateTimerTask+0x90>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10b      	bne.n	8004ef4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	613b      	str	r3, [r7, #16]
}
 8004eee:	bf00      	nop
 8004ef0:	bf00      	nop
 8004ef2:	e7fd      	b.n	8004ef0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004ef4:	697b      	ldr	r3, [r7, #20]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20000d9c 	.word	0x20000d9c
 8004f04:	08006ec8 	.word	0x08006ec8
 8004f08:	08005049 	.word	0x08005049
 8004f0c:	20000da0 	.word	0x20000da0

08004f10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08a      	sub	sp, #40	@ 0x28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10b      	bne.n	8004f40 <xTimerGenericCommand+0x30>
	__asm volatile
 8004f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2c:	f383 8811 	msr	BASEPRI, r3
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	623b      	str	r3, [r7, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	bf00      	nop
 8004f3e:	e7fd      	b.n	8004f3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004f40:	4b19      	ldr	r3, [pc, #100]	@ (8004fa8 <xTimerGenericCommand+0x98>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d02a      	beq.n	8004f9e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b05      	cmp	r3, #5
 8004f58:	dc18      	bgt.n	8004f8c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004f5a:	f7ff fdad 	bl	8004ab8 <xTaskGetSchedulerState>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d109      	bne.n	8004f78 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f64:	4b10      	ldr	r3, [pc, #64]	@ (8004fa8 <xTimerGenericCommand+0x98>)
 8004f66:	6818      	ldr	r0, [r3, #0]
 8004f68:	f107 0110 	add.w	r1, r7, #16
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f70:	f7fe f9d4 	bl	800331c <xQueueGenericSend>
 8004f74:	6278      	str	r0, [r7, #36]	@ 0x24
 8004f76:	e012      	b.n	8004f9e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004f78:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa8 <xTimerGenericCommand+0x98>)
 8004f7a:	6818      	ldr	r0, [r3, #0]
 8004f7c:	f107 0110 	add.w	r1, r7, #16
 8004f80:	2300      	movs	r3, #0
 8004f82:	2200      	movs	r2, #0
 8004f84:	f7fe f9ca 	bl	800331c <xQueueGenericSend>
 8004f88:	6278      	str	r0, [r7, #36]	@ 0x24
 8004f8a:	e008      	b.n	8004f9e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004f8c:	4b06      	ldr	r3, [pc, #24]	@ (8004fa8 <xTimerGenericCommand+0x98>)
 8004f8e:	6818      	ldr	r0, [r3, #0]
 8004f90:	f107 0110 	add.w	r1, r7, #16
 8004f94:	2300      	movs	r3, #0
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	f7fe fac2 	bl	8003520 <xQueueGenericSendFromISR>
 8004f9c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3728      	adds	r7, #40	@ 0x28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20000d9c 	.word	0x20000d9c

08004fac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af02      	add	r7, sp, #8
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fb6:	4b23      	ldr	r3, [pc, #140]	@ (8005044 <prvProcessExpiredTimer+0x98>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7fd ff81 	bl	8002ecc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d023      	beq.n	8005020 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	699a      	ldr	r2, [r3, #24]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	18d1      	adds	r1, r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	6978      	ldr	r0, [r7, #20]
 8004fe6:	f000 f8d3 	bl	8005190 <prvInsertTimerInActiveList>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d020      	beq.n	8005032 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	6978      	ldr	r0, [r7, #20]
 8004ffc:	f7ff ff88 	bl	8004f10 <xTimerGenericCommand>
 8005000:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d114      	bne.n	8005032 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	60fb      	str	r3, [r7, #12]
}
 800501a:	bf00      	nop
 800501c:	bf00      	nop
 800501e:	e7fd      	b.n	800501c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005026:	f023 0301 	bic.w	r3, r3, #1
 800502a:	b2da      	uxtb	r2, r3
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	6978      	ldr	r0, [r7, #20]
 8005038:	4798      	blx	r3
}
 800503a:	bf00      	nop
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20000d94 	.word	0x20000d94

08005048 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005050:	f107 0308 	add.w	r3, r7, #8
 8005054:	4618      	mov	r0, r3
 8005056:	f000 f859 	bl	800510c <prvGetNextExpireTime>
 800505a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4619      	mov	r1, r3
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f805 	bl	8005070 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005066:	f000 f8d5 	bl	8005214 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800506a:	bf00      	nop
 800506c:	e7f0      	b.n	8005050 <prvTimerTask+0x8>
	...

08005070 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800507a:	f7ff f92b 	bl	80042d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800507e:	f107 0308 	add.w	r3, r7, #8
 8005082:	4618      	mov	r0, r3
 8005084:	f000 f864 	bl	8005150 <prvSampleTimeNow>
 8005088:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d130      	bne.n	80050f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10a      	bne.n	80050ac <prvProcessTimerOrBlockTask+0x3c>
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	429a      	cmp	r2, r3
 800509c:	d806      	bhi.n	80050ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800509e:	f7ff f927 	bl	80042f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80050a2:	68f9      	ldr	r1, [r7, #12]
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff ff81 	bl	8004fac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80050aa:	e024      	b.n	80050f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d008      	beq.n	80050c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80050b2:	4b13      	ldr	r3, [pc, #76]	@ (8005100 <prvProcessTimerOrBlockTask+0x90>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <prvProcessTimerOrBlockTask+0x50>
 80050bc:	2301      	movs	r3, #1
 80050be:	e000      	b.n	80050c2 <prvProcessTimerOrBlockTask+0x52>
 80050c0:	2300      	movs	r3, #0
 80050c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80050c4:	4b0f      	ldr	r3, [pc, #60]	@ (8005104 <prvProcessTimerOrBlockTask+0x94>)
 80050c6:	6818      	ldr	r0, [r3, #0]
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	4619      	mov	r1, r3
 80050d2:	f7fe fe87 	bl	8003de4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80050d6:	f7ff f90b 	bl	80042f0 <xTaskResumeAll>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10a      	bne.n	80050f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80050e0:	4b09      	ldr	r3, [pc, #36]	@ (8005108 <prvProcessTimerOrBlockTask+0x98>)
 80050e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	f3bf 8f6f 	isb	sy
}
 80050f0:	e001      	b.n	80050f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80050f2:	f7ff f8fd 	bl	80042f0 <xTaskResumeAll>
}
 80050f6:	bf00      	nop
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	20000d98 	.word	0x20000d98
 8005104:	20000d9c 	.word	0x20000d9c
 8005108:	e000ed04 	.word	0xe000ed04

0800510c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005114:	4b0d      	ldr	r3, [pc, #52]	@ (800514c <prvGetNextExpireTime+0x40>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <prvGetNextExpireTime+0x16>
 800511e:	2201      	movs	r2, #1
 8005120:	e000      	b.n	8005124 <prvGetNextExpireTime+0x18>
 8005122:	2200      	movs	r2, #0
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d105      	bne.n	800513c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005130:	4b06      	ldr	r3, [pc, #24]	@ (800514c <prvGetNextExpireTime+0x40>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	e001      	b.n	8005140 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005140:	68fb      	ldr	r3, [r7, #12]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr
 800514c:	20000d94 	.word	0x20000d94

08005150 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005158:	f7ff f968 	bl	800442c <xTaskGetTickCount>
 800515c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800515e:	4b0b      	ldr	r3, [pc, #44]	@ (800518c <prvSampleTimeNow+0x3c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	429a      	cmp	r2, r3
 8005166:	d205      	bcs.n	8005174 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005168:	f000 f93a 	bl	80053e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	e002      	b.n	800517a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800517a:	4a04      	ldr	r2, [pc, #16]	@ (800518c <prvSampleTimeNow+0x3c>)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005180:	68fb      	ldr	r3, [r7, #12]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	20000da4 	.word	0x20000da4

08005190 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800519e:	2300      	movs	r3, #0
 80051a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d812      	bhi.n	80051dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	1ad2      	subs	r2, r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d302      	bcc.n	80051ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80051c4:	2301      	movs	r3, #1
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	e01b      	b.n	8005202 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80051ca:	4b10      	ldr	r3, [pc, #64]	@ (800520c <prvInsertTimerInActiveList+0x7c>)
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3304      	adds	r3, #4
 80051d2:	4619      	mov	r1, r3
 80051d4:	4610      	mov	r0, r2
 80051d6:	f7fd fe41 	bl	8002e5c <vListInsert>
 80051da:	e012      	b.n	8005202 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d206      	bcs.n	80051f2 <prvInsertTimerInActiveList+0x62>
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d302      	bcc.n	80051f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80051ec:	2301      	movs	r3, #1
 80051ee:	617b      	str	r3, [r7, #20]
 80051f0:	e007      	b.n	8005202 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051f2:	4b07      	ldr	r3, [pc, #28]	@ (8005210 <prvInsertTimerInActiveList+0x80>)
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3304      	adds	r3, #4
 80051fa:	4619      	mov	r1, r3
 80051fc:	4610      	mov	r0, r2
 80051fe:	f7fd fe2d 	bl	8002e5c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005202:	697b      	ldr	r3, [r7, #20]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	20000d98 	.word	0x20000d98
 8005210:	20000d94 	.word	0x20000d94

08005214 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08e      	sub	sp, #56	@ 0x38
 8005218:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800521a:	e0ce      	b.n	80053ba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	da19      	bge.n	8005256 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005222:	1d3b      	adds	r3, r7, #4
 8005224:	3304      	adds	r3, #4
 8005226:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10b      	bne.n	8005246 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	61fb      	str	r3, [r7, #28]
}
 8005240:	bf00      	nop
 8005242:	bf00      	nop
 8005244:	e7fd      	b.n	8005242 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800524c:	6850      	ldr	r0, [r2, #4]
 800524e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005250:	6892      	ldr	r2, [r2, #8]
 8005252:	4611      	mov	r1, r2
 8005254:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	f2c0 80ae 	blt.w	80053ba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d004      	beq.n	8005274 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800526a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526c:	3304      	adds	r3, #4
 800526e:	4618      	mov	r0, r3
 8005270:	f7fd fe2c 	bl	8002ecc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005274:	463b      	mov	r3, r7
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff ff6a 	bl	8005150 <prvSampleTimeNow>
 800527c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b09      	cmp	r3, #9
 8005282:	f200 8097 	bhi.w	80053b4 <prvProcessReceivedCommands+0x1a0>
 8005286:	a201      	add	r2, pc, #4	@ (adr r2, 800528c <prvProcessReceivedCommands+0x78>)
 8005288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528c:	080052b5 	.word	0x080052b5
 8005290:	080052b5 	.word	0x080052b5
 8005294:	080052b5 	.word	0x080052b5
 8005298:	0800532b 	.word	0x0800532b
 800529c:	0800533f 	.word	0x0800533f
 80052a0:	0800538b 	.word	0x0800538b
 80052a4:	080052b5 	.word	0x080052b5
 80052a8:	080052b5 	.word	0x080052b5
 80052ac:	0800532b 	.word	0x0800532b
 80052b0:	0800533f 	.word	0x0800533f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80052b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052ba:	f043 0301 	orr.w	r3, r3, #1
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	18d1      	adds	r1, r2, r3
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052d4:	f7ff ff5c 	bl	8005190 <prvInsertTimerInActiveList>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d06c      	beq.n	80053b8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d061      	beq.n	80053b8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	441a      	add	r2, r3
 80052fc:	2300      	movs	r3, #0
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	2300      	movs	r3, #0
 8005302:	2100      	movs	r1, #0
 8005304:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005306:	f7ff fe03 	bl	8004f10 <xTimerGenericCommand>
 800530a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d152      	bne.n	80053b8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005316:	f383 8811 	msr	BASEPRI, r3
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	61bb      	str	r3, [r7, #24]
}
 8005324:	bf00      	nop
 8005326:	bf00      	nop
 8005328:	e7fd      	b.n	8005326 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800532a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	b2da      	uxtb	r2, r3
 8005336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005338:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800533c:	e03d      	b.n	80053ba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800533e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005340:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	b2da      	uxtb	r2, r3
 800534a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005354:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10b      	bne.n	8005376 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	617b      	str	r3, [r7, #20]
}
 8005370:	bf00      	nop
 8005372:	bf00      	nop
 8005374:	e7fd      	b.n	8005372 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005378:	699a      	ldr	r2, [r3, #24]
 800537a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537c:	18d1      	adds	r1, r2, r3
 800537e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005384:	f7ff ff04 	bl	8005190 <prvInsertTimerInActiveList>
					break;
 8005388:	e017      	b.n	80053ba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800538a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d103      	bne.n	80053a0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005398:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800539a:	f000 fb87 	bl	8005aac <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800539e:	e00c      	b.n	80053ba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053a6:	f023 0301 	bic.w	r3, r3, #1
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80053b2:	e002      	b.n	80053ba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80053b4:	bf00      	nop
 80053b6:	e000      	b.n	80053ba <prvProcessReceivedCommands+0x1a6>
					break;
 80053b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053ba:	4b08      	ldr	r3, [pc, #32]	@ (80053dc <prvProcessReceivedCommands+0x1c8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	1d39      	adds	r1, r7, #4
 80053c0:	2200      	movs	r2, #0
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fe f94a 	bl	800365c <xQueueReceive>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f47f af26 	bne.w	800521c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80053d0:	bf00      	nop
 80053d2:	bf00      	nop
 80053d4:	3730      	adds	r7, #48	@ 0x30
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20000d9c 	.word	0x20000d9c

080053e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b088      	sub	sp, #32
 80053e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053e6:	e049      	b.n	800547c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053e8:	4b2e      	ldr	r3, [pc, #184]	@ (80054a4 <prvSwitchTimerLists+0xc4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053f2:	4b2c      	ldr	r3, [pc, #176]	@ (80054a4 <prvSwitchTimerLists+0xc4>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	3304      	adds	r3, #4
 8005400:	4618      	mov	r0, r3
 8005402:	f7fd fd63 	bl	8002ecc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	d02f      	beq.n	800547c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4413      	add	r3, r2
 8005424:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	429a      	cmp	r2, r3
 800542c:	d90e      	bls.n	800544c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800543a:	4b1a      	ldr	r3, [pc, #104]	@ (80054a4 <prvSwitchTimerLists+0xc4>)
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3304      	adds	r3, #4
 8005442:	4619      	mov	r1, r3
 8005444:	4610      	mov	r0, r2
 8005446:	f7fd fd09 	bl	8002e5c <vListInsert>
 800544a:	e017      	b.n	800547c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800544c:	2300      	movs	r3, #0
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	2300      	movs	r3, #0
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	2100      	movs	r1, #0
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f7ff fd5a 	bl	8004f10 <xTimerGenericCommand>
 800545c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10b      	bne.n	800547c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	603b      	str	r3, [r7, #0]
}
 8005476:	bf00      	nop
 8005478:	bf00      	nop
 800547a:	e7fd      	b.n	8005478 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800547c:	4b09      	ldr	r3, [pc, #36]	@ (80054a4 <prvSwitchTimerLists+0xc4>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1b0      	bne.n	80053e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005486:	4b07      	ldr	r3, [pc, #28]	@ (80054a4 <prvSwitchTimerLists+0xc4>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800548c:	4b06      	ldr	r3, [pc, #24]	@ (80054a8 <prvSwitchTimerLists+0xc8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a04      	ldr	r2, [pc, #16]	@ (80054a4 <prvSwitchTimerLists+0xc4>)
 8005492:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005494:	4a04      	ldr	r2, [pc, #16]	@ (80054a8 <prvSwitchTimerLists+0xc8>)
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	6013      	str	r3, [r2, #0]
}
 800549a:	bf00      	nop
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20000d94 	.word	0x20000d94
 80054a8:	20000d98 	.word	0x20000d98

080054ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80054b2:	f000 f92b 	bl	800570c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80054b6:	4b15      	ldr	r3, [pc, #84]	@ (800550c <prvCheckForValidListAndQueue+0x60>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d120      	bne.n	8005500 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80054be:	4814      	ldr	r0, [pc, #80]	@ (8005510 <prvCheckForValidListAndQueue+0x64>)
 80054c0:	f7fd fc7e 	bl	8002dc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80054c4:	4813      	ldr	r0, [pc, #76]	@ (8005514 <prvCheckForValidListAndQueue+0x68>)
 80054c6:	f7fd fc7b 	bl	8002dc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80054ca:	4b13      	ldr	r3, [pc, #76]	@ (8005518 <prvCheckForValidListAndQueue+0x6c>)
 80054cc:	4a10      	ldr	r2, [pc, #64]	@ (8005510 <prvCheckForValidListAndQueue+0x64>)
 80054ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80054d0:	4b12      	ldr	r3, [pc, #72]	@ (800551c <prvCheckForValidListAndQueue+0x70>)
 80054d2:	4a10      	ldr	r2, [pc, #64]	@ (8005514 <prvCheckForValidListAndQueue+0x68>)
 80054d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80054d6:	2300      	movs	r3, #0
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	4b11      	ldr	r3, [pc, #68]	@ (8005520 <prvCheckForValidListAndQueue+0x74>)
 80054dc:	4a11      	ldr	r2, [pc, #68]	@ (8005524 <prvCheckForValidListAndQueue+0x78>)
 80054de:	2110      	movs	r1, #16
 80054e0:	200a      	movs	r0, #10
 80054e2:	f7fd fd87 	bl	8002ff4 <xQueueGenericCreateStatic>
 80054e6:	4603      	mov	r3, r0
 80054e8:	4a08      	ldr	r2, [pc, #32]	@ (800550c <prvCheckForValidListAndQueue+0x60>)
 80054ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80054ec:	4b07      	ldr	r3, [pc, #28]	@ (800550c <prvCheckForValidListAndQueue+0x60>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d005      	beq.n	8005500 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80054f4:	4b05      	ldr	r3, [pc, #20]	@ (800550c <prvCheckForValidListAndQueue+0x60>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	490b      	ldr	r1, [pc, #44]	@ (8005528 <prvCheckForValidListAndQueue+0x7c>)
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fe fc4a 	bl	8003d94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005500:	f000 f934 	bl	800576c <vPortExitCritical>
}
 8005504:	bf00      	nop
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000d9c 	.word	0x20000d9c
 8005510:	20000d6c 	.word	0x20000d6c
 8005514:	20000d80 	.word	0x20000d80
 8005518:	20000d94 	.word	0x20000d94
 800551c:	20000d98 	.word	0x20000d98
 8005520:	20000e48 	.word	0x20000e48
 8005524:	20000da8 	.word	0x20000da8
 8005528:	08006ed0 	.word	0x08006ed0

0800552c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	3b04      	subs	r3, #4
 800553c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3b04      	subs	r3, #4
 800554a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f023 0201 	bic.w	r2, r3, #1
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	3b04      	subs	r3, #4
 800555a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800555c:	4a08      	ldr	r2, [pc, #32]	@ (8005580 <pxPortInitialiseStack+0x54>)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	3b14      	subs	r3, #20
 8005566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3b20      	subs	r3, #32
 8005572:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005574:	68fb      	ldr	r3, [r7, #12]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	bc80      	pop	{r7}
 800557e:	4770      	bx	lr
 8005580:	08005585 	.word	0x08005585

08005584 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800558a:	2300      	movs	r3, #0
 800558c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800558e:	4b12      	ldr	r3, [pc, #72]	@ (80055d8 <prvTaskExitError+0x54>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005596:	d00b      	beq.n	80055b0 <prvTaskExitError+0x2c>
	__asm volatile
 8005598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800559c:	f383 8811 	msr	BASEPRI, r3
 80055a0:	f3bf 8f6f 	isb	sy
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	60fb      	str	r3, [r7, #12]
}
 80055aa:	bf00      	nop
 80055ac:	bf00      	nop
 80055ae:	e7fd      	b.n	80055ac <prvTaskExitError+0x28>
	__asm volatile
 80055b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	60bb      	str	r3, [r7, #8]
}
 80055c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80055c4:	bf00      	nop
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0fc      	beq.n	80055c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80055cc:	bf00      	nop
 80055ce:	bf00      	nop
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr
 80055d8:	20000058 	.word	0x20000058
 80055dc:	00000000 	.word	0x00000000

080055e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80055e0:	4b07      	ldr	r3, [pc, #28]	@ (8005600 <pxCurrentTCBConst2>)
 80055e2:	6819      	ldr	r1, [r3, #0]
 80055e4:	6808      	ldr	r0, [r1, #0]
 80055e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80055ea:	f380 8809 	msr	PSP, r0
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f04f 0000 	mov.w	r0, #0
 80055f6:	f380 8811 	msr	BASEPRI, r0
 80055fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80055fe:	4770      	bx	lr

08005600 <pxCurrentTCBConst2>:
 8005600:	2000086c 	.word	0x2000086c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005604:	bf00      	nop
 8005606:	bf00      	nop

08005608 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005608:	4806      	ldr	r0, [pc, #24]	@ (8005624 <prvPortStartFirstTask+0x1c>)
 800560a:	6800      	ldr	r0, [r0, #0]
 800560c:	6800      	ldr	r0, [r0, #0]
 800560e:	f380 8808 	msr	MSP, r0
 8005612:	b662      	cpsie	i
 8005614:	b661      	cpsie	f
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	df00      	svc	0
 8005620:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005622:	bf00      	nop
 8005624:	e000ed08 	.word	0xe000ed08

08005628 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800562e:	4b32      	ldr	r3, [pc, #200]	@ (80056f8 <xPortStartScheduler+0xd0>)
 8005630:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	b2db      	uxtb	r3, r3
 8005638:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	22ff      	movs	r2, #255	@ 0xff
 800563e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005648:	78fb      	ldrb	r3, [r7, #3]
 800564a:	b2db      	uxtb	r3, r3
 800564c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005650:	b2da      	uxtb	r2, r3
 8005652:	4b2a      	ldr	r3, [pc, #168]	@ (80056fc <xPortStartScheduler+0xd4>)
 8005654:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005656:	4b2a      	ldr	r3, [pc, #168]	@ (8005700 <xPortStartScheduler+0xd8>)
 8005658:	2207      	movs	r2, #7
 800565a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800565c:	e009      	b.n	8005672 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800565e:	4b28      	ldr	r3, [pc, #160]	@ (8005700 <xPortStartScheduler+0xd8>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3b01      	subs	r3, #1
 8005664:	4a26      	ldr	r2, [pc, #152]	@ (8005700 <xPortStartScheduler+0xd8>)
 8005666:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005668:	78fb      	ldrb	r3, [r7, #3]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	b2db      	uxtb	r3, r3
 8005670:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005672:	78fb      	ldrb	r3, [r7, #3]
 8005674:	b2db      	uxtb	r3, r3
 8005676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800567a:	2b80      	cmp	r3, #128	@ 0x80
 800567c:	d0ef      	beq.n	800565e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800567e:	4b20      	ldr	r3, [pc, #128]	@ (8005700 <xPortStartScheduler+0xd8>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f1c3 0307 	rsb	r3, r3, #7
 8005686:	2b04      	cmp	r3, #4
 8005688:	d00b      	beq.n	80056a2 <xPortStartScheduler+0x7a>
	__asm volatile
 800568a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	60bb      	str	r3, [r7, #8]
}
 800569c:	bf00      	nop
 800569e:	bf00      	nop
 80056a0:	e7fd      	b.n	800569e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056a2:	4b17      	ldr	r3, [pc, #92]	@ (8005700 <xPortStartScheduler+0xd8>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	021b      	lsls	r3, r3, #8
 80056a8:	4a15      	ldr	r2, [pc, #84]	@ (8005700 <xPortStartScheduler+0xd8>)
 80056aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056ac:	4b14      	ldr	r3, [pc, #80]	@ (8005700 <xPortStartScheduler+0xd8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056b4:	4a12      	ldr	r2, [pc, #72]	@ (8005700 <xPortStartScheduler+0xd8>)
 80056b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80056c0:	4b10      	ldr	r3, [pc, #64]	@ (8005704 <xPortStartScheduler+0xdc>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a0f      	ldr	r2, [pc, #60]	@ (8005704 <xPortStartScheduler+0xdc>)
 80056c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80056ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80056cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005704 <xPortStartScheduler+0xdc>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a0c      	ldr	r2, [pc, #48]	@ (8005704 <xPortStartScheduler+0xdc>)
 80056d2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80056d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80056d8:	f000 f8b8 	bl	800584c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80056dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005708 <xPortStartScheduler+0xe0>)
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80056e2:	f7ff ff91 	bl	8005608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80056e6:	f7fe ff69 	bl	80045bc <vTaskSwitchContext>
	prvTaskExitError();
 80056ea:	f7ff ff4b 	bl	8005584 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	e000e400 	.word	0xe000e400
 80056fc:	20000e98 	.word	0x20000e98
 8005700:	20000e9c 	.word	0x20000e9c
 8005704:	e000ed20 	.word	0xe000ed20
 8005708:	20000058 	.word	0x20000058

0800570c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
	__asm volatile
 8005712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	607b      	str	r3, [r7, #4]
}
 8005724:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005726:	4b0f      	ldr	r3, [pc, #60]	@ (8005764 <vPortEnterCritical+0x58>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3301      	adds	r3, #1
 800572c:	4a0d      	ldr	r2, [pc, #52]	@ (8005764 <vPortEnterCritical+0x58>)
 800572e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005730:	4b0c      	ldr	r3, [pc, #48]	@ (8005764 <vPortEnterCritical+0x58>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d110      	bne.n	800575a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005738:	4b0b      	ldr	r3, [pc, #44]	@ (8005768 <vPortEnterCritical+0x5c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00b      	beq.n	800575a <vPortEnterCritical+0x4e>
	__asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	603b      	str	r3, [r7, #0]
}
 8005754:	bf00      	nop
 8005756:	bf00      	nop
 8005758:	e7fd      	b.n	8005756 <vPortEnterCritical+0x4a>
	}
}
 800575a:	bf00      	nop
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	bc80      	pop	{r7}
 8005762:	4770      	bx	lr
 8005764:	20000058 	.word	0x20000058
 8005768:	e000ed04 	.word	0xe000ed04

0800576c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005772:	4b12      	ldr	r3, [pc, #72]	@ (80057bc <vPortExitCritical+0x50>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10b      	bne.n	8005792 <vPortExitCritical+0x26>
	__asm volatile
 800577a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	607b      	str	r3, [r7, #4]
}
 800578c:	bf00      	nop
 800578e:	bf00      	nop
 8005790:	e7fd      	b.n	800578e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005792:	4b0a      	ldr	r3, [pc, #40]	@ (80057bc <vPortExitCritical+0x50>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3b01      	subs	r3, #1
 8005798:	4a08      	ldr	r2, [pc, #32]	@ (80057bc <vPortExitCritical+0x50>)
 800579a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800579c:	4b07      	ldr	r3, [pc, #28]	@ (80057bc <vPortExitCritical+0x50>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d105      	bne.n	80057b0 <vPortExitCritical+0x44>
 80057a4:	2300      	movs	r3, #0
 80057a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	f383 8811 	msr	BASEPRI, r3
}
 80057ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bc80      	pop	{r7}
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	20000058 	.word	0x20000058

080057c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80057c0:	f3ef 8009 	mrs	r0, PSP
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	4b0d      	ldr	r3, [pc, #52]	@ (8005800 <pxCurrentTCBConst>)
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80057d0:	6010      	str	r0, [r2, #0]
 80057d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80057d6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80057da:	f380 8811 	msr	BASEPRI, r0
 80057de:	f7fe feed 	bl	80045bc <vTaskSwitchContext>
 80057e2:	f04f 0000 	mov.w	r0, #0
 80057e6:	f380 8811 	msr	BASEPRI, r0
 80057ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80057ee:	6819      	ldr	r1, [r3, #0]
 80057f0:	6808      	ldr	r0, [r1, #0]
 80057f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80057f6:	f380 8809 	msr	PSP, r0
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	4770      	bx	lr

08005800 <pxCurrentTCBConst>:
 8005800:	2000086c 	.word	0x2000086c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005804:	bf00      	nop
 8005806:	bf00      	nop

08005808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	607b      	str	r3, [r7, #4]
}
 8005820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005822:	f7fe fe11 	bl	8004448 <xTaskIncrementTick>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800582c:	4b06      	ldr	r3, [pc, #24]	@ (8005848 <xPortSysTickHandler+0x40>)
 800582e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	2300      	movs	r3, #0
 8005836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	f383 8811 	msr	BASEPRI, r3
}
 800583e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005840:	bf00      	nop
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	e000ed04 	.word	0xe000ed04

0800584c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005850:	4b0a      	ldr	r3, [pc, #40]	@ (800587c <vPortSetupTimerInterrupt+0x30>)
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005856:	4b0a      	ldr	r3, [pc, #40]	@ (8005880 <vPortSetupTimerInterrupt+0x34>)
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800585c:	4b09      	ldr	r3, [pc, #36]	@ (8005884 <vPortSetupTimerInterrupt+0x38>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a09      	ldr	r2, [pc, #36]	@ (8005888 <vPortSetupTimerInterrupt+0x3c>)
 8005862:	fba2 2303 	umull	r2, r3, r2, r3
 8005866:	099b      	lsrs	r3, r3, #6
 8005868:	4a08      	ldr	r2, [pc, #32]	@ (800588c <vPortSetupTimerInterrupt+0x40>)
 800586a:	3b01      	subs	r3, #1
 800586c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800586e:	4b03      	ldr	r3, [pc, #12]	@ (800587c <vPortSetupTimerInterrupt+0x30>)
 8005870:	2207      	movs	r2, #7
 8005872:	601a      	str	r2, [r3, #0]
}
 8005874:	bf00      	nop
 8005876:	46bd      	mov	sp, r7
 8005878:	bc80      	pop	{r7}
 800587a:	4770      	bx	lr
 800587c:	e000e010 	.word	0xe000e010
 8005880:	e000e018 	.word	0xe000e018
 8005884:	2000004c 	.word	0x2000004c
 8005888:	10624dd3 	.word	0x10624dd3
 800588c:	e000e014 	.word	0xe000e014

08005890 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005896:	f3ef 8305 	mrs	r3, IPSR
 800589a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2b0f      	cmp	r3, #15
 80058a0:	d915      	bls.n	80058ce <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80058a2:	4a17      	ldr	r2, [pc, #92]	@ (8005900 <vPortValidateInterruptPriority+0x70>)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4413      	add	r3, r2
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80058ac:	4b15      	ldr	r3, [pc, #84]	@ (8005904 <vPortValidateInterruptPriority+0x74>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	7afa      	ldrb	r2, [r7, #11]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d20b      	bcs.n	80058ce <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80058b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	607b      	str	r3, [r7, #4]
}
 80058c8:	bf00      	nop
 80058ca:	bf00      	nop
 80058cc:	e7fd      	b.n	80058ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80058ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005908 <vPortValidateInterruptPriority+0x78>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80058d6:	4b0d      	ldr	r3, [pc, #52]	@ (800590c <vPortValidateInterruptPriority+0x7c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d90b      	bls.n	80058f6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	603b      	str	r3, [r7, #0]
}
 80058f0:	bf00      	nop
 80058f2:	bf00      	nop
 80058f4:	e7fd      	b.n	80058f2 <vPortValidateInterruptPriority+0x62>
	}
 80058f6:	bf00      	nop
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bc80      	pop	{r7}
 80058fe:	4770      	bx	lr
 8005900:	e000e3f0 	.word	0xe000e3f0
 8005904:	20000e98 	.word	0x20000e98
 8005908:	e000ed0c 	.word	0xe000ed0c
 800590c:	20000e9c 	.word	0x20000e9c

08005910 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08a      	sub	sp, #40	@ 0x28
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005918:	2300      	movs	r3, #0
 800591a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800591c:	f7fe fcda 	bl	80042d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005920:	4b5c      	ldr	r3, [pc, #368]	@ (8005a94 <pvPortMalloc+0x184>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005928:	f000 f924 	bl	8005b74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800592c:	4b5a      	ldr	r3, [pc, #360]	@ (8005a98 <pvPortMalloc+0x188>)
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4013      	ands	r3, r2
 8005934:	2b00      	cmp	r3, #0
 8005936:	f040 8095 	bne.w	8005a64 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01e      	beq.n	800597e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005940:	2208      	movs	r2, #8
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4413      	add	r3, r2
 8005946:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	2b00      	cmp	r3, #0
 8005950:	d015      	beq.n	800597e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f023 0307 	bic.w	r3, r3, #7
 8005958:	3308      	adds	r3, #8
 800595a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f003 0307 	and.w	r3, r3, #7
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00b      	beq.n	800597e <pvPortMalloc+0x6e>
	__asm volatile
 8005966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	617b      	str	r3, [r7, #20]
}
 8005978:	bf00      	nop
 800597a:	bf00      	nop
 800597c:	e7fd      	b.n	800597a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d06f      	beq.n	8005a64 <pvPortMalloc+0x154>
 8005984:	4b45      	ldr	r3, [pc, #276]	@ (8005a9c <pvPortMalloc+0x18c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	429a      	cmp	r2, r3
 800598c:	d86a      	bhi.n	8005a64 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800598e:	4b44      	ldr	r3, [pc, #272]	@ (8005aa0 <pvPortMalloc+0x190>)
 8005990:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005992:	4b43      	ldr	r3, [pc, #268]	@ (8005aa0 <pvPortMalloc+0x190>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005998:	e004      	b.n	80059a4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800599a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800599e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d903      	bls.n	80059b6 <pvPortMalloc+0xa6>
 80059ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f1      	bne.n	800599a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80059b6:	4b37      	ldr	r3, [pc, #220]	@ (8005a94 <pvPortMalloc+0x184>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059bc:	429a      	cmp	r2, r3
 80059be:	d051      	beq.n	8005a64 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2208      	movs	r2, #8
 80059c6:	4413      	add	r3, r2
 80059c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	1ad2      	subs	r2, r2, r3
 80059da:	2308      	movs	r3, #8
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	429a      	cmp	r2, r3
 80059e0:	d920      	bls.n	8005a24 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4413      	add	r3, r2
 80059e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	f003 0307 	and.w	r3, r3, #7
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00b      	beq.n	8005a0c <pvPortMalloc+0xfc>
	__asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	613b      	str	r3, [r7, #16]
}
 8005a06:	bf00      	nop
 8005a08:	bf00      	nop
 8005a0a:	e7fd      	b.n	8005a08 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	1ad2      	subs	r2, r2, r3
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a1e:	69b8      	ldr	r0, [r7, #24]
 8005a20:	f000 f90a 	bl	8005c38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a24:	4b1d      	ldr	r3, [pc, #116]	@ (8005a9c <pvPortMalloc+0x18c>)
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	4a1b      	ldr	r2, [pc, #108]	@ (8005a9c <pvPortMalloc+0x18c>)
 8005a30:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a32:	4b1a      	ldr	r3, [pc, #104]	@ (8005a9c <pvPortMalloc+0x18c>)
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	4b1b      	ldr	r3, [pc, #108]	@ (8005aa4 <pvPortMalloc+0x194>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d203      	bcs.n	8005a46 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a3e:	4b17      	ldr	r3, [pc, #92]	@ (8005a9c <pvPortMalloc+0x18c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a18      	ldr	r2, [pc, #96]	@ (8005aa4 <pvPortMalloc+0x194>)
 8005a44:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	4b13      	ldr	r3, [pc, #76]	@ (8005a98 <pvPortMalloc+0x188>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a52:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005a5a:	4b13      	ldr	r3, [pc, #76]	@ (8005aa8 <pvPortMalloc+0x198>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	4a11      	ldr	r2, [pc, #68]	@ (8005aa8 <pvPortMalloc+0x198>)
 8005a62:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a64:	f7fe fc44 	bl	80042f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00b      	beq.n	8005a8a <pvPortMalloc+0x17a>
	__asm volatile
 8005a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a76:	f383 8811 	msr	BASEPRI, r3
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	60fb      	str	r3, [r7, #12]
}
 8005a84:	bf00      	nop
 8005a86:	bf00      	nop
 8005a88:	e7fd      	b.n	8005a86 <pvPortMalloc+0x176>
	return pvReturn;
 8005a8a:	69fb      	ldr	r3, [r7, #28]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3728      	adds	r7, #40	@ 0x28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	20003ea8 	.word	0x20003ea8
 8005a98:	20003ebc 	.word	0x20003ebc
 8005a9c:	20003eac 	.word	0x20003eac
 8005aa0:	20003ea0 	.word	0x20003ea0
 8005aa4:	20003eb0 	.word	0x20003eb0
 8005aa8:	20003eb4 	.word	0x20003eb4

08005aac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d04f      	beq.n	8005b5e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005abe:	2308      	movs	r3, #8
 8005ac0:	425b      	negs	r3, r3
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	4b25      	ldr	r3, [pc, #148]	@ (8005b68 <vPortFree+0xbc>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10b      	bne.n	8005af2 <vPortFree+0x46>
	__asm volatile
 8005ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	60fb      	str	r3, [r7, #12]
}
 8005aec:	bf00      	nop
 8005aee:	bf00      	nop
 8005af0:	e7fd      	b.n	8005aee <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00b      	beq.n	8005b12 <vPortFree+0x66>
	__asm volatile
 8005afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	60bb      	str	r3, [r7, #8]
}
 8005b0c:	bf00      	nop
 8005b0e:	bf00      	nop
 8005b10:	e7fd      	b.n	8005b0e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	4b14      	ldr	r3, [pc, #80]	@ (8005b68 <vPortFree+0xbc>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d01e      	beq.n	8005b5e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d11a      	bne.n	8005b5e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8005b68 <vPortFree+0xbc>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	43db      	mvns	r3, r3
 8005b32:	401a      	ands	r2, r3
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b38:	f7fe fbcc 	bl	80042d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	4b0a      	ldr	r3, [pc, #40]	@ (8005b6c <vPortFree+0xc0>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4413      	add	r3, r2
 8005b46:	4a09      	ldr	r2, [pc, #36]	@ (8005b6c <vPortFree+0xc0>)
 8005b48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b4a:	6938      	ldr	r0, [r7, #16]
 8005b4c:	f000 f874 	bl	8005c38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005b50:	4b07      	ldr	r3, [pc, #28]	@ (8005b70 <vPortFree+0xc4>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3301      	adds	r3, #1
 8005b56:	4a06      	ldr	r2, [pc, #24]	@ (8005b70 <vPortFree+0xc4>)
 8005b58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005b5a:	f7fe fbc9 	bl	80042f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b5e:	bf00      	nop
 8005b60:	3718      	adds	r7, #24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	20003ebc 	.word	0x20003ebc
 8005b6c:	20003eac 	.word	0x20003eac
 8005b70:	20003eb8 	.word	0x20003eb8

08005b74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b7a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8005b7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b80:	4b27      	ldr	r3, [pc, #156]	@ (8005c20 <prvHeapInit+0xac>)
 8005b82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00c      	beq.n	8005ba8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3307      	adds	r3, #7
 8005b92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 0307 	bic.w	r3, r3, #7
 8005b9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	4a1f      	ldr	r2, [pc, #124]	@ (8005c20 <prvHeapInit+0xac>)
 8005ba4:	4413      	add	r3, r2
 8005ba6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005bac:	4a1d      	ldr	r2, [pc, #116]	@ (8005c24 <prvHeapInit+0xb0>)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8005c24 <prvHeapInit+0xb0>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005bc0:	2208      	movs	r2, #8
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	1a9b      	subs	r3, r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 0307 	bic.w	r3, r3, #7
 8005bce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4a15      	ldr	r2, [pc, #84]	@ (8005c28 <prvHeapInit+0xb4>)
 8005bd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005bd6:	4b14      	ldr	r3, [pc, #80]	@ (8005c28 <prvHeapInit+0xb4>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005bde:	4b12      	ldr	r3, [pc, #72]	@ (8005c28 <prvHeapInit+0xb4>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	1ad2      	subs	r2, r2, r3
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8005c28 <prvHeapInit+0xb4>)
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	4a0a      	ldr	r2, [pc, #40]	@ (8005c2c <prvHeapInit+0xb8>)
 8005c02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	4a09      	ldr	r2, [pc, #36]	@ (8005c30 <prvHeapInit+0xbc>)
 8005c0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c0c:	4b09      	ldr	r3, [pc, #36]	@ (8005c34 <prvHeapInit+0xc0>)
 8005c0e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005c12:	601a      	str	r2, [r3, #0]
}
 8005c14:	bf00      	nop
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bc80      	pop	{r7}
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	20000ea0 	.word	0x20000ea0
 8005c24:	20003ea0 	.word	0x20003ea0
 8005c28:	20003ea8 	.word	0x20003ea8
 8005c2c:	20003eb0 	.word	0x20003eb0
 8005c30:	20003eac 	.word	0x20003eac
 8005c34:	20003ebc 	.word	0x20003ebc

08005c38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c40:	4b27      	ldr	r3, [pc, #156]	@ (8005ce0 <prvInsertBlockIntoFreeList+0xa8>)
 8005c42:	60fb      	str	r3, [r7, #12]
 8005c44:	e002      	b.n	8005c4c <prvInsertBlockIntoFreeList+0x14>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d8f7      	bhi.n	8005c46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	4413      	add	r3, r2
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d108      	bne.n	8005c7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	441a      	add	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	441a      	add	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d118      	bne.n	8005cc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	4b14      	ldr	r3, [pc, #80]	@ (8005ce4 <prvInsertBlockIntoFreeList+0xac>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d00d      	beq.n	8005cb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	441a      	add	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	e008      	b.n	8005cc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ce4 <prvInsertBlockIntoFreeList+0xac>)
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	e003      	b.n	8005cc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d002      	beq.n	8005cd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cd6:	bf00      	nop
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bc80      	pop	{r7}
 8005cde:	4770      	bx	lr
 8005ce0:	20003ea0 	.word	0x20003ea0
 8005ce4:	20003ea8 	.word	0x20003ea8

08005ce8 <std>:
 8005ce8:	2300      	movs	r3, #0
 8005cea:	b510      	push	{r4, lr}
 8005cec:	4604      	mov	r4, r0
 8005cee:	e9c0 3300 	strd	r3, r3, [r0]
 8005cf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cf6:	6083      	str	r3, [r0, #8]
 8005cf8:	8181      	strh	r1, [r0, #12]
 8005cfa:	6643      	str	r3, [r0, #100]	@ 0x64
 8005cfc:	81c2      	strh	r2, [r0, #14]
 8005cfe:	6183      	str	r3, [r0, #24]
 8005d00:	4619      	mov	r1, r3
 8005d02:	2208      	movs	r2, #8
 8005d04:	305c      	adds	r0, #92	@ 0x5c
 8005d06:	f000 f9f9 	bl	80060fc <memset>
 8005d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d40 <std+0x58>)
 8005d0c:	6224      	str	r4, [r4, #32]
 8005d0e:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d10:	4b0c      	ldr	r3, [pc, #48]	@ (8005d44 <std+0x5c>)
 8005d12:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d14:	4b0c      	ldr	r3, [pc, #48]	@ (8005d48 <std+0x60>)
 8005d16:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d18:	4b0c      	ldr	r3, [pc, #48]	@ (8005d4c <std+0x64>)
 8005d1a:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d50 <std+0x68>)
 8005d1e:	429c      	cmp	r4, r3
 8005d20:	d006      	beq.n	8005d30 <std+0x48>
 8005d22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d26:	4294      	cmp	r4, r2
 8005d28:	d002      	beq.n	8005d30 <std+0x48>
 8005d2a:	33d0      	adds	r3, #208	@ 0xd0
 8005d2c:	429c      	cmp	r4, r3
 8005d2e:	d105      	bne.n	8005d3c <std+0x54>
 8005d30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d38:	f000 ba58 	b.w	80061ec <__retarget_lock_init_recursive>
 8005d3c:	bd10      	pop	{r4, pc}
 8005d3e:	bf00      	nop
 8005d40:	08005f4d 	.word	0x08005f4d
 8005d44:	08005f6f 	.word	0x08005f6f
 8005d48:	08005fa7 	.word	0x08005fa7
 8005d4c:	08005fcb 	.word	0x08005fcb
 8005d50:	20003ec0 	.word	0x20003ec0

08005d54 <stdio_exit_handler>:
 8005d54:	4a02      	ldr	r2, [pc, #8]	@ (8005d60 <stdio_exit_handler+0xc>)
 8005d56:	4903      	ldr	r1, [pc, #12]	@ (8005d64 <stdio_exit_handler+0x10>)
 8005d58:	4803      	ldr	r0, [pc, #12]	@ (8005d68 <stdio_exit_handler+0x14>)
 8005d5a:	f000 b869 	b.w	8005e30 <_fwalk_sglue>
 8005d5e:	bf00      	nop
 8005d60:	2000005c 	.word	0x2000005c
 8005d64:	08006a9d 	.word	0x08006a9d
 8005d68:	2000006c 	.word	0x2000006c

08005d6c <cleanup_stdio>:
 8005d6c:	6841      	ldr	r1, [r0, #4]
 8005d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005da0 <cleanup_stdio+0x34>)
 8005d70:	b510      	push	{r4, lr}
 8005d72:	4299      	cmp	r1, r3
 8005d74:	4604      	mov	r4, r0
 8005d76:	d001      	beq.n	8005d7c <cleanup_stdio+0x10>
 8005d78:	f000 fe90 	bl	8006a9c <_fflush_r>
 8005d7c:	68a1      	ldr	r1, [r4, #8]
 8005d7e:	4b09      	ldr	r3, [pc, #36]	@ (8005da4 <cleanup_stdio+0x38>)
 8005d80:	4299      	cmp	r1, r3
 8005d82:	d002      	beq.n	8005d8a <cleanup_stdio+0x1e>
 8005d84:	4620      	mov	r0, r4
 8005d86:	f000 fe89 	bl	8006a9c <_fflush_r>
 8005d8a:	68e1      	ldr	r1, [r4, #12]
 8005d8c:	4b06      	ldr	r3, [pc, #24]	@ (8005da8 <cleanup_stdio+0x3c>)
 8005d8e:	4299      	cmp	r1, r3
 8005d90:	d004      	beq.n	8005d9c <cleanup_stdio+0x30>
 8005d92:	4620      	mov	r0, r4
 8005d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d98:	f000 be80 	b.w	8006a9c <_fflush_r>
 8005d9c:	bd10      	pop	{r4, pc}
 8005d9e:	bf00      	nop
 8005da0:	20003ec0 	.word	0x20003ec0
 8005da4:	20003f28 	.word	0x20003f28
 8005da8:	20003f90 	.word	0x20003f90

08005dac <global_stdio_init.part.0>:
 8005dac:	b510      	push	{r4, lr}
 8005dae:	4b0b      	ldr	r3, [pc, #44]	@ (8005ddc <global_stdio_init.part.0+0x30>)
 8005db0:	4c0b      	ldr	r4, [pc, #44]	@ (8005de0 <global_stdio_init.part.0+0x34>)
 8005db2:	4a0c      	ldr	r2, [pc, #48]	@ (8005de4 <global_stdio_init.part.0+0x38>)
 8005db4:	4620      	mov	r0, r4
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	2104      	movs	r1, #4
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f7ff ff94 	bl	8005ce8 <std>
 8005dc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	2109      	movs	r1, #9
 8005dc8:	f7ff ff8e 	bl	8005ce8 <std>
 8005dcc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dd6:	2112      	movs	r1, #18
 8005dd8:	f7ff bf86 	b.w	8005ce8 <std>
 8005ddc:	20003ff8 	.word	0x20003ff8
 8005de0:	20003ec0 	.word	0x20003ec0
 8005de4:	08005d55 	.word	0x08005d55

08005de8 <__sfp_lock_acquire>:
 8005de8:	4801      	ldr	r0, [pc, #4]	@ (8005df0 <__sfp_lock_acquire+0x8>)
 8005dea:	f000 ba00 	b.w	80061ee <__retarget_lock_acquire_recursive>
 8005dee:	bf00      	nop
 8005df0:	20004001 	.word	0x20004001

08005df4 <__sfp_lock_release>:
 8005df4:	4801      	ldr	r0, [pc, #4]	@ (8005dfc <__sfp_lock_release+0x8>)
 8005df6:	f000 b9fb 	b.w	80061f0 <__retarget_lock_release_recursive>
 8005dfa:	bf00      	nop
 8005dfc:	20004001 	.word	0x20004001

08005e00 <__sinit>:
 8005e00:	b510      	push	{r4, lr}
 8005e02:	4604      	mov	r4, r0
 8005e04:	f7ff fff0 	bl	8005de8 <__sfp_lock_acquire>
 8005e08:	6a23      	ldr	r3, [r4, #32]
 8005e0a:	b11b      	cbz	r3, 8005e14 <__sinit+0x14>
 8005e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e10:	f7ff bff0 	b.w	8005df4 <__sfp_lock_release>
 8005e14:	4b04      	ldr	r3, [pc, #16]	@ (8005e28 <__sinit+0x28>)
 8005e16:	6223      	str	r3, [r4, #32]
 8005e18:	4b04      	ldr	r3, [pc, #16]	@ (8005e2c <__sinit+0x2c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1f5      	bne.n	8005e0c <__sinit+0xc>
 8005e20:	f7ff ffc4 	bl	8005dac <global_stdio_init.part.0>
 8005e24:	e7f2      	b.n	8005e0c <__sinit+0xc>
 8005e26:	bf00      	nop
 8005e28:	08005d6d 	.word	0x08005d6d
 8005e2c:	20003ff8 	.word	0x20003ff8

08005e30 <_fwalk_sglue>:
 8005e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e34:	4607      	mov	r7, r0
 8005e36:	4688      	mov	r8, r1
 8005e38:	4614      	mov	r4, r2
 8005e3a:	2600      	movs	r6, #0
 8005e3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e40:	f1b9 0901 	subs.w	r9, r9, #1
 8005e44:	d505      	bpl.n	8005e52 <_fwalk_sglue+0x22>
 8005e46:	6824      	ldr	r4, [r4, #0]
 8005e48:	2c00      	cmp	r4, #0
 8005e4a:	d1f7      	bne.n	8005e3c <_fwalk_sglue+0xc>
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e52:	89ab      	ldrh	r3, [r5, #12]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d907      	bls.n	8005e68 <_fwalk_sglue+0x38>
 8005e58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	d003      	beq.n	8005e68 <_fwalk_sglue+0x38>
 8005e60:	4629      	mov	r1, r5
 8005e62:	4638      	mov	r0, r7
 8005e64:	47c0      	blx	r8
 8005e66:	4306      	orrs	r6, r0
 8005e68:	3568      	adds	r5, #104	@ 0x68
 8005e6a:	e7e9      	b.n	8005e40 <_fwalk_sglue+0x10>

08005e6c <iprintf>:
 8005e6c:	b40f      	push	{r0, r1, r2, r3}
 8005e6e:	b507      	push	{r0, r1, r2, lr}
 8005e70:	4906      	ldr	r1, [pc, #24]	@ (8005e8c <iprintf+0x20>)
 8005e72:	ab04      	add	r3, sp, #16
 8005e74:	6808      	ldr	r0, [r1, #0]
 8005e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e7a:	6881      	ldr	r1, [r0, #8]
 8005e7c:	9301      	str	r3, [sp, #4]
 8005e7e:	f000 fae5 	bl	800644c <_vfiprintf_r>
 8005e82:	b003      	add	sp, #12
 8005e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e88:	b004      	add	sp, #16
 8005e8a:	4770      	bx	lr
 8005e8c:	20000068 	.word	0x20000068

08005e90 <_puts_r>:
 8005e90:	6a03      	ldr	r3, [r0, #32]
 8005e92:	b570      	push	{r4, r5, r6, lr}
 8005e94:	4605      	mov	r5, r0
 8005e96:	460e      	mov	r6, r1
 8005e98:	6884      	ldr	r4, [r0, #8]
 8005e9a:	b90b      	cbnz	r3, 8005ea0 <_puts_r+0x10>
 8005e9c:	f7ff ffb0 	bl	8005e00 <__sinit>
 8005ea0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ea2:	07db      	lsls	r3, r3, #31
 8005ea4:	d405      	bmi.n	8005eb2 <_puts_r+0x22>
 8005ea6:	89a3      	ldrh	r3, [r4, #12]
 8005ea8:	0598      	lsls	r0, r3, #22
 8005eaa:	d402      	bmi.n	8005eb2 <_puts_r+0x22>
 8005eac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eae:	f000 f99e 	bl	80061ee <__retarget_lock_acquire_recursive>
 8005eb2:	89a3      	ldrh	r3, [r4, #12]
 8005eb4:	0719      	lsls	r1, r3, #28
 8005eb6:	d502      	bpl.n	8005ebe <_puts_r+0x2e>
 8005eb8:	6923      	ldr	r3, [r4, #16]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d135      	bne.n	8005f2a <_puts_r+0x9a>
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	f000 f8c5 	bl	8006050 <__swsetup_r>
 8005ec6:	b380      	cbz	r0, 8005f2a <_puts_r+0x9a>
 8005ec8:	f04f 35ff 	mov.w	r5, #4294967295
 8005ecc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ece:	07da      	lsls	r2, r3, #31
 8005ed0:	d405      	bmi.n	8005ede <_puts_r+0x4e>
 8005ed2:	89a3      	ldrh	r3, [r4, #12]
 8005ed4:	059b      	lsls	r3, r3, #22
 8005ed6:	d402      	bmi.n	8005ede <_puts_r+0x4e>
 8005ed8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eda:	f000 f989 	bl	80061f0 <__retarget_lock_release_recursive>
 8005ede:	4628      	mov	r0, r5
 8005ee0:	bd70      	pop	{r4, r5, r6, pc}
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	da04      	bge.n	8005ef0 <_puts_r+0x60>
 8005ee6:	69a2      	ldr	r2, [r4, #24]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	dc17      	bgt.n	8005f1c <_puts_r+0x8c>
 8005eec:	290a      	cmp	r1, #10
 8005eee:	d015      	beq.n	8005f1c <_puts_r+0x8c>
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	6022      	str	r2, [r4, #0]
 8005ef6:	7019      	strb	r1, [r3, #0]
 8005ef8:	68a3      	ldr	r3, [r4, #8]
 8005efa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005efe:	3b01      	subs	r3, #1
 8005f00:	60a3      	str	r3, [r4, #8]
 8005f02:	2900      	cmp	r1, #0
 8005f04:	d1ed      	bne.n	8005ee2 <_puts_r+0x52>
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	da11      	bge.n	8005f2e <_puts_r+0x9e>
 8005f0a:	4622      	mov	r2, r4
 8005f0c:	210a      	movs	r1, #10
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f000 f85f 	bl	8005fd2 <__swbuf_r>
 8005f14:	3001      	adds	r0, #1
 8005f16:	d0d7      	beq.n	8005ec8 <_puts_r+0x38>
 8005f18:	250a      	movs	r5, #10
 8005f1a:	e7d7      	b.n	8005ecc <_puts_r+0x3c>
 8005f1c:	4622      	mov	r2, r4
 8005f1e:	4628      	mov	r0, r5
 8005f20:	f000 f857 	bl	8005fd2 <__swbuf_r>
 8005f24:	3001      	adds	r0, #1
 8005f26:	d1e7      	bne.n	8005ef8 <_puts_r+0x68>
 8005f28:	e7ce      	b.n	8005ec8 <_puts_r+0x38>
 8005f2a:	3e01      	subs	r6, #1
 8005f2c:	e7e4      	b.n	8005ef8 <_puts_r+0x68>
 8005f2e:	6823      	ldr	r3, [r4, #0]
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	6022      	str	r2, [r4, #0]
 8005f34:	220a      	movs	r2, #10
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	e7ee      	b.n	8005f18 <_puts_r+0x88>
	...

08005f3c <puts>:
 8005f3c:	4b02      	ldr	r3, [pc, #8]	@ (8005f48 <puts+0xc>)
 8005f3e:	4601      	mov	r1, r0
 8005f40:	6818      	ldr	r0, [r3, #0]
 8005f42:	f7ff bfa5 	b.w	8005e90 <_puts_r>
 8005f46:	bf00      	nop
 8005f48:	20000068 	.word	0x20000068

08005f4c <__sread>:
 8005f4c:	b510      	push	{r4, lr}
 8005f4e:	460c      	mov	r4, r1
 8005f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f54:	f000 f8fc 	bl	8006150 <_read_r>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	bfab      	itete	ge
 8005f5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f5e:	89a3      	ldrhlt	r3, [r4, #12]
 8005f60:	181b      	addge	r3, r3, r0
 8005f62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f66:	bfac      	ite	ge
 8005f68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f6a:	81a3      	strhlt	r3, [r4, #12]
 8005f6c:	bd10      	pop	{r4, pc}

08005f6e <__swrite>:
 8005f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f72:	461f      	mov	r7, r3
 8005f74:	898b      	ldrh	r3, [r1, #12]
 8005f76:	4605      	mov	r5, r0
 8005f78:	05db      	lsls	r3, r3, #23
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	4616      	mov	r6, r2
 8005f7e:	d505      	bpl.n	8005f8c <__swrite+0x1e>
 8005f80:	2302      	movs	r3, #2
 8005f82:	2200      	movs	r2, #0
 8005f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f88:	f000 f8d0 	bl	800612c <_lseek_r>
 8005f8c:	89a3      	ldrh	r3, [r4, #12]
 8005f8e:	4632      	mov	r2, r6
 8005f90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f94:	81a3      	strh	r3, [r4, #12]
 8005f96:	4628      	mov	r0, r5
 8005f98:	463b      	mov	r3, r7
 8005f9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa2:	f000 b8e7 	b.w	8006174 <_write_r>

08005fa6 <__sseek>:
 8005fa6:	b510      	push	{r4, lr}
 8005fa8:	460c      	mov	r4, r1
 8005faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fae:	f000 f8bd 	bl	800612c <_lseek_r>
 8005fb2:	1c43      	adds	r3, r0, #1
 8005fb4:	89a3      	ldrh	r3, [r4, #12]
 8005fb6:	bf15      	itete	ne
 8005fb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005fba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005fbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005fc2:	81a3      	strheq	r3, [r4, #12]
 8005fc4:	bf18      	it	ne
 8005fc6:	81a3      	strhne	r3, [r4, #12]
 8005fc8:	bd10      	pop	{r4, pc}

08005fca <__sclose>:
 8005fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fce:	f000 b89d 	b.w	800610c <_close_r>

08005fd2 <__swbuf_r>:
 8005fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd4:	460e      	mov	r6, r1
 8005fd6:	4614      	mov	r4, r2
 8005fd8:	4605      	mov	r5, r0
 8005fda:	b118      	cbz	r0, 8005fe4 <__swbuf_r+0x12>
 8005fdc:	6a03      	ldr	r3, [r0, #32]
 8005fde:	b90b      	cbnz	r3, 8005fe4 <__swbuf_r+0x12>
 8005fe0:	f7ff ff0e 	bl	8005e00 <__sinit>
 8005fe4:	69a3      	ldr	r3, [r4, #24]
 8005fe6:	60a3      	str	r3, [r4, #8]
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	071a      	lsls	r2, r3, #28
 8005fec:	d501      	bpl.n	8005ff2 <__swbuf_r+0x20>
 8005fee:	6923      	ldr	r3, [r4, #16]
 8005ff0:	b943      	cbnz	r3, 8006004 <__swbuf_r+0x32>
 8005ff2:	4621      	mov	r1, r4
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	f000 f82b 	bl	8006050 <__swsetup_r>
 8005ffa:	b118      	cbz	r0, 8006004 <__swbuf_r+0x32>
 8005ffc:	f04f 37ff 	mov.w	r7, #4294967295
 8006000:	4638      	mov	r0, r7
 8006002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	6922      	ldr	r2, [r4, #16]
 8006008:	b2f6      	uxtb	r6, r6
 800600a:	1a98      	subs	r0, r3, r2
 800600c:	6963      	ldr	r3, [r4, #20]
 800600e:	4637      	mov	r7, r6
 8006010:	4283      	cmp	r3, r0
 8006012:	dc05      	bgt.n	8006020 <__swbuf_r+0x4e>
 8006014:	4621      	mov	r1, r4
 8006016:	4628      	mov	r0, r5
 8006018:	f000 fd40 	bl	8006a9c <_fflush_r>
 800601c:	2800      	cmp	r0, #0
 800601e:	d1ed      	bne.n	8005ffc <__swbuf_r+0x2a>
 8006020:	68a3      	ldr	r3, [r4, #8]
 8006022:	3b01      	subs	r3, #1
 8006024:	60a3      	str	r3, [r4, #8]
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	1c5a      	adds	r2, r3, #1
 800602a:	6022      	str	r2, [r4, #0]
 800602c:	701e      	strb	r6, [r3, #0]
 800602e:	6962      	ldr	r2, [r4, #20]
 8006030:	1c43      	adds	r3, r0, #1
 8006032:	429a      	cmp	r2, r3
 8006034:	d004      	beq.n	8006040 <__swbuf_r+0x6e>
 8006036:	89a3      	ldrh	r3, [r4, #12]
 8006038:	07db      	lsls	r3, r3, #31
 800603a:	d5e1      	bpl.n	8006000 <__swbuf_r+0x2e>
 800603c:	2e0a      	cmp	r6, #10
 800603e:	d1df      	bne.n	8006000 <__swbuf_r+0x2e>
 8006040:	4621      	mov	r1, r4
 8006042:	4628      	mov	r0, r5
 8006044:	f000 fd2a 	bl	8006a9c <_fflush_r>
 8006048:	2800      	cmp	r0, #0
 800604a:	d0d9      	beq.n	8006000 <__swbuf_r+0x2e>
 800604c:	e7d6      	b.n	8005ffc <__swbuf_r+0x2a>
	...

08006050 <__swsetup_r>:
 8006050:	b538      	push	{r3, r4, r5, lr}
 8006052:	4b29      	ldr	r3, [pc, #164]	@ (80060f8 <__swsetup_r+0xa8>)
 8006054:	4605      	mov	r5, r0
 8006056:	6818      	ldr	r0, [r3, #0]
 8006058:	460c      	mov	r4, r1
 800605a:	b118      	cbz	r0, 8006064 <__swsetup_r+0x14>
 800605c:	6a03      	ldr	r3, [r0, #32]
 800605e:	b90b      	cbnz	r3, 8006064 <__swsetup_r+0x14>
 8006060:	f7ff fece 	bl	8005e00 <__sinit>
 8006064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006068:	0719      	lsls	r1, r3, #28
 800606a:	d422      	bmi.n	80060b2 <__swsetup_r+0x62>
 800606c:	06da      	lsls	r2, r3, #27
 800606e:	d407      	bmi.n	8006080 <__swsetup_r+0x30>
 8006070:	2209      	movs	r2, #9
 8006072:	602a      	str	r2, [r5, #0]
 8006074:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006078:	f04f 30ff 	mov.w	r0, #4294967295
 800607c:	81a3      	strh	r3, [r4, #12]
 800607e:	e033      	b.n	80060e8 <__swsetup_r+0x98>
 8006080:	0758      	lsls	r0, r3, #29
 8006082:	d512      	bpl.n	80060aa <__swsetup_r+0x5a>
 8006084:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006086:	b141      	cbz	r1, 800609a <__swsetup_r+0x4a>
 8006088:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800608c:	4299      	cmp	r1, r3
 800608e:	d002      	beq.n	8006096 <__swsetup_r+0x46>
 8006090:	4628      	mov	r0, r5
 8006092:	f000 f8bd 	bl	8006210 <_free_r>
 8006096:	2300      	movs	r3, #0
 8006098:	6363      	str	r3, [r4, #52]	@ 0x34
 800609a:	89a3      	ldrh	r3, [r4, #12]
 800609c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80060a0:	81a3      	strh	r3, [r4, #12]
 80060a2:	2300      	movs	r3, #0
 80060a4:	6063      	str	r3, [r4, #4]
 80060a6:	6923      	ldr	r3, [r4, #16]
 80060a8:	6023      	str	r3, [r4, #0]
 80060aa:	89a3      	ldrh	r3, [r4, #12]
 80060ac:	f043 0308 	orr.w	r3, r3, #8
 80060b0:	81a3      	strh	r3, [r4, #12]
 80060b2:	6923      	ldr	r3, [r4, #16]
 80060b4:	b94b      	cbnz	r3, 80060ca <__swsetup_r+0x7a>
 80060b6:	89a3      	ldrh	r3, [r4, #12]
 80060b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80060bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060c0:	d003      	beq.n	80060ca <__swsetup_r+0x7a>
 80060c2:	4621      	mov	r1, r4
 80060c4:	4628      	mov	r0, r5
 80060c6:	f000 fd36 	bl	8006b36 <__smakebuf_r>
 80060ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ce:	f013 0201 	ands.w	r2, r3, #1
 80060d2:	d00a      	beq.n	80060ea <__swsetup_r+0x9a>
 80060d4:	2200      	movs	r2, #0
 80060d6:	60a2      	str	r2, [r4, #8]
 80060d8:	6962      	ldr	r2, [r4, #20]
 80060da:	4252      	negs	r2, r2
 80060dc:	61a2      	str	r2, [r4, #24]
 80060de:	6922      	ldr	r2, [r4, #16]
 80060e0:	b942      	cbnz	r2, 80060f4 <__swsetup_r+0xa4>
 80060e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80060e6:	d1c5      	bne.n	8006074 <__swsetup_r+0x24>
 80060e8:	bd38      	pop	{r3, r4, r5, pc}
 80060ea:	0799      	lsls	r1, r3, #30
 80060ec:	bf58      	it	pl
 80060ee:	6962      	ldrpl	r2, [r4, #20]
 80060f0:	60a2      	str	r2, [r4, #8]
 80060f2:	e7f4      	b.n	80060de <__swsetup_r+0x8e>
 80060f4:	2000      	movs	r0, #0
 80060f6:	e7f7      	b.n	80060e8 <__swsetup_r+0x98>
 80060f8:	20000068 	.word	0x20000068

080060fc <memset>:
 80060fc:	4603      	mov	r3, r0
 80060fe:	4402      	add	r2, r0
 8006100:	4293      	cmp	r3, r2
 8006102:	d100      	bne.n	8006106 <memset+0xa>
 8006104:	4770      	bx	lr
 8006106:	f803 1b01 	strb.w	r1, [r3], #1
 800610a:	e7f9      	b.n	8006100 <memset+0x4>

0800610c <_close_r>:
 800610c:	b538      	push	{r3, r4, r5, lr}
 800610e:	2300      	movs	r3, #0
 8006110:	4d05      	ldr	r5, [pc, #20]	@ (8006128 <_close_r+0x1c>)
 8006112:	4604      	mov	r4, r0
 8006114:	4608      	mov	r0, r1
 8006116:	602b      	str	r3, [r5, #0]
 8006118:	f7fb f8f8 	bl	800130c <_close>
 800611c:	1c43      	adds	r3, r0, #1
 800611e:	d102      	bne.n	8006126 <_close_r+0x1a>
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	b103      	cbz	r3, 8006126 <_close_r+0x1a>
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	bd38      	pop	{r3, r4, r5, pc}
 8006128:	20003ffc 	.word	0x20003ffc

0800612c <_lseek_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	4604      	mov	r4, r0
 8006130:	4608      	mov	r0, r1
 8006132:	4611      	mov	r1, r2
 8006134:	2200      	movs	r2, #0
 8006136:	4d05      	ldr	r5, [pc, #20]	@ (800614c <_lseek_r+0x20>)
 8006138:	602a      	str	r2, [r5, #0]
 800613a:	461a      	mov	r2, r3
 800613c:	f7fb f90a 	bl	8001354 <_lseek>
 8006140:	1c43      	adds	r3, r0, #1
 8006142:	d102      	bne.n	800614a <_lseek_r+0x1e>
 8006144:	682b      	ldr	r3, [r5, #0]
 8006146:	b103      	cbz	r3, 800614a <_lseek_r+0x1e>
 8006148:	6023      	str	r3, [r4, #0]
 800614a:	bd38      	pop	{r3, r4, r5, pc}
 800614c:	20003ffc 	.word	0x20003ffc

08006150 <_read_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	4604      	mov	r4, r0
 8006154:	4608      	mov	r0, r1
 8006156:	4611      	mov	r1, r2
 8006158:	2200      	movs	r2, #0
 800615a:	4d05      	ldr	r5, [pc, #20]	@ (8006170 <_read_r+0x20>)
 800615c:	602a      	str	r2, [r5, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	f7fb f8b7 	bl	80012d2 <_read>
 8006164:	1c43      	adds	r3, r0, #1
 8006166:	d102      	bne.n	800616e <_read_r+0x1e>
 8006168:	682b      	ldr	r3, [r5, #0]
 800616a:	b103      	cbz	r3, 800616e <_read_r+0x1e>
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	bd38      	pop	{r3, r4, r5, pc}
 8006170:	20003ffc 	.word	0x20003ffc

08006174 <_write_r>:
 8006174:	b538      	push	{r3, r4, r5, lr}
 8006176:	4604      	mov	r4, r0
 8006178:	4608      	mov	r0, r1
 800617a:	4611      	mov	r1, r2
 800617c:	2200      	movs	r2, #0
 800617e:	4d05      	ldr	r5, [pc, #20]	@ (8006194 <_write_r+0x20>)
 8006180:	602a      	str	r2, [r5, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	f7fa ffe6 	bl	8001154 <_write>
 8006188:	1c43      	adds	r3, r0, #1
 800618a:	d102      	bne.n	8006192 <_write_r+0x1e>
 800618c:	682b      	ldr	r3, [r5, #0]
 800618e:	b103      	cbz	r3, 8006192 <_write_r+0x1e>
 8006190:	6023      	str	r3, [r4, #0]
 8006192:	bd38      	pop	{r3, r4, r5, pc}
 8006194:	20003ffc 	.word	0x20003ffc

08006198 <__errno>:
 8006198:	4b01      	ldr	r3, [pc, #4]	@ (80061a0 <__errno+0x8>)
 800619a:	6818      	ldr	r0, [r3, #0]
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	20000068 	.word	0x20000068

080061a4 <__libc_init_array>:
 80061a4:	b570      	push	{r4, r5, r6, lr}
 80061a6:	2600      	movs	r6, #0
 80061a8:	4d0c      	ldr	r5, [pc, #48]	@ (80061dc <__libc_init_array+0x38>)
 80061aa:	4c0d      	ldr	r4, [pc, #52]	@ (80061e0 <__libc_init_array+0x3c>)
 80061ac:	1b64      	subs	r4, r4, r5
 80061ae:	10a4      	asrs	r4, r4, #2
 80061b0:	42a6      	cmp	r6, r4
 80061b2:	d109      	bne.n	80061c8 <__libc_init_array+0x24>
 80061b4:	f000 fd3c 	bl	8006c30 <_init>
 80061b8:	2600      	movs	r6, #0
 80061ba:	4d0a      	ldr	r5, [pc, #40]	@ (80061e4 <__libc_init_array+0x40>)
 80061bc:	4c0a      	ldr	r4, [pc, #40]	@ (80061e8 <__libc_init_array+0x44>)
 80061be:	1b64      	subs	r4, r4, r5
 80061c0:	10a4      	asrs	r4, r4, #2
 80061c2:	42a6      	cmp	r6, r4
 80061c4:	d105      	bne.n	80061d2 <__libc_init_array+0x2e>
 80061c6:	bd70      	pop	{r4, r5, r6, pc}
 80061c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80061cc:	4798      	blx	r3
 80061ce:	3601      	adds	r6, #1
 80061d0:	e7ee      	b.n	80061b0 <__libc_init_array+0xc>
 80061d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80061d6:	4798      	blx	r3
 80061d8:	3601      	adds	r6, #1
 80061da:	e7f2      	b.n	80061c2 <__libc_init_array+0x1e>
 80061dc:	08006f5c 	.word	0x08006f5c
 80061e0:	08006f5c 	.word	0x08006f5c
 80061e4:	08006f5c 	.word	0x08006f5c
 80061e8:	08006f60 	.word	0x08006f60

080061ec <__retarget_lock_init_recursive>:
 80061ec:	4770      	bx	lr

080061ee <__retarget_lock_acquire_recursive>:
 80061ee:	4770      	bx	lr

080061f0 <__retarget_lock_release_recursive>:
 80061f0:	4770      	bx	lr

080061f2 <memcpy>:
 80061f2:	440a      	add	r2, r1
 80061f4:	4291      	cmp	r1, r2
 80061f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80061fa:	d100      	bne.n	80061fe <memcpy+0xc>
 80061fc:	4770      	bx	lr
 80061fe:	b510      	push	{r4, lr}
 8006200:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006204:	4291      	cmp	r1, r2
 8006206:	f803 4f01 	strb.w	r4, [r3, #1]!
 800620a:	d1f9      	bne.n	8006200 <memcpy+0xe>
 800620c:	bd10      	pop	{r4, pc}
	...

08006210 <_free_r>:
 8006210:	b538      	push	{r3, r4, r5, lr}
 8006212:	4605      	mov	r5, r0
 8006214:	2900      	cmp	r1, #0
 8006216:	d040      	beq.n	800629a <_free_r+0x8a>
 8006218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800621c:	1f0c      	subs	r4, r1, #4
 800621e:	2b00      	cmp	r3, #0
 8006220:	bfb8      	it	lt
 8006222:	18e4      	addlt	r4, r4, r3
 8006224:	f000 f8de 	bl	80063e4 <__malloc_lock>
 8006228:	4a1c      	ldr	r2, [pc, #112]	@ (800629c <_free_r+0x8c>)
 800622a:	6813      	ldr	r3, [r2, #0]
 800622c:	b933      	cbnz	r3, 800623c <_free_r+0x2c>
 800622e:	6063      	str	r3, [r4, #4]
 8006230:	6014      	str	r4, [r2, #0]
 8006232:	4628      	mov	r0, r5
 8006234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006238:	f000 b8da 	b.w	80063f0 <__malloc_unlock>
 800623c:	42a3      	cmp	r3, r4
 800623e:	d908      	bls.n	8006252 <_free_r+0x42>
 8006240:	6820      	ldr	r0, [r4, #0]
 8006242:	1821      	adds	r1, r4, r0
 8006244:	428b      	cmp	r3, r1
 8006246:	bf01      	itttt	eq
 8006248:	6819      	ldreq	r1, [r3, #0]
 800624a:	685b      	ldreq	r3, [r3, #4]
 800624c:	1809      	addeq	r1, r1, r0
 800624e:	6021      	streq	r1, [r4, #0]
 8006250:	e7ed      	b.n	800622e <_free_r+0x1e>
 8006252:	461a      	mov	r2, r3
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	b10b      	cbz	r3, 800625c <_free_r+0x4c>
 8006258:	42a3      	cmp	r3, r4
 800625a:	d9fa      	bls.n	8006252 <_free_r+0x42>
 800625c:	6811      	ldr	r1, [r2, #0]
 800625e:	1850      	adds	r0, r2, r1
 8006260:	42a0      	cmp	r0, r4
 8006262:	d10b      	bne.n	800627c <_free_r+0x6c>
 8006264:	6820      	ldr	r0, [r4, #0]
 8006266:	4401      	add	r1, r0
 8006268:	1850      	adds	r0, r2, r1
 800626a:	4283      	cmp	r3, r0
 800626c:	6011      	str	r1, [r2, #0]
 800626e:	d1e0      	bne.n	8006232 <_free_r+0x22>
 8006270:	6818      	ldr	r0, [r3, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	4408      	add	r0, r1
 8006276:	6010      	str	r0, [r2, #0]
 8006278:	6053      	str	r3, [r2, #4]
 800627a:	e7da      	b.n	8006232 <_free_r+0x22>
 800627c:	d902      	bls.n	8006284 <_free_r+0x74>
 800627e:	230c      	movs	r3, #12
 8006280:	602b      	str	r3, [r5, #0]
 8006282:	e7d6      	b.n	8006232 <_free_r+0x22>
 8006284:	6820      	ldr	r0, [r4, #0]
 8006286:	1821      	adds	r1, r4, r0
 8006288:	428b      	cmp	r3, r1
 800628a:	bf01      	itttt	eq
 800628c:	6819      	ldreq	r1, [r3, #0]
 800628e:	685b      	ldreq	r3, [r3, #4]
 8006290:	1809      	addeq	r1, r1, r0
 8006292:	6021      	streq	r1, [r4, #0]
 8006294:	6063      	str	r3, [r4, #4]
 8006296:	6054      	str	r4, [r2, #4]
 8006298:	e7cb      	b.n	8006232 <_free_r+0x22>
 800629a:	bd38      	pop	{r3, r4, r5, pc}
 800629c:	20004008 	.word	0x20004008

080062a0 <sbrk_aligned>:
 80062a0:	b570      	push	{r4, r5, r6, lr}
 80062a2:	4e0f      	ldr	r6, [pc, #60]	@ (80062e0 <sbrk_aligned+0x40>)
 80062a4:	460c      	mov	r4, r1
 80062a6:	6831      	ldr	r1, [r6, #0]
 80062a8:	4605      	mov	r5, r0
 80062aa:	b911      	cbnz	r1, 80062b2 <sbrk_aligned+0x12>
 80062ac:	f000 fca2 	bl	8006bf4 <_sbrk_r>
 80062b0:	6030      	str	r0, [r6, #0]
 80062b2:	4621      	mov	r1, r4
 80062b4:	4628      	mov	r0, r5
 80062b6:	f000 fc9d 	bl	8006bf4 <_sbrk_r>
 80062ba:	1c43      	adds	r3, r0, #1
 80062bc:	d103      	bne.n	80062c6 <sbrk_aligned+0x26>
 80062be:	f04f 34ff 	mov.w	r4, #4294967295
 80062c2:	4620      	mov	r0, r4
 80062c4:	bd70      	pop	{r4, r5, r6, pc}
 80062c6:	1cc4      	adds	r4, r0, #3
 80062c8:	f024 0403 	bic.w	r4, r4, #3
 80062cc:	42a0      	cmp	r0, r4
 80062ce:	d0f8      	beq.n	80062c2 <sbrk_aligned+0x22>
 80062d0:	1a21      	subs	r1, r4, r0
 80062d2:	4628      	mov	r0, r5
 80062d4:	f000 fc8e 	bl	8006bf4 <_sbrk_r>
 80062d8:	3001      	adds	r0, #1
 80062da:	d1f2      	bne.n	80062c2 <sbrk_aligned+0x22>
 80062dc:	e7ef      	b.n	80062be <sbrk_aligned+0x1e>
 80062de:	bf00      	nop
 80062e0:	20004004 	.word	0x20004004

080062e4 <_malloc_r>:
 80062e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062e8:	1ccd      	adds	r5, r1, #3
 80062ea:	f025 0503 	bic.w	r5, r5, #3
 80062ee:	3508      	adds	r5, #8
 80062f0:	2d0c      	cmp	r5, #12
 80062f2:	bf38      	it	cc
 80062f4:	250c      	movcc	r5, #12
 80062f6:	2d00      	cmp	r5, #0
 80062f8:	4606      	mov	r6, r0
 80062fa:	db01      	blt.n	8006300 <_malloc_r+0x1c>
 80062fc:	42a9      	cmp	r1, r5
 80062fe:	d904      	bls.n	800630a <_malloc_r+0x26>
 8006300:	230c      	movs	r3, #12
 8006302:	6033      	str	r3, [r6, #0]
 8006304:	2000      	movs	r0, #0
 8006306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800630a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063e0 <_malloc_r+0xfc>
 800630e:	f000 f869 	bl	80063e4 <__malloc_lock>
 8006312:	f8d8 3000 	ldr.w	r3, [r8]
 8006316:	461c      	mov	r4, r3
 8006318:	bb44      	cbnz	r4, 800636c <_malloc_r+0x88>
 800631a:	4629      	mov	r1, r5
 800631c:	4630      	mov	r0, r6
 800631e:	f7ff ffbf 	bl	80062a0 <sbrk_aligned>
 8006322:	1c43      	adds	r3, r0, #1
 8006324:	4604      	mov	r4, r0
 8006326:	d158      	bne.n	80063da <_malloc_r+0xf6>
 8006328:	f8d8 4000 	ldr.w	r4, [r8]
 800632c:	4627      	mov	r7, r4
 800632e:	2f00      	cmp	r7, #0
 8006330:	d143      	bne.n	80063ba <_malloc_r+0xd6>
 8006332:	2c00      	cmp	r4, #0
 8006334:	d04b      	beq.n	80063ce <_malloc_r+0xea>
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	4639      	mov	r1, r7
 800633a:	4630      	mov	r0, r6
 800633c:	eb04 0903 	add.w	r9, r4, r3
 8006340:	f000 fc58 	bl	8006bf4 <_sbrk_r>
 8006344:	4581      	cmp	r9, r0
 8006346:	d142      	bne.n	80063ce <_malloc_r+0xea>
 8006348:	6821      	ldr	r1, [r4, #0]
 800634a:	4630      	mov	r0, r6
 800634c:	1a6d      	subs	r5, r5, r1
 800634e:	4629      	mov	r1, r5
 8006350:	f7ff ffa6 	bl	80062a0 <sbrk_aligned>
 8006354:	3001      	adds	r0, #1
 8006356:	d03a      	beq.n	80063ce <_malloc_r+0xea>
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	442b      	add	r3, r5
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	f8d8 3000 	ldr.w	r3, [r8]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	bb62      	cbnz	r2, 80063c0 <_malloc_r+0xdc>
 8006366:	f8c8 7000 	str.w	r7, [r8]
 800636a:	e00f      	b.n	800638c <_malloc_r+0xa8>
 800636c:	6822      	ldr	r2, [r4, #0]
 800636e:	1b52      	subs	r2, r2, r5
 8006370:	d420      	bmi.n	80063b4 <_malloc_r+0xd0>
 8006372:	2a0b      	cmp	r2, #11
 8006374:	d917      	bls.n	80063a6 <_malloc_r+0xc2>
 8006376:	1961      	adds	r1, r4, r5
 8006378:	42a3      	cmp	r3, r4
 800637a:	6025      	str	r5, [r4, #0]
 800637c:	bf18      	it	ne
 800637e:	6059      	strne	r1, [r3, #4]
 8006380:	6863      	ldr	r3, [r4, #4]
 8006382:	bf08      	it	eq
 8006384:	f8c8 1000 	streq.w	r1, [r8]
 8006388:	5162      	str	r2, [r4, r5]
 800638a:	604b      	str	r3, [r1, #4]
 800638c:	4630      	mov	r0, r6
 800638e:	f000 f82f 	bl	80063f0 <__malloc_unlock>
 8006392:	f104 000b 	add.w	r0, r4, #11
 8006396:	1d23      	adds	r3, r4, #4
 8006398:	f020 0007 	bic.w	r0, r0, #7
 800639c:	1ac2      	subs	r2, r0, r3
 800639e:	bf1c      	itt	ne
 80063a0:	1a1b      	subne	r3, r3, r0
 80063a2:	50a3      	strne	r3, [r4, r2]
 80063a4:	e7af      	b.n	8006306 <_malloc_r+0x22>
 80063a6:	6862      	ldr	r2, [r4, #4]
 80063a8:	42a3      	cmp	r3, r4
 80063aa:	bf0c      	ite	eq
 80063ac:	f8c8 2000 	streq.w	r2, [r8]
 80063b0:	605a      	strne	r2, [r3, #4]
 80063b2:	e7eb      	b.n	800638c <_malloc_r+0xa8>
 80063b4:	4623      	mov	r3, r4
 80063b6:	6864      	ldr	r4, [r4, #4]
 80063b8:	e7ae      	b.n	8006318 <_malloc_r+0x34>
 80063ba:	463c      	mov	r4, r7
 80063bc:	687f      	ldr	r7, [r7, #4]
 80063be:	e7b6      	b.n	800632e <_malloc_r+0x4a>
 80063c0:	461a      	mov	r2, r3
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	42a3      	cmp	r3, r4
 80063c6:	d1fb      	bne.n	80063c0 <_malloc_r+0xdc>
 80063c8:	2300      	movs	r3, #0
 80063ca:	6053      	str	r3, [r2, #4]
 80063cc:	e7de      	b.n	800638c <_malloc_r+0xa8>
 80063ce:	230c      	movs	r3, #12
 80063d0:	4630      	mov	r0, r6
 80063d2:	6033      	str	r3, [r6, #0]
 80063d4:	f000 f80c 	bl	80063f0 <__malloc_unlock>
 80063d8:	e794      	b.n	8006304 <_malloc_r+0x20>
 80063da:	6005      	str	r5, [r0, #0]
 80063dc:	e7d6      	b.n	800638c <_malloc_r+0xa8>
 80063de:	bf00      	nop
 80063e0:	20004008 	.word	0x20004008

080063e4 <__malloc_lock>:
 80063e4:	4801      	ldr	r0, [pc, #4]	@ (80063ec <__malloc_lock+0x8>)
 80063e6:	f7ff bf02 	b.w	80061ee <__retarget_lock_acquire_recursive>
 80063ea:	bf00      	nop
 80063ec:	20004000 	.word	0x20004000

080063f0 <__malloc_unlock>:
 80063f0:	4801      	ldr	r0, [pc, #4]	@ (80063f8 <__malloc_unlock+0x8>)
 80063f2:	f7ff befd 	b.w	80061f0 <__retarget_lock_release_recursive>
 80063f6:	bf00      	nop
 80063f8:	20004000 	.word	0x20004000

080063fc <__sfputc_r>:
 80063fc:	6893      	ldr	r3, [r2, #8]
 80063fe:	b410      	push	{r4}
 8006400:	3b01      	subs	r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	6093      	str	r3, [r2, #8]
 8006406:	da07      	bge.n	8006418 <__sfputc_r+0x1c>
 8006408:	6994      	ldr	r4, [r2, #24]
 800640a:	42a3      	cmp	r3, r4
 800640c:	db01      	blt.n	8006412 <__sfputc_r+0x16>
 800640e:	290a      	cmp	r1, #10
 8006410:	d102      	bne.n	8006418 <__sfputc_r+0x1c>
 8006412:	bc10      	pop	{r4}
 8006414:	f7ff bddd 	b.w	8005fd2 <__swbuf_r>
 8006418:	6813      	ldr	r3, [r2, #0]
 800641a:	1c58      	adds	r0, r3, #1
 800641c:	6010      	str	r0, [r2, #0]
 800641e:	7019      	strb	r1, [r3, #0]
 8006420:	4608      	mov	r0, r1
 8006422:	bc10      	pop	{r4}
 8006424:	4770      	bx	lr

08006426 <__sfputs_r>:
 8006426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006428:	4606      	mov	r6, r0
 800642a:	460f      	mov	r7, r1
 800642c:	4614      	mov	r4, r2
 800642e:	18d5      	adds	r5, r2, r3
 8006430:	42ac      	cmp	r4, r5
 8006432:	d101      	bne.n	8006438 <__sfputs_r+0x12>
 8006434:	2000      	movs	r0, #0
 8006436:	e007      	b.n	8006448 <__sfputs_r+0x22>
 8006438:	463a      	mov	r2, r7
 800643a:	4630      	mov	r0, r6
 800643c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006440:	f7ff ffdc 	bl	80063fc <__sfputc_r>
 8006444:	1c43      	adds	r3, r0, #1
 8006446:	d1f3      	bne.n	8006430 <__sfputs_r+0xa>
 8006448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800644c <_vfiprintf_r>:
 800644c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006450:	460d      	mov	r5, r1
 8006452:	4614      	mov	r4, r2
 8006454:	4698      	mov	r8, r3
 8006456:	4606      	mov	r6, r0
 8006458:	b09d      	sub	sp, #116	@ 0x74
 800645a:	b118      	cbz	r0, 8006464 <_vfiprintf_r+0x18>
 800645c:	6a03      	ldr	r3, [r0, #32]
 800645e:	b90b      	cbnz	r3, 8006464 <_vfiprintf_r+0x18>
 8006460:	f7ff fcce 	bl	8005e00 <__sinit>
 8006464:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006466:	07d9      	lsls	r1, r3, #31
 8006468:	d405      	bmi.n	8006476 <_vfiprintf_r+0x2a>
 800646a:	89ab      	ldrh	r3, [r5, #12]
 800646c:	059a      	lsls	r2, r3, #22
 800646e:	d402      	bmi.n	8006476 <_vfiprintf_r+0x2a>
 8006470:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006472:	f7ff febc 	bl	80061ee <__retarget_lock_acquire_recursive>
 8006476:	89ab      	ldrh	r3, [r5, #12]
 8006478:	071b      	lsls	r3, r3, #28
 800647a:	d501      	bpl.n	8006480 <_vfiprintf_r+0x34>
 800647c:	692b      	ldr	r3, [r5, #16]
 800647e:	b99b      	cbnz	r3, 80064a8 <_vfiprintf_r+0x5c>
 8006480:	4629      	mov	r1, r5
 8006482:	4630      	mov	r0, r6
 8006484:	f7ff fde4 	bl	8006050 <__swsetup_r>
 8006488:	b170      	cbz	r0, 80064a8 <_vfiprintf_r+0x5c>
 800648a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800648c:	07dc      	lsls	r4, r3, #31
 800648e:	d504      	bpl.n	800649a <_vfiprintf_r+0x4e>
 8006490:	f04f 30ff 	mov.w	r0, #4294967295
 8006494:	b01d      	add	sp, #116	@ 0x74
 8006496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649a:	89ab      	ldrh	r3, [r5, #12]
 800649c:	0598      	lsls	r0, r3, #22
 800649e:	d4f7      	bmi.n	8006490 <_vfiprintf_r+0x44>
 80064a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064a2:	f7ff fea5 	bl	80061f0 <__retarget_lock_release_recursive>
 80064a6:	e7f3      	b.n	8006490 <_vfiprintf_r+0x44>
 80064a8:	2300      	movs	r3, #0
 80064aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80064ac:	2320      	movs	r3, #32
 80064ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80064b2:	2330      	movs	r3, #48	@ 0x30
 80064b4:	f04f 0901 	mov.w	r9, #1
 80064b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80064bc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006668 <_vfiprintf_r+0x21c>
 80064c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80064c4:	4623      	mov	r3, r4
 80064c6:	469a      	mov	sl, r3
 80064c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064cc:	b10a      	cbz	r2, 80064d2 <_vfiprintf_r+0x86>
 80064ce:	2a25      	cmp	r2, #37	@ 0x25
 80064d0:	d1f9      	bne.n	80064c6 <_vfiprintf_r+0x7a>
 80064d2:	ebba 0b04 	subs.w	fp, sl, r4
 80064d6:	d00b      	beq.n	80064f0 <_vfiprintf_r+0xa4>
 80064d8:	465b      	mov	r3, fp
 80064da:	4622      	mov	r2, r4
 80064dc:	4629      	mov	r1, r5
 80064de:	4630      	mov	r0, r6
 80064e0:	f7ff ffa1 	bl	8006426 <__sfputs_r>
 80064e4:	3001      	adds	r0, #1
 80064e6:	f000 80a7 	beq.w	8006638 <_vfiprintf_r+0x1ec>
 80064ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064ec:	445a      	add	r2, fp
 80064ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80064f0:	f89a 3000 	ldrb.w	r3, [sl]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 809f 	beq.w	8006638 <_vfiprintf_r+0x1ec>
 80064fa:	2300      	movs	r3, #0
 80064fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006500:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006504:	f10a 0a01 	add.w	sl, sl, #1
 8006508:	9304      	str	r3, [sp, #16]
 800650a:	9307      	str	r3, [sp, #28]
 800650c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006510:	931a      	str	r3, [sp, #104]	@ 0x68
 8006512:	4654      	mov	r4, sl
 8006514:	2205      	movs	r2, #5
 8006516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800651a:	4853      	ldr	r0, [pc, #332]	@ (8006668 <_vfiprintf_r+0x21c>)
 800651c:	f000 fb7a 	bl	8006c14 <memchr>
 8006520:	9a04      	ldr	r2, [sp, #16]
 8006522:	b9d8      	cbnz	r0, 800655c <_vfiprintf_r+0x110>
 8006524:	06d1      	lsls	r1, r2, #27
 8006526:	bf44      	itt	mi
 8006528:	2320      	movmi	r3, #32
 800652a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800652e:	0713      	lsls	r3, r2, #28
 8006530:	bf44      	itt	mi
 8006532:	232b      	movmi	r3, #43	@ 0x2b
 8006534:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006538:	f89a 3000 	ldrb.w	r3, [sl]
 800653c:	2b2a      	cmp	r3, #42	@ 0x2a
 800653e:	d015      	beq.n	800656c <_vfiprintf_r+0x120>
 8006540:	4654      	mov	r4, sl
 8006542:	2000      	movs	r0, #0
 8006544:	f04f 0c0a 	mov.w	ip, #10
 8006548:	9a07      	ldr	r2, [sp, #28]
 800654a:	4621      	mov	r1, r4
 800654c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006550:	3b30      	subs	r3, #48	@ 0x30
 8006552:	2b09      	cmp	r3, #9
 8006554:	d94b      	bls.n	80065ee <_vfiprintf_r+0x1a2>
 8006556:	b1b0      	cbz	r0, 8006586 <_vfiprintf_r+0x13a>
 8006558:	9207      	str	r2, [sp, #28]
 800655a:	e014      	b.n	8006586 <_vfiprintf_r+0x13a>
 800655c:	eba0 0308 	sub.w	r3, r0, r8
 8006560:	fa09 f303 	lsl.w	r3, r9, r3
 8006564:	4313      	orrs	r3, r2
 8006566:	46a2      	mov	sl, r4
 8006568:	9304      	str	r3, [sp, #16]
 800656a:	e7d2      	b.n	8006512 <_vfiprintf_r+0xc6>
 800656c:	9b03      	ldr	r3, [sp, #12]
 800656e:	1d19      	adds	r1, r3, #4
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	9103      	str	r1, [sp, #12]
 8006574:	2b00      	cmp	r3, #0
 8006576:	bfbb      	ittet	lt
 8006578:	425b      	neglt	r3, r3
 800657a:	f042 0202 	orrlt.w	r2, r2, #2
 800657e:	9307      	strge	r3, [sp, #28]
 8006580:	9307      	strlt	r3, [sp, #28]
 8006582:	bfb8      	it	lt
 8006584:	9204      	strlt	r2, [sp, #16]
 8006586:	7823      	ldrb	r3, [r4, #0]
 8006588:	2b2e      	cmp	r3, #46	@ 0x2e
 800658a:	d10a      	bne.n	80065a2 <_vfiprintf_r+0x156>
 800658c:	7863      	ldrb	r3, [r4, #1]
 800658e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006590:	d132      	bne.n	80065f8 <_vfiprintf_r+0x1ac>
 8006592:	9b03      	ldr	r3, [sp, #12]
 8006594:	3402      	adds	r4, #2
 8006596:	1d1a      	adds	r2, r3, #4
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	9203      	str	r2, [sp, #12]
 800659c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80065a0:	9305      	str	r3, [sp, #20]
 80065a2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800666c <_vfiprintf_r+0x220>
 80065a6:	2203      	movs	r2, #3
 80065a8:	4650      	mov	r0, sl
 80065aa:	7821      	ldrb	r1, [r4, #0]
 80065ac:	f000 fb32 	bl	8006c14 <memchr>
 80065b0:	b138      	cbz	r0, 80065c2 <_vfiprintf_r+0x176>
 80065b2:	2240      	movs	r2, #64	@ 0x40
 80065b4:	9b04      	ldr	r3, [sp, #16]
 80065b6:	eba0 000a 	sub.w	r0, r0, sl
 80065ba:	4082      	lsls	r2, r0
 80065bc:	4313      	orrs	r3, r2
 80065be:	3401      	adds	r4, #1
 80065c0:	9304      	str	r3, [sp, #16]
 80065c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065c6:	2206      	movs	r2, #6
 80065c8:	4829      	ldr	r0, [pc, #164]	@ (8006670 <_vfiprintf_r+0x224>)
 80065ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80065ce:	f000 fb21 	bl	8006c14 <memchr>
 80065d2:	2800      	cmp	r0, #0
 80065d4:	d03f      	beq.n	8006656 <_vfiprintf_r+0x20a>
 80065d6:	4b27      	ldr	r3, [pc, #156]	@ (8006674 <_vfiprintf_r+0x228>)
 80065d8:	bb1b      	cbnz	r3, 8006622 <_vfiprintf_r+0x1d6>
 80065da:	9b03      	ldr	r3, [sp, #12]
 80065dc:	3307      	adds	r3, #7
 80065de:	f023 0307 	bic.w	r3, r3, #7
 80065e2:	3308      	adds	r3, #8
 80065e4:	9303      	str	r3, [sp, #12]
 80065e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065e8:	443b      	add	r3, r7
 80065ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80065ec:	e76a      	b.n	80064c4 <_vfiprintf_r+0x78>
 80065ee:	460c      	mov	r4, r1
 80065f0:	2001      	movs	r0, #1
 80065f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80065f6:	e7a8      	b.n	800654a <_vfiprintf_r+0xfe>
 80065f8:	2300      	movs	r3, #0
 80065fa:	f04f 0c0a 	mov.w	ip, #10
 80065fe:	4619      	mov	r1, r3
 8006600:	3401      	adds	r4, #1
 8006602:	9305      	str	r3, [sp, #20]
 8006604:	4620      	mov	r0, r4
 8006606:	f810 2b01 	ldrb.w	r2, [r0], #1
 800660a:	3a30      	subs	r2, #48	@ 0x30
 800660c:	2a09      	cmp	r2, #9
 800660e:	d903      	bls.n	8006618 <_vfiprintf_r+0x1cc>
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0c6      	beq.n	80065a2 <_vfiprintf_r+0x156>
 8006614:	9105      	str	r1, [sp, #20]
 8006616:	e7c4      	b.n	80065a2 <_vfiprintf_r+0x156>
 8006618:	4604      	mov	r4, r0
 800661a:	2301      	movs	r3, #1
 800661c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006620:	e7f0      	b.n	8006604 <_vfiprintf_r+0x1b8>
 8006622:	ab03      	add	r3, sp, #12
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	462a      	mov	r2, r5
 8006628:	4630      	mov	r0, r6
 800662a:	4b13      	ldr	r3, [pc, #76]	@ (8006678 <_vfiprintf_r+0x22c>)
 800662c:	a904      	add	r1, sp, #16
 800662e:	f3af 8000 	nop.w
 8006632:	4607      	mov	r7, r0
 8006634:	1c78      	adds	r0, r7, #1
 8006636:	d1d6      	bne.n	80065e6 <_vfiprintf_r+0x19a>
 8006638:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800663a:	07d9      	lsls	r1, r3, #31
 800663c:	d405      	bmi.n	800664a <_vfiprintf_r+0x1fe>
 800663e:	89ab      	ldrh	r3, [r5, #12]
 8006640:	059a      	lsls	r2, r3, #22
 8006642:	d402      	bmi.n	800664a <_vfiprintf_r+0x1fe>
 8006644:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006646:	f7ff fdd3 	bl	80061f0 <__retarget_lock_release_recursive>
 800664a:	89ab      	ldrh	r3, [r5, #12]
 800664c:	065b      	lsls	r3, r3, #25
 800664e:	f53f af1f 	bmi.w	8006490 <_vfiprintf_r+0x44>
 8006652:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006654:	e71e      	b.n	8006494 <_vfiprintf_r+0x48>
 8006656:	ab03      	add	r3, sp, #12
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	462a      	mov	r2, r5
 800665c:	4630      	mov	r0, r6
 800665e:	4b06      	ldr	r3, [pc, #24]	@ (8006678 <_vfiprintf_r+0x22c>)
 8006660:	a904      	add	r1, sp, #16
 8006662:	f000 f87d 	bl	8006760 <_printf_i>
 8006666:	e7e4      	b.n	8006632 <_vfiprintf_r+0x1e6>
 8006668:	08006f26 	.word	0x08006f26
 800666c:	08006f2c 	.word	0x08006f2c
 8006670:	08006f30 	.word	0x08006f30
 8006674:	00000000 	.word	0x00000000
 8006678:	08006427 	.word	0x08006427

0800667c <_printf_common>:
 800667c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006680:	4616      	mov	r6, r2
 8006682:	4698      	mov	r8, r3
 8006684:	688a      	ldr	r2, [r1, #8]
 8006686:	690b      	ldr	r3, [r1, #16]
 8006688:	4607      	mov	r7, r0
 800668a:	4293      	cmp	r3, r2
 800668c:	bfb8      	it	lt
 800668e:	4613      	movlt	r3, r2
 8006690:	6033      	str	r3, [r6, #0]
 8006692:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006696:	460c      	mov	r4, r1
 8006698:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800669c:	b10a      	cbz	r2, 80066a2 <_printf_common+0x26>
 800669e:	3301      	adds	r3, #1
 80066a0:	6033      	str	r3, [r6, #0]
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	0699      	lsls	r1, r3, #26
 80066a6:	bf42      	ittt	mi
 80066a8:	6833      	ldrmi	r3, [r6, #0]
 80066aa:	3302      	addmi	r3, #2
 80066ac:	6033      	strmi	r3, [r6, #0]
 80066ae:	6825      	ldr	r5, [r4, #0]
 80066b0:	f015 0506 	ands.w	r5, r5, #6
 80066b4:	d106      	bne.n	80066c4 <_printf_common+0x48>
 80066b6:	f104 0a19 	add.w	sl, r4, #25
 80066ba:	68e3      	ldr	r3, [r4, #12]
 80066bc:	6832      	ldr	r2, [r6, #0]
 80066be:	1a9b      	subs	r3, r3, r2
 80066c0:	42ab      	cmp	r3, r5
 80066c2:	dc2b      	bgt.n	800671c <_printf_common+0xa0>
 80066c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80066c8:	6822      	ldr	r2, [r4, #0]
 80066ca:	3b00      	subs	r3, #0
 80066cc:	bf18      	it	ne
 80066ce:	2301      	movne	r3, #1
 80066d0:	0692      	lsls	r2, r2, #26
 80066d2:	d430      	bmi.n	8006736 <_printf_common+0xba>
 80066d4:	4641      	mov	r1, r8
 80066d6:	4638      	mov	r0, r7
 80066d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80066dc:	47c8      	blx	r9
 80066de:	3001      	adds	r0, #1
 80066e0:	d023      	beq.n	800672a <_printf_common+0xae>
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	6922      	ldr	r2, [r4, #16]
 80066e6:	f003 0306 	and.w	r3, r3, #6
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	bf14      	ite	ne
 80066ee:	2500      	movne	r5, #0
 80066f0:	6833      	ldreq	r3, [r6, #0]
 80066f2:	f04f 0600 	mov.w	r6, #0
 80066f6:	bf08      	it	eq
 80066f8:	68e5      	ldreq	r5, [r4, #12]
 80066fa:	f104 041a 	add.w	r4, r4, #26
 80066fe:	bf08      	it	eq
 8006700:	1aed      	subeq	r5, r5, r3
 8006702:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006706:	bf08      	it	eq
 8006708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800670c:	4293      	cmp	r3, r2
 800670e:	bfc4      	itt	gt
 8006710:	1a9b      	subgt	r3, r3, r2
 8006712:	18ed      	addgt	r5, r5, r3
 8006714:	42b5      	cmp	r5, r6
 8006716:	d11a      	bne.n	800674e <_printf_common+0xd2>
 8006718:	2000      	movs	r0, #0
 800671a:	e008      	b.n	800672e <_printf_common+0xb2>
 800671c:	2301      	movs	r3, #1
 800671e:	4652      	mov	r2, sl
 8006720:	4641      	mov	r1, r8
 8006722:	4638      	mov	r0, r7
 8006724:	47c8      	blx	r9
 8006726:	3001      	adds	r0, #1
 8006728:	d103      	bne.n	8006732 <_printf_common+0xb6>
 800672a:	f04f 30ff 	mov.w	r0, #4294967295
 800672e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006732:	3501      	adds	r5, #1
 8006734:	e7c1      	b.n	80066ba <_printf_common+0x3e>
 8006736:	2030      	movs	r0, #48	@ 0x30
 8006738:	18e1      	adds	r1, r4, r3
 800673a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800673e:	1c5a      	adds	r2, r3, #1
 8006740:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006744:	4422      	add	r2, r4
 8006746:	3302      	adds	r3, #2
 8006748:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800674c:	e7c2      	b.n	80066d4 <_printf_common+0x58>
 800674e:	2301      	movs	r3, #1
 8006750:	4622      	mov	r2, r4
 8006752:	4641      	mov	r1, r8
 8006754:	4638      	mov	r0, r7
 8006756:	47c8      	blx	r9
 8006758:	3001      	adds	r0, #1
 800675a:	d0e6      	beq.n	800672a <_printf_common+0xae>
 800675c:	3601      	adds	r6, #1
 800675e:	e7d9      	b.n	8006714 <_printf_common+0x98>

08006760 <_printf_i>:
 8006760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006764:	7e0f      	ldrb	r7, [r1, #24]
 8006766:	4691      	mov	r9, r2
 8006768:	2f78      	cmp	r7, #120	@ 0x78
 800676a:	4680      	mov	r8, r0
 800676c:	460c      	mov	r4, r1
 800676e:	469a      	mov	sl, r3
 8006770:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006772:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006776:	d807      	bhi.n	8006788 <_printf_i+0x28>
 8006778:	2f62      	cmp	r7, #98	@ 0x62
 800677a:	d80a      	bhi.n	8006792 <_printf_i+0x32>
 800677c:	2f00      	cmp	r7, #0
 800677e:	f000 80d1 	beq.w	8006924 <_printf_i+0x1c4>
 8006782:	2f58      	cmp	r7, #88	@ 0x58
 8006784:	f000 80b8 	beq.w	80068f8 <_printf_i+0x198>
 8006788:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800678c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006790:	e03a      	b.n	8006808 <_printf_i+0xa8>
 8006792:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006796:	2b15      	cmp	r3, #21
 8006798:	d8f6      	bhi.n	8006788 <_printf_i+0x28>
 800679a:	a101      	add	r1, pc, #4	@ (adr r1, 80067a0 <_printf_i+0x40>)
 800679c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067a0:	080067f9 	.word	0x080067f9
 80067a4:	0800680d 	.word	0x0800680d
 80067a8:	08006789 	.word	0x08006789
 80067ac:	08006789 	.word	0x08006789
 80067b0:	08006789 	.word	0x08006789
 80067b4:	08006789 	.word	0x08006789
 80067b8:	0800680d 	.word	0x0800680d
 80067bc:	08006789 	.word	0x08006789
 80067c0:	08006789 	.word	0x08006789
 80067c4:	08006789 	.word	0x08006789
 80067c8:	08006789 	.word	0x08006789
 80067cc:	0800690b 	.word	0x0800690b
 80067d0:	08006837 	.word	0x08006837
 80067d4:	080068c5 	.word	0x080068c5
 80067d8:	08006789 	.word	0x08006789
 80067dc:	08006789 	.word	0x08006789
 80067e0:	0800692d 	.word	0x0800692d
 80067e4:	08006789 	.word	0x08006789
 80067e8:	08006837 	.word	0x08006837
 80067ec:	08006789 	.word	0x08006789
 80067f0:	08006789 	.word	0x08006789
 80067f4:	080068cd 	.word	0x080068cd
 80067f8:	6833      	ldr	r3, [r6, #0]
 80067fa:	1d1a      	adds	r2, r3, #4
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6032      	str	r2, [r6, #0]
 8006800:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006804:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006808:	2301      	movs	r3, #1
 800680a:	e09c      	b.n	8006946 <_printf_i+0x1e6>
 800680c:	6833      	ldr	r3, [r6, #0]
 800680e:	6820      	ldr	r0, [r4, #0]
 8006810:	1d19      	adds	r1, r3, #4
 8006812:	6031      	str	r1, [r6, #0]
 8006814:	0606      	lsls	r6, r0, #24
 8006816:	d501      	bpl.n	800681c <_printf_i+0xbc>
 8006818:	681d      	ldr	r5, [r3, #0]
 800681a:	e003      	b.n	8006824 <_printf_i+0xc4>
 800681c:	0645      	lsls	r5, r0, #25
 800681e:	d5fb      	bpl.n	8006818 <_printf_i+0xb8>
 8006820:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006824:	2d00      	cmp	r5, #0
 8006826:	da03      	bge.n	8006830 <_printf_i+0xd0>
 8006828:	232d      	movs	r3, #45	@ 0x2d
 800682a:	426d      	negs	r5, r5
 800682c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006830:	230a      	movs	r3, #10
 8006832:	4858      	ldr	r0, [pc, #352]	@ (8006994 <_printf_i+0x234>)
 8006834:	e011      	b.n	800685a <_printf_i+0xfa>
 8006836:	6821      	ldr	r1, [r4, #0]
 8006838:	6833      	ldr	r3, [r6, #0]
 800683a:	0608      	lsls	r0, r1, #24
 800683c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006840:	d402      	bmi.n	8006848 <_printf_i+0xe8>
 8006842:	0649      	lsls	r1, r1, #25
 8006844:	bf48      	it	mi
 8006846:	b2ad      	uxthmi	r5, r5
 8006848:	2f6f      	cmp	r7, #111	@ 0x6f
 800684a:	6033      	str	r3, [r6, #0]
 800684c:	bf14      	ite	ne
 800684e:	230a      	movne	r3, #10
 8006850:	2308      	moveq	r3, #8
 8006852:	4850      	ldr	r0, [pc, #320]	@ (8006994 <_printf_i+0x234>)
 8006854:	2100      	movs	r1, #0
 8006856:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800685a:	6866      	ldr	r6, [r4, #4]
 800685c:	2e00      	cmp	r6, #0
 800685e:	60a6      	str	r6, [r4, #8]
 8006860:	db05      	blt.n	800686e <_printf_i+0x10e>
 8006862:	6821      	ldr	r1, [r4, #0]
 8006864:	432e      	orrs	r6, r5
 8006866:	f021 0104 	bic.w	r1, r1, #4
 800686a:	6021      	str	r1, [r4, #0]
 800686c:	d04b      	beq.n	8006906 <_printf_i+0x1a6>
 800686e:	4616      	mov	r6, r2
 8006870:	fbb5 f1f3 	udiv	r1, r5, r3
 8006874:	fb03 5711 	mls	r7, r3, r1, r5
 8006878:	5dc7      	ldrb	r7, [r0, r7]
 800687a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800687e:	462f      	mov	r7, r5
 8006880:	42bb      	cmp	r3, r7
 8006882:	460d      	mov	r5, r1
 8006884:	d9f4      	bls.n	8006870 <_printf_i+0x110>
 8006886:	2b08      	cmp	r3, #8
 8006888:	d10b      	bne.n	80068a2 <_printf_i+0x142>
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	07df      	lsls	r7, r3, #31
 800688e:	d508      	bpl.n	80068a2 <_printf_i+0x142>
 8006890:	6923      	ldr	r3, [r4, #16]
 8006892:	6861      	ldr	r1, [r4, #4]
 8006894:	4299      	cmp	r1, r3
 8006896:	bfde      	ittt	le
 8006898:	2330      	movle	r3, #48	@ 0x30
 800689a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800689e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068a2:	1b92      	subs	r2, r2, r6
 80068a4:	6122      	str	r2, [r4, #16]
 80068a6:	464b      	mov	r3, r9
 80068a8:	4621      	mov	r1, r4
 80068aa:	4640      	mov	r0, r8
 80068ac:	f8cd a000 	str.w	sl, [sp]
 80068b0:	aa03      	add	r2, sp, #12
 80068b2:	f7ff fee3 	bl	800667c <_printf_common>
 80068b6:	3001      	adds	r0, #1
 80068b8:	d14a      	bne.n	8006950 <_printf_i+0x1f0>
 80068ba:	f04f 30ff 	mov.w	r0, #4294967295
 80068be:	b004      	add	sp, #16
 80068c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	f043 0320 	orr.w	r3, r3, #32
 80068ca:	6023      	str	r3, [r4, #0]
 80068cc:	2778      	movs	r7, #120	@ 0x78
 80068ce:	4832      	ldr	r0, [pc, #200]	@ (8006998 <_printf_i+0x238>)
 80068d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80068d4:	6823      	ldr	r3, [r4, #0]
 80068d6:	6831      	ldr	r1, [r6, #0]
 80068d8:	061f      	lsls	r7, r3, #24
 80068da:	f851 5b04 	ldr.w	r5, [r1], #4
 80068de:	d402      	bmi.n	80068e6 <_printf_i+0x186>
 80068e0:	065f      	lsls	r7, r3, #25
 80068e2:	bf48      	it	mi
 80068e4:	b2ad      	uxthmi	r5, r5
 80068e6:	6031      	str	r1, [r6, #0]
 80068e8:	07d9      	lsls	r1, r3, #31
 80068ea:	bf44      	itt	mi
 80068ec:	f043 0320 	orrmi.w	r3, r3, #32
 80068f0:	6023      	strmi	r3, [r4, #0]
 80068f2:	b11d      	cbz	r5, 80068fc <_printf_i+0x19c>
 80068f4:	2310      	movs	r3, #16
 80068f6:	e7ad      	b.n	8006854 <_printf_i+0xf4>
 80068f8:	4826      	ldr	r0, [pc, #152]	@ (8006994 <_printf_i+0x234>)
 80068fa:	e7e9      	b.n	80068d0 <_printf_i+0x170>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	f023 0320 	bic.w	r3, r3, #32
 8006902:	6023      	str	r3, [r4, #0]
 8006904:	e7f6      	b.n	80068f4 <_printf_i+0x194>
 8006906:	4616      	mov	r6, r2
 8006908:	e7bd      	b.n	8006886 <_printf_i+0x126>
 800690a:	6833      	ldr	r3, [r6, #0]
 800690c:	6825      	ldr	r5, [r4, #0]
 800690e:	1d18      	adds	r0, r3, #4
 8006910:	6961      	ldr	r1, [r4, #20]
 8006912:	6030      	str	r0, [r6, #0]
 8006914:	062e      	lsls	r6, r5, #24
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	d501      	bpl.n	800691e <_printf_i+0x1be>
 800691a:	6019      	str	r1, [r3, #0]
 800691c:	e002      	b.n	8006924 <_printf_i+0x1c4>
 800691e:	0668      	lsls	r0, r5, #25
 8006920:	d5fb      	bpl.n	800691a <_printf_i+0x1ba>
 8006922:	8019      	strh	r1, [r3, #0]
 8006924:	2300      	movs	r3, #0
 8006926:	4616      	mov	r6, r2
 8006928:	6123      	str	r3, [r4, #16]
 800692a:	e7bc      	b.n	80068a6 <_printf_i+0x146>
 800692c:	6833      	ldr	r3, [r6, #0]
 800692e:	2100      	movs	r1, #0
 8006930:	1d1a      	adds	r2, r3, #4
 8006932:	6032      	str	r2, [r6, #0]
 8006934:	681e      	ldr	r6, [r3, #0]
 8006936:	6862      	ldr	r2, [r4, #4]
 8006938:	4630      	mov	r0, r6
 800693a:	f000 f96b 	bl	8006c14 <memchr>
 800693e:	b108      	cbz	r0, 8006944 <_printf_i+0x1e4>
 8006940:	1b80      	subs	r0, r0, r6
 8006942:	6060      	str	r0, [r4, #4]
 8006944:	6863      	ldr	r3, [r4, #4]
 8006946:	6123      	str	r3, [r4, #16]
 8006948:	2300      	movs	r3, #0
 800694a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800694e:	e7aa      	b.n	80068a6 <_printf_i+0x146>
 8006950:	4632      	mov	r2, r6
 8006952:	4649      	mov	r1, r9
 8006954:	4640      	mov	r0, r8
 8006956:	6923      	ldr	r3, [r4, #16]
 8006958:	47d0      	blx	sl
 800695a:	3001      	adds	r0, #1
 800695c:	d0ad      	beq.n	80068ba <_printf_i+0x15a>
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	079b      	lsls	r3, r3, #30
 8006962:	d413      	bmi.n	800698c <_printf_i+0x22c>
 8006964:	68e0      	ldr	r0, [r4, #12]
 8006966:	9b03      	ldr	r3, [sp, #12]
 8006968:	4298      	cmp	r0, r3
 800696a:	bfb8      	it	lt
 800696c:	4618      	movlt	r0, r3
 800696e:	e7a6      	b.n	80068be <_printf_i+0x15e>
 8006970:	2301      	movs	r3, #1
 8006972:	4632      	mov	r2, r6
 8006974:	4649      	mov	r1, r9
 8006976:	4640      	mov	r0, r8
 8006978:	47d0      	blx	sl
 800697a:	3001      	adds	r0, #1
 800697c:	d09d      	beq.n	80068ba <_printf_i+0x15a>
 800697e:	3501      	adds	r5, #1
 8006980:	68e3      	ldr	r3, [r4, #12]
 8006982:	9903      	ldr	r1, [sp, #12]
 8006984:	1a5b      	subs	r3, r3, r1
 8006986:	42ab      	cmp	r3, r5
 8006988:	dcf2      	bgt.n	8006970 <_printf_i+0x210>
 800698a:	e7eb      	b.n	8006964 <_printf_i+0x204>
 800698c:	2500      	movs	r5, #0
 800698e:	f104 0619 	add.w	r6, r4, #25
 8006992:	e7f5      	b.n	8006980 <_printf_i+0x220>
 8006994:	08006f37 	.word	0x08006f37
 8006998:	08006f48 	.word	0x08006f48

0800699c <__sflush_r>:
 800699c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a2:	0716      	lsls	r6, r2, #28
 80069a4:	4605      	mov	r5, r0
 80069a6:	460c      	mov	r4, r1
 80069a8:	d454      	bmi.n	8006a54 <__sflush_r+0xb8>
 80069aa:	684b      	ldr	r3, [r1, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	dc02      	bgt.n	80069b6 <__sflush_r+0x1a>
 80069b0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	dd48      	ble.n	8006a48 <__sflush_r+0xac>
 80069b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069b8:	2e00      	cmp	r6, #0
 80069ba:	d045      	beq.n	8006a48 <__sflush_r+0xac>
 80069bc:	2300      	movs	r3, #0
 80069be:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80069c2:	682f      	ldr	r7, [r5, #0]
 80069c4:	6a21      	ldr	r1, [r4, #32]
 80069c6:	602b      	str	r3, [r5, #0]
 80069c8:	d030      	beq.n	8006a2c <__sflush_r+0x90>
 80069ca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80069cc:	89a3      	ldrh	r3, [r4, #12]
 80069ce:	0759      	lsls	r1, r3, #29
 80069d0:	d505      	bpl.n	80069de <__sflush_r+0x42>
 80069d2:	6863      	ldr	r3, [r4, #4]
 80069d4:	1ad2      	subs	r2, r2, r3
 80069d6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80069d8:	b10b      	cbz	r3, 80069de <__sflush_r+0x42>
 80069da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80069dc:	1ad2      	subs	r2, r2, r3
 80069de:	2300      	movs	r3, #0
 80069e0:	4628      	mov	r0, r5
 80069e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069e4:	6a21      	ldr	r1, [r4, #32]
 80069e6:	47b0      	blx	r6
 80069e8:	1c43      	adds	r3, r0, #1
 80069ea:	89a3      	ldrh	r3, [r4, #12]
 80069ec:	d106      	bne.n	80069fc <__sflush_r+0x60>
 80069ee:	6829      	ldr	r1, [r5, #0]
 80069f0:	291d      	cmp	r1, #29
 80069f2:	d82b      	bhi.n	8006a4c <__sflush_r+0xb0>
 80069f4:	4a28      	ldr	r2, [pc, #160]	@ (8006a98 <__sflush_r+0xfc>)
 80069f6:	40ca      	lsrs	r2, r1
 80069f8:	07d6      	lsls	r6, r2, #31
 80069fa:	d527      	bpl.n	8006a4c <__sflush_r+0xb0>
 80069fc:	2200      	movs	r2, #0
 80069fe:	6062      	str	r2, [r4, #4]
 8006a00:	6922      	ldr	r2, [r4, #16]
 8006a02:	04d9      	lsls	r1, r3, #19
 8006a04:	6022      	str	r2, [r4, #0]
 8006a06:	d504      	bpl.n	8006a12 <__sflush_r+0x76>
 8006a08:	1c42      	adds	r2, r0, #1
 8006a0a:	d101      	bne.n	8006a10 <__sflush_r+0x74>
 8006a0c:	682b      	ldr	r3, [r5, #0]
 8006a0e:	b903      	cbnz	r3, 8006a12 <__sflush_r+0x76>
 8006a10:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a12:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a14:	602f      	str	r7, [r5, #0]
 8006a16:	b1b9      	cbz	r1, 8006a48 <__sflush_r+0xac>
 8006a18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a1c:	4299      	cmp	r1, r3
 8006a1e:	d002      	beq.n	8006a26 <__sflush_r+0x8a>
 8006a20:	4628      	mov	r0, r5
 8006a22:	f7ff fbf5 	bl	8006210 <_free_r>
 8006a26:	2300      	movs	r3, #0
 8006a28:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a2a:	e00d      	b.n	8006a48 <__sflush_r+0xac>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	4628      	mov	r0, r5
 8006a30:	47b0      	blx	r6
 8006a32:	4602      	mov	r2, r0
 8006a34:	1c50      	adds	r0, r2, #1
 8006a36:	d1c9      	bne.n	80069cc <__sflush_r+0x30>
 8006a38:	682b      	ldr	r3, [r5, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d0c6      	beq.n	80069cc <__sflush_r+0x30>
 8006a3e:	2b1d      	cmp	r3, #29
 8006a40:	d001      	beq.n	8006a46 <__sflush_r+0xaa>
 8006a42:	2b16      	cmp	r3, #22
 8006a44:	d11d      	bne.n	8006a82 <__sflush_r+0xe6>
 8006a46:	602f      	str	r7, [r5, #0]
 8006a48:	2000      	movs	r0, #0
 8006a4a:	e021      	b.n	8006a90 <__sflush_r+0xf4>
 8006a4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a50:	b21b      	sxth	r3, r3
 8006a52:	e01a      	b.n	8006a8a <__sflush_r+0xee>
 8006a54:	690f      	ldr	r7, [r1, #16]
 8006a56:	2f00      	cmp	r7, #0
 8006a58:	d0f6      	beq.n	8006a48 <__sflush_r+0xac>
 8006a5a:	0793      	lsls	r3, r2, #30
 8006a5c:	bf18      	it	ne
 8006a5e:	2300      	movne	r3, #0
 8006a60:	680e      	ldr	r6, [r1, #0]
 8006a62:	bf08      	it	eq
 8006a64:	694b      	ldreq	r3, [r1, #20]
 8006a66:	1bf6      	subs	r6, r6, r7
 8006a68:	600f      	str	r7, [r1, #0]
 8006a6a:	608b      	str	r3, [r1, #8]
 8006a6c:	2e00      	cmp	r6, #0
 8006a6e:	ddeb      	ble.n	8006a48 <__sflush_r+0xac>
 8006a70:	4633      	mov	r3, r6
 8006a72:	463a      	mov	r2, r7
 8006a74:	4628      	mov	r0, r5
 8006a76:	6a21      	ldr	r1, [r4, #32]
 8006a78:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006a7c:	47e0      	blx	ip
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	dc07      	bgt.n	8006a92 <__sflush_r+0xf6>
 8006a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a8e:	81a3      	strh	r3, [r4, #12]
 8006a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a92:	4407      	add	r7, r0
 8006a94:	1a36      	subs	r6, r6, r0
 8006a96:	e7e9      	b.n	8006a6c <__sflush_r+0xd0>
 8006a98:	20400001 	.word	0x20400001

08006a9c <_fflush_r>:
 8006a9c:	b538      	push	{r3, r4, r5, lr}
 8006a9e:	690b      	ldr	r3, [r1, #16]
 8006aa0:	4605      	mov	r5, r0
 8006aa2:	460c      	mov	r4, r1
 8006aa4:	b913      	cbnz	r3, 8006aac <_fflush_r+0x10>
 8006aa6:	2500      	movs	r5, #0
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	bd38      	pop	{r3, r4, r5, pc}
 8006aac:	b118      	cbz	r0, 8006ab6 <_fflush_r+0x1a>
 8006aae:	6a03      	ldr	r3, [r0, #32]
 8006ab0:	b90b      	cbnz	r3, 8006ab6 <_fflush_r+0x1a>
 8006ab2:	f7ff f9a5 	bl	8005e00 <__sinit>
 8006ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d0f3      	beq.n	8006aa6 <_fflush_r+0xa>
 8006abe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ac0:	07d0      	lsls	r0, r2, #31
 8006ac2:	d404      	bmi.n	8006ace <_fflush_r+0x32>
 8006ac4:	0599      	lsls	r1, r3, #22
 8006ac6:	d402      	bmi.n	8006ace <_fflush_r+0x32>
 8006ac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006aca:	f7ff fb90 	bl	80061ee <__retarget_lock_acquire_recursive>
 8006ace:	4628      	mov	r0, r5
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	f7ff ff63 	bl	800699c <__sflush_r>
 8006ad6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ad8:	4605      	mov	r5, r0
 8006ada:	07da      	lsls	r2, r3, #31
 8006adc:	d4e4      	bmi.n	8006aa8 <_fflush_r+0xc>
 8006ade:	89a3      	ldrh	r3, [r4, #12]
 8006ae0:	059b      	lsls	r3, r3, #22
 8006ae2:	d4e1      	bmi.n	8006aa8 <_fflush_r+0xc>
 8006ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ae6:	f7ff fb83 	bl	80061f0 <__retarget_lock_release_recursive>
 8006aea:	e7dd      	b.n	8006aa8 <_fflush_r+0xc>

08006aec <__swhatbuf_r>:
 8006aec:	b570      	push	{r4, r5, r6, lr}
 8006aee:	460c      	mov	r4, r1
 8006af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af4:	4615      	mov	r5, r2
 8006af6:	2900      	cmp	r1, #0
 8006af8:	461e      	mov	r6, r3
 8006afa:	b096      	sub	sp, #88	@ 0x58
 8006afc:	da0c      	bge.n	8006b18 <__swhatbuf_r+0x2c>
 8006afe:	89a3      	ldrh	r3, [r4, #12]
 8006b00:	2100      	movs	r1, #0
 8006b02:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b06:	bf14      	ite	ne
 8006b08:	2340      	movne	r3, #64	@ 0x40
 8006b0a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b0e:	2000      	movs	r0, #0
 8006b10:	6031      	str	r1, [r6, #0]
 8006b12:	602b      	str	r3, [r5, #0]
 8006b14:	b016      	add	sp, #88	@ 0x58
 8006b16:	bd70      	pop	{r4, r5, r6, pc}
 8006b18:	466a      	mov	r2, sp
 8006b1a:	f000 f849 	bl	8006bb0 <_fstat_r>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	dbed      	blt.n	8006afe <__swhatbuf_r+0x12>
 8006b22:	9901      	ldr	r1, [sp, #4]
 8006b24:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b28:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b2c:	4259      	negs	r1, r3
 8006b2e:	4159      	adcs	r1, r3
 8006b30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b34:	e7eb      	b.n	8006b0e <__swhatbuf_r+0x22>

08006b36 <__smakebuf_r>:
 8006b36:	898b      	ldrh	r3, [r1, #12]
 8006b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b3a:	079d      	lsls	r5, r3, #30
 8006b3c:	4606      	mov	r6, r0
 8006b3e:	460c      	mov	r4, r1
 8006b40:	d507      	bpl.n	8006b52 <__smakebuf_r+0x1c>
 8006b42:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006b46:	6023      	str	r3, [r4, #0]
 8006b48:	6123      	str	r3, [r4, #16]
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	6163      	str	r3, [r4, #20]
 8006b4e:	b003      	add	sp, #12
 8006b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b52:	466a      	mov	r2, sp
 8006b54:	ab01      	add	r3, sp, #4
 8006b56:	f7ff ffc9 	bl	8006aec <__swhatbuf_r>
 8006b5a:	9f00      	ldr	r7, [sp, #0]
 8006b5c:	4605      	mov	r5, r0
 8006b5e:	4639      	mov	r1, r7
 8006b60:	4630      	mov	r0, r6
 8006b62:	f7ff fbbf 	bl	80062e4 <_malloc_r>
 8006b66:	b948      	cbnz	r0, 8006b7c <__smakebuf_r+0x46>
 8006b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b6c:	059a      	lsls	r2, r3, #22
 8006b6e:	d4ee      	bmi.n	8006b4e <__smakebuf_r+0x18>
 8006b70:	f023 0303 	bic.w	r3, r3, #3
 8006b74:	f043 0302 	orr.w	r3, r3, #2
 8006b78:	81a3      	strh	r3, [r4, #12]
 8006b7a:	e7e2      	b.n	8006b42 <__smakebuf_r+0xc>
 8006b7c:	89a3      	ldrh	r3, [r4, #12]
 8006b7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b86:	81a3      	strh	r3, [r4, #12]
 8006b88:	9b01      	ldr	r3, [sp, #4]
 8006b8a:	6020      	str	r0, [r4, #0]
 8006b8c:	b15b      	cbz	r3, 8006ba6 <__smakebuf_r+0x70>
 8006b8e:	4630      	mov	r0, r6
 8006b90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b94:	f000 f81e 	bl	8006bd4 <_isatty_r>
 8006b98:	b128      	cbz	r0, 8006ba6 <__smakebuf_r+0x70>
 8006b9a:	89a3      	ldrh	r3, [r4, #12]
 8006b9c:	f023 0303 	bic.w	r3, r3, #3
 8006ba0:	f043 0301 	orr.w	r3, r3, #1
 8006ba4:	81a3      	strh	r3, [r4, #12]
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	431d      	orrs	r5, r3
 8006baa:	81a5      	strh	r5, [r4, #12]
 8006bac:	e7cf      	b.n	8006b4e <__smakebuf_r+0x18>
	...

08006bb0 <_fstat_r>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	4d06      	ldr	r5, [pc, #24]	@ (8006bd0 <_fstat_r+0x20>)
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	4608      	mov	r0, r1
 8006bba:	4611      	mov	r1, r2
 8006bbc:	602b      	str	r3, [r5, #0]
 8006bbe:	f7fa fbb0 	bl	8001322 <_fstat>
 8006bc2:	1c43      	adds	r3, r0, #1
 8006bc4:	d102      	bne.n	8006bcc <_fstat_r+0x1c>
 8006bc6:	682b      	ldr	r3, [r5, #0]
 8006bc8:	b103      	cbz	r3, 8006bcc <_fstat_r+0x1c>
 8006bca:	6023      	str	r3, [r4, #0]
 8006bcc:	bd38      	pop	{r3, r4, r5, pc}
 8006bce:	bf00      	nop
 8006bd0:	20003ffc 	.word	0x20003ffc

08006bd4 <_isatty_r>:
 8006bd4:	b538      	push	{r3, r4, r5, lr}
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	4d05      	ldr	r5, [pc, #20]	@ (8006bf0 <_isatty_r+0x1c>)
 8006bda:	4604      	mov	r4, r0
 8006bdc:	4608      	mov	r0, r1
 8006bde:	602b      	str	r3, [r5, #0]
 8006be0:	f7fa fbae 	bl	8001340 <_isatty>
 8006be4:	1c43      	adds	r3, r0, #1
 8006be6:	d102      	bne.n	8006bee <_isatty_r+0x1a>
 8006be8:	682b      	ldr	r3, [r5, #0]
 8006bea:	b103      	cbz	r3, 8006bee <_isatty_r+0x1a>
 8006bec:	6023      	str	r3, [r4, #0]
 8006bee:	bd38      	pop	{r3, r4, r5, pc}
 8006bf0:	20003ffc 	.word	0x20003ffc

08006bf4 <_sbrk_r>:
 8006bf4:	b538      	push	{r3, r4, r5, lr}
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	4d05      	ldr	r5, [pc, #20]	@ (8006c10 <_sbrk_r+0x1c>)
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	4608      	mov	r0, r1
 8006bfe:	602b      	str	r3, [r5, #0]
 8006c00:	f7fa fbb4 	bl	800136c <_sbrk>
 8006c04:	1c43      	adds	r3, r0, #1
 8006c06:	d102      	bne.n	8006c0e <_sbrk_r+0x1a>
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	b103      	cbz	r3, 8006c0e <_sbrk_r+0x1a>
 8006c0c:	6023      	str	r3, [r4, #0]
 8006c0e:	bd38      	pop	{r3, r4, r5, pc}
 8006c10:	20003ffc 	.word	0x20003ffc

08006c14 <memchr>:
 8006c14:	4603      	mov	r3, r0
 8006c16:	b510      	push	{r4, lr}
 8006c18:	b2c9      	uxtb	r1, r1
 8006c1a:	4402      	add	r2, r0
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	4618      	mov	r0, r3
 8006c20:	d101      	bne.n	8006c26 <memchr+0x12>
 8006c22:	2000      	movs	r0, #0
 8006c24:	e003      	b.n	8006c2e <memchr+0x1a>
 8006c26:	7804      	ldrb	r4, [r0, #0]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	428c      	cmp	r4, r1
 8006c2c:	d1f6      	bne.n	8006c1c <memchr+0x8>
 8006c2e:	bd10      	pop	{r4, pc}

08006c30 <_init>:
 8006c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c32:	bf00      	nop
 8006c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c36:	bc08      	pop	{r3}
 8006c38:	469e      	mov	lr, r3
 8006c3a:	4770      	bx	lr

08006c3c <_fini>:
 8006c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3e:	bf00      	nop
 8006c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c42:	bc08      	pop	{r3}
 8006c44:	469e      	mov	lr, r3
 8006c46:	4770      	bx	lr
